<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Iot.Device.Bindings</name>
    </assembly>
    <members>
        <member name="T:Iot.Device.DAC.AD5328">
            <summary>
            Driver for the AD5328 DAC.
            </summary>
        </member>
        <member name="M:Iot.Device.DAC.AD5328.#ctor(System.Device.Spi.SpiDevice,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>
            Initializes a new instance of the AD5328 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="referenceVoltageA">The reference voltage for the first 4 channels</param>
            <param name="referenceVoltageB">The reference voltage for the last 4 channels</param>
        </member>
        <member name="M:Iot.Device.DAC.AD5328.SetVoltage(System.UInt16,UnitsNet.ElectricPotential)">
            <summary>
            Sets the voltage of a certain channel
            </summary>
            <param name="channel">The channel number. Zero based. channel A = 0</param>
            <param name="voltage">The voltage</param>
        </member>
        <member name="M:Iot.Device.DAC.AD5328.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ads1115.I2cAddress">
            <summary>
            ADS1115 I2C Address Setting
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.I2cAddress.GND">
            <summary>
            ADDR Pin connect to GND
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.I2cAddress.VCC">
            <summary>
            ADDR Pin connect to VCC
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.I2cAddress.SDA">
            <summary>
            ADDR Pin connect to SDA
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.I2cAddress.SCL">
            <summary>
            ADDR Pin connect to SCL
            </summary>
        </member>
        <member name="T:Iot.Device.Ads1115.ComparatorLatching">
            <summary>
            Set Comparator Latching
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorLatching.NonLatching">
            <summary>Non-latching</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorLatching.Latching">
            <summary>Latching</summary>
        </member>
        <member name="T:Iot.Device.Ads1115.ComparatorMode">
            <summary>
             Comparator Mode of Operation
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorMode.Traditional">
            <summary>Traditional mode</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorMode.Window">
            <summary>Window mode</summary>
        </member>
        <member name="T:Iot.Device.Ads1115.ComparatorPolarity">
            <summary>
            Controls the Polarity of the ALERT Pin
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorPolarity.Low">
            <summary>Low</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorPolarity.High">
            <summary>High</summary>
        </member>
        <member name="T:Iot.Device.Ads1115.ComparatorQueue">
            <summary>
            Comparator Queue.
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorQueue.AssertAfterOne">
            <summary>Assert after one</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorQueue.AssertAfterTwo">
            <summary>Assert after two</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorQueue.AssertAfterFour">
            <summary>Assert after four</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.ComparatorQueue.Disable">
            <summary>Disable</summary>
        </member>
        <member name="T:Iot.Device.Ads1115.DataRate">
            <summary>
            Control the Data Rate (SPS, sample per second)
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS008">
            <summary>
            8 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS016">
            <summary>
            16 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS032">
            <summary>
            32 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS064">
            <summary>
            64 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS128">
            <summary>
            128 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS250">
            <summary>
            250 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS475">
            <summary>
            475 SPS
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DataRate.SPS860">
            <summary>
            860 SPS
            </summary>
        </member>
        <member name="T:Iot.Device.Ads1115.DeviceMode">
            <summary>
            Set the Mode of ADS1115
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DeviceMode.Continuous">
            <summary>Continuous mode</summary>
        </member>
        <member name="F:Iot.Device.Ads1115.DeviceMode.PowerDown">
            <summary>Power down mode, the chip is shutting down after the next conversion</summary>
        </member>
        <member name="T:Iot.Device.Ads1115.InputMultiplexer">
            <summary>
            Configure the Input Multiplexer
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN0">
            <summary>
             AIN Positive = AIN0 and AIN Negative  = GND
             Measure the Voltage between AIN0 and GND
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN1">
            <summary>
            AIN Positive = AIN1 and AIN Negative = GND
            Measure the Voltage between AIN1 and GND
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN2">
            <summary>
            AIN Positive = AIN2 and AIN Negative = GND
            Measure the Voltage between AIN2 and GND
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN3">
            <summary>
            AIN Positive = AIN3 and AIN Negative = GND
            Measure the Voltage between AIN3 and GND
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN0_AIN1">
            <summary>
            AIN Positive = AIN0 and AIN Negative = AIN1
            Measure the Voltage between AIN0 and AIN1
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN0_AIN3">
            <summary>
            AIN Positive = AIN0 and AIN Negative = AIN3
            Measure the Voltage between AIN0 and AIN3
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN1_AIN3">
            <summary>
            AIN Positive = AIN1 and AIN Negative = AIN3
            Measure the Voltage between AIN1 and AIN3
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.InputMultiplexer.AIN2_AIN3">
            <summary>
            AIN Positive = AIN2 and AIN Negative = AIN3
            Measure the Voltage between AIN2 and AIN3
            </summary>
        </member>
        <member name="T:Iot.Device.Ads1115.MeasuringRange">
            <summary>
            Configure the Programmable Gain Amplifier, i.e. Measuring Range
            Note that the maximum input value on any input pin is VDD+0.3V and the maximum value that can be measured is VDD.
            So if the supply voltage is 3.3V, using FS6144 may not be useful, because it just reduces the accuracy to 14 bit
            (excluding the sign bit).
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS6144">
            <summary>
            ±6.144V.
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS4096">
            <summary>
            ±4.096V
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS2048">
            <summary>
            ±2.048V
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS1024">
            <summary>
            ±1.024V
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS0512">
            <summary>
            ±0.512V
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.MeasuringRange.FS0256">
            <summary>
            ±0.256V
            </summary>
        </member>
        <member name="T:Iot.Device.Ads1115.Register">
            <summary>
            Registers of ADS1115
            </summary>
        </member>
        <member name="T:Iot.Device.Ads1115.Ads1115">
            <summary>
            Analog-to-Digital Converter ADS1115
            </summary>
        </member>
        <member name="F:Iot.Device.Ads1115.Ads1115._gpioInterruptPin">
            <summary>
            The pin of the GPIO controller that is connected to the interrupt line of the ADS1115
            </summary>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Ads1115.InputMultiplexer,Iot.Device.Ads1115.MeasuringRange,Iot.Device.Ads1115.DataRate,Iot.Device.Ads1115.DeviceMode)">
            <summary>
            Initialize a new Ads1115 device connected through I2C
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="inputMultiplexer">Input Multiplexer</param>
            <param name="measuringRange">Programmable Gain Amplifier</param>
            <param name="dataRate">Data Rate</param>
            <param name="deviceMode">Initial device mode</param>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.#ctor(System.Device.I2c.I2cDevice,System.Device.Gpio.GpioController,System.Int32,System.Boolean,Iot.Device.Ads1115.InputMultiplexer,Iot.Device.Ads1115.MeasuringRange,Iot.Device.Ads1115.DataRate,Iot.Device.Ads1115.DeviceMode)">
            <summary>
            Initialize a new Ads1115 device connected through I2C with an additional GPIO controller for interrupt handling.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling</param>
            <param name="gpioInterruptPin">The pin number where the interrupt line is attached on the GPIO controller</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance</param>
            <param name="inputMultiplexer">Input Multiplexer</param>
            <param name="measuringRange">Programmable Gain Amplifier</param>
            <param name="dataRate">Data Rate</param>
            <param name="deviceMode">Initial device mode</param>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.InputMultiplexer">
            <summary>
            ADS1115 Input Multiplexer.
            This selects the channel(s) for the next read operation, <see cref="T:Iot.Device.Ads1115.InputMultiplexer"/>.
            Setting this property will wait until a value is available from the newly selected input channel.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.MeasuringRange">
            <summary>
            ADS1115 Programmable Gain Amplifier
            This sets the maximum value that can be measured. Regardless of this setting, the input value on any pin must not exceed VDD + 0.3V,
            so high ranges are only usable with a VDD of more than 5V.
            Setting this property will wait until a new value is available.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.DataRate">
            <summary>
            ADS1115 Data Rate.
            The number of conversions per second that will take place. One conversion will take "1/rate" seconds to become ready. If in
            power-down mode, only one conversion will happen automatically, then another request is required.
            Setting this property will wait until a new value is available.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.DeviceMode">
            <summary>
            ADS1115 operation mode.
            When set to <see cref="F:Iot.Device.Ads1115.DeviceMode.Continuous"/> the chip continously measures the input and the values can be read directly.
            If set to <see cref="F:Iot.Device.Ads1115.DeviceMode.PowerDown"/> the chip enters idle mode after each conversion and
            a new value will be requested each time a read request is performed. This is the recommended setting when frequently
            swapping between input channels, because a change of the channel requires a new conversion anyway.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.ComparatorMode">
            <summary>
            Comparator mode.
            Only relevant if the comparator trigger event is set up and is changed by <see cref="M:Iot.Device.Ads1115.Ads1115.EnableComparator(System.Int16,System.Int16,Iot.Device.Ads1115.ComparatorMode,Iot.Device.Ads1115.ComparatorQueue)"/>.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.ComparatorPolarity">
            <summary>
            Comparator polarity. Indicates whether the rising or the falling edge of the ALRT/RDY Pin is relevant.
            Default: Low (falling edge)
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.ComparatorLatching">
            <summary>
            Comparator latching mode. If enabled, the ALRT/RDY Pin will be kept signaled until the conversion value is read.
            Only relevant when the comparator is enabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Ads1115.Ads1115.ComparatorQueue">
            <summary>
            Minimum number of samples exceeding the lower/upper threshold before the ALRT pin is asserted.
            This can only be set with <see cref="M:Iot.Device.Ads1115.Ads1115.EnableComparator(System.Int16,System.Int16,Iot.Device.Ads1115.ComparatorMode,Iot.Device.Ads1115.ComparatorQueue)"/>.
            </summary>
        </member>
        <member name="E:Iot.Device.Ads1115.Ads1115.AlertReadyAsserted">
            <summary>
            This event fires when a new value is available (in conversion ready mode) or the comparator threshold is exceeded.
            Requires setup through <see cref="M:Iot.Device.Ads1115.Ads1115.EnableConversionReady"/> or <see cref="M:Iot.Device.Ads1115.Ads1115.EnableComparator(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,Iot.Device.Ads1115.ComparatorMode,Iot.Device.Ads1115.ComparatorQueue)"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.SetConfig">
            <summary>
            Set ADS1115 Config Register.
            Register Layout:
            15    14    13    12    11    10    9      8     7      6      5       4          3          2        1     0
            OS  |      MUX        |       PGA      | MODE |    DATA RATE      | COMP_MODE | COMP_POL | COMP_LAT |   COMP_QUE
            </summary>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.DisableAlertReadyPin">
            <summary>
            Resets the comparator registers to default values (effectively disabling the comparator) and disables the
            Alert / Ready pin (if configured)
            </summary>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.WriteComparatorRegisters(System.Int16,System.Int16)">
            <summary>
            Write the two comparator registers
            </summary>
            <param name="loThreshold">High threshold value (unsigned short)</param>
            <param name="hiThreshold">Low threshold value (unsigned short)</param>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.EnableConversionReady">
            <summary>
            Enable conversion ready event.
            The <see cref="E:Iot.Device.Ads1115.Ads1115.AlertReadyAsserted"/> event fires each time a new value is available after this method is called.
            </summary>
            <exception cref="T:System.InvalidOperationException">The conversion ready event is already set up or no GPIO Controller configured
            for interrupt handling.</exception>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.EnableComparator(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,Iot.Device.Ads1115.ComparatorMode,Iot.Device.Ads1115.ComparatorQueue)">
            <summary>
            Enable comparator callback mode.
            In traditional comparator mode, the callback is triggered each time the measured value exceeds the given upper value (for
            the given queueLength number of samples). It deasserts when the lower value is reached.
            In window comparator mode, the callback is triggered each time the measured value exceeds the given upper value or gets
            less than the given lower value.
            </summary>
            <param name="lowerValue">Lower value for the comparator</param>
            <param name="upperValue">Upper value for the comparator</param>
            <param name="mode">Traditional or Window comparator mode</param>
            <param name="queueLength">Minimum number of samples that must exceed the threshold to trigger the event</param>
            <exception cref="T:System.InvalidOperationException">The GPIO Controller for the interrupt handler has not been set up</exception>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.EnableComparator(System.Int16,System.Int16,Iot.Device.Ads1115.ComparatorMode,Iot.Device.Ads1115.ComparatorQueue)">
            <summary>
            Enable comparator callback mode.
            In traditional comparator mode, the callback is triggered each time the measured value exceeds the given upper value (for
            the given queueLength number of samples). It deasserts when the lower value is reached.
            In window comparator mode, the callback is triggered each time the measured value exceeds the given upper value or gets
            less than the given lower value.
            </summary>
            <param name="lowerValue">Lower value for the comparator</param>
            <param name="upperValue">Upper value for the comparator</param>
            <param name="mode">Traditional or Window comparator mode</param>
            <param name="queueLength">Minimum number of samples that must exceed the threshold to trigger the event</param>
            <exception cref="T:System.InvalidOperationException">The GPIO Controller for the interrupt handler has not been set up</exception>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.WaitWhileBusy">
            <summary>
            Wait until the current conversion finishes.
            This method must only be called in powerdown mode, otherwise it would timeout, since the busy bit never changes.
            Due to that, we always write the configuration first in power down mode and then enable the continuous bit.
            </summary>
            <exception cref="T:System.TimeoutException">A timeout occurred waiting for the ADC to finish the conversion</exception>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.ReadRaw">
            <summary>
            Read Raw Data.
            If in PowerDown (single-shot) mode, one new sample is requested first.
            </summary>
            <returns>Raw Value</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.ReadRaw(Iot.Device.Ads1115.InputMultiplexer)">
            <summary>
            Reads the next raw value, first switching to the given input and ranges.
            </summary>
            <param name="inputMultiplexer">New input multiplexer setting</param>
            <returns>Measured value as short</returns>
            <remarks>
            For performance reasons, it is advised to use this method if quick readings with different input channels are required,
            instead of setting all the properties first and then calling <see cref="M:Iot.Device.Ads1115.Ads1115.ReadRaw"/>.
            </remarks>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.ReadRaw(Iot.Device.Ads1115.InputMultiplexer,Iot.Device.Ads1115.MeasuringRange,Iot.Device.Ads1115.DataRate)">
            <summary>
            Reads the next raw value, first switching to the given input and ranges.
            </summary>
            <param name="inputMultiplexer">New input multiplexer setting</param>
            <param name="measuringRange">New measuring range</param>
            <param name="dataRate">New data rate</param>
            <returns>Measured value as short</returns>
            <remarks>
            For performance reasons, it is advised to use this method if quick readings with different settings
            (i.e. different input channels) are required, instead of setting all the properties first and then
            calling <see cref="M:Iot.Device.Ads1115.Ads1115.ReadRaw"/>.
            </remarks>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.ReadVoltage">
            <summary>
            Returns the electric potential (voltage) of the currently selected input.
            </summary>
            <returns>The measured voltage of the currently selected input channel. In volts. </returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.ReadVoltage(Iot.Device.Ads1115.InputMultiplexer)">
            <summary>
            Returns the electric potential (voltage) of the given channel, performs a measurement first
            </summary>
            <param name="inputMultiplexer">Channel to use</param>
            <returns>The voltage at the selected channel</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.RawToVoltage(System.Int16)">
            <summary>
            Convert Raw Data to Voltage
            </summary>
            <param name="val">Raw Data</param>
            <returns>Voltage, based on the current measuring range</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.VoltageToRaw(UnitsNet.ElectricPotential)">
            <summary>
            Converts voltage to raw data.
            </summary>
            <param name="voltage">Input voltage</param>
            <returns>Corresponding raw value, based on the current measuring range</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.MaxVoltageFromMeasuringRange(Iot.Device.Ads1115.MeasuringRange)">
            <summary>
            Returns the voltage assigned to the given MeasuringRange enumeration value.
            </summary>
            <param name="measuringRange">One of the <see cref="P:Iot.Device.Ads1115.Ads1115.MeasuringRange"/> enumeration members</param>
            <returns>An electric potential (voltage).</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.FrequencyFromDataRate(Iot.Device.Ads1115.DataRate)">
            <summary>
            Returns the sampling frequency in Hz for the given data rate enumeration member.
            </summary>
            <param name="dataRate">One of the <see cref="P:Iot.Device.Ads1115.Ads1115.DataRate"/> enumeration members.</param>
            <returns>A frequency, in Hertz</returns>
        </member>
        <member name="M:Iot.Device.Ads1115.Ads1115.Dispose">
            <summary>
            Cleanup.
            Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior.
            </summary>
        </member>
        <member name="T:Iot.Device.Adxl345.GravityRange">
            <summary>
            Gravity Measurement Range
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.GravityRange.Range02">
            <summary>
            ±2G
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.GravityRange.Range04">
            <summary>
            ±4G
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.GravityRange.Range08">
            <summary>
            ±8G
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.GravityRange.Range16">
            <summary>
            ±16G
            </summary>
        </member>
        <member name="T:Iot.Device.Adxl345.Register">
            <summary>
            Register of ADXL345
            </summary>
        </member>
        <member name="T:Iot.Device.Adxl345.Adxl345">
            <summary>
            SPI Accelerometer ADX1345
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.Adxl345.SpiClockFrequency">
            <summary>
            ADX1345 SPI Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl345.Adxl345.SpiMode">
            <summary>
            ADX1345 SPI Mode
            </summary>
        </member>
        <member name="P:Iot.Device.Adxl345.Adxl345.Acceleration">
            <summary>
            Read Acceleration from ADXL345
            </summary>
        </member>
        <member name="M:Iot.Device.Adxl345.Adxl345.#ctor(System.Device.Spi.SpiDevice,Iot.Device.Adxl345.GravityRange)">
            <summary>
            SPI Accelerometer ADX1345
            </summary>
            <param name="sensor">The communications channel to a device on a SPI bus</param>
            <param name="gravityRange">Gravity Measurement Range</param>
        </member>
        <member name="M:Iot.Device.Adxl345.Adxl345.Initialize">
            <summary>
            Initialize ADXL345
            </summary>
        </member>
        <member name="M:Iot.Device.Adxl345.Adxl345.ReadAcceleration">
            <summary>
            Read data from ADXL345
            </summary>
            <returns>Acceleration</returns>
        </member>
        <member name="M:Iot.Device.Adxl345.Adxl345.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Adxl357.AccelerometerRange">
            <summary>
            The sensitivity of the accelerometer sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl357.AccelerometerRange.Range10G">
            <summary>
            Range ±10g
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl357.AccelerometerRange.Range20G">
            <summary>
            Range ±20g
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl357.AccelerometerRange.Range40G">
            <summary>
            Range ±40g
            </summary>
        </member>
        <member name="T:Iot.Device.Adxl357.Adxl357">
            <summary>
            I2C Accelerometer ADXL357
            </summary>
        </member>
        <member name="F:Iot.Device.Adxl357.Adxl357.DefaultI2CAddress">
            <summary>
            The default I2C address of ADXL357 device
            </summary>
        </member>
        <member name="M:Iot.Device.Adxl357.Adxl357.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Adxl357.AccelerometerRange)">
            <summary>
            Constructs a ADXL357 I2C device.
            </summary>
            <param name="i2CDevice">The I2C device used for communication.</param>
            <param name="accelerometerRange">The sensitivity of the accelerometer.</param>
        </member>
        <member name="P:Iot.Device.Adxl357.Adxl357.Acceleration">
            <summary>
            Gets the current acceleration in g.
            Range depends on the <see cref="T:Iot.Device.Adxl357.AccelerometerRange"/> passed to the constructor.
            </summary>
        </member>
        <member name="P:Iot.Device.Adxl357.Adxl357.Temperature">
            <summary>
            Gets the current temperature in °C.
            Range is from −40°C to +125°C.
            </summary>
        </member>
        <member name="M:Iot.Device.Adxl357.Adxl357.CalibrateAccelerationSensor(System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Calibrates the accelerometer.
            You can override default <paramref name="samples"/> and <paramref name="calibrationInterval"/> if required.
            </summary>
            <param name="samples">The number of times every axis is measured. The average of these measurements is used to calibrate each axis.</param>
            <param name="calibrationInterval">The time in milliseconds to wait between each measurement. If null is provided, <see cref="F:Iot.Device.Adxl357.Adxl357.CalibrationIntervalDefault"/> in milliseconds is used.</param>
            <remarks>
            Make sure that the sensor is placed horizontally when executing this method.
            </remarks>
        </member>
        <member name="P:Iot.Device.Adxl357.Adxl357.AccelerometerRange">
            <summary>
            Gets or sets the sensitivity of the accelerometer.
            </summary>
        </member>
        <member name="M:Iot.Device.Adxl357.Adxl357.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ags01db.Ags01db">
            <summary>
            MEMS VOC Gas Sensor ASG01DB
            </summary>
        </member>
        <member name="F:Iot.Device.Ags01db.Ags01db.DefaultI2cAddress">
            <summary>
            ASG01DB Default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Ags01db.Ags01db.Concentration">
            <summary>
            ASG01DB VOC (Volatile Organic Compounds) Gas Concentration (ppm)
            </summary>
        </member>
        <member name="P:Iot.Device.Ags01db.Ags01db.Version">
            <summary>
            ASG01DB Version
            </summary>
        </member>
        <member name="M:Iot.Device.Ags01db.Ags01db.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the ASG01DB
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Ags01db.Ags01db.GetConcentration">
            <summary>
            Get ASG01DB VOC Gas Concentration
            </summary>
            <returns>Concentration (ppm)</returns>
        </member>
        <member name="M:Iot.Device.Ags01db.Ags01db.GetVersion">
            <summary>
            Get ASG01DB Version
            </summary>
            <returns>Version</returns>
        </member>
        <member name="M:Iot.Device.Ags01db.Ags01db.CheckCrc8(System.ReadOnlySpan{System.Byte},System.Int32,System.Byte)">
            <summary>
            8-bit CRC Checksum Calculation
            </summary>
            <param name="data">Raw Data</param>
            <param name="length">Data Length</param>
            <param name="crc8">Raw CRC8</param>
            <returns>Checksum is true or false</returns>
        </member>
        <member name="M:Iot.Device.Ags01db.Ags01db.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Ahtxx.Aht10">
            <summary>
            AHT10/15 temperature and humidity sensor binding.
            </summary>
        </member>
        <member name="F:Iot.Device.Ahtxx.Aht10.Aht10InitCommand">
            <summary>
            Initialization command acc. to datasheet
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.Aht10.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Ahtxx.Aht10"/> class.
            </summary>
        </member>
        <member name="T:Iot.Device.Ahtxx.Aht20">
            <summary>
            AHT20 temperature and humidity sensor binding.
            </summary>
        </member>
        <member name="F:Iot.Device.Ahtxx.Aht20.Aht20InitCommand">
            <summary>
            Initialization command acc. to datasheet
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.Aht20.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Ahtxx.Aht20"/> class.
            </summary>
        </member>
        <member name="T:Iot.Device.Ahtxx.AhtBase">
            <summary>
             Base class for common functions of the AHT10/15 and AHT20 sensors.
            </summary>
        </member>
        <member name="F:Iot.Device.Ahtxx.AhtBase.DefaultI2cAddress">
            <summary>
            Address of AHT10/15/20 device (0x38). This address is fix and cannot be changed.
            This implies that only one device can be attached to a single I2C bus at a time.
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.#ctor(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Initializes a new instance of the binding for a sensor connected through I2C interface.
            </summary>
            <paramref name="i2cDevice">Reference to the initialized I2C interface device</paramref>
            <paramref name="initCommand">Type specific command for device initialization</paramref>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.GetTemperature">
            <summary>
            Gets the current temperature reading from the sensor.
            Reading the temperature takes between 10 ms and 80 ms.
            </summary>
            <returns>Temperature reading</returns>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.GetHumidity">
            <summary>
            Gets the current relative humidity reading from the sensor.
            Reading the humidity takes between 10 ms and 80 ms.
            </summary>
            <returns>Relative humidity reading</returns>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.Measure">
            <summary>
            Perform sequence to retrieve current readings from device
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.SoftReset">
            <summary>
            Perform soft reset command sequence
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.Initialize">
            <summary>
            Perform initialization (calibration) command sequence
            </summary>
        </member>
        <member name="M:Iot.Device.Ahtxx.AhtBase.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:Iot.Device.Magnetometer.Ak8963">
            <summary>
            AK8963 class implementing a magnetometer
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Ak8963.DefaultI2cAddress">
            <summary>
            Default I2C address for the AK8963
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.DefaultTimeout">
            <summary>
            Default timeout to use when timeout is not provided in the reading methods
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Default constructor for an independent AK8963
            </summary>
            <param name="i2CDevice">The I2C device</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Magnetometer.Ak8963I2cBase,System.Boolean)">
            <summary>
            Constructor to use if AK8963 is behind another element and need a special I2C protocol like
            when used with the MPU9250
            </summary>
            <param name="i2cDevice">The I2C device</param>
            <param name="ak8963Interface">The specific interface to communicate with the AK8963</param>
            <param name="shouldDispose">True to dispose the I2C device when class is disposed</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.Reset">
            <summary>
            Reset the device
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.GetDeviceInfo">
            <summary>
            Get the device information
            </summary>
            <returns>The device information</returns>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.MagnetometerBias">
            <summary>
            Get the magnetometer bias
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.MagnetometerAdjustment">
            <summary>
            Get the magnetometer hardware adjustment bias
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.CalibrateMagnetometer(System.Int32)">
            <summary>
            Calibrate the magnetometer. Make sure your sensor is as far as possible of magnet
            Calculate as well the magnetometer bias. Please make sure you are moving the magnetometer all over space, rotating it.
            Please make sure you are not close to any magnetic field like magnet or phone
            </summary>
            <param name="numberOfMeasurements">Number of measurement for the calibration, default is 1000</param>
            <returns>Returns the factory calibration data</returns>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.HasDataToRead">
            <summary>
            True if there is a data to read
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.IsVersionCorrect">
            <summary>
            Check if the version is the correct one (0x48). This is fixed for this device
            Page 28 from the documentation :
            Device ID of AKM. It is described in one byte and fixed value.  48H: fixed
            </summary>
            <returns>Returns true if the version match</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.ReadMagnetometerWithoutCorrection(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Read the magnetometer without Bias correction and can wait for new data to be present
            </summary>
            <remarks>
            Vector axes are the following:
                    +X
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
               +Z   +Y
            </remarks>
            <param name="waitForData">true to wait for new data</param>
            <param name="timeout">timeout for waiting the data, ignored if waitForData is false</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.ReadMagnetometer(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Read the magnetometer with bias correction and can wait for new data to be present
            </summary>
            <remarks>
            Vector axes are the following:
                    +X
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
               +Z   +Y
            </remarks>
            <param name="waitForData">true to wait for new data</param>
            <param name="timeout">timeout for waiting the data, ignored if waitForData is false</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.MageneticFieldGeneratorEnabled">
            <summary>
            <![CDATA[
            Get or set the device self test mode.
            If set to true, this creates a magnetic field
            Once you read it, you will have the results of the self test
            14-bit output(BIT=“0”)
                     | HX[15:0]        | HY[15:0]        | HZ[15:0]
            Criteria | -50 =< HX =< 50 | -50 =< HY =< 50 | -800 =< HZ =< -200
            16-bit output(BIT=“1”)
                     | HX[15:0]          | HY[15:0]          | HZ[15:0]
            Criteria | -200 =< HX =< 200 | -200 =< HY =< 200 | -3200 =< HZ =< -800
            ]]>
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.MeasurementMode">
            <summary>
            Select the measurement mode
            </summary>
        </member>
        <member name="P:Iot.Device.Magnetometer.Ak8963.OutputBitMode">
            <summary>
            Select the output bit rate
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963.Dispose">
            <summary>
            Cleanup everything
            </summary>
        </member>
        <member name="T:Iot.Device.Magnetometer.Ak8963I2c">
            <summary>
            Default I2C interface for the AK8963
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2c.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">The register to read</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2c.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.Span{System.Byte})">
            <summary>
            Read a byte array
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">>The register to read</param>
            <param name="readBytes">A span of bytes with the read values</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2c.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a byte
            </summary>
            <param name="i2cDevice">>An I2C device</param>
            <param name="reg">The register to read</param>
            <param name="data">A byte to write</param>
        </member>
        <member name="T:Iot.Device.Magnetometer.Ak8963I2cBase">
            <summary>
            Abstract class for AK8963 the I2C interface. This sensor can be found as a sub
            I2C sensor like in the MPU9250. The access is done thru another I2C device and the
            core I2C primitive are different. Use those 3 primitive to define the access to read
            and write bytes to the AK8963
            </summary>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2cBase.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a register of the AK8963
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to write</param>
            <param name="data">The data byte to write</param>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2cBase.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte on a specific register
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to read</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Magnetometer.Ak8963I2cBase.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.Span{System.Byte})">
            <summary>
            Read bytes on a specific AK8963 register
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to read</param>
            <param name="readBytes">Span of byte to store the data read</param>
        </member>
        <member name="T:Iot.Device.Magnetometer.MeasurementMode">
            <summary>
            Measurement used by the AK8963
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.PowerDown">
            <summary>
            Power Down
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.SingleMeasurement">
            <summary>
            Single Measurement
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.ContinuousMeasurement8Hz">
            <summary>
            Continuous Measurement at 8Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.ContinuousMeasurement100Hz">
            <summary>
            Continuous Measurement at 100Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.ExternalTriggedMeasurement">
            <summary>
            External Trigged Measurement
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.SelfTest">
            <summary>
            Self Test
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.MeasurementMode.FuseRomAccess">
            <summary>
            Fuse Rom Access
            </summary>
        </member>
        <member name="T:Iot.Device.Magnetometer.OutputBitMode">
            <summary>
            Sampling mode
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.OutputBitMode.Output14bit">
            <summary>
            Output 14 bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.OutputBitMode.Output16bit">
            <summary>
            Output 16 bit
            </summary>
        </member>
        <member name="T:Iot.Device.Magnetometer.Register">
            <summary>
            Registers of the AK8963.
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.WIA">
            <summary>
            WIA: Device ID
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.INFO">
            <summary>
            INFO: Information
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ST1">
            <summary>
            ST1: Status 1
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HXL">
            <summary>
            X-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HXH">
            <summary>
            X-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HYL">
            <summary>
            Y-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HYH">
            <summary>
            Y-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HZL">
            <summary>
            Z-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.HZH">
            <summary>
            Z-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ST2">
            <summary>
            ST2: Status 2
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.CNTL">
            <summary>
            CNTL1: Control1
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.RSV">
            <summary>
            Do not access in theory but
            Used to reset the device
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ASTC">
            <summary>
            ASTC: Self Test Control
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.TS1">
            <summary>
            Documentation says do not access
            This is a test register
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.TS2">
            <summary>
            Documentation says do not access
            This is a test register
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.I2CDIS">
            <summary>
            I2CDIS: I2C Disable
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ASAX">
            <summary>
            Magnetic sensor X-axis sensitivity adjustment value
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ASAY">
            <summary>
            Magnetic sensor Y-axis sensitivity adjustment value
            </summary>
        </member>
        <member name="F:Iot.Device.Magnetometer.Register.ASAZ">
            <summary>
            Magnetic sensor Z-axis sensitivity adjustment value
            </summary>
        </member>
        <member name="T:Iot.Device.Am2320.Am2320">
            <summary>
            AM2320 - Temperature and Humidity sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Am2320.Am2320.DefaultI2cAddress">
            <summary>
            AM3220 default I2C address.
            </summary>
        </member>
        <member name="F:Iot.Device.Am2320.Am2320.MinimumReadPeriod">
            <summary>
            The minimum read period is 1.5 seconds. Do not read the sensor more often.
            </summary>
        </member>
        <member name="P:Iot.Device.Am2320.Am2320.IsLastReadSuccessful">
            <summary>
            Gets a value indicating whether last read went, <c>true</c> for success, <c>false</c> for failure.
            </summary>
        </member>
        <member name="M:Iot.Device.Am2320.Am2320.TryReadTemperature(UnitsNet.Temperature@)">
            <summary>
            Gets the last read temperature.
            </summary>
            <param name="temperature">[Out] The current temperature on success.</param>
            <returns>True on success, false if reading failed.</returns>
        </member>
        <member name="M:Iot.Device.Am2320.Am2320.TryReadHumidity(UnitsNet.RelativeHumidity@)">
            <summary>
            Gets the last read of relative humidity in percentage.
            </summary>
            <param name="humidity">[Out] The current relative humidity on success.</param>
            <returns>True on success, false if reading failed.</returns>
        </member>
        <member name="M:Iot.Device.Am2320.Am2320.TryGetDeviceInformation(Iot.Device.Am2320.DeviceInformation@)">
            <summary>
            Gets the device information.
            </summary>
            <param name="deviceInformation">[Out] The Device Information on success.</param>
            <returns>True on success, false if reading failed.</returns>
        </member>
        <member name="M:Iot.Device.Am2320.Am2320.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Am2320.Am2320" /> class.
            </summary>
            <param name="i2c">The <see cref="T:System.Device.I2c.I2cDevice"/>.</param>
            <remarks>This sensor only works on Standard Mode speed.</remarks>
        </member>
        <member name="M:Iot.Device.Am2320.Am2320.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Am2320.DeviceInformation">
            <summary>
            Device information.
            </summary>
        </member>
        <member name="P:Iot.Device.Am2320.DeviceInformation.Model">
            <summary>
            Gets or sets the model.
            </summary>
        </member>
        <member name="P:Iot.Device.Am2320.DeviceInformation.Version">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:Iot.Device.Am2320.DeviceInformation.DeviceId">
            <summary>
            Gets or sets the device ID.
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.Amg88xx">
            <summary>
            AMG88xx - family of infrared array sensors
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.DefaultI2cAddress">
            <summary>
            Standard device address
            (AD_SELECT pin is low, c.f. reference specification, pg. 11)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.AlternativeI2cAddress">
            <summary>
            Alternative device address
            (AD_SELECT pin is high, c.f. reference specification, pg. 11)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.Width">
            <summary>
            Number of sensor pixel array columns
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.Height">
            <summary>
            Number of sensor pixel array rows
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.PixelCount">
            <summary>
            Total number of pixels.
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.BytesPerPixel">
            <summary>
            Number of bytes per pixel
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx.ThermistorTemperatureResolution">
            <summary>
            Temperature resolution of thermistor (in degrees Celsius)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xx._imageData">
            <summary>
            Internal storage for the most recently image read from the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Amg88xx.Amg88xx"/> binding.
            </summary>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.Item(System.Int32,System.Int32)">
            <summary>
            Gets temperature of the specified pixel from the current thermal image.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <exception cref="T:System.ArgumentException">x is less than 0, or greater than or equal to Width.</exception>
            <exception cref="T:System.ArgumentException">y is less than 0, or greater than or equal to Height.</exception>
            <returns>Temperature of the specified pixel.</returns>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.TemperatureImage">
            <summary>
            Gets temperature for all pixels from the current thermal image as a two-dimensional array.
            First index specifies the x-coordinate of the pixel and second index specifies y-coordinate of the pixel.
            </summary>
            <returns>Temperature as a two-dimensional array.</returns>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.Item(System.Int32)">
            <summary>
            Gets raw reading (12-bit two's complement format) of the specified pixel from the current thermal image.
            </summary>
            <param name="n">The number of the pixel to retrieve.</param>
            <exception cref="T:System.ArgumentException">n is less than 0, or greater than or equal to PixelCount.</exception>
            <returns>Reading of the specified pixel.</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ReadImage">
            <summary>
            Reads the current image from the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.SensorTemperature">
            <summary>
            Gets the temperature reading from the internal thermistor.
            </summary>
            <value>Temperature reading</value>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.HasTemperatureOverflow">
            <summary>
            Gets whether any pixel measured a temperature higher than the normal operation range.
            The event of an overflow does not prevent from continuing reading the sensor.
            The overflow indication will last even if all pixels are returned to readings within normal range.
            The indicator is reset using <see cfref="ClearTemperatureOverflow"/>.
            </summary>
            <returns>True, if an overflow occured</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ClearTemperatureOverflow">
            <summary>
            Clears the temperature overflow indication.
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.HasThermistorOverflow">
            <summary>
            Gets the thermistor overflow flag from the status register.
            The overflow indication will last even if the thermistor temperature returned to normal range.
            The event of an overflow does not prevent from continuing reading the sensor.
            The indicator is reset using <see cfref="ClearThermistorOverflow"/>.
            Note: the bit is only menthioned in early versions of the reference specification.
            It is not clear whether this is a specification error or a change in a newer
            revision of the sensor.
            </summary>
            <returns>True, if an overflow occured</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ClearThermistorOverflow">
            <summary>
            Clears the temperature overflow indication.
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.HasInterrupt">
            <summary>
            Gets the interrupt flag from the status register
            </summary>
            <returns>Interrupt flag</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ClearInterrupt">
            <summary>
            Clears the interrupt flag in the status register
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ClearAllFlags">
            <summary>
            Clears all flags in the status register.
            Note: it does not clear the interrupt flags of the individual pixels.
            </summary>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.UseMovingAverageMode">
            <summary>
            Get or sets the state of the moving average mode
            Important: the reference specification states that the current mode can be read,
            but it doesn't seem to work at the time being.
            In this case the property is always read as ```false```.
            </summary>
            <value>True if the moving average should be calculated; otherwise, false. The default is false.</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.FrameRate">
            <summary>
            Get or sets the frame rate of the sensor internal thermal image update.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when attempting to set a frame rate other than 1 or 10 frames per second</exception>
            <value>The frame rate for the pixel update interval (either 1 or 10fps). The default is 10fps.</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.OperatingMode">
            <summary>
            Gets or sets the current operating mode
            Refer to the sensor reference specification for a description of the mode
            depending sensor bevaviour and the valid mode transistions.
            </summary>
            <value>The operating mode of the sensor. The default is Normal.</value>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.Reset">
            <summary>
            Performs an reset of the sensor. The flags and all configuration registers
            are reset to default values.
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.ResetAllFlags">
            <summary>
            Performs a reset of all flags (status register, interrupt flag and interrupt table).
            This method is useful, if using the interrupt mechanism for pixel temperatures.
            If an upper and lower level has been set along with a hysteresis this reset can clear the interrupt state of all pixels
            which are within the range between upper and lower level, but still above/below the hystersis level.
            If this applies to ALL pixels the interrupt flag gets cleared as well.
            Refer to the binding documentation for more details on interrupt level, hysteresis and flagging.
            </summary>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.InterruptMode">
            <summary>
            Gets or sets the pixel temperature interrupt mode.
            </summary>
            <value>The interrupt mode, which is either aboslute or differential. The default is ```Difference```.</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.InterruptPinEnabled">
            <summary>
            Get or sets whether the interrupt output  pin of the sensor is enabled.
            If enabled, the pin is pulled down if an interrupt is active.
            </summary>
            <value>True, if the INT pin sould be enabled; otherwise false. The default is false."</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.InterruptLowerLevel">
            <summary>
            Gets or sets the pixel temperature lower interrupt level.
            </summary>
            <value>Temperature level to trigger an interrupt if the any pixel falls below. The default is 0.</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.InterruptUpperLevel">
            <summary>
            Gets or sets the pixel temperature upper interrupt level.
            </summary>
            <value>Temperature level to trigger an interrupt if the any pixel exceeds. The default is 0.</value>
        </member>
        <member name="P:Iot.Device.Amg88xx.Amg88xx.InterruptHysteresis">
            <summary>
            Gets or sets the pixel temperature interrupt hysteresis.
            </summary>
            <value>Temperature hysteresis for lower and upper interrupt triggering. The default is 0.</value>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.GetInterruptFlagTable">
            <summary>
            Gets the interrupt flags of all pixels.
            </summary>
            <returns>Interrupt flags</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xx.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Amg88xx.Amg88xxUtils">
            <summary>
            This class contains utilities for working with AMG88xx devices.
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Amg88xxUtils.PixelTemperatureResolution">
            <summary>
            Temperature resolution of a pixel (in degrees celsius)
            </summary>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xxUtils.ConvertToTemperature(System.Span{System.Byte})">
            <summary>
            Converts a temperature from 12-bit (in 2 bytes) two's complements representation into a floating-point reading.
            </summary>
            <param name="twosComplement">Reading in two's complement little endian representation</param>
            <returns>Temperature reading</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xxUtils.ConvertToTemperature(System.Byte,System.Byte)">
            <summary>
            Converts a temperature from two's complements representation into a floating-point reading.
            </summary>
            <param name="tl">Reading low byte</param>
            <param name="th">Reading high byte</param>
            <returns>Temperature reading</returns>
        </member>
        <member name="M:Iot.Device.Amg88xx.Amg88xxUtils.ConvertFromTemperature(UnitsNet.Temperature)">
            <summary>
            Converts a temperature from floating-point representation into a two's complement representation (low- and high-byte).
            </summary>
            <param name="temperature">Temperature </param>
            <returns>Two's complement representation</returns>
        </member>
        <member name="T:Iot.Device.Amg88xx.FrameRate">
            <summary>
            Defines the frame rate per second
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.FrameRate.Rate10FramesPerSecond">
            <summary>
            10 frames per second
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.FrameRate.Rate1FramePerSecond">
            <summary>
            1 frame per second
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.FrameRateBit">
            <summary>
            Defines the bit of the frame rate register (addr: 0x02)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.FrameRateBit.FPS">
            <summary>
            Frame rate mode bit (not set: 10fps, set: 1fps)
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.InterruptMode">
            <summary>
            Defines the interrupt modes of the interrupt control register (addr: 0x03)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.InterruptMode.Difference">
            <summary>
            The specification does not give any details on this mode
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.InterruptMode.Absolute">
            <summary>
            An interrupt occures if any pixel exceed the upper or lower limit as given in the
            interrupt level register
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.InterruptModeBit">
            <summary>
            Defines the interrupt controls bits of the interrupt control register (addr: 0x03)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.InterruptModeBit.INTEN">
            <summary>
            Interrupt output bit (INT pin, 0: inactive, 1: active)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.InterruptModeBit.INTMODE">
            <summary>
            Interrupt mode bit (0: difference mode, 1: absolute mode)
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.MovingAverageModeBit">
            <summary>
            Defines the bit(s) of the moving average mode register (addr: 0x07)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.MovingAverageModeBit.MAMOD">
            <summary>
            Twice moving average mode bit
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.OperatingMode">
            <summary>
            Defines the operating modes.
            The modes correspond to the setting in the power control register (addr: 0x00)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.OperatingMode.Normal">
            <summary>
            normal mode
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.OperatingMode.Sleep">
            <summary>
            sleep mode
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.OperatingMode.StandBy10Seconds">
            <summary>
            stand-by mode, 10s intermittence
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.OperatingMode.StandBy60Seconds">
            <summary>
            stand-by mode, 60s intermittence
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.Register">
            <summary>
            Defines the addresses of the AMG88xx registers
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.PCLT">
            <summary>
            Power control register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RST">
            <summary>
            Reset register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.FPSC">
            <summary>
            Frame rate register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTC">
            <summary>
            Interrupt control register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.STAT">
            <summary>
            Status register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.SCLR">
            <summary>
            Status clean register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED0">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.AVE">
            <summary>
            Average mode register
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTHL">
            <summary>
            Interrupt upper value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTHH">
            <summary>
            Interrupt upper value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTLL">
            <summary>
            Interrupt lower value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTLH">
            <summary>
            Interrupt lower value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTSL">
            <summary>
            Interrupt hysteresis register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INTSH">
            <summary>
            Interrupt hysteresis register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.TTHL">
            <summary>
            Thermistor value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.TTHH">
            <summary>
            Thermistor value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT0">
            <summary>
            Interrupt result register pixels 1 - 8
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT1">
            <summary>
            Interrupt result register pixels 9 - 16
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT2">
            <summary>
            Interrupt result register pixels 17 - 24
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT3">
            <summary>
            Interrupt result register pixels 25 - 32
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT4">
            <summary>
            Interrupt result register pixels 33 - 40
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT5">
            <summary>
            Interrupt result register pixels 41 - 48
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT6">
            <summary>
            Interrupt result register pixels 49 - 56
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.INT7">
            <summary>
            Interrupt result register pixels 57 - 64
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED1">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED2">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED3">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED4">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED5">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.RESERVED6">
            <summary>
            reserved, don't write to
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.AVG">
            <summary>
            Average mode
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T01L">
            <summary>
            Pixel 1 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T01H">
            <summary>
            Pixel 1 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T02L">
            <summary>
            Pixel 2 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T02H">
            <summary>
            Pixel 2 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T03L">
            <summary>
            Pixel 3 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T03H">
            <summary>
            Pixel 3 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T04L">
            <summary>
            Pixel 4 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T04H">
            <summary>
            Pixel 4 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T05L">
            <summary>
            Pixel 5 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T05H">
            <summary>
            Pixel 5 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T06L">
            <summary>
            Pixel 6 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T06H">
            <summary>
            Pixel 6 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T07L">
            <summary>
            Pixel 7 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T07H">
            <summary>
            Pixel 7 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T08L">
            <summary>
            Pixel 8 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T08H">
            <summary>
            Pixel 8 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T09L">
            <summary>
            Pixel 9 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T09H">
            <summary>
            Pixel 9 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T10L">
            <summary>
            Pixel 10 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T10H">
            <summary>
            Pixel 10 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T11L">
            <summary>
            Pixel 11 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T11H">
            <summary>
            Pixel 11 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T12L">
            <summary>
            Pixel 12 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T12H">
            <summary>
            Pixel 12 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T13L">
            <summary>
            Pixel 13 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T13H">
            <summary>
            Pixel 13 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T14L">
            <summary>
            Pixel 14 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T14H">
            <summary>
            Pixel 14 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T15L">
            <summary>
            Pixel 15 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T15H">
            <summary>
            Pixel 15 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T16L">
            <summary>
            Pixel 16 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T16H">
            <summary>
            Pixel 16 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T17L">
            <summary>
            Pixel 17 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T17H">
            <summary>
            Pixel 17 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T18L">
            <summary>
            Pixel 18 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T18H">
            <summary>
            Pixel 18 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T19L">
            <summary>
            Pixel 19 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T19H">
            <summary>
            Pixel 19 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T20L">
            <summary>
            Pixel 20 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T20H">
            <summary>
            Pixel 20 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T21L">
            <summary>
            Pixel 21 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T21H">
            <summary>
            Pixel 21 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T22L">
            <summary>
            Pixel 22 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T22H">
            <summary>
            Pixel 22 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T23L">
            <summary>
            Pixel 23 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T23H">
            <summary>
            Pixel 23 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T24L">
            <summary>
            Pixel 24 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T24H">
            <summary>
            Pixel 24 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T25L">
            <summary>
            Pixel 25 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T25H">
            <summary>
            Pixel 25 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T26L">
            <summary>
            Pixel 26 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T26H">
            <summary>
            Pixel 26 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T27L">
            <summary>
            Pixel 27 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T27H">
            <summary>
            Pixel 27 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T28L">
            <summary>
            Pixel 28 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T28H">
            <summary>
            Pixel 28 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T29L">
            <summary>
            Pixel 29 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T29H">
            <summary>
            Pixel 29 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T30L">
            <summary>
            Pixel 30 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T30H">
            <summary>
            Pixel 30 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T31L">
            <summary>
            Pixel 31 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T31H">
            <summary>
            Pixel 31 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T32L">
            <summary>
            Pixel 32 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T32H">
            <summary>
            Pixel 32 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T33L">
            <summary>
            Pixel 33 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T33H">
            <summary>
            Pixel 33 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T34L">
            <summary>
            Pixel 34 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T34H">
            <summary>
            Pixel 34 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T35L">
            <summary>
            Pixel 35 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T35H">
            <summary>
            Pixel 35 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T36L">
            <summary>
            Pixel 36 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T36H">
            <summary>
            Pixel 36 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T37L">
            <summary>
            Pixel 37 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T37H">
            <summary>
            Pixel 37 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T38L">
            <summary>
            Pixel 38 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T38H">
            <summary>
            Pixel 38 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T39L">
            <summary>
            Pixel 39 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T39H">
            <summary>
            Pixel 39 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T40L">
            <summary>
            Pixel 40 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T40H">
            <summary>
            Pixel 40 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T41L">
            <summary>
            Pixel 41 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T41H">
            <summary>
            Pixel 41 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T42L">
            <summary>
            Pixel 42 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T42H">
            <summary>
            Pixel 42 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T43L">
            <summary>
            Pixel 43 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T43H">
            <summary>
            Pixel 43 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T44L">
            <summary>
            Pixel 44 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T44H">
            <summary>
            Pixel 44 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T45L">
            <summary>
            Pixel 45 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T45H">
            <summary>
            Pixel 45 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T46L">
            <summary>
            Pixel 46 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T46H">
            <summary>
            Pixel 46 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T47L">
            <summary>
            Pixel 47 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T47H">
            <summary>
            Pixel 47 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T48L">
            <summary>
            Pixel 48 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T48H">
            <summary>
            Pixel 48 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T49L">
            <summary>
            Pixel 49 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T49H">
            <summary>
            Pixel 49 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T50L">
            <summary>
            Pixel 50 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T50H">
            <summary>
            Pixel 50 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T51L">
            <summary>
            Pixel 51 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T51H">
            <summary>
            Pixel 51 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T52L">
            <summary>
            Pixel 52 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T52H">
            <summary>
            Pixel 52 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T53L">
            <summary>
            Pixel 53 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T53H">
            <summary>
            Pixel 53 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T54L">
            <summary>
            Pixel 54 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T54H">
            <summary>
            Pixel 54 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T55L">
            <summary>
            Pixel 55 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T55H">
            <summary>
            Pixel 55 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T56L">
            <summary>
            Pixel 56 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T56H">
            <summary>
            Pixel 56 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T57L">
            <summary>
            Pixel 57 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T57H">
            <summary>
            Pixel 57 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T58L">
            <summary>
            Pixel 58 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T58H">
            <summary>
            Pixel 58 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T59L">
            <summary>
            Pixel 59 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T59H">
            <summary>
            Pixel 59 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T60L">
            <summary>
            Pixel 60 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T60H">
            <summary>
            Pixel 60 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T61L">
            <summary>
            Pixel 61 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T61H">
            <summary>
            Pixel 61 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T62L">
            <summary>
            Pixel 62 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T62H">
            <summary>
            Pixel 62 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T63L">
            <summary>
            Pixel 63 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T63H">
            <summary>
            Pixel 63 value register (high byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T64L">
            <summary>
            Pixel 64 value register (low byte)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.Register.T64H">
            <summary>
            Pixel 64 value register (high byte)
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.ResetType">
            <summary>
            Defines the reset types of the reset register (addr: 0x01)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.ResetType.Flag">
            <summary>
            flag reset (clear all flags and interrupt flag registers)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.ResetType.Initial">
            <summary>
            initial reset (set all registers to defaults)
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.StatusClearBit">
            <summary>
            Defines the status bits of the status clear register (addr: 0x05)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusClearBit.INTCLR">
            <summary>
            Interrupt occured
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusClearBit.OVFCLR">
            <summary>
            Temperature output overflow occured for one or more pixel
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusClearBit.OVFTHCLR">
            <summary>
            Thermistor output overflow occured
            </summary>
        </member>
        <member name="T:Iot.Device.Amg88xx.StatusFlagBit">
            <summary>
            Defines the status bits of the status register (addr: 0x04)
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusFlagBit.INTF">
            <summary>
            Interrupt occured
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusFlagBit.OVF_IRS">
            <summary>
            Temperature output overflow occured for one or more pixel
            </summary>
        </member>
        <member name="F:Iot.Device.Amg88xx.StatusFlagBit.OVF_THS">
            <summary>
            Thermistor output overflow occured
            Note: the bit is only menthioned in early versions of the reference specification.
            It is not clear whether this is a specification error or a change in a newer
            revision of the sensor.
            </summary>
        </member>
        <member name="T:Iot.Device.Apa102.Apa102">
            <summary>
            Driver for APA102. A double line transmission integrated control LED
            </summary>
        </member>
        <member name="P:Iot.Device.Apa102.Apa102.Pixels">
            <summary>
            Colors of LEDs
            </summary>
        </member>
        <member name="M:Iot.Device.Apa102.Apa102.#ctor(System.Device.Spi.SpiDevice,System.Int32)">
            <summary>
            Initializes a new instance of the APA102 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="length">Number of LEDs</param>
        </member>
        <member name="M:Iot.Device.Apa102.Apa102.Flush">
            <summary>
            Update color data to LEDs
            </summary>
        </member>
        <member name="M:Iot.Device.Apa102.Apa102.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoAnalogController.ConvertPinNumberToAnalogChannelNumber(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoAnalogController.ConvertAnalogChannelNumberToPinNumber(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoAnalogInputPin.MaxVoltage">
            <summary>
            The arduino would theoretically allow for an external analog reference, but firmata currently doesn't support that.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoAnalogInputPin.AdcResolutionBits">
            <summary>
            The ADC resolution for this pin, as reported by the firmware.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoAnalogInputPin.ReadRaw">
            <summary>
            Reads the analog raw value from a given pin.
            </summary>
            <returns>The analog raw value of the given pin</returns>
            <remarks>
            This returns the last cached value from the board. The board sends regular updates when a value changes,
            but this does not request an update before returning a value, so that the read value might be incorrect
            if the analog pin has just been opened.
            </remarks>
        </member>
        <member name="T:Iot.Device.Arduino.ArduinoBoard">
            <summary>
            Implements an interface to an arduino board which is running Firmata.
            See documentation on how to prepare your arduino board to work with this.
            Note that the program will run on the PC, so you cannot disconnect the
            Arduino while this driver is connected.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Creates an instance of an Ardino board connection using the given stream (typically from a serial port)
            </summary>
            <remarks>
            The device is initialized when the first command is sent. The constructor always succeeds.
            </remarks>
            <param name="serialPortStream">A stream to an Arduino/Firmata device</param>
            <param name="usesHardwareFlowControl">True to indicate that the stream supports hardware flow control (can be a serial port
            with RTS/CTS handshake or a network stream where the protocol already supports flow control)</param>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.#ctor(System.IO.Stream)">
            <summary>
            Creates an instance of an Ardino board connection using the given stream (typically from a serial port)
            </summary>
            <remarks>
            The device is initialized when the first command is sent. The constructor always succeeds.
            </remarks>
            <param name="serialPortStream">A stream to an Arduino/Firmata device</param>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of the Arduino board connection connected to a serial port
            </summary>
            The device is initialized when the first command is sent. The constructor always succeeds.
            <param name="portName">Port name. On Windows, this is usually "COM3" or "COM4" for an Arduino attached via USB.
            On Linux, possible values include "/dev/ttyAMA0", "/dev/serial0", "/dev/ttyUSB1", etc.</param>
            <param name="baudRate">Baudrate to use. It is recommended to use at least 115200 Baud.</param>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.Logger">
            <summary>
            The board logger.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.StreamUsesHardwareFlowControl">
            <summary>
            Set this to true if the underlying stream uses some kind of hardware or low-level flow control (RTS/CTS for
            a serial port, or a TCP socket). Setting this to true may improve performance on bulk transfers (such as
            large SPI blocks) but can result in buffer overflows if flow control is not working. Default: false
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.KnownModes">
            <summary>
            The list of supported pin modes.
            This list can be extended by adding special modes using <see cref="M:Iot.Device.Arduino.ArduinoBoard.AddCommandHandler``1(``0)"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.TryFindBoard(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},Iot.Device.Arduino.ArduinoBoard@)">
            <summary>
            Searches the given list of com ports for a firmata device.
            </summary>
            <remarks>
            Scanning ports and testing for devices may affect unrelated devices. It is advisable to exclude ports known to contain other hardware from this scan.
            A board won't be found if its port is already open (by the same or a different process).
            </remarks>
            <param name="comPorts">List of com ports. Can be used with <see cref="M:System.IO.Ports.SerialPort.GetPortNames"/>.</param>
            <param name="baudRates">List of baud rates to test. <see cref="M:Iot.Device.Arduino.ArduinoBoard.CommonBaudRates"/>.</param>
            <param name="board">[Out] Returns the board reference. It is already initialized.</param>
            <returns>True on success, false if no board was found</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.TryConnectToNetworkedBoard(System.Net.IPAddress,System.Int32,Iot.Device.Arduino.ArduinoBoard@)">
            <summary>
            Tries to connect to an arduino over network.
            This requires an arduino with an ethernet shield or an ESP32 with enabled WIFI support.
            </summary>
            <param name="boardAddress">The IP address of the board</param>
            <param name="port">The network port to use. The default port is 27016</param>
            <param name="board">Returns the board if successful</param>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.TryConnectToNetworkedBoard(System.Net.IPAddress,System.Int32,System.Boolean,Iot.Device.Arduino.ArduinoBoard@)">
            <summary>
            Tries to connect to an arduino over network.
            This requires an arduino with an ethernet shield or an ESP32 with enabled WIFI support.
            </summary>
            <param name="boardAddress">The IP address of the board</param>
            <param name="port">The network port to use. The default port is 27016</param>
            <param name="useAutoReconnect">True to use an auto-reconnecting stream. Helpful when using an unreliable connection.</param>
            <param name="board">Returns the board if successful</param>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.TryFindBoard(Iot.Device.Arduino.ArduinoBoard@)">
            <summary>
            Searches all available com ports for an Arduino device.
            </summary>
            <param name="board">A board, already open and initialized. Null if none was found.</param>
            <returns>True if a board was found, false otherwise</returns>
            <remarks>
            Scanning serial ports may affect unrelated devices. If there are problems, use the
            <see cref="M:Iot.Device.Arduino.ArduinoBoard.TryFindBoard(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},Iot.Device.Arduino.ArduinoBoard@)"/> overload excluding ports that shall not be tested.
            </remarks>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CommonBaudRates">
            <summary>
            Returns a list of commonly used baud rates.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.AddCommandHandler``1(``0)">
            <summary>
            Adds a new command handler.
            A command handler can support extended commands.
            </summary>
            <typeparam name="T">An instance of <see cref="T:Iot.Device.Arduino.ExtendedCommandHandler"/>.</typeparam>
            <param name="newCommandHandler">The new handler</param>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetCommandHandler``1">
            <summary>
            Gets the command handler with the provided type. An exact type match is performed.
            </summary>
            <typeparam name="T">The type to query</typeparam>
            <returns>The command handler, or null if none was found</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.DetermineCurrentPinUsage(System.Int32)">
            <summary>
            Returns the current assignment of the given pin
            </summary>
            <param name="pinNumber">Pin number to query</param>
            <returns>A value of the <see cref="T:Iot.Device.Board.PinUsage"/> enumeration</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.Initialize">
            <summary>
            Initialize the board connection. This must be called before any other methods of this class.
            </summary>
            <exception cref="T:System.NotSupportedException">The Firmata firmware on the connected board is too old.</exception>
            <exception cref="T:System.TimeoutException">There was no answer from the board</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetSystemVariable(Iot.Device.Arduino.SystemVariable,System.Int32@)">
            <summary>
            Queries the given system variable.
            </summary>
            <param name="variableId">The variable to query</param>
            <param name="value">Receives the value</param>
            <returns>True on success, false otherwise (value not supported, etc. Check the log output)</returns>
            <exception cref="T:System.IO.IOException">There was an error sending the command</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetSystemVariable(Iot.Device.Arduino.SystemVariable,System.Int32,System.Int32@)">
            <summary>
            Queries the given system variable.
            </summary>
            <param name="variableId">The variable to query</param>
            <param name="pinNumber">The pin number to use (-1 if not applicable for the given parameter)</param>
            <param name="value">Receives the value</param>
            <returns>True on success, false otherwise (value not supported, etc. Check the log output)</returns>
            <exception cref="T:System.IO.IOException">There was an error sending the command</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.SetSystemVariable(Iot.Device.Arduino.SystemVariable,System.Int32)">
            <summary>
            Update the given system variable.
            </summary>
            <param name="variableId">The variable to update</param>
            <param name="value">The new value</param>
            <returns>True on success, false otherwise (check the log output)</returns>
            <exception cref="T:System.IO.IOException">There was a communication error</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.SetSystemVariable(Iot.Device.Arduino.SystemVariable,System.Int32,System.Int32)">
            <summary>
            Update the given system variable.
            </summary>
            <param name="variableId">The variable to update</param>
            <param name="pinNumber">The pin number to use, or -1 if not relevant</param>
            <param name="value">The new value</param>
            <returns>True on success, false otherwise (check the log output)</returns>
            <exception cref="T:System.IO.IOException">There was a communication error</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.RegisterKnownSupportedModes">
            <summary>
            Registers the known supported modes. Should only be called once from Initialize.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.FirmwareVersion">
            <summary>
            Firmware version on the device
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.FirmwareName">
            <summary>
            Name of the firmware.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.FirmataVersion">
            <summary>
            Firmata version found on the board.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoBoard.SupportedPinConfigurations">
            <summary>
            Returns the list of capabilities per pin
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.SetPinMode(System.Int32,Iot.Device.Arduino.SupportedMode)">
            <summary>
            Sets the internal pin mode to the given value, if supported.
            </summary>
            <param name="pin">The pin to configure</param>
            <param name="arduinoMode">The mode to set</param>
            <exception cref="T:System.TimeoutException">The mode was not updated, either because the command was not understood or
            the mode is unknown by the firmware</exception>
            <remarks>This method is intended for use by <see cref="T:Iot.Device.Arduino.ExtendedCommandHandler"/> instances. Users should not
            call this method directly. It is the responsibility of the command handler to use the capabilities table to check
            that the mode is actually supported</remarks>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetPinMode(System.Int32)">
            <summary>
            Returns the current assignment of the given pin
            </summary>
            <param name="pinNumber">Pin number to query</param>
            <returns>An instance of <see cref="T:Iot.Device.Arduino.SupportedMode"/> from the list of known modes (or a new instance for an unknown mode)</returns>
            <remarks>Thi is the opposite of <see cref="M:Iot.Device.Arduino.ArduinoBoard.SetPinMode(System.Int32,Iot.Device.Arduino.SupportedMode)"/>. See there for usage limitations.</remarks>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CreateGpioController">
            <summary>
            Creates a GPIO Controller instance for the board. This allows working with digital input/output pins.
            </summary>
            <returns>An instance of GpioController, using an Arduino-Enabled driver</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CreateI2cBusCore(System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <summary>
            Connect to a device connected to the primary SPI bus on the Arduino
            Firmata's default implementation has no SPI support, so this first checks whether it's available at all.
            </summary>
            <param name="settings">Spi Connection settings</param>
            <param name="pins">The pins to use.</param>
            <returns>An <see cref="T:System.Device.Spi.SpiDevice"/> instance.</returns>
            <exception cref="T:System.NotSupportedException">The Bus number is not 0, or the SPI component has not been enabled in the firmware.</exception>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CreateSimplePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a PWM channel.
            </summary>
            <param name="chip">Must be 0.</param>
            <param name="channel">Pin number to use</param>
            <param name="frequency">This value is ignored</param>
            <param name="dutyCyclePercentage">The duty cycle as a fraction.</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetDefaultPinAssignmentForPwm(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.CreateAnalogController(System.Int32)">
            <summary>
            Creates an anlog controller for this board.
            </summary>
            <param name="chip">Must be 0</param>
            <returns>An <see cref="T:System.Device.Analog.AnalogController"/> instance</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.SetAnalogPinSamplingInterval(System.TimeSpan)">
            <summary>
            Configures the sampling interval for analog input pins (when an event callback is enabled)
            </summary>
            <param name="timeSpan">Timespan between updates. Default ~20ms</param>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.SoftwareReset">
            <summary>
            Performs a software reset of the Arduino firmware
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.Dispose(System.Boolean)">
            <summary>
            Standard dispose pattern
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoBoard.Ping(System.Int32)">
            <summary>
            Pings the device, to get an estimate about the round-trip time.
            With some Wifi setups, the round trip time may be significantly higher than desired.
            </summary>
            <param name="number">The number of pings to send</param>
            <returns>The list of reply times. Contains a negative value for lost packets</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoGpioControllerDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Arduino does not distinguish between logical and physical numbers, so this always returns identity
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoI2cBus.CreateDevice(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.ArduinoI2cDevice">
            <summary>
            Implementation of an I2C device connected to an arduino using the Firmata protocol
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoPwmChannel.#ctor(Iot.Device.Arduino.ArduinoBoard,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Create a PWM Channel on the Arduino. Depending on the board, it has 4-8 pins that support PWM.
            This expects to take the normal pin number (i.e. D6, D9) as input
            </summary>
            <param name="board">Reference to Board</param>
            <param name="chip">Always needs to be 0</param>
            <param name="channel">See above. Valid values depend on the board.</param>
            <param name="frequency">This parameter is ignored and exists only for compatibility</param>
            <param name="dutyCyclePercentage">PWM duty cycle (0 - 1)</param>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoPwmChannel.Frequency">
            <summary>
            Setting the frequency is not supported on the Arduino.
            Therefore, this property has no effect.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ArduinoPwmChannel.DutyCycle">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoPwmChannel.Start">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Arduino.ArduinoPwmChannel.Stop">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Arduino.BlockingConcurrentBag`1">
            <summary>
            Represents a collection that removes objects based on a certain pattern
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.BlockingConcurrentBag`1.TryRemoveElement(System.Func{`0,System.Boolean},System.TimeSpan,`0@)">
            <summary>
            Waits until an element is in the queue that matches the given predicate.
            Checking the predicate should be fast.
            </summary>
            <param name="predicate">The predicate to test</param>
            <param name="timeout">The overall timeout</param>
            <param name="element">Returns the element found, if any</param>
            <returns>True if an element was found within the timeout, false otherwise</returns>
        </member>
        <member name="T:Iot.Device.Arduino.CommandError">
            <summary>
            Possible results of sending a Firmata command
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.None">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.EngineBusy">
            <summary>
            The remote side is busy. The command was ignored.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.InvalidArguments">
            <summary>
            The arguments provided were invalid
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.OutOfMemory">
            <summary>
            The remote side is out of memory
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.InternalError">
            <summary>
            There was an internal error processing the request.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.Timeout">
            <summary>
            The board timed out executing the command.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.DeviceReset">
            <summary>
            The device has been reset.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.CommandError.Aborted">
            <summary>
            The command was aborted.
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.DhtSensor">
            <summary>
            This class supports the DhtFirmata extensions to read DHT sensors over the firmata protocol.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.DhtSensor.#ctor">
            <summary>
            Initializes a new instance of the DhtSensor extended command handler.
            This handler requires pins with DHT support. This is typically the case for all GPIO pins if the
            firmata client has the DhtFirmata extension loaded.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.DhtSensor.TryReadDht(System.Int32,System.Int32,UnitsNet.Temperature@,UnitsNet.RelativeHumidity@)">
            <summary>
            Special function to read DHT sensor, if supported
            </summary>
            <param name="pinNumber">Pin Number</param>
            <param name="dhtType">Type of DHT Sensor: 11 = DHT11, 22 = DHT22, etc.</param>
            <param name="temperature">Temperature</param>
            <param name="humidity">Relative humidity</param>
            <returns>True on success, false otherwise</returns>
        </member>
        <member name="T:Iot.Device.Arduino.Encoder7Bit">
            <summary>
            This class is used to encode larger chunks of data for transmission using the Firmata protocol.
            It converts each block of 7 bytes into a block of 8 bytes, keeping the top bit 0.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.Encoder7Bit.Num8BitOutBytes(System.Int32)">
            <summary>
            Calculates the number of bytes generated during decode (the result is smaller than the input)
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.Encoder7Bit.Num7BitOutBytes(System.Int32)">
            <summary>
            Calculates the number of bytes required for the 7-byte encoding
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.Encoder7Bit.Encode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encode a sequence of bytes
            </summary>
            <param name="data">The data to encode</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Iot.Device.Arduino.Encoder7Bit.Encode(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <summary>
            Encodes a sequence of bytes
            </summary>
            <param name="data">The data to encode</param>
            <param name="startIndex">The start index in the data</param>
            <param name="length">The length of the data</param>
            <returns>The encoded data</returns>
        </member>
        <member name="M:Iot.Device.Arduino.Encoder7Bit.Decode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Decodes the given data sequence
            </summary>
            <param name="inData">The data to decode</param>
            <returns>The decoded data</returns>
        </member>
        <member name="T:Iot.Device.Arduino.ExtendedCommandHandler">
            <summary>
            Base class for specific command handlers for the Arduino firmware
            This class can be derived to support special features of the Arduino firmware
            for a specific board. See <see cref="T:Iot.Device.Arduino.DhtSensor"/> or <see cref="T:Iot.Device.Arduino.FrequencySensor"/> as examples.
            See https://github.com/firmata/ConfigurableFirmata for a list of possible extensions.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.#ctor(Iot.Device.Arduino.SupportedMode)">
            <summary>
            Constructs an instance of this class.
            </summary>
            <param name="handlesMode">The pin mode that this handler uses. Can be null for software-only
            modules (such as the FirmataScheduler)</param>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.#ctor">
            <summary>
            Constructs an instance of this class without a specific pin assignment.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ExtendedCommandHandler.Logger">
            <summary>
            The class-specific logger instance
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ExtendedCommandHandler.HandlesMode">
            <summary>
            The pin mode this handler supports.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ExtendedCommandHandler.IsRegistered">
            <summary>
            Returns true if this command handler is registered.
            This might need to be checked in Dispose, to make sure an uninitialized component doesn't attempt
            to send a command.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.ExtendedCommandHandler.Board">
            <summary>
            The reference to the arduino board
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.Registered(Iot.Device.Arduino.FirmataDevice,Iot.Device.Arduino.ArduinoBoard)">
            <summary>
            This is internally called when the command handler is registered
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.OnConnected">
            <summary>
            This method is called when a connection to the hardware is
            established.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommand(Iot.Device.Arduino.FirmataCommandSequence)">
            <summary>
            Sends a command to the device, not expecting an answer.
            </summary>
            <param name="commandSequence">A command sequence. This
            should normally be a sysex command.</param>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommandAndWait(Iot.Device.Arduino.FirmataCommandSequence,System.TimeSpan,Iot.Device.Arduino.CommandError@)">
            <summary>
            Send a command to the device, expecting a reply.
            </summary>
            <param name="commandSequence">Command to send. This
            should normally be a sysex command.</param>
            <param name="timeout">Command timeout</param>
            <param name="error">An error code in case of a failure</param>
            <exception cref="T:System.TimeoutException">The timeout elapsed before a reply was received.</exception>
            <returns>The reply packet</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommandsAndWait(System.Collections.Generic.IList{Iot.Device.Arduino.FirmataCommandSequence},System.TimeSpan,Iot.Device.Arduino.CommandError@)">
            <summary>
            Send a command to the device, expecting a reply.
            </summary>
            <param name="commandSequences">Commands to send. This
            should normally be a sysex command.</param>
            <param name="timeout">Command timeout</param>
            <param name="error">An error code in case of a failure</param>
            <exception cref="T:System.TimeoutException">The timeout elapsed before a reply was received.</exception>
            <returns>True if all packets where send and properly acknowledged</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommandAndWait(Iot.Device.Arduino.FirmataCommandSequence,System.TimeSpan)">
            <summary>
            Send a command to the device, expecting a reply.
            </summary>
            <param name="commandSequence">Command to send. This
            should normally be a sysex command.</param>
            <param name="timeout">Command timeout</param>
            <exception cref="T:System.TimeoutException">The timeout elapsed before a reply was received.</exception>
            <returns>The reply packet</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommandAndWait(Iot.Device.Arduino.FirmataCommandSequence)">
            <summary>
            Send a command to the device, expecting a reply. This uses a default timeout.
            </summary>
            <param name="commandSequence">Command to send. This
            should normally be a sysex command.</param>
            <exception cref="T:System.TimeoutException">The timeout elapsed before a reply was received.</exception>
            <returns>The reply packet</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.OnSysexData(Iot.Device.Arduino.ReplyType,System.Byte[])">
            <summary>
            This is called when a sysex command is received from the board.
            This can include the reply to a command sent by a <see cref="M:Iot.Device.Arduino.ExtendedCommandHandler.SendCommandAndWait(Iot.Device.Arduino.FirmataCommandSequence)"/> before, in which case
            the reply should be ignored, as it is returned as result of the call itself. Therefore it is advised to use this function only
            to listen for data sent by the device automatically (e.g event messages or recurring status reports)
            </summary>
            <param name="type">Type of data received from the hardware. This should normally be <see cref="F:Iot.Device.Arduino.ReplyType.SysexCommand"/>,
            unless the hardware sends unencoded Ascii messages</param>
            <param name="data">The binary representation of the received data</param>
            <remarks>The implementation needs to check the type and source of the data. The messages are not filtered by requester!</remarks>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.IsMatchingAck(Iot.Device.Arduino.FirmataCommandSequence,System.Byte[])">
            <summary>
            This method is called to check whether the reply is a valid ACK/NOACK for the given command sequence.
            Can be used to avoid accepting something as command reply that is completely unrelated (such as an asynchronous callback).
            In different words, this should return false if the given reply is not something that is an answer to a synchronous command.
            </summary>
            <param name="sequence">The sequence that was sent</param>
            <param name="reply">The reply</param>
            <returns>True if this reply matches the sequence. True is the default, for backwards compatibility</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.HasCommandError(Iot.Device.Arduino.FirmataCommandSequence,System.Byte[])">
            <summary>
            Callback function that returns whether the given reply indicates an error
            </summary>
            <param name="sequence">The original sequence</param>
            <param name="reply">The reply. <see cref="M:Iot.Device.Arduino.ExtendedCommandHandler.IsMatchingAck(Iot.Device.Arduino.FirmataCommandSequence,System.Byte[])"/> is already tested to be true for this reply</param>
            <returns>A command error code, in case this reply indicates a no-acknowledge</returns>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.OnErrorMessage(System.String,System.Exception)">
            <summary>
            Called by the infrastructure when the parser reports an error or information message.
            The default implementation does nothing.
            </summary>
            <param name="message">The message text</param>
            <param name="exception">The exception observed (may be null)</param>
        </member>
        <member name="M:Iot.Device.Arduino.ExtendedCommandHandler.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.FirmataCommand">
            <summary>
            Primary firmata commands
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.DIGITAL_MESSAGE">
            <summary>
            Digital pins have changed
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.REPORT_ANALOG_PIN">
            <summary>
            Request a report on a changing analog pin
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.REPORT_DIGITAL_PIN">
            <summary>
            Request a report on changing digital ports
            Note that digital pins are grouped to 8-byte ports
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.ANALOG_MESSAGE">
            <summary>
            Analog pin state
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.START_SYSEX">
            <summary>
            Start an extended message
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.SET_PIN_MODE">
            <summary>
            Set the input/output mode of a pin
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.SET_DIGITAL_VALUE">
            <summary>
            Set the value of a digital pin
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.END_SYSEX">
            <summary>
            End an extended message
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.PROTOCOL_VERSION">
            <summary>
            Protocol version request/reply
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommand.SYSTEM_RESET">
            <summary>
            System was reset
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.FirmataCommandSequence">
            <summary>
            A firmata command sequence
            Intended to be changed to public visibility later
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommandSequence.StartSysex">
            <summary>
            Start of sysex command byte. Used as start byte for almost all extended commands.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataCommandSequence.EndSysex">
            <summary>
            End of sysex command byte. Must end all sysex commands.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.#ctor(Iot.Device.Arduino.FirmataCommand)">
            <summary>
            Create a new command sequence
            </summary>
            <param name="command">The first byte of the command</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.#ctor">
            <summary>
            Create a new sysex command sequence. The <see cref="F:Iot.Device.Arduino.FirmataCommandSequence.StartSysex"/> byte is added automatically.
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.FirmataCommandSequence.Sequence">
            <summary>
            The current sequence
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.FirmataCommandSequence.Length">
            <summary>
            The current length of the sequence
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.DecodeUInt32(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Decode an uint from packed 7-bit data.
            This way of encoding uints is only used in extension modules.
            </summary>
            <param name="data">Data. 5 bytes expected</param>
            <param name="fromOffset">Start offset in data</param>
            <returns>The decoded unsigned integer</returns>
            <exception cref="T:System.IO.InvalidDataException">The received data is invalid</exception>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.DecodeInt32(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Decode an int from packed 7-bit data.
            This way of encoding uints is only used in extension modules.
            </summary>
            <param name="data">Data. 5 bytes expected</param>
            <param name="fromOffset">Start offset in data</param>
            <returns>The decoded number</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.DecodeInt14(System.Byte[],System.Int32)">
            <summary>
            Decodes a 14-bit integer into a short
            </summary>
            <param name="data">Data array</param>
            <param name="idx">Start offset</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.SendUInt32(System.UInt32)">
            <summary>
            Send an Uint32 as 5 x 7 bits. This form of transmitting integers is only supported by extension modules
            </summary>
            <param name="value">The 32-Bit value to transmit</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.SendInt32(System.Int32)">
            <summary>
            Send an Int32 as 5 x 7 bits. This form of transmitting integers is only supported by extension modules
            </summary>
            <param name="value">The 32-Bit value to transmit</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.WriteByte(System.Byte)">
            <summary>
            Add a byte to the command sequence
            </summary>
            <param name="b">The byte to add</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.Write(System.Byte[])">
            <summary>
            Add a sequence of bytes to the command sequence. The bytes must be encoded already.
            </summary>
            <param name="bytesToSend">The raw block to send</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a sequence of bytes to the command sequence. The bytes must be encoded already.
            </summary>
            <param name="bytesToSend">The raw block to send</param>
            <param name="startIndex">Start index</param>
            <param name="length">Number of bytes to send</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.WriteBytesAsTwo7bitBytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Encodes a set of bytes with 7 bits and adds them to the sequence. Each input byte is encoded in 2 bytes.
            </summary>
            <param name="values">Binary data to add</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.SendInt14(System.Int32)">
            <summary>
            Write a packed Int14 to the stream. This is used to write an integer of up to 14 bits.
            </summary>
            <param name="value">The value to write. Only the 14 least significant bits are transmitted</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.Equals(Iot.Device.Arduino.FirmataCommandSequence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.FirmataCommandSequence.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.FirmataDevice">
            <summary>
            Low-level communication layer for the firmata protocol. Creates the binary command stream for the different commands and returns back results.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FirmataDevice._dataReceived">
            <summary>
            Event used when waiting for answers (i.e. after requesting firmware version)
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.SendCommand(Iot.Device.Arduino.FirmataCommandSequence)">
            <summary>
            Send a command that does not generate a reply.
            This method must only be used for commands that do not generate a reply. It must not be used if only the caller is not
            interested in the answer.
            </summary>
            <param name="sequence">The command sequence to send</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.SendCommandAndWait(Iot.Device.Arduino.FirmataCommandSequence,System.TimeSpan,System.Func{Iot.Device.Arduino.FirmataCommandSequence,System.Byte[],System.Boolean},Iot.Device.Arduino.CommandError@)">
            <summary>
            Send a command and wait for a reply
            </summary>
            <param name="sequence">The command sequence, typically starting with <see cref="F:Iot.Device.Arduino.FirmataCommand.START_SYSEX"/> and ending with <see cref="F:Iot.Device.Arduino.FirmataCommand.END_SYSEX"/></param>
            <param name="timeout">A non-default timeout</param>
            <param name="isMatchingAck">A callback function that should return true if the given reply is the one this command should wait for. The default is true, because asynchronous replies
            are rather the exception than the rule</param>
            <param name="error">An error code in case of failure</param>
            <returns>The raw sequence of sysex reply bytes. The reply does not include the START_SYSEX byte, but it does include the terminating END_SYSEX byte. The first byte is the
            <see cref="T:Iot.Device.Arduino.FirmataSysexCommand"/> command number of the corresponding request</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.SendCommandsAndWait(System.Collections.Generic.IList{Iot.Device.Arduino.FirmataCommandSequence},System.TimeSpan,System.Func{Iot.Device.Arduino.FirmataCommandSequence,System.Byte[],System.Boolean},System.Func{Iot.Device.Arduino.FirmataCommandSequence,System.Byte[],Iot.Device.Arduino.CommandError},Iot.Device.Arduino.CommandError@)">
            <summary>
            Send a set of command and wait for a reply
            </summary>
            <param name="sequences">The command sequences to send, typically starting with <see cref="F:Iot.Device.Arduino.FirmataCommand.START_SYSEX"/> and ending with <see cref="F:Iot.Device.Arduino.FirmataCommand.END_SYSEX"/></param>
            <param name="timeout">A non-default timeout</param>
            <param name="isMatchingAck">A callback function that should return true if the given reply is the one this command should wait for. The default is true, because asynchronous replies
            are rather the exception than the rule</param>
            <param name="errorFunc">A callback that determines a possible error in the reply message</param>
            <param name="error">An error code in case of failure</param>
            <returns>The raw sequence of sysex reply bytes. The reply does not include the START_SYSEX byte, but it does include the terminating END_SYSEX byte. The first byte is the
            <see cref="T:Iot.Device.Arduino.FirmataSysexCommand"/> command number of the corresponding request</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurrence of search in input with replace.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.PrintfFromByteStream(System.String,System.Span{System.Byte}@,System.Int32)">
            <summary>
            Simulates a printf C statement.
            Note that the word size on the arduino is 16 bits, so any argument not specifying an l prefix is considered to
            be 16 bits only.
            </summary>
            <param name="fmt">Format string (with %d, %x, etc)</param>
            <param name="bytesReceived">Total bytes received</param>
            <param name="startOfArguments">Start of arguments (first byte of formatting parameters)</param>
            <returns>A formatted string</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.EnableDigitalReporting">
            <summary>
            Enables digital pin reporting for all ports (one port has 8 pins)
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.EnableAnalogReporting(System.Int32,System.Int32)">
            <summary>
            Enable analog reporting for the given physical pin
            </summary>
            <param name="pinNumber">Physical pin number</param>
            <param name="analogChannel">Analog channel corresponding to the given pin (Axx in arduino terminology)</param>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.CheckSystemVariablesSupported">
            <summary>
            Check support for System variables. Should be done on init/reinit.
            </summary>
            <returns>Null if everything is ok, an error message otherwise.</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FirmataDevice.ReassembleByteString(System.Collections.Generic.IList{System.Byte},System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Firmata uses 2 bytes to encode 8-bit data, because byte values with the top bit set
            are reserved for commands. This decodes such data chunks.
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.FirmataSysexCommand">
            <summary>
            Extended firmata commands
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.FrequencyMode">
            <summary>
            Defines on which events the frequency counter should increase.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.NoChange">
            <summary>
            Don't change the value
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.Low">
            <summary>
            Trigger when the value is low.
            Use with care: This triggers an internal interrupt AS LONG AS the value on the pin is low, which may completely lock up the board.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.High">
            <summary>
            Trigger when the value is high. This mode is only supported on some boards.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.Rising">
            <summary>
            Trigger on a rising edge
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.Falling">
            <summary>
            Trigger on a falling edge
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.FrequencyMode.Change">
            <summary>
            Trigger on both edges. Note that this will typically result in a frequency reported twice as high as it actually is.
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.FrequencySensor">
            <summary>
            The frequency extension allows detecting the frequency of a signal at a given pin.
            This extension is supported on gpio pins that support interrupts.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.#ctor">
            <summary>
            Creates a new instance of this class. This supports pins that have the "Frequency" mode enabled.
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.EnableFrequencyReporting(System.Int32,Iot.Device.Arduino.FrequencyMode,System.Int32)">
            <summary>
            Enable frequency reporting on the given pin.
            </summary>
            <param name="pinNumber">The pin number</param>
            <param name="mode">The mode on which to increase the tick count. Typically rising or falling edge.</param>
            <param name="reportDelay">How often the value should update, in milliseconds. Must be positive and smaller than 2^14</param>
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.OnConnected">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.GetMeasuredFrequency">
            <summary>
            Returns the last measured frequency. Returns 0 if no frequency measurement is active.
            </summary>
            <returns>The frequency measured during the last interval</returns>
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.OnSysexData(Iot.Device.Arduino.ReplyType,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.DisableFrequencyReporting(System.Int32)">
            <summary>
            Disables automatic updating of the frequency counter for the given pin
            </summary>
            <param name="pinNumber">The pin to use</param>
        </member>
        <member name="M:Iot.Device.Arduino.FrequencySensor.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.ReplyType">
            <summary>
            Type of a message returned from the board
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.ReplyType.None">
            <summary>
            Not a valid message
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.ReplyType.SysexCommand">
            <summary>
            A sysex message was received. This is the default.
            The message buffer contains the binary reply data without the sysex byte.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.ReplyType.AsciiData">
            <summary>
            A text message was received.
            This may happen if a special script runs on the firmata device that prints raw ASCII characters to the console.
            One occasion where this also happens is if an ESP32 is printing a crash dump.
            The payload contains the raw message in unicode bytes.
            </summary>
        </member>
        <member name="T:Iot.Device.Arduino.SupportedMode">
            <summary>
            Mode bits for the Firmata protocol.
            These are used both for capability reporting as well as to set a mode
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.DigitalInput">
            <summary>
            The pin supports digital input
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.DigitalOutput">
            <summary>
            The pin supports digital output;
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.AnalogInput">
            <summary>
            The pin supports analog input
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Pwm">
            <summary>
            The pin supports PWM
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Servo">
            <summary>
            The pin supports servo motor controls
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Shift">
            <summary>
            Unused
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.I2c">
            <summary>
            The pin supports I2C data transfer
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.OneWire">
            <summary>
            The pin supports one wire communication
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Stepper">
            <summary>
            The pin can drive a stepper motor
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Encoder">
            <summary>
            The pin has an encoder
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Serial">
            <summary>
            The pin can perform UART (TX or RX)
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.InputPullup">
            <summary>
            The pin can be set to input-pullup.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Spi">
            <summary>
            The pin can be used for SPI transfer (Clock, MOSI, MISO and default CS pin)
            For most Arduinos, MOSI=11, MISO=12 and Clock = 13. The default CS pin is 10.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Sonar">
            <summary>
            HC-SR04
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Tone">
            <summary>
            Arduino tone library
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Dht">
            <summary>
            DHT type sensors
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SupportedMode.Frequency">
            <summary>
            Frequency measurement
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.SupportedMode.#ctor(System.Byte,System.String,Iot.Device.Board.PinUsage)">
            <summary>
            Declares a new pin mode
            </summary>
            <param name="value">The pin mode value</param>
            <param name="name">The user-readable name for the mode</param>
            <param name="pinUsage">Pin usage for this mode, if applicable</param>
        </member>
        <member name="M:Iot.Device.Arduino.SupportedMode.#ctor(System.Byte,System.String)">
            <summary>
            Declares a new pin mode
            </summary>
            <param name="value">The pin mode value</param>
            <param name="name">The user-readable name for the mode</param>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedMode.Value">
            <summary>
            The value for the pin mode
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedMode.Name">
            <summary>
            The name of the pin mode
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedMode.PinUsage">
            <summary>
            The <see cref="T:Iot.Device.Board.PinUsage"/> for this internal mode, if applicable
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.SupportedMode.ToString">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.SupportedPinConfiguration">
            <summary>
            Describes the capabilities of a pin
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedPinConfiguration.Pin">
            <summary>
            The pin number
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedPinConfiguration.PinModes">
            <summary>
            The list of supported modes for this pin
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedPinConfiguration.PwmResolutionBits">
            <summary>
            The width of the PWM register, typical value is 10 (the maximum value is then 1023)
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedPinConfiguration.AnalogInputResolutionBits">
            <summary>
            This contains the resolution of an analog input channel, in bits
            </summary>
        </member>
        <member name="P:Iot.Device.Arduino.SupportedPinConfiguration.AnalogPinNumber">
            <summary>
            This gets the number of the analog input pin, as commonly used by Arduino software
            </summary>
        </member>
        <member name="M:Iot.Device.Arduino.SupportedPinConfiguration.ToString">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Arduino.SystemVariable">
            <summary>
            List of known system variables
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SystemVariable.FunctionSupportCheck">
            <summary>
            Check whether system variables can be queried. Should be true for protocol version 2.7 or later.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SystemVariable.MaxSysexSize">
            <summary>
            Query the maximum size of sysex messages
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SystemVariable.InputBufferSize">
            <summary>
            Query the input buffer size (might be larger than the above, in which case messages can be sent in larger chunks)
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SystemVariable.EnterSleepMode">
            <summary>
            Enter sleep mode (after a timeout). The argument is in minutes. A value of 0 disables an active timer.
            The method cannot be used to wake up the MCU, since it might really be asleep and require an external interrupt to wake up.
            </summary>
        </member>
        <member name="F:Iot.Device.Arduino.SystemVariable.SleepModeInterruptEnable">
            <summary>
            Configures sleep mode.
            Requires a valid interrupt pin. The argument is 0 for LOW trigger and 1 for HIGH trigger.
            </summary>
        </member>
        <member name="T:Iot.Device.Axp192.AdcFrequency">
            <summary>
            The ADS frequency.
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcFrequency.Frequency25Hz">
            <summary>25 Hz frequency</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcFrequency.Frequency50Hz">
            <summary>50 Hz frequency</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcFrequency.Frequency100Hz">
            <summary>100 Hz frequency</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcFrequency.Frequency200Hz">
            <summary>200 Hz frequency</summary>
        </member>
        <member name="T:Iot.Device.Axp192.AdcPinCurrent">
            <summary>
            ADC Pin output current setting
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrent.MicroAmperes20">
            <summary>20 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrent.MicroAmperes40">
            <summary>40 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrent.MicroAmperes60">
            <summary>60 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrent.MicroAmperes80">
            <summary>80 uA</summary>
        </member>
        <member name="T:Iot.Device.Axp192.AdcPinCurrentSetting">
            <summary>
            ADC Pin Current Setting
            /// </summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrentSetting.Off">
            <summary>Off</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrentSetting.OnCharge">
            <summary>When on charge</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrentSetting.SavingPower">
            <summary>When sampling</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinCurrentSetting.AlwaysOn">
            <summary>Always on</summary>
        </member>
        <member name="T:Iot.Device.Axp192.AdcPinEnabled">
            <summary>
            ADC Pin enabled
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.BatteryVoltage">
            <summary>Battery Voltage</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.BatteryCurrent">
            <summary>Battery Current</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.AcInVoltage">
            <summary>AC in Voltage</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.AcInCurrent">
            <summary>AC in Current</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.VbusVoltage">
            <summary>Vbus Voltage</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.VbusCurrent">
            <summary>Vbus Current</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.ApsVoltage">
            <summary>APS Voltage</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.TsPin">
            <summary>TS Pin</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.Axp192.AdcPinEnabled.All">
            <summary>All</summary>
        </member>
        <member name="T:Iot.Device.Axp192.Axp192">
            <summary>
            AXP192 - Enhanced single Cell Li-Battery and Power System Management IC
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.Axp192.I2cDefaultAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates an AXP192
            </summary>
            <param name="i2c">An I2C device.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetLdoOutput(System.Int32,UnitsNet.ElectricPotential)">
            <summary>
            Sets LDO2 or LDO3 output voltage
            </summary>
            <param name="output">The LDO port to configure. Valid values are 2 and 3 (LDO1 cannot be configured and is always on)</param>
            <param name="voltage">The voltage value to set. Will be chopped to the range 1.8-3.3V</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableCoulombCounter">
            <summary>
            Enable Coulomb counter
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.DisableCoulombCounter">
            <summary>
            Disable Coulomb counter
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.StopCoulombCounter">
            <summary>
            Stops Coulomb counter
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.ClearCoulombCounter">
            <summary>
            Clear Coulomb counter
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.IsBatteryConnected">
            <summary>
            Checks if the battery is connected.
            </summary>
            <returns>True if connected.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetInputPowerStatus">
            <summary>
            Gets the power status.
            </summary>
            <returns>The power status.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetBatteryChargingStatus">
            <summary>
             Gets battery charging status.
            </summary>
            <returns>The battery status</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetCoulomb">
            <summary>
            Gets Coulomb
            </summary>
            <returns>typical values are in mA per hour</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetBatteryVoltage">
            <summary>
            Gets the battery voltage.
            </summary>
            <returns>The battery voltage</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetInputVoltage">
            <summary>
            Gets the input voltage.
            </summary>
            <returns>The input voltage</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetInputCurrent">
            <summary>
            Gets the input current.
            </summary>
            <returns>The input current.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetUsbVoltageInput">
            <summary>
            Gets the USB voltage input.
            </summary>
            <returns>The USB voltage input.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetUsbCurrentInput">
            <summary>
            Gets the USB current.
            </summary>
            <returns>The USB current</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetBatteryChargeCurrent">
            <summary>
            Gets the battery charge Current.
            </summary>
            <returns>The battery charge Current.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetBatteryDischargeCurrent">
            <summary>
            Gets the battery discharge current.
            </summary>
            <returns>The battery discharge current.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetInternalTemperature">
            <summary>
            GetInternal Temperature.
            </summary>
            <returns>The temperature.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetBatteryInstantaneousPower">
            <summary>
            GetBattery Instantaneous Power.
            </summary>
            <returns>The power consumption.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetApsVoltage">
            <summary>
            Gets the APS voltage.
            </summary>
            <returns>The APS voltage.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetSleep">
            <summary>
            Enters sleep mode for the AXP and the peripherals, leaving the CPU running
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetSleep(System.Boolean,System.Boolean)">
            <summary>
            Set or recover from sleep. If the CPU is also switched off, it can only be restarted trough an external
            interrupt on AXP input PWRON (typically wired to a hardware key)
            </summary>
            <param name="enterSleep">True to enter sleep, false to recover from it</param>
            <param name="includingCpu">True to also switch off the CPU</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.IsTemperatureWarning">
            <summary>
            Is the temperature in warning.
            </summary>
            <returns>True if internal temperature too high.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetButtonStatus">
            <summary>
            Get button status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetButtonBehavior(Iot.Device.Axp192.LongPressTiming,Iot.Device.Axp192.ShortPressTiming,System.Boolean,Iot.Device.Axp192.SignalDelayAfterPowerUp,Iot.Device.Axp192.ShutdownTiming)">
            <summary>
            Sets the button default behavior.
            </summary>
            <param name="longPress">The long press timing.</param>
            <param name="shortPress">The short press timing.</param>
            <param name="automaticShutdownAtOvertime">True if automatic shutdown should be processed when over shutdown time.</param>
            <param name="signalDelay">The PWROK signal delay after power start-up.</param>
            <param name="shutdownTiming">The shutdown timing.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableLDO2(System.Boolean)">
            <summary>
            Sets the state of LDO2.
            </summary>
            <remarks>On M5Stack, can turn LCD Backlight OFF for power saving</remarks>
            <param name="State">True for on/high/1, false for off/low/O</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableLDO3(System.Boolean)">
            <summary>
            Sets the state of LDO3.
            </summary>
            <param name="State">True to enable LDO3.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableDCDC3(System.Boolean)">
            <summary>
            Sets the state of DC-DC3.
            </summary>
            <param name="State">True to enable DC-DC3.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableDCDC1(System.Boolean)">
            <summary>
            Sets the state of DC-DC1.
            </summary>
            <param name="State">True to enable DC-DC1.</param>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.LdoDcPinsEnabled">
            <summary>
            Enable the various LDO and DC pins.
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetGPIO0(Iot.Device.Axp192.Gpio0Behavior)">
            <summary>
            Sets GPIO0 state
            </summary>
            <param name="state">The GPIO0 behavior</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetGPIO1(Iot.Device.Axp192.GpioBehavior)">
            <summary>
            Sets GPIO1 state
            </summary>
            <param name="state">The GPIO1 behavior</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetGPIO2(Iot.Device.Axp192.GpioBehavior)">
            <summary>
            Sets GPIO2 state
            </summary>
            <param name="state">The GPIO1 behavior</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetGPIO4(Iot.Device.Axp192.GpioBehavior)">
            <summary>
            Sets GPIO4 state
            </summary>
            <param name="state">The GPIO4 behavior</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.ReadGpioValue(System.Int32)">
            <summary>
            Reads GPIO Pins. This method works only for pins set to an input mode.
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.WriteGpioValue(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Configure the given GPIO Pin
            </summary>
            <param name="pin">Pin number</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetBatteryHighTemperatureThreshold(UnitsNet.ElectricPotential)">
            <summary>
            Sets the high temperature threshold for the battery
            </summary>
            <param name="potential">From 0 to 3.264V. Anything higher will be caped to the maximum.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetBackupBatteryChargingControl(System.Boolean,Iot.Device.Axp192.BackupBatteryCharingVoltage,Iot.Device.Axp192.BackupBatteryChargingCurrent)">
            <summary>
            Sets the backup battery charging control.
            </summary>
            <param name="enabled">True to enable the charging.</param>
            <param name="voltage">The desired backup battery charging voltage.</param>
            <param name="current">Te desired backup battery charging current.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetShutdownBatteryDetectionControl(System.Boolean,System.Boolean,Iot.Device.Axp192.ShutdownBatteryPinFunction,System.Boolean,Iot.Device.Axp192.ShutdownBatteryTiming)">
            <summary>
            Sets shutdown battery detection control.
            </summary>
            <param name="turnOffAxp192">True to shutdown the AXP192.</param>
            <param name="enabled">True to enable the control.</param>
            <param name="function">The pin function.</param>
            <param name="pinControl">True to enable the pin function.</param>
            <param name="timing">Delay after AXP192 lowered to higher.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetDcVoltage(System.Int32,UnitsNet.ElectricPotential)">
            <summary>
            Sets the output voltage of one of the DC-DC inverters
            </summary>
            <param name="number">The DC-DC inverter number. Valid choices are 1, 2, and 3</param>
            <param name="voltage">The voltage to set. Valid values are 0.7-3.5 V for inverters 1 and 3 and 0.7-2.275V for inverter 2. The
            value will be chopped accordingly</param>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.ChargingVoltage">
            <summary>
            Gets or sets the charging voltage
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.ChargingCurrent">
            <summary>
            Gets or sets the charging current
            </summary>
            <remarks>Not recommend to set charge current > 100mA, since Battery is only 80mAh.
            more then 1C charge-rate may shorten battery life-span.</remarks>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.ChargingStopThreshold">
            <summary>
            Charging threshold when battery should stop charging
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetChargingFunctions(System.Boolean,Iot.Device.Axp192.ChargingVoltage,Iot.Device.Axp192.ChargingCurrent,Iot.Device.Axp192.ChargingStopThreshold)">
            <summary>
            Set the charging functions
            </summary>
            <param name="includeExternal">True to include the external.</param>
            <param name="chargingVoltage">Charging voltage.</param>
            <param name="chargingCurrent">Charging current.</param>
            <param name="stopThreshold">Stop threshold.</param>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.PinOutputVoltage">
            <summary>
            Sets or gets the global pin output voltage
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetVbusSettings(System.Boolean,System.Boolean,Iot.Device.Axp192.VholdVoltage,System.Boolean,Iot.Device.Axp192.VbusCurrentLimit)">
            <summary>
            Sets the VBUS settings
            </summary>
            <param name="vbusIpsOut">The VBUS-IPSOUT path selects the control signal when VBUS is available.</param>
            <param name="vbusLimit">True to limit VBUS VHOLD control.</param>
            <param name="vholdVoltage">VHOLD Voltage.</param>
            <param name="currentLimitEnable">True to limit VBUS current.</param>
            <param name="vbusCurrent">VBUS Current limit.</param>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.AdcPinEnabled">
            <summary>
            Gets or sets the ADC pin enabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.VoffVoltage">
            <summary>
            Sets or gets power off voltage.
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.PowerOff">
            <summary>
            Cut all power, except for LDO1 (RTC)
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetAdcState(System.Boolean)">
            <summary>
            Sets the ADC state.
            </summary>
            <param name="state">True to enable, false to disable.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.DisableAllIRQ">
            <summary>
            Disable all Irq
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.EnableButtonPressed(Iot.Device.Axp192.ButtonPressed)">
            <summary>
            Enable the button to be pressed and raise IRQ events.
            </summary>
            <param name="button">Button pressed behavior.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.ClearAllIrq">
            <summary>
            Clears all Irq.
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.AdcFrequency">
            <summary>
            Sets or gets the ADC frequency
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.AdcPinCurrent">
            <summary>
            Sets or gets the ADC Pin output Current
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.BatteryTemperatureMonitoring">
            <summary>
            Sets or gets ADC battery temperature monitoring function.
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.Axp192.AdcPinCurrentSetting">
            <summary>
            Sets or gets ADC pin current settings.
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.Read6BytesStorage(System.Span{System.Byte})">
            <summary>
            Reads the 6 bytes from the storage.
            AXP192 have a 6 byte storage, when the power is still valid, the data will not be lost.
            </summary>
            <param name="buffer">A 6 bytes buffer.</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.Write6BytesStorage(System.ReadOnlySpan{System.Byte})">
            <summary>
            Stores data in the storage. 6 bytes are available.
            AXP192 have a 6 byte storage, when the power is still valid, the data will not be lost.
            </summary>
            <param name="buffer">A 6 bytes buffer</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.SetLdoEnable(System.Int32,System.Boolean)">
            <summary>
            Enable or disable specified LDO output
            </summary>
            <param name="number">Port number. Valid values: 2 and 3</param>
            <param name="enable">Enable or disable</param>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.GetPowerControlData">
            <summary>
            Returns all relevant power and current information in a single call
            </summary>
            <returns>An instance of <see cref="T:Iot.Device.Axp192.PowerControlData"/>.</returns>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.Dispose(System.Boolean)">
            <summary>
            Standard dispose method
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.Axp192.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Axp192.BackupBatteryChargingCurrent">
            <summary>
            Backup battery charging current.
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryChargingCurrent.MicroAmperes50">
            <summary>50 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryChargingCurrent.MicroAmperes100">
            <summary>100 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryChargingCurrent.MicroAmperes200">
            <summary>200 uA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryChargingCurrent.MicroAmperes400">
            <summary>400 uA</summary>
        </member>
        <member name="T:Iot.Device.Axp192.BackupBatteryCharingVoltage">
            <summary>
            Backup battery charing voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryCharingVoltage.V3_1">
            <summary>3.1 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryCharingVoltage.V3_0">
            <summary>3.0 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryCharingVoltage.V2_9">
            <summary>2.9 V (doc says 3.0V)</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BackupBatteryCharingVoltage.V2_5">
            <summary>2.5 V</summary>
        </member>
        <member name="T:Iot.Device.Axp192.BatteryStatus">
            <summary>
            The battery status
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.None">
            <summary>
            Empty value
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.Overheated">
            <summary>AXP192 is overheated</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.Charging">
            <summary>Charging</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.BatteryConnected">
            <summary>Battery Connected</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.BatteryActivationMode">
            <summary>Battery Activation Mode</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.ChargingCurrentLessThanExpected">
            <summary>Charging Current Less Than Expected</summary>
        </member>
        <member name="F:Iot.Device.Axp192.BatteryStatus.ModeB">
            <summary>Mode B, when not present, the Mode A (sleep) is activated</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ButtonPressed">
            <summary>
            Button pressed status
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ButtonPressed.NotPressed">
            <summary>Button not presses</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ButtonPressed.LongPressed">
            <summary>Long press more than setup time</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ButtonPressed.ShortPressed">
            <summary>short press</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ChargingCurrent">
            <summary>
            The charging current
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current100mA">
            <summary>Current 100 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current190mA">
            <summary>Current 190 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current280mA">
            <summary>Current 280 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current360mA">
            <summary>Current 360 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current450mA">
            <summary>Current 450 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current550mA">
            <summary>Current 550 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current630mA">
            <summary>Current 630 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current700mA">
            <summary>Current 700 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current780mA">
            <summary>Current 780 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current880mA">
            <summary>Current 880 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current960mA">
            <summary>Current 960 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current1000mA">
            <summary>Current 1000 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current1080mA">
            <summary>Current 1080 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current1160mA">
            <summary>Current 1160 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current1240mA">
            <summary>Current 1240 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingCurrent.Current1320mA">
            <summary>Current 1320 mA</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ChargingStopThreshold">
            <summary>
            Charging threshold when battery should stop charging
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingStopThreshold.Percent10">
            <summary>End charging when the charging current is less than the 10% setting</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingStopThreshold.Percent15">
            <summary>End charging when the charging current is less than the 15% setting</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ChargingVoltage">
            <summary>
            Charging voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingVoltage.V4_1">
            <summary>4.1 volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingVoltage.V4_15">
            <summary>4.15 volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingVoltage.V4_2">
            <summary>4.2 volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ChargingVoltage.V4_36">
            <summary>4.36 volt</summary>
        </member>
        <member name="T:Iot.Device.Axp192.Gpio0Behavior">
            <summary>
            GPIO0 behavior
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.NmosLeakOpenOutput">
            <summary>NMOS Leak Open Output</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.UniversalInputFunction">
            <summary>Universal Input Function</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.LowNoiseLDO">
            <summary>Low Noise LDO</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.CurrentAbsorption">
            <summary>Current Absorption</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.AdcInput">
            <summary>ADC Input</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.LowOutput">
            <summary>Low Output</summary>
        </member>
        <member name="F:Iot.Device.Axp192.Gpio0Behavior.Floating">
            <summary>Floating</summary>
        </member>
        <member name="T:Iot.Device.Axp192.GpioBehavior">
            <summary>
            GPIO1-4 behavior
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.NmosLeakOpenOutput">
            <summary>NMOS Leak Open Output</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.UniversalInputFunction">
            <summary>Universal Input Function</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.PwmOut">
            <summary>PWM output</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.Reserved">
            <summary>Reserved</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.AdcInput">
            <summary>ADC Input</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.LowOutput">
            <summary>Low Output</summary>
        </member>
        <member name="F:Iot.Device.Axp192.GpioBehavior.Floating">
            <summary>Floating</summary>
        </member>
        <member name="T:Iot.Device.Axp192.LdoDcPinsEnabled">
            <summary>
            LDO and DC pin enabled
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.Ldo3">
            <summary>LDO3</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.Ldo2">
            <summary>LDO2</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.DcDc3">
            <summary>DC-DC3</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.DcDc1">
            <summary>DC-DC1</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LdoDcPinsEnabled.All">
            <summary>All</summary>
        </member>
        <member name="T:Iot.Device.Axp192.LongPressTiming">
            <summary>
            Long press timing
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.LongPressTiming.S1">
            <summary>1 second</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LongPressTiming.S1_5">
            <summary>1.5 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LongPressTiming.S2">
            <summary>2 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.LongPressTiming.S2_5">
            <summary>2.5 seconds</summary>
        </member>
        <member name="T:Iot.Device.Axp192.PinOutputVoltage">
            <summary>
            Global pin output voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V1_8">
            <summary>1.8 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V1_9">
            <summary>1.9 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_0">
            <summary>2.0 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_1">
            <summary>2.1 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_2">
            <summary>2.2 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_3">
            <summary>2.3 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_4">
            <summary>2.4 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_5">
            <summary>2.5 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_6">
            <summary>2?6 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_7">
            <summary>2.7 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_8">
            <summary>2.8 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V2_9">
            <summary>2.9 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V3_0">
            <summary>3.0 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V3_1">
            <summary>3.1 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V3_2">
            <summary>3.2 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PinOutputVoltage.V3_3">
            <summary>3.3 V</summary>
        </member>
        <member name="T:Iot.Device.Axp192.PowerControlData">
            <summary>
            This class provides a convenient way of retrieving important status
            information from the Axp192 in a single call
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.Temperature">
            <summary>
            The internal temperature of the power controller
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.InputCurrent">
            <summary>
            The input current, when powered via bus
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.InputVoltage">
            <summary>
            The input voltage, when powered via bus
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.InputStatus">
            <summary>
            The input status. Use this to determine the current power source
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.InputUsbVoltage">
            <summary>
            The USB input voltage
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.InputUsbCurrent">
            <summary>
            The USB input current
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryChargingCurrent">
            <summary>
            The charging current of the battery
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryChargingStatus">
            <summary>
            The status of the battery
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryDischargeCurrent">
            <summary>
            The battery discharge current
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryInstantaneousPower">
            <summary>
            The power currently delivered by the battery
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryVoltage">
            <summary>
            The current battery voltage
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryPresent">
            <summary>
            Indicates whether a battery is present
            </summary>
        </member>
        <member name="P:Iot.Device.Axp192.PowerControlData.BatteryLevel">
            <summary>
            Returns the charge level of the battery.
            Only valid if a battery is present.
            </summary>
        </member>
        <member name="M:Iot.Device.Axp192.PowerControlData.GetBatteryStatusAsText">
            <summary>
            Returns the status of the battery as user-readable english text
            </summary>
            <returns>A user-readable string describing the status of the battery</returns>
        </member>
        <member name="M:Iot.Device.Axp192.PowerControlData.ToString">
            <summary>
            Returns a printable representation of this structure
            </summary>
            <returns>A multiline-string</returns>
        </member>
        <member name="T:Iot.Device.Axp192.PowerStatus">
            <summary>
            Power Status
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.AcinExists">
            <summary>Acin Exists</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.AcinAvailable">
            <summary>Acin Available</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.VbusExists">
            <summary>Vbus Exists</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.VbusAvailable">
            <summary>Vbus Available</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.VbusLargeVhold">
            <summary>Vbus Large Vhold</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.BatteryCharged">
            <summary>Battery Charged</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.AcinVbusShorted">
            <summary>Acin Vbus Shorted</summary>
        </member>
        <member name="F:Iot.Device.Axp192.PowerStatus.AcinVbusStartupSource">
            <summary>Acin Vbus Startup Source</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ShortPressTiming">
            <summary>
            Short press timing
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShortPressTiming.Ms128">
            <summary>128 milliseconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShortPressTiming.Ms512">
            <summary>512 milliseconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShortPressTiming.S1">
            <summary>1 second</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShortPressTiming.S2">
            <summary>2 seconds</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ShutdownBatteryPinFunction">
            <summary>
            Shutdown battery pin function
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryPinFunction.HighResistance">
            <summary>High resistance.</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryPinFunction.Flashing1Hz">
            <summary>25% 1Hz flashing.</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryPinFunction.Flashing4Hz">
            <summary>25% 4Hz flashing</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryPinFunction.OutpuLow">
            <summary>Output low</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ShutdownBatteryTiming">
            <summary>
            Shutdown battery timing.
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryTiming.S0_5">
            <summary>0.5 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryTiming.S1">
            <summary>1 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryTiming.S2">
            <summary>2 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownBatteryTiming.S3">
            <summary>3 seconds</summary>
        </member>
        <member name="T:Iot.Device.Axp192.ShutdownTiming">
            <summary>
            Shutdown timing
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownTiming.S4">
            <summary>4 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownTiming.S6">
            <summary>6 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownTiming.S8">
            <summary>8 seconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.ShutdownTiming.S10">
            <summary>10 seconds</summary>
        </member>
        <member name="T:Iot.Device.Axp192.SignalDelayAfterPowerUp">
            <summary>
            PWROK signal delay after power start-up
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.SignalDelayAfterPowerUp.Ms32">
            <summary>32 milliseconds</summary>
        </member>
        <member name="F:Iot.Device.Axp192.SignalDelayAfterPowerUp.Ms64">
            <summary>64 milliseconds</summary>
        </member>
        <member name="T:Iot.Device.Axp192.VbusCurrentLimit">
            <summary>
            VBUS current limit control
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.VbusCurrentLimit.MilliAmper500">
            <summary>500 mA</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VbusCurrentLimit.MilliAmper100">
            <summary>100 mA</summary>
        </member>
        <member name="T:Iot.Device.Axp192.VholdVoltage">
            <summary>
            VHOLD voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_0">
            <summary>4.0 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_1">
            <summary>4.1 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_2">
            <summary>4.2 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_3">
            <summary>4.3 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_4">
            <summary>4.4 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_5">
            <summary>4.5 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_6">
            <summary>4.6 V</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VholdVoltage.V4_7">
            <summary>4.7 V</summary>
        </member>
        <member name="T:Iot.Device.Axp192.VoffVoltage">
            <summary>
            Cut off voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V2_6">
            <summary>2.6 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V2_7">
            <summary>2.7 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V2_8">
            <summary>2.8 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V2_9">
            <summary>2.9 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V3_0">
            <summary>3.0 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V3_1">
            <summary>3.1 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V3_2">
            <summary>3.2 Volt</summary>
        </member>
        <member name="F:Iot.Device.Axp192.VoffVoltage.V3_3">
            <summary>3.3 Volt</summary>
        </member>
        <member name="T:Iot.Device.Bh1745.AdcGain">
            <summary>
            Represents the available ADC gain options for the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.AdcGain.X1">
            <summary>
            Gain multiplier of 1.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.AdcGain.X2">
            <summary>
            Gain multiplier of 2.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.AdcGain.X16">
            <summary>
            Gain multiplier of 16.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.ChannelCompensationMultipliers">
            <summary>
            Channel compensation multipliers used to compensate the 4 color channels of the Bh1745.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.ChannelCompensationMultipliers.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Channel compensation multipliers used to compensate the 4 color channels of the Bh1745.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.Bh1745">
            <summary>
            Digital color sensor Bh1745.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Digital color sensor Bh1745.
            </summary>
            <param name="device">The used I2c communication device.</param>
        </member>
        <member name="F:Iot.Device.Bh1745.Bh1745.DefaultI2cAddress">
            <summary>
            The primary I2c address of the BH1745
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.Bh1745.SecondaryI2cAddress">
            <summary>
            The secondary I2c address of the BH1745
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.InterruptReset">
            <summary>
            Gets or sets the state of the interrupt pin.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if invalid InterruptStatus is set.</exception>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.MeasurementTime">
            <summary>
            Gets or sets the currently set measurement time.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if invalid MeasurementTime is set.</exception>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.MeasurementIsActive">
            <summary>
            Gets or sets whether the measurement is active.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.AdcGain">
            <summary>
            Gets or sets the adc gain of the sensor.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if invalid AdcGain is set.</exception>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.InterruptSignalIsActive">
            <summary>
            Gets whether the interrupt signal is active.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.LatchBehavior">
            <summary>
            Gets or sets how the interrupt pin latches.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if invalid LatchBehavior is set.</exception>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.InterruptSource">
            <summary>
            Gets or sets the source channel of the interrupt.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.InterruptIsEnabled">
            <summary>
            Gets or sets whether the interrupt pin is enabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.InterruptPersistence">
            <summary>
            Gets or sets the persistence function of the interrupt.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.LowerInterruptThreshold">
            <summary>
            Gets or sets the lower interrupt threshold.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.HigherInterruptThreshold">
            <summary>
            Gets or sets the higher interrupt threshold.
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1745.Bh1745.ChannelCompensationMultipliers">
            <summary>
            Gets or sets the channel compensation multipliers which are used to compensate the measurements.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.Reset">
            <summary>
            Resets the device to the default configuration.
            On reset the sensor goes to power down mode.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.ReadMeasurementIsValid">
            <summary>
            Reads whether the last measurement is valid.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.ReadRedDataRegister">
            <summary>
            Reads the red data register of the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.ReadGreenDataRegister">
            <summary>
            Reads the green data register of the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.ReadBlueDataRegister">
            <summary>
            Reads the blue data register of the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.ReadClearDataRegister">
            <summary>
            Reads the clear data register of the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.GetCompensatedColor">
            <summary>
            Gets the compensated color reading from the sensor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745.Dispose">
            <summary>
            Disposes the Bh1745 resources.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.Bh1745Extensions">
            <summary>
            Extension methods for the Bh1745 sensor.
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745Extensions.ToMilliseconds(Iot.Device.Bh1745.MeasurementTime)">
            <summary>
            Converts the enum Measurement time to an integer representing the measurement time in ms.
            </summary>
            <param name="time">The MeasurementTime.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when a not supported MeasurementTime is used.</exception>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bh1745.Bh1745Extensions.MeasurementTimeAsTimeSpan(Iot.Device.Bh1745.Bh1745)">
            <summary>
            Converts the enum Measurement time to a TimeSpan.
            </summary>
            <param name="bh1745">The BH1745 device.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when a not supported MeasurementTime is used.</exception>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Bh1745.InterruptPersistence">
            <summary>
            Represents the configuration for the interrupt persistence functionality of the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptPersistence.ToggleMeasurementEnd">
            <summary>
            Interrupt status is toggled at each measurement end.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptPersistence.UpdateMeasurementEnd">
            <summary>
            Interrupt status is updated at each measurement end.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptPersistence.UpdateConsecutiveX4">
            <summary>
            Interrupt status is updated if 4 consecutive threshold judgments are the same.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptPersistence.UpdateConsecutiveX8">
            <summary>
            Interrupt status is updated if 8 consecutive threshold judgments are the same.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.InterruptSource">
            <summary>
            Represents the interrupt source which is one of the 4 color channels of the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptSource.RedChannel">
            <summary>
            The red color channel.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptSource.GreenChannel">
            <summary>
            The green color channel.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptSource.BlueChannel">
            <summary>
            The blue color channel.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptSource.ClearChannel">
            <summary>
            The clear color channel.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.LatchBehavior">
            <summary>
            Represents the latch behavior of the interrupt pin of the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.LatchBehavior.LatchUntilReadOrInitialized">
            <summary>
            Interrupt pin is latched until interrupt register is read or initialized.
            or initialized.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.LatchBehavior.LatchEachMeasurement">
            <summary>
            Interrupt pin is latched after each measurement
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.InterruptStatus">
            <summary>
            Represents the state of the interrupt pin of the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptStatus.Active">
            <summary>
            Default state in which the interrupt pin is not initialized (active).
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.InterruptStatus.Inactive">
            <summary>
            Sets the pin to high impedance (inactive).
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1745.MeasurementTime">
            <summary>
            Represents the available measurement times for the Bh1745.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms160">
            <summary>
            160ms measurement time.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms320">
            <summary>
            320ms measurement time.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms640">
            <summary>
            640ms measurement time.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms1280">
            <summary>
            1280ms measurement time.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms2560">
            <summary>
            2560ms measurement time.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1745.MeasurementTime.Ms5120">
            <summary>
            5120ms measurement time.
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1750fvi.Bh1750fvi">
            <summary>
            Ambient Light Sensor BH1750FVI
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1750fvi.Bh1750fvi.LightTransmittance">
            <summary>
            BH1750FVI Light Transmittance, from 27.20% to 222.50%
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1750fvi.Bh1750fvi.MeasuringMode">
            <summary>
            BH1750FVI Measuring Mode
            </summary>
        </member>
        <member name="P:Iot.Device.Bh1750fvi.Bh1750fvi.Illuminance">
            <summary>
            BH1750FVI Illuminance (Lux)
            </summary>
        </member>
        <member name="M:Iot.Device.Bh1750fvi.Bh1750fvi.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Bh1750fvi.MeasuringMode,System.Double)">
            <summary>
            Creates a new instance of the BH1750FVI
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="measuringMode">The measuring mode of BH1750FVI</param>
            <param name="lightTransmittance">BH1750FVI Light Transmittance, from 27.20% to 222.50%</param>
        </member>
        <member name="M:Iot.Device.Bh1750fvi.Bh1750fvi.SetLightTransmittance(System.Double)">
            <summary>
            Set BH1750FVI Light Transmittance
            </summary>
            <param name="transmittance">Light Transmittance, from 27.20% to 222.50%</param>
        </member>
        <member name="M:Iot.Device.Bh1750fvi.Bh1750fvi.GetIlluminance">
            <summary>
            Get BH1750FVI Illuminance
            </summary>
            <returns>Illuminance (Default unit: Lux)</returns>
        </member>
        <member name="M:Iot.Device.Bh1750fvi.Bh1750fvi.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1750fvi.I2cAddress">
            <summary>
            BH1750FVI I2C Address
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.I2cAddress.AddPinHigh">
            <summary>
            ADD Pin connect to high power level
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.I2cAddress.AddPinLow">
            <summary>
            ADD Pin connect to low power level
            </summary>
        </member>
        <member name="T:Iot.Device.Bh1750fvi.MeasuringMode">
            <summary>
            The measuring mode of BH1750FVI
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.ContinuouslyHighResolutionMode">
            <summary>
            Start measurement at 1lx resolution
            Measurement Time is typically 120ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.ContinuouslyHighResolutionMode2">
            <summary>
            Start measurement at 0.5lx resolution
            Measurement Time is typically 120ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.ContinuouslyLowResolutionMode">
            <summary>
            Start measurement at 4lx resolution
            Measurement Time is typically 16ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.OneTimeHighResolutionMode">
            <summary>
            Start measurement at 1lx resolution once
            Measurement Time is typically 120ms.
            It is automatically set to Power Down mode after measurement.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.OneTimeHighResolutionMode2">
            <summary>
            Start measurement at 0.5lx resolution once
            Measurement Time is typically 120ms.
            It is automatically set to Power Down mode after measurement.
            </summary>
        </member>
        <member name="F:Iot.Device.Bh1750fvi.MeasuringMode.OneTimeLowResolutionMode">
            <summary>
            Start measurement at 4lx resolution once
            Measurement Time is typically 16ms.
            It is automatically set to Power Down mode after measurement.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmm150">
            <summary>
            Bmm150 class implementing a magnetometer
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150._i2cDevice">
            <summary>
            I2c device comm channel
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150._bmm150Interface">
            <summary>
            Bmm150 device interface
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150._trimData">
            <summary>
            Bmm150 Trim extended register data
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150._rHall">
            <summary>
            Magnetometer (R-HALL) temperature compensation value, used in axis compensation calculation functions
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150._shouldDispose">
            <summary>
            Flag to evaluate disposal of resources
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150.CalibrationCompensation">
            <summary>
            Gets or sets Magnetometer calibration compensation vector
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150.PrimaryI2cAddress">
            <summary>
            Primary I2C address for the Bmm150
            In the official sheet (P36) states that address is 0x13: https://github.com/m5stack/M5_BMM150/blob/master/src/M5_BMM150_DEFS.h#L163
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmm150.SecondaryI2cAddress">
            <summary>
            Secondary I2C address for the Bmm150
            In the official sheet (P36) states that address is 0x13, alhtough for m5stack is 0x10
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150.DefaultTimeout">
            <summary>
            Default timeout to use when timeout is not provided in the reading methods
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Default constructor for an independent Bmm150
            </summary>
            <param name="i2CDevice">The I2C device</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Bmp180.Bmm150I2cBase,System.Boolean)">
            <summary>
            Constructor to use if Bmm150 is behind another element and need a special I2C protocol like
            when used with the MPU9250
            </summary>
            <param name="i2cDevice">The I2C device</param>
            <param name="Bmm150Interface">The specific interface to communicate with the Bmm150</param>
            <param name="shouldDispose">True to dispose the I2C device when class is disposed</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.ReadTrimRegisters">
            <summary>
            Reads the trim registers of the sensor, used in compensation (x,y,z) calculation
            More info, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1199
            </summary>
            <returns>Trim registers value</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.Initialize">
            <summary>
            Starts the Bmm150 init sequence
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.GetDeviceInfo">
            <summary>
            Get the device information
            </summary>
            <returns>The device information</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.CalibrateMagnetometer(System.Int32)">
            <summary>
            Calibrate the magnetometer.
            Please make sure you are not close to any magnetic field like magnet or phone
            Please make sure you are moving the magnetometer all over space, rotating it.
            </summary>
            <param name="numberOfMeasurements">Number of measurement for the calibration, default is 100</param>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150.HasDataToRead">
            <summary>
            True if there is a data to read
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150.IsVersionCorrect">
            <summary>
            Check if the version is the correct one (0x32). This is fixed for this device
            </summary>
            <returns>Returns true if the version match</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.ReadMagnetometerWithoutCorrection(System.Boolean)">
            <summary>
            Read the magnetometer without Bias correction and can wait for new data to be present
            </summary>
            <param name="waitForData">true to wait for new data</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.ReadMagnetometerWithoutCorrection(System.Boolean,System.TimeSpan)">
            <summary>
            Read the magnetometer without Bias correction and can wait for new data to be present
            More info, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L921
            </summary>
            <param name="waitForData">true to wait for new data</param>
            <param name="timeout">timeout for waiting the data, ignored if waitForData is false</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.ReadMagnetometer(System.Boolean)">
            <summary>
            Read the magnetometer with bias correction and can wait for new data to be present
            </summary>
            <param name="waitForData">true to wait for new data</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.ReadMagnetometer(System.Boolean,System.TimeSpan)">
            <summary>
            Read the magnetometer with compensation calculation and can wait for new data to be present
            </summary>
            <param name="waitForData">true to wait for new data</param>
            <param name="timeout">timeout for waiting the data, ignored if waitForData is false</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150.Dispose">
            <summary>
            Cleanup everything
            </summary>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmm150Compensation">
            <summary>
            Implements the Bmm150 magnetic field data (off-chip) temperature compensation functions
            https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bmm150-ds001.pdf
            Page 15
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150Compensation.CompensateX(System.Double,System.UInt32,Iot.Device.Bmp180.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer x axis data(micro-tesla) in float.
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1614
            </summary>
            <param name="x">axis raw value</param>
            <param name="rhall">temperature compensation value (RHALL) </param>
            <param name="trimData">trim registers values</param>
            <returns>compensated magnetometer x axis data(micro-tesla) in float</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150Compensation.CompensateY(System.Double,System.UInt32,Iot.Device.Bmp180.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer y axis data(micro-tesla) in float.
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1648
            </summary>
            <param name="y">axis raw value</param>
            <param name="rhall">temperature compensation value (RHALL) </param>
            <param name="trimData">trim registers values</param>
            <returns>compensated magnetometer y axis data(micro-tesla) in float</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150Compensation.CompensateZ(System.Double,System.UInt32,Iot.Device.Bmp180.Bmm150TrimRegisterData)">
            <summary>
            Returns the compensated magnetometer z axis data(micro-tesla) in float.
            More details, permalink: https://github.com/BoschSensortec/BMM150-Sensor-API/blob/a20641f216057f0c54de115fe81b57368e119c01/bmm150.c#L1682
            </summary>
            <param name="z">axis raw value</param>
            <param name="rhall">temperature compensation value (RHALL) </param>
            <param name="trimData">trim registers values</param>
            <returns>compensated magnetometer z axis data(micro-tesla) in float</returns>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmm150I2c">
            <summary>
            Default I2C interface for the Bmm150
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2c.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">The register to read</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2c.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.Span{System.Byte})">
            <summary>
            Read a byte array
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">>The register to read</param>
            <param name="readBytes">A span of bytes with the read values</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2c.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a byte
            </summary>
            <param name="i2cDevice">>An I2C device</param>
            <param name="reg">The register to read</param>
            <param name="data">A byte to write</param>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmm150I2cBase">
            <summary>
            Abstract class for Bmm150 the I2C interface. This sensor can be found as a sub
            I2C sensor like in the MPU9250. The access is done thru another I2C device and the
            core I2C primitive are different. Use those 3 primitive to define the access to read
            and write bytes to the Bmm150
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2cBase.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Write a register of the Bmm150
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to write</param>
            <param name="data">The data byte to write</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2cBase.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte on a specific register
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to read</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150I2cBase.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.Span{System.Byte})">
            <summary>
            Read bytes on a specific Bmm150 register
            </summary>
            <param name="i2CDevice">I2C device</param>
            <param name="reg">The register to read</param>
            <param name="readBytes">Span of byte to store the data read</param>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmm150TrimRegisterData">
            <summary>
             Represents the trim registers of the sensor (trim values in the "trim_data" of device structure).
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigX1">
            <summary>
            trim DigX1 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigY1">
            <summary>
            trim DigY1 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigX2">
            <summary>
            trim DigX2 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigY2">
            <summary>
            trim DigY2 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigZ1">
            <summary>
            trim DigZ1 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigZ2">
            <summary>
            trim DigZ2 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigZ3">
            <summary>
            trim DigZ3 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigZ4">
            <summary>
            trim DigZ4 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigXy1">
            <summary>
            trim DigXy1 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigXy2">
            <summary>
            trim DigXy2 data
            </summary>
        </member>
        <member name="P:Iot.Device.Bmp180.Bmm150TrimRegisterData.DigXyz1">
            <summary>
            trim DigXyz1 data
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150TrimRegisterData.#ctor">
            <summary>
            Creates a new instace
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmm150TrimRegisterData.#ctor(System.Span{System.Byte},System.Span{System.Byte},System.Span{System.Byte})">
            <summary>
            Creates a new instace based on the trim registers
            </summary>
            <param name="trimX1y1Data">trimX1y1Data bytes</param>
            <param name="trimXyzData">trimXyzData bytes</param>
            <param name="trimXy1Xy2Data">trimXy1Xy2Data bytes</param>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmp180Register">
            <summary>
            Registers of the Bmm150.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.BMM150_DIG_X1">
            <summary>
            Trim extended register
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.BMM150_DIG_Z4_LSB">
            <summary>
            Trim extended register
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.BMM150_DIG_Z2_LSB">
            <summary>
            Trim extended register
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.WIA">
            <summary>
            WIA: Device ID
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.INFO">
            <summary>
            INFO: Information
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.DATA_READY_STATUS">
            <summary>
            DATA_READY_STATUS: Page 25, data ready status
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HXL">
            <summary>
            X-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HXH">
            <summary>
            X-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HYL">
            <summary>
            Y-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HYH">
            <summary>
            Y-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HZL">
            <summary>
            Z-axis measurement data lower 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.HZH">
            <summary>
            Z-axis measurement data higher 8bit
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.POWER_CONTROL_ADDR">
            <summary>
            Power control address
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180Register.OP_MODE_ADDR">
            <summary>
            Op mode address
            </summary>
        </member>
        <member name="T:Iot.Device.Bmp180.Bmp180">
            <summary>
            BMP180 - barometer, altitude and temperature sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Bmp180.DefaultI2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs Bmp180 instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.SetSampling(Iot.Device.Bmp180.Sampling)">
            <summary>
            Sets sampling to the given value
            </summary>
            <param name="mode">Sampling Mode</param>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadTemperature">
            <summary>
             Reads the temperature from the sensor
            </summary>
            <returns>
             Temperature in degrees celsius
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadPressure">
            <summary>
             Reads the pressure from the sensor
            </summary>
            <returns>
             Atmospheric pressure
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadAltitude(UnitsNet.Pressure)">
            <summary>
             Calculates the altitude in meters from the specified sea-level pressure.
            </summary>
            <param name="seaLevelPressure">
             Sea-level pressure
            </param>
            <returns>
             Height above sea level
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadAltitude">
            <summary>
             Calculates the altitude in meters from the mean sea-level pressure.
            </summary>
            <returns>
             Height in meters above sea level
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadSeaLevelPressure(UnitsNet.Length)">
            <summary>
             Calculates the pressure at sea level when given a known altitude
            </summary>
            <param name="altitude" >
             Altitude in meters
            </param>
            <returns>
             Pressure
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadSeaLevelPressure">
            <summary>
             Calculates the pressure at sea level, when the current altitude is 0.
            </summary>
            <returns>
             Pressure
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.CalculateTrueTemperature">
            <summary>
             Calculate true temperature
            </summary>
            <returns>
             Coefficient B5
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadRawTemperature">
            <summary>
             Reads raw temperatue from the sensor
            </summary>
            <returns>
             Raw temperature
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.ReadRawPressure">
            <summary>
             Reads raw pressure from the sensor
             Taken from datasheet, Section 3.3.1
             Standard            - 8ms
             UltraLowPower       - 5ms
             HighResolution      - 14ms
             UltraHighResolution - 26ms
            </summary>
            <returns>
             Raw pressure
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.Read8BitsFromRegister(System.Byte)">
            <summary>
             Reads an 8 bit value from a register
            </summary>
            <param name="register">
             Register to read from
            </param>
            <returns>
             Value from register
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.Read16BitsFromRegister(System.Byte)">
            <summary>
             Reads a 16 bit value over I2C
            </summary>
            <param name="register">
             Register to read from
            </param>
            <returns>
             Value from register
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.Read16BitsFromRegisterBE(System.Byte)">
            <summary>
             Reads a 16 bit value over I2C
            </summary>
            <param name="register">
             Register to read from
            </param>
            <returns>
             Value (BigEndian) from register
            </returns>
        </member>
        <member name="M:Iot.Device.Bmp180.Bmp180.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Bmp180.Sampling">
            <summary>
            BMP180 sampling
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Sampling.UltraLowPower">
            <summary>
            Skipped (output set to 0x80000)
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Sampling.Standard">
            <summary>
            oversampling x1
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Sampling.HighResolution">
            <summary>
            oversampling x2
            </summary>
        </member>
        <member name="F:Iot.Device.Bmp180.Sampling.UltraHighResolution">
            <summary>
            oversampling x4
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bme280">
            <summary>
            Represents a BME280 temperature, barometric pressure and humidity sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme280.DeviceId">
            <summary>
            The expected chip ID of the BME280.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme280._bme280Calibration">
            <summary>
            Calibration data for the <see cref="T:Iot.Device.Bmxx80.Bme680"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Bmxx80.Bme280"/> class.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme280.HumiditySampling">
            <summary>
            Gets or sets the humidity sampling.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.Sampling"/> is set to an undefined mode.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.TryReadHumidity(UnitsNet.RelativeHumidity@)">
            <summary>
            Reads the humidity. A return value indicates whether the reading succeeded.
            </summary>
            <param name="humidity">
            Contains the measured humidity as %rH if the <see cref="P:Iot.Device.Bmxx80.Bme280.HumiditySampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains an undefined value if the return value is false.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.GetMeasurementDuration">
            <summary>
            Gets the required time in ms to perform a measurement with the current sampling modes.
            </summary>
            <returns>The time it takes for the chip to read data in milliseconds rounded up.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.Read">
            <summary>
            Performs a synchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.ReadAsync">
            <summary>
            Performs an asynchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.SetDefaultConfiguration">
            <summary>
            Sets the default configuration for the sensor.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme280.CompensateHumidity(System.Int32)">
            <summary>
            Compensates the humidity.
            </summary>
            <param name="adcHumidity">The humidity value read from the device.</param>
            <returns>The relative humidity.</returns>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bme680">
            <summary>
            Represents a BME680 temperature, pressure, relative humidity and VOC gas sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680.DefaultI2cAddress">
            <summary>
            Default I2C bus address.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680.SecondaryI2cAddress">
            <summary>
            Secondary I2C bus address.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680.DeviceId">
            <summary>
            The expected chip ID of the BME680.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680._bme680Calibration">
            <summary>
            Calibration data for the <see cref="T:Iot.Device.Bmxx80.Bme680"/>.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.TempCalibrationFactor">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.#ctor(System.Device.I2c.I2cDevice,UnitsNet.Temperature)">
            <summary>
            Initialize a new instance of the <see cref="T:Iot.Device.Bmxx80.Bme680"/> class.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
            <param name="ambientTemperatureDefault">Assumed ambient temperature for startup. Used for initialization of the gas measurement
            if the temperature cannot be read during a reset.</param>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize a new instance of the <see cref="T:Iot.Device.Bmxx80.Bme680"/> class.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.HumiditySampling">
            <summary>
            Gets or sets the humidity sampling.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.Sampling"/> is set to an undefined mode.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.HeaterProfile">
            <summary>
            Gets or sets the heater profile to be used for measurements.
            Current heater profile is only set if the chosen profile is configured.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfile"/> is set to an undefined profile.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.FilterMode">
            <summary>
            Gets or sets the filtering mode to be used for measurements.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode"/> is set to an undefined mode.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.HeaterIsEnabled">
            <summary>
            Gets or sets whether the heater is enabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680.GasConversionIsEnabled">
            <summary>
            Gets or sets whether gas conversions are enabled.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadNewDataIsAvailable">
            <summary>
            Reads whether new data is available.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadGasMeasurementInProcess">
            <summary>
            Reads whether a gas measurement is in process.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadMeasurementInProcess">
            <summary>
            Reads whether a measurement of any kind is in process.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadHeaterIsStable">
            <summary>
            Reads whether the target heater temperature is reached.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.SetPowerMode(Iot.Device.Bmxx80.PowerMode.Bme680PowerMode)">
            <summary>
            Sets the power mode to the given mode
            </summary>
            <param name="powerMode">The <see cref="T:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode"/> to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the power mode does not match a defined mode in <see cref="T:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode"/>.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ConfigureHeatingProfile(Iot.Device.Bmxx80.Bme680HeaterProfile,UnitsNet.Temperature,UnitsNet.Duration,UnitsNet.Temperature)">
            <summary>
            Configures a heater profile, making it ready for use.
            </summary>
            <param name="profile">The <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfile"/> to configure.</param>
            <param name="targetTemperature">The target temperature. Ranging from 0-400.</param>
            <param name="duration">The measurement durations. Ranging from 0-4032ms.</param>
            <param name="ambientTemperature">The ambient temperature.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the heating profile does not match a defined profile in <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfile"/>.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadPowerMode">
            <summary>
            Read the <see cref="T:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode"/> state.
            </summary>
            <returns>The current <see cref="T:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode"/>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.GetMeasurementDuration(Iot.Device.Bmxx80.Bme680HeaterProfile)">
            <summary>
            Gets the required time in ms to perform a measurement. The duration of the gas
            measurement is not considered if <see cref="P:Iot.Device.Bmxx80.Bme680.GasConversionIsEnabled"/> is set to false
            or the chosen <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfile"/> is not configured.
            The precision of this duration is within 1ms of the actual measurement time.
            </summary>
            <param name="profile">The used <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfile"/>. </param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.Read">
            <summary>
            Performs a synchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.ReadAsync">
            <summary>
            Performs an asynchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.TryReadHumidity(UnitsNet.RelativeHumidity@)">
            <summary>
            Reads the humidity. A return value indicates whether the reading succeeded.
            </summary>
            <param name="humidity">
            Contains the measured humidity as %rH if the <see cref="P:Iot.Device.Bmxx80.Bme680.HumiditySampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.TryReadPressure(UnitsNet.Pressure@)">
            <summary>
            Reads the pressure. A return value indicates whether the reading succeeded.
            </summary>
            <param name="pressure">
            Contains the measured pressure if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.TryReadTemperature(UnitsNet.Temperature@)">
            <summary>
            Reads the temperature. A return value indicates whether the reading succeeded.
            </summary>
            <param name="temperature">
            Contains the measured temperature if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.TemperatureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.TryReadGasResistance(UnitsNet.ElectricResistance@)">
            <summary>
            Reads the gas resistance. A return value indicates whether the reading succeeded.
            </summary>
            <param name="gasResistance">
            Contains the measured gas resistance if the heater module reached the target temperature and
            the measurement was valid. Undefined otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.SetDefaultConfiguration">
            <summary>
            Sets the default configuration for the sensor.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.CompensateHumidity(System.Int32)">
            <summary>
            Compensates the humidity.
            </summary>
            <param name="adcHumidity">The humidity value read from the device.</param>
            <returns>The percentage relative humidity.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680.CompensatePressure(System.Int64)">
            <summary>
            Compensates the pressure.
            </summary>
            <param name="adcPressure">The pressure value read from the device.</param>
            <returns>The measured pressure.</returns>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bme680HeaterProfile">
            <summary>
            10 addressable heater profiles stored on the Bme680.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile1">
            <summary>
            Heater Profile 1.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile2">
            <summary>
            Heater Profile 2.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile3">
            <summary>
            Heater Profile 3.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile4">
            <summary>
            Heater Profile 4.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile5">
            <summary>
            Heater Profile 5.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile6">
            <summary>
            Heater Profile 6.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile7">
            <summary>
            Heater Profile 7.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile8">
            <summary>
            Heater Profile 8.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile9">
            <summary>
            Heater Profile 9.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bme680HeaterProfile.Profile10">
            <summary>
            Heater Profile 10.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bme680HeaterProfileConfig">
            <summary>
            The heater profile configuration saved on the device.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680HeaterProfileConfig.HeaterProfile">
            <summary>
            The chosen heater profile slot, ranging from 0-9.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680HeaterProfileConfig.HeaterResistance">
            <summary>
            The heater resistance.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bme680HeaterProfileConfig.HeaterDuration">
            <summary>
            The heater duration
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bme680HeaterProfileConfig.#ctor(Iot.Device.Bmxx80.Bme680HeaterProfile,System.UInt16,UnitsNet.Duration)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.Bmxx80.Bme680HeaterProfileConfig"/>.
            </summary>
            <param name="profile">The used heater profile.</param>
            <param name="heaterResistance">The heater resistance in Ohm.</param>
            <param name="heaterDuration">The heating duration.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Unknown profile setting used</exception>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bmp280">
            <summary>
            Represents a BME280 temperature and barometric pressure sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmp280.DeviceId">
            <summary>
            The expected chip ID of the BMP280.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmp280.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Bmxx80.Bmp280"/> class.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmp280.Read">
            <summary>
            Performs a synchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmp280.ReadAsync">
            <summary>
            Performs an asynchronous reading.
            </summary>
            <returns><see cref="T:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult"/></returns>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bmx280Base">
            <summary>
            Represents the core functionality of the Bmx280 family.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmx280Base.DefaultI2cAddress">
            <summary>
            Default I2C bus address.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmx280Base.SecondaryI2cAddress">
            <summary>
            Secondary I2C bus address.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmx280Base.s_osToMeasCycles">
            <summary>
            Converts oversampling to needed measurement cycles for that oversampling.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.#ctor(System.Byte,System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Bmxx80.Bmx280Base"/> class.
            </summary>
            <param name="deviceId">The ID of the device.</param>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmx280Base.FilterMode">
            <summary>
            Gets or sets the IIR filter mode.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode"/> is set to an undefined mode.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmx280Base.StandbyTime">
            <summary>
            Gets or sets the standby time between two consecutive measurements.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.StandbyTime"/> is set to an undefined mode.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadTemperature(UnitsNet.Temperature@)">
            <summary>
            Reads the temperature. A return value indicates whether the reading succeeded.
            </summary>
            <param name="temperature">
            Contains the measured temperature if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.TemperatureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.ReadPowerMode">
            <summary>
            Read the <see cref="T:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode"/> state.
            </summary>
            <returns>The current <see cref="T:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode"/>.</returns>
            <exception cref="T:System.NotImplementedException">Thrown when the power mode does not match a defined mode in <see cref="T:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode"/>.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadPressure(UnitsNet.Pressure@)">
            <summary>
            Reads the pressure. A return value indicates whether the reading succeeded.
            </summary>
            <param name="pressure">
            Contains the measured pressure in Pa if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadAltitude(UnitsNet.Pressure,UnitsNet.Length@)">
            <summary>
            Calculates the altitude in meters from the specified sea-level pressure(in hPa).
            </summary>
            <param name="seaLevelPressure">Sea-level pressure</param>
            <param name="altitude">
            Contains the calculated metres above sea-level if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if pressure measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadAltitude(UnitsNet.Length@)">
            <summary>
            Calculates the altitude in meters from the mean sea-level pressure.
            </summary>
            <param name="altitude">
            Contains the calculated metres above sea-level if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if pressure measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.ReadStatus">
            <summary>
            Get the current status of the device.
            </summary>
            <returns>The <see cref="T:Iot.Device.Bmxx80.DeviceStatus"/>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.SetPowerMode(Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode)">
            <summary>
            Sets the power mode to the given mode
            </summary>
            <param name="powerMode">The <see cref="T:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode"/> to set.</param>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.GetMeasurementDuration">
            <summary>
            Gets the required time in ms to perform a measurement with the current sampling modes.
            </summary>
            <returns>The time it takes for the chip to read data in milliseconds rounded up.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.SetDefaultConfiguration">
            <summary>
            Sets the default configuration for the sensor.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadTemperatureCore(UnitsNet.Temperature@)">
            <summary>
            Performs a temperature reading.
            </summary>
            <returns><see cref="T:UnitsNet.Temperature"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.TryReadPressureCore(UnitsNet.Pressure@,System.Boolean)">
            <summary>
            Performs a pressure reading.
            </summary>
            <returns><see cref="T:UnitsNet.Pressure"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmx280Base.CompensatePressure(System.Int64)">
            <summary>
            Compensates the pressure in Pa, in double format
            </summary>
            <param name="adcPressure">The pressure value read from the device.</param>
            <returns>Pressure as an instance of <see cref="T:UnitsNet.Pressure"/>.</returns>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bmxx80Base">
            <summary>
            Represents the core functionality of the Bmxx80 family.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base._calibrationData">
            <summary>
            Calibration data for the sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base._i2cDevice">
            <summary>
            I2C device used to communicate with the device.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base._communicationProtocol">
            <summary>
            Chosen communication protocol.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base._controlRegister">
            <summary>
            The control register of the sensor.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bmxx80Base.CommunicationProtocol">
            <summary>
            Bmxx80 communication protocol.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base.CommunicationProtocol.I2c">
            <summary>
            I²C communication protocol.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmxx80Base.TemperatureFine">
            <summary>
            The variable TemperatureFine carries a fine resolution temperature value over to the
            pressure compensation formula and could be implemented as a global variable.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmxx80Base.TempCalibrationFactor">
            <summary>
            The temperature calibration factor.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.#ctor(System.Byte,System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Bmxx80.Bmxx80Base"/> class.
            </summary>
            <param name="deviceId">The ID of the device.</param>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the given <see cref="T:System.Device.I2c.I2cDevice"/> is null.</exception>
            <exception cref="T:System.IO.IOException">Thrown when the device cannot be found on the bus.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling">
            <summary>
            Gets or sets the pressure sampling.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.Sampling"/> is set to an undefined mode.</exception>
        </member>
        <member name="P:Iot.Device.Bmxx80.Bmxx80Base.TemperatureSampling">
            <summary>
            Gets or sets the temperature sampling.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <see cref="T:Iot.Device.Bmxx80.Sampling"/> is set to an undefined mode.</exception>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Reset">
            <summary>
            When called, the device is reset using the complete power-on-reset procedure.
            The device will reset to the default configuration.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.TryReadTemperature(UnitsNet.Temperature@)">
            <summary>
            Reads the temperature. A return value indicates whether the reading succeeded.
            </summary>
            <param name="temperature">
            Contains the measured temperature if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.TemperatureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.TryReadPressure(UnitsNet.Pressure@)">
            <summary>
            Reads the pressure. A return value indicates whether the reading succeeded.
            </summary>
            <param name="pressure">
            Contains the measured pressure if the <see cref="P:Iot.Device.Bmxx80.Bmxx80Base.PressureSampling"/> was not set to <see cref="F:Iot.Device.Bmxx80.Sampling.Skipped"/>.
            Contains <see cref="F:System.Double.NaN"/> otherwise.
            </param>
            <returns><code>true</code> if measurement was not skipped, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.CompensateTemperature(System.Int32)">
            <summary>
            Compensates the temperature.
            </summary>
            <param name="adcTemperature">The temperature value read from the device.</param>
            <returns>The <see cref="T:UnitsNet.Temperature"/>.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Read8BitsFromRegister(System.Byte)">
            <summary>
            Reads an 8 bit value from a register.
            </summary>
            <param name="register">Register to read from.</param>
            <returns>Value from register.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Read16BitsFromRegister(System.Byte,Iot.Device.Bmxx80.Bmxx80Base.Endianness)">
            <summary>
            Reads a 16 bit value over I2C.
            </summary>
            <param name="register">Register to read from.</param>
            <param name="endianness">Interpretation of the bytes (big or little endian).</param>
            <returns>Value from register.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Read24BitsFromRegister(System.Byte,Iot.Device.Bmxx80.Bmxx80Base.Endianness)">
            <summary>
            Reads a 24 bit value over I2C.
            </summary>
            <param name="register">Register to read from.</param>
            <param name="endianness">Interpretation of the bytes (big or little endian).</param>
            <returns>Value from register.</returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.ByteToSampling(System.Byte)">
            <summary>
            Converts byte to <see cref="T:Iot.Device.Bmxx80.Sampling"/>.
            </summary>
            <param name="value">Value to convert.</param>
            <returns><see cref="T:Iot.Device.Bmxx80.Sampling"/></returns>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.SetDefaultConfiguration">
            <summary>
            Sets the default configuration for the sensor.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Bmxx80Base.Endianness">
            <summary>
            Specifies the Endianness of a device.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base.Endianness.LittleEndian">
            <summary>
            Indicates little endian.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Bmxx80Base.Endianness.BigEndian">
            <summary>
            Indicates big endian.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Dispose">
            <summary>
            Cleanup.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.Bmxx80Base.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Bmxx80 and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.CalibrationData.Bme680CalibrationData">
            <summary>
            Calibration data for the <see cref="T:Iot.Device.Bmxx80.Bme680"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.CalibrationData.Bme680CalibrationData.ReadFromDevice(Iot.Device.Bmxx80.Bmxx80Base)">
            <summary>
            Read coefficient data from device.
            </summary>
            <param name="bmxx80Base">The <see cref="T:Iot.Device.Bmxx80.Bmxx80Base"/> to read coefficient data from.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.CalibrationData.Bme280CalibrationData">
            <summary>
            Calibration data for the BME280.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.CalibrationData.Bme280CalibrationData.ReadFromDevice(Iot.Device.Bmxx80.Bmxx80Base)">
            <summary>
            Read coefficient data from device.
            </summary>
            <param name="bmxx80Base">The <see cref="T:Iot.Device.Bmxx80.Bmxx80Base"/> to read coefficient data from.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.CalibrationData.Bmp280CalibrationData">
            <summary>
            Calibration data for the BMP280.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.CalibrationData.Bmp280CalibrationData.ReadFromDevice(Iot.Device.Bmxx80.Bmxx80Base)">
            <summary>
            Read coefficient data from device.
            </summary>
            <param name="bmxx80Base">The <see cref="T:Iot.Device.Bmxx80.Bmxx80Base"/> to read coefficient data from.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.CalibrationData.Bmxx80CalibrationData">
            <summary>
            Calibration data for the Bmxx80 family.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.CalibrationData.Bmxx80CalibrationData.ReadFromDevice(Iot.Device.Bmxx80.Bmxx80Base)">
            <summary>
            Read coefficient data from device.
            </summary>
            <param name="bmxx80Base">The <see cref="T:Iot.Device.Bmxx80.Bmxx80Base"/> to read coefficient data from.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.DeviceStatus">
            <summary>
            Indicates the status of the device.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.DeviceStatus.Measuring">
            <summary>
            True whenever a conversion is running and False when the results have been transferred to the data registers.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.DeviceStatus.ImageUpdating">
            <summary>
            True when the NVM data is being copied to images registers and False when the copying is done.
            The data is copied at power-on-reset and before every conversion.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode">
            <summary>
            IIR filter coefficient. The higher the coefficient, the slower the sensors
            responds to external inputs.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C0">
            <summary>
            Filter coefficient of 0.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C1">
            <summary>
            Filter coefficient of 1.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C3">
            <summary>
            Filter coefficient of 3.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C7">
            <summary>
            Filter coefficient of 7.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C15">
            <summary>
            Filter coefficient of 15.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C31">
            <summary>
            Filter coefficient of 31.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C63">
            <summary>
            Filter coefficient of 63.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bme680FilteringMode.C127">
            <summary>
            Filter coefficient of 127.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode">
             <summary>
             Bmx280 devices feature an internal IIR filter.
             </summary>
             <remarks>
             This filter effectively reduces the bandwidth of the temperature and pressure output signals
             and increases the resolution of the pressure and temperature output data to 20 bits.
            
             The higher the coefficient, the slower the sensors responds to external inputs.
            
             See the data sheet with recommended settings for different scenarios.
             </remarks>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.Off">
            <summary>
            Filter off.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.X2">
            <summary>
            Coefficient x2.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.X4">
            <summary>
            Coefficient x4.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.X8">
            <summary>
            Coefficient x8.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.FilteringMode.Bmx280FilteringMode.X16">
            <summary>
            Coefficient x16.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode">
            <summary>
            Sensor power mode.
            </summary>
            <remarks>
            Section 3.1 in the datasheet.
            </remarks>
        </member>
        <member name="F:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode.Sleep">
            <summary>
            No measurements are performed.
            </summary>
            <remarks>
            Minimal power consumption.
            </remarks>
        </member>
        <member name="F:Iot.Device.Bmxx80.PowerMode.Bme680PowerMode.Forced">
            <summary>
            Single TPHG cycle is performed.
            </summary>
            <remarks>
            Sensor automatically returns to sleep mode afterwards.
            Gas sensor heater only operates during gas measurement.
            </remarks>
        </member>
        <member name="T:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode">
            <summary>
            Sensor power mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode.Sleep">
            <summary>
            No operations, all registers accessible, lowest power mode, selected after startup.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode.Forced">
            <summary>
            Perform one measurement, store results, and return to sleep mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.PowerMode.Bmx280PowerMode.Normal">
            <summary>
            Perpetual cycling of measurements and inactive periods.
            This interval is determined by the combination of IIR filter and standby time options.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult">
            <summary>
            Contains a measurement result of a Bme280 sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult.Humidity">
            <summary>
            Collected humidity measurement.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult.#ctor(System.Nullable{UnitsNet.Temperature},System.Nullable{UnitsNet.Pressure},System.Nullable{UnitsNet.RelativeHumidity})">
            <summary>
            Initialize a new instance of the <see cref="T:Iot.Device.Bmxx80.ReadResult.Bme280ReadResult"/> class.
            </summary>
            <param name="temperature">The <see cref="T:UnitsNet.Temperature"/> measurement.</param>
            <param name="pressure">The <see cref="T:UnitsNet.Pressure"/> measurement.</param>
            <param name="humidity">The humidity measurement.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult">
            <summary>
            Contains a measurement result of a Bme280 sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult.GasResistance">
            <summary>
            Collected gas resistance measurement. NaN if no measurement was performed.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult.#ctor(System.Nullable{UnitsNet.Temperature},System.Nullable{UnitsNet.Pressure},System.Nullable{UnitsNet.RelativeHumidity},System.Nullable{UnitsNet.ElectricResistance})">
            <summary>
            Initialize a new instance of the <see cref="T:Iot.Device.Bmxx80.ReadResult.Bme680ReadResult"/> class.
            </summary>
            <param name="temperature">The <see cref="T:UnitsNet.Temperature"/> measurement.</param>
            <param name="pressure">The <see cref="T:UnitsNet.Pressure"/> measurement.</param>
            <param name="humidity">The humidity measurement.</param>
            <param name="gasResistance">The gas resistance measurement.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult">
            <summary>
            Contains a measurement result of a Bmp280 sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.Temperature">
            <summary>
            Collected temperature measurement.
            </summary>
        </member>
        <member name="P:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.Pressure">
            <summary>
            Collected pressure measurement.
            </summary>
        </member>
        <member name="M:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.#ctor(System.Nullable{UnitsNet.Temperature},System.Nullable{UnitsNet.Pressure})">
            <summary>
            Initialize a new instance of the <see cref="T:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult"/> class.
            </summary>
            <param name="temperature">The <see cref="P:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.Temperature"/> measurement.</param>
            <param name="pressure">The <see cref="P:Iot.Device.Bmxx80.ReadResult.Bmp280ReadResult.Pressure"/> measurement.</param>
        </member>
        <member name="T:Iot.Device.Bmxx80.Register.Bme680Register">
            <summary>
            General control registers for the BME680.
            </summary>
            <remarks>
            See section 5.2 Memory map.
            </remarks>
        </member>
        <member name="T:Iot.Device.Bmxx80.Register.Bmx280Register">
            <summary>
            Register shared by the Bmx280 family.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Register.Bmxx80Register">
            <summary>
            Registers shared in the Bmxx80 family.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Register.Bme280Register">
            <summary>
            General control registers for the BME280.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.Sampling">
            <summary>
            Oversampling settings.
            </summary>
            <remarks>
            Maximum of x2 is recommended for temperature.
            </remarks>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.Skipped">
            <summary>
            Skipped (output set to 0x80000).
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.UltraLowPower">
            <summary>
            Oversampling x1.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.LowPower">
            <summary>
            Oversampling x2.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.Standard">
            <summary>
            Oversampling x4.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.HighResolution">
            <summary>
            Oversampling x8.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.Sampling.UltraHighResolution">
            <summary>
            Oversampling x16.
            </summary>
        </member>
        <member name="T:Iot.Device.Bmxx80.StandbyTime">
            <summary>
            Controls the inactive duration in normal mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms0_5">
            <summary>
            0.5 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms62_5">
            <summary>
            62.5 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms125">
            <summary>
            125 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms250">
            <summary>
            250 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms500">
            <summary>
            500 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms1000">
            <summary>
            1,000 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms10">
            <summary>
            10 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Bmxx80.StandbyTime.Ms20">
            <summary>
            20 ms.
            </summary>
        </member>
        <member name="T:Iot.Device.Bno055.Bno055Sensor">
            <summary>
            BNO055 - inertial measurement unit (IMU)
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.Bno055Sensor.DefaultI2cAddress">
            <summary>
            The default I2C Address, page 91 of the main documentation
            https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bno055-ds000.pdf
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.Bno055Sensor.SecondI2cAddress">
            <summary>
            This is the second I2C Address. It needs to be activated to be valid
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.OperationMode">
            <summary>
            Get/Set the operation mode
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.PowerMode">
            <summary>
            Set/Get the power mode
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.TemperatureSource">
            <summary>
            Set/Get the temperature source
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Units">
            <summary>
            Set/Get the units used. By default, international system is used
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Info">
            <summary>
            Get the information about various sensor system versions and ID
            </summary>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Bno055.OperationMode,System.Boolean)">
            <summary>
            Create an BNO055 sensor
            </summary>
            <param name="i2cDevice">The I2C Device</param>
            <param name="operationMode">The operation mode to setup</param>
            <param name="shouldDispose">true to dispose the I2C device at dispose</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.SetExternalCrystal(System.Boolean)">
            <summary>
            Set internal or external crystal usage.
            Note: if you don't have an external crystal, don't use this function
            </summary>
            <param name="external">true to set to external</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetStatus">
            <summary>
            Get the status. If there is an error, GetError() will give more details
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetError">
            <summary>
            Get the latest error
            </summary>
            <returns>Returns the latest error</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.RunSelfTest">
            <summary>
            Run a self test. In case of error, use GetStatus() and GetError() to get the last error
            </summary>
            <returns>Status fo the test</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetCalibrationStatus">
            <summary>
            Returns the calibration status for the system and sensors
            </summary>
            <returns>Calibration status</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetAccelerometerCalibrationData">
            <summary>
            Get the accelerometer calibration data
            </summary>
            <returns>Returns the accelerometers calibration data</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.SetAccelerometerCalibrationData(System.Numerics.Vector4)">
            <summary>
            Set the accelerometer calibration data
            </summary>
            <param name="calibrationData">Calibration data</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetMagnetometerCalibrationData">
            <summary>
            Get the magnetometer calibration data
            </summary>
            <returns>Returns the magnetometer calibration data</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.SetMagnetometerCalibrationData(System.Numerics.Vector4)">
            <summary>
            Set the magnetometer calibration data
            </summary>
            <param name="calibrationData">Calibration data</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetGyroscopeCalibrationData">
            <summary>
            Get the gyroscope calibration data
            </summary>
            <returns>X, Y and Z data</returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.SetGyroscopeCalibrationData(System.Numerics.Vector3)">
            <summary>
            Set the gyroscope calibration data
            </summary>
            <param name="calibrationData">X, Y and Z data</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.SetAxisMap(Iot.Device.Bno055.AxisSetting,Iot.Device.Bno055.AxisSetting,Iot.Device.Bno055.AxisSetting)">
            <summary>
            Set the Axis map
            </summary>
            <param name="x">X axis setting</param>
            <param name="y">Y axis setting</param>
            <param name="z">Z axis setting</param>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetAxisMap">
            <summary>
            Get the Axis map
            </summary>
            <returns>Returns an array where first element is axis X, then Y then Z</returns>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Orientation">
            <summary>
            Get the orientation (Euler Angles) X = Heading, Y = Roll, Z = Pitch
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Magnetometer">
            <summary>
            Get the Magnetometer
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Gyroscope">
            <summary>
            Get the gyroscope
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Accelerometer">
            <summary>
            Get the accelerometer
            Acceleration Vector (100Hz)
            Three axis of acceleration (gravity + linear motion)
            Default unit in m/s^2, can be changed for mg
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.LinearAcceleration">
            <summary>
            Get the linear acceleration
            Linear Acceleration Vector (100Hz)
            Three axis of linear acceleration data (acceleration minus gravity)
            Default unit in m/s^2, can be changed for mg
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Gravity">
            <summary>
            Get the gravity
            Gravity Vector (100Hz)
            Three axis of gravitational acceleration (minus any movement)
            Default unit in m/s^2, can be changed for mg
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Quaternion">
            <summary>
            Get the quaternion, unit is 1 Quaternion (unit less) = 2^14 returned result
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Bno055Sensor.Temperature">
            <summary>
            Get the temperature
            </summary>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.GetInteruptStatus">
            <summary>
            Get the interupt status
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Bno055.Bno055Sensor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Bno055.AxisMap">
            <summary>
            Axis map
            Orientation map is from documentation section 3.4
            The dot is the one on the chip
                               | Z axis
                               |
                               |   / X axis
                           ____|__/____
              Y axis     / *   | /    /|
              _________ /______|/    //
                       /___________ //
                       |____________|/
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.AxisMap.X">
            <summary>X coordinate</summary>
        </member>
        <member name="F:Iot.Device.Bno055.AxisMap.Y">
            <summary>Y coordinate</summary>
        </member>
        <member name="F:Iot.Device.Bno055.AxisMap.Z">
            <summary>Z coordinate</summary>
        </member>
        <member name="T:Iot.Device.Bno055.AxisSign">
            <summary>
            Axis signs
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.AxisSign.Positive">
            <summary>Positive axis sign</summary>
        </member>
        <member name="F:Iot.Device.Bno055.AxisSign.Negative">
            <summary>Negative axis sign</summary>
        </member>
        <member name="T:Iot.Device.Bno055.AxisSetting">
            <summary>
            Axis setting for a specific axis
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.AxisSetting.Axis">
            <summary>
            Axis map
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.AxisSetting.Sign">
            <summary>
            Axis sign
            </summary>
        </member>
        <member name="T:Iot.Device.Bno055.CalibrationStatus">
            <summary>
            Calibration status contains every variation from 00 to 11
            for every sensor. The most interesting one is full success
            don't try to measure full success for all 4 elements at the same time
            The magnetometer is the one to really wait for calibration.
            Calibration is done automatically by the system
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.CalibrationStatus.MagnetometerSuccess">
            <summary>Magnetometer success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.CalibrationStatus.AccelerometerSuccess">
            <summary>Accelerometer success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.CalibrationStatus.GyroscopeSuccess">
            <summary>Gyroscope success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.CalibrationStatus.SystemSuccess">
            <summary>System success</summary>
        </member>
        <member name="T:Iot.Device.Bno055.Error">
            <summary>
            BNO055 error
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.PeripheralInitializationError">
            <summary>Peripheral initialization error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.SystemInitializationError">
            <summary>System initialization error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.SelftTestResultFailed">
            <summary>Self test result failed</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.RegisterMapValueOutOfRange">
            <summary>Register map value out of range</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.RegisterMapAddressOutOfRange">
            <summary>Register map address out of range</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.RegisterMapWriteError">
            <summary>Register map write error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.BnoLowPowerModeNotAvailable">
            <summary>BNO055 low power mode not available</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.AccelerometerPowerModeNotAvailable">
            <summary>Accelerometer power mode not available</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.FusionAlgorithmConfigurationError">
            <summary>Fusion algorithm configuration error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Error.SensorConfigurationError">
            <summary>Sensor configuration error</summary>
        </member>
        <member name="T:Iot.Device.Bno055.Info">
            <summary>
            Information for the various sensor ID, firmware and bootloader versions
            </summary>
        </member>
        <member name="M:Iot.Device.Bno055.Info.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Version,System.Version)">
            <summary>
            Instantiates an Info object
            <param name="chipId">Chip identifier</param>
            <param name="acceleratorId">Accelerometer identifier</param>
            <param name="magnetometerId">Magnetometer identifier</param>
            <param name="gyroscopeId">Gyroscope identifier</param>
            <param name="firmwareVersion">Firmware version</param>
            <param name="bootloaderVersion">Bootloader version</param>
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.ChipId">
            <summary>
            Chip identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.AcceleratorId">
            <summary>
            Accelerometer identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.MagnetometerId">
            <summary>
            Magnetometer identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.GyroscopeId">
            <summary>
            Gyroscope identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.FirmwareVersion">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="P:Iot.Device.Bno055.Info.BootloaderVersion">
            <summary>
            Bootloader version
            </summary>
        </member>
        <member name="T:Iot.Device.Bno055.InteruptStatus">
            <summary>
            Interrupt state
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.InteruptStatus.GyroscopeInterupt">
            <summary>Gyroscope interrupt</summary>
        </member>
        <member name="F:Iot.Device.Bno055.InteruptStatus.GyroscopeHighRateInterupt">
            <summary>Gyroscope high rate interrupt</summary>
        </member>
        <member name="F:Iot.Device.Bno055.InteruptStatus.AccelerometerHighRateInterupt">
            <summary>Accelerometer high rate interrupt</summary>
        </member>
        <member name="F:Iot.Device.Bno055.InteruptStatus.AccelerometerAnyMotionInterupt">
            <summary>Accelerometer any motion interrupt</summary>
        </member>
        <member name="F:Iot.Device.Bno055.InteruptStatus.AccelerometerNoMotionInterup">
            <summary>Accelerometer no motion interrupt</summary>
        </member>
        <member name="T:Iot.Device.Bno055.OperationMode">
            <summary>
            Operation mode
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.Config">
            <summary>Config</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AcceleraterOnly">
            <summary>Accelerometer only</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.MagnetometerOnly">
            <summary>Magnetometer only</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.GyroscopeOnly">
            <summary>Gyroscope only</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometer">
            <summary>Accelerometer and magnetometer</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerGyroscope">
            <summary>Accelerometer and Gyroscope</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.MegentometerGyroscope">
            <summary>Magnetometer and Gyroscope</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometerGyroscope">
            <summary>Accelerometer, magnetometer and gyroscope</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerGyroscopeRelativeOrientation">
            <summary>Accelerometer and gyroscope with relative orientation</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometerAbsoluteOrientation">
            <summary>Accelerometer and magnetometer with absolute orientation</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometerRelativeOrientation">
            <summary>Accelerometer and magnetometer with relative orientation</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometerGyroscopeAbsoluteOrientation">
            <summary>Accelerometer and gyroscope with absolute orientation</summary>
        </member>
        <member name="F:Iot.Device.Bno055.OperationMode.AccelerometerMagnetometerGyroscopeRelativeOrientation">
            <summary>Accelerometer and gyroscope with relative orientation</summary>
        </member>
        <member name="T:Iot.Device.Bno055.PowerMode">
            <summary>
            Power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.PowerMode.Normal">
            <summary>Normal power mode</summary>
        </member>
        <member name="F:Iot.Device.Bno055.PowerMode.LowPower">
            <summary>Low power mode</summary>
        </member>
        <member name="F:Iot.Device.Bno055.PowerMode.Suspend">
            <summary>Device in suspend mode</summary>
        </member>
        <member name="T:Iot.Device.Bno055.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.Idle">
            <summary>Idle</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.SystemError">
            <summary>System error</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.InitializingPeripherals">
            <summary>Initializing peripherals</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.SystemInitialization">
            <summary>System initialization</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.ExcecutingSelftest">
            <summary>Executing self test</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.SensorFusionAlgorithmRunning">
            <summary>Sensor fusion algorithm running</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Status.SystemRunningWithoutFusionAlgorithm">
            <summary>System running without fusion algorithm</summary>
        </member>
        <member name="T:Iot.Device.Bno055.TemperatureSource">
            <summary>
            Temperature success
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.TemperatureSource.Accelerometer">
            <summary>Accelerometer</summary>
        </member>
        <member name="F:Iot.Device.Bno055.TemperatureSource.Gyroscope">
            <summary>Gyroscope</summary>
        </member>
        <member name="T:Iot.Device.Bno055.TestResult">
            <summary>
            Test result
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.TestResult.AcceleratorSuccess">
            <summary>Accelerometer success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.TestResult.MagentometerSuccess">
            <summary>Magnetometer success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.TestResult.GyroscopeSuccess">
            <summary>Gyroscope success</summary>
        </member>
        <member name="F:Iot.Device.Bno055.TestResult.McuSuccess">
            <summary>MCU success</summary>
        </member>
        <member name="T:Iot.Device.Bno055.Units">
            <summary>
            BNO055 unit
            </summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.AccelerationMeterPerSecond">
            <summary>Acceleration in m/s</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.AccelerationMeterG">
            <summary>Acceleration in G</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.AngularRateDegreePerSecond">
            <summary>Angular rate in degrees per second (DPS)</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.AngularRateRotationPerSecond">
            <summary>Angular rate in rotations per second (RPS)</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.EulerAnglesDegrees">
            <summary>Euler angles in degrees</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.EulerAnglesRadians">
            <summary>Euler angles in radians</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.TemperatureCelsius">
            <summary>Temperature in Celsius</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.TemperatureFarenheit">
            <summary>Temperature in Fahrenheit</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.DataOutputFormatWindows">
            <summary>Data output in Windows format</summary>
        </member>
        <member name="F:Iot.Device.Bno055.Units.DataOutputFormatAndroid">
            <summary>Data output in Android format</summary>
        </member>
        <member name="T:Iot.Device.BoardLed.BoardLed">
            <summary>
            On-board LED on the device.
            </summary>
        </member>
        <member name="P:Iot.Device.BoardLed.BoardLed.Name">
            <summary>
            The name of the LED.
            </summary>
        </member>
        <member name="P:Iot.Device.BoardLed.BoardLed.Trigger">
            <summary>
            The kernel controls the trigger of the LED.
            </summary>
            <remarks>
            The kernel provides some triggers which let the kernel control the LED.
            For example, the red light of Raspberry Pi, whose trigger is "default-on", which makes it keep lighting up.
            If you want to operate the LED, you need to remove the trigger, which is to set its trigger to none.
            Use <see cref="M:Iot.Device.BoardLed.BoardLed.EnumerateTriggers"/> to get all triggers.
            </remarks>
        </member>
        <member name="P:Iot.Device.BoardLed.BoardLed.Brightness">
            <summary>
            The current brightness of the LED.
            </summary>
        </member>
        <member name="P:Iot.Device.BoardLed.BoardLed.MaxBrightness">
            <summary>
            The max brightness of the LED.
            </summary>
        </member>
        <member name="M:Iot.Device.BoardLed.BoardLed.#ctor(System.String)">
            <summary>
            Creates a new instance of the BoardLed.
            </summary>
            <param name="name">The name of the LED to control.</param>
        </member>
        <member name="M:Iot.Device.BoardLed.BoardLed.EnumerateLeds">
            <summary>
            Get all BoardLed instances of on-board LEDs.
            </summary>
            <returns>BoardLed instances.</returns>
        </member>
        <member name="M:Iot.Device.BoardLed.BoardLed.EnumerateTriggers">
            <summary>
            Get all triggers of current LED.
            </summary>
            <returns>The name of triggers.</returns>
        </member>
        <member name="M:Iot.Device.BoardLed.BoardLed.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Board.Board">
            <summary>
            Base class for all board abstractions.
            A "board" is a piece of hardware that offers low-level interfaces to other devices. Typically, it has GPIO pins and one or multiple SPI or I2C busses.
            There should be exactly one instance of a board class per hardware component in an application, but it is possible to work with multiple boards
            at once (i.e. when having a GPIO expander connected to the Raspberry Pi)
            </summary>
        </member>
        <member name="M:Iot.Device.Board.Board.#ctor">
            <summary>
            Constructs a board instance with the default numbering scheme.
            </summary>
            <remarks>
            The constructor will never throw an exception. Call any other method to initialize the hardware and check
            whether an instance can actually run on the current hardware.
            </remarks>
        </member>
        <member name="P:Iot.Device.Board.Board.Initialized">
            <summary>
            True if the board instance is initialized
            </summary>
        </member>
        <member name="P:Iot.Device.Board.Board.Disposed">
            <summary>
            True if this instance is disposed.
            Any attempt to use it after this becomes true results in undefined behavior.
            </summary>
        </member>
        <member name="P:Iot.Device.Board.Board.DefaultPinNumberingScheme">
            <summary>
            The default pin numbering scheme for this board.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.Board.ReservePin(System.Int32,Iot.Device.Board.PinUsage,System.Object)">
            <summary>
            Reserves a pin for a specific usage. This is done automatically if a known interface (i.e. GpioController) is
            used to open the pin, but may be used to block a pin explicitly, i.e. for UART.
            </summary>
            <param name="pinNumber">The pin number, in the boards default numbering scheme</param>
            <param name="usage">Intended usage of the pin</param>
            <param name="owner">Class that owns the pin (use "this")</param>
            <exception cref="T:System.InvalidOperationException">The pin is already reserved</exception>
        </member>
        <member name="M:Iot.Device.Board.Board.ReleasePin(System.Int32,Iot.Device.Board.PinUsage,System.Object)">
            <summary>
            Removes the reservation for a pin.
            See <see cref="M:Iot.Device.Board.Board.ReservePin(System.Int32,Iot.Device.Board.PinUsage,System.Object)"/> for details.
            </summary>
            <param name="pinNumber">The pin number to free, in the numbering scheme of the board</param>
            <param name="usage">The current pin usage</param>
            <param name="owner">The current pin owner</param>
            <exception cref="T:System.InvalidOperationException">The pin is not reserved, or the owner is not correct</exception>
        </member>
        <member name="M:Iot.Device.Board.Board.ActivatePinMode(System.Int32,Iot.Device.Board.PinUsage)">
            <summary>
            Override this method if something special needs to be done to use the pin for the given device.
            Many devices support multiple functions per Pin, but not at the same time, so that some kind of
            multiplexer needs to be set accordingly.
            </summary>
            <param name="pinNumber">The logical pin number to use.</param>
            <param name="usage">The intended usage</param>
        </member>
        <member name="M:Iot.Device.Board.Board.DetermineCurrentPinUsage(System.Int32)">
            <summary>
            Returns the current usage of a pin
            </summary>
            <param name="pinNumber">Pin number in the current numbering scheme</param>
            <returns>The current usage of a pin</returns>
            <remarks>Note for implementations: An implementation of this method shall try to query the hardware if the cache reports <see cref="F:Iot.Device.Board.PinUsage.Unknown"/>.</remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.Initialize">
            <summary>
            Initialize the board and test whether it works on the current hardware.
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The required hardware cannot be found</exception>
        </member>
        <member name="M:Iot.Device.Board.Board.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:Iot.Device.Board.Board.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="P:Iot.Device.Board.Board.PinReservation.Owner">
            <summary>
            Component that owns the pin (used mainly for debugging)
            </summary>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateGpioController">
            <summary>
            Return an instance of a <see cref="T:System.Device.Gpio.GpioController"/> for the current board
            </summary>
            <returns>An instance of a GpioController. The controller uses pin management to prevent reusing the same pin for different purposes
            (or for purposes for which it is not suitable)</returns>
            <exception cref="T:System.NotSupportedException">Rare: No GPIO Controller was found for the current hardware. The default implementation will return
            a simulation interface if no hardware is available.</exception>
            <remarks>
            Derived classes should not normally override this method, but instead <see cref="M:Iot.Device.Board.Board.TryCreateBestGpioDriver"/>.
            </remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.TryCreateBestGpioDriver">
            <summary>
            Tries to create the best possible GPIO driver for this hardware.
            </summary>
            <returns>An instance to the optimal Gpio Driver for this board, or null if none was found</returns>
            <remarks>The base implementation will never return null, but create a dummy instance instead</remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.GetBestDriverForBoard">
            <summary>
            Tries to create the GPIO driver that best matches the current hardware
            </summary>
            <returns>An instance of a GpioDriver that best matches the current hardware</returns>
            <exception cref="T:System.PlatformNotSupportedException">No matching driver could be found</exception>
        </member>
        <member name="M:Iot.Device.Board.Board.GetBestDriverForBoardOnLinux">
            <summary>
            Attempt to get the best applicable driver for the board the program is executing on.
            </summary>
            <returns>A driver that works with the board the program is executing on.</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.GetBestDriverForBoardOnWindows">
            <summary>
            Attempt to get the best applicable driver for the board the program is executing on.
            </summary>
            <returns>A driver that works with the board the program is executing on.</returns>
            <remarks>
                This really feels like it needs a driver-based pattern, where each driver exposes a static method:
                public static bool IsSpecificToCurrentEnvironment { get; }
                The GpioController could use reflection to find all GpioDriver-derived classes and call this
                static method to determine if the driver considers itself to be the best match for the environment.
            (Implementation copied from <see cref="T:System.Device.Gpio.GpioController"/>, where it is private)
            </remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateOrGetI2cBus(System.Int32,System.Int32[])">
            <summary>
            Create an I2C bus instance or return the existing instance for this bus
            </summary>
            <param name="busNumber">I2C bus number to create</param>
            <param name="pinAssignment">The set of pins to use for I2C. Can be null if the bus already exists</param>
            <returns>An I2C bus instance</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateOrGetI2cBus(System.Int32)">
            <summary>
            Create an I2C bus instance or return the existing instance for this bus
            </summary>
            <param name="busNumber">I2C bus number to create</param>
            <returns>An I2C bus instance</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateI2cBusCore(System.Int32,System.Int32[])">
            <summary>
            Create an instance of an I2C bus in a derived class
            </summary>
            <param name="busNumber">The bus number to create</param>
            <param name="pins">The pins that are used for the bus</param>
            <returns>An <see cref="T:Iot.Device.Board.I2cBusManager"/> instance managing the bus</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.GetDefaultI2cBusNumber">
            <summary>
            Creates the default I2C bus for this board or returns the existing bus
            </summary>
            <returns>The number of the default I2C bus</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateI2cDevice(System.Device.I2c.I2cConnectionSettings)">
            <summary>
            Create an I2C device instance on a default bus.
            </summary>
            <param name="connectionSettings">Connection parameters (contains I2C address and bus number)</param>
            <returns>An I2C device instance</returns>
            <remarks>This method can only be used for bus numbers where the corresponding pins are hardwired
            (i.e. bus 0 and 1 on the Raspi always use pins 0/1 and 2/3)</remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.RemoveBus(Iot.Device.Board.I2cBusManager)">
            <summary>
            This is called from the buses Dispose method, so do NOT call bus.Dispose here
            </summary>
            <param name="bus">The bus that's being closed</param>
            <returns>True if the bus was removed, false if it didn't exist</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[],System.Device.Gpio.PinNumberingScheme)">
            <summary>
            Create an SPI device instance
            </summary>
            <param name="connectionSettings">Connection parameters (contains bus number and CS pin number)</param>
            <param name="pinAssignment">The set of pins to use for SPI. The parameter can be null if the hardware requires a fixed mapping from
            pins to SPI for the given bus.</param>
            <param name="pinNumberingScheme">The numbering scheme in which the <paramref name="pinAssignment"/> is given</param>
            <returns>An SPI device instance</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateSpiDevice(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Create an SPI device instance
            </summary>
            /// <param name="connectionSettings">Connection parameters (contains SPI CS pin number and bus number)</param>
            <returns>An SPI device instance</returns>
            <remarks>This method can only be used for bus numbers where the corresponding pins are hardwired</remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <summary>
            Overriden by derived implementations to create the base SPI device.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.Board.CreateSimplePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Overriden by derived implementations to provide the PWM device
            </summary>
        </member>
        <member name="M:Iot.Device.Board.Board.CreatePwmChannel(System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Device.Gpio.PinNumberingScheme)">
            <summary>
            Creates a PWM channel
            </summary>
            <param name="chip">Chip number. Usually 0</param>
            <param name="channel">Channel on the given chip</param>
            <param name="frequency">Initial frequency</param>
            <param name="dutyCyclePercentage">Initial duty cycle</param>
            <param name="pin">The pin number for the pwm channel. Used if not hardwired (i.e. on the Raspi, it is possible to use different pins for the same PWM channel)</param>
            <param name="pinNumberingScheme">The pin numbering scheme for the pin</param>
            <returns>A pwm channel instance</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.CreatePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a PWM channel for the default pin assignment
            </summary>
            <param name="chip">Chip number. Usually 0</param>
            <param name="channel">Channel on the given chip</param>
            <param name="frequency">Initial frequency</param>
            <param name="dutyCyclePercentage">Initial duty cycle</param>
            <returns>A pwm channel instance</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.GetDefaultPinAssignmentForPwm(System.Int32,System.Int32)">
            <summary>
            Overriden by derived class. Provides the default pin for a given channel.
            </summary>
            <param name="chip">Chip number</param>
            <param name="channel">Channel number</param>
            <returns>The default pin for the given PWM channel</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.GetDefaultPinAssignmentForI2c(System.Int32)">
            <summary>
            Overriden by derived classes: Provides the default pin assignment for the given I2C bus
            </summary>
            <param name="busId">Bus Id</param>
            <returns>The set of pins for the given I2C bus</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Overriden by derived classes: Provides the default pin assignment for the given SPI bus
            </summary>
            <param name="connectionSettings">Connection settings to check</param>
            <returns>The set of pins for the given SPI bus</returns>
        </member>
        <member name="M:Iot.Device.Board.Board.Create">
            <summary>
            Create an instance of the best possible board abstraction.
            </summary>
            <returns>A board instance, to be used across the application</returns>
            <exception cref="T:System.PlatformNotSupportedException">The board could not be identified</exception>
            <remarks>The detection concept should be refined, but this requires a public detection api</remarks>
        </member>
        <member name="M:Iot.Device.Board.Board.QueryComponentInformation">
            <inheritdoc cref="M:System.Device.Gpio.GpioController.QueryComponentInformation"/>
        </member>
        <member name="T:Iot.Device.Board.CustomBoard">
            <summary>
            A board that can be customized with user-specified drivers.
            This should only be used if the drivers can't be auto-detected properly.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.#ctor(System.Device.Gpio.GpioDriver,System.Func{System.Int32,System.Device.I2c.I2cBus},System.Func{System.Device.Spi.SpiConnectionSettings,System.Device.Spi.SpiDevice},System.Func{System.Int32,System.Device.Pwm.PwmChannel})">
            <summary>
            Creates a new custom board.
            </summary>
            <param name="gpioDriver">GPIO driver to use</param>
            <param name="i2cBusCreator">Function to create an I2C bus instance</param>
            <param name="spiDeviceCreator">Function to create an SPI device</param>
            <param name="pwmChannelCreator">Function to create a PWM channel</param>
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.TryCreateBestGpioDriver">
            <summary>
            Returns the GPIO driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.CreateI2cBusCore(System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.CreateSimplePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.CustomBoard.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Board.DummyGpioDriver">
            <summary>
            A GPIO driver that has zero pins. Use to fulfill the interface.
            </summary>
        </member>
        <member name="P:Iot.Device.Board.DummyGpioDriver.PinCount">
            <summary>
            Returns 0
            </summary>
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.OpenPin(System.Int32)">
            <summary>
            There are no pins on this board, so this always throws an exception
            </summary>
            <param name="pinNumber">Pin number</param>
            <exception cref="T:System.NotSupportedException">Always thrown: This board has no pins</exception>
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.ClosePin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.GetPinMode(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.Read(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.Toggle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.DummyGpioDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Board.GenericBoard">
            <summary>
            A generic board class. Uses generic implementations for GPIO, I2C etc
            </summary>
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.#ctor">
            <summary>
            Creates a generic board instance with auto-detection of the best drivers for GPIO, I2c, SPI, etc.
            The drivers are late-bound however, so whether it works or not can only be determined after pins are opened.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.CreateSimplePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.CreateI2cBusCore(System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.GetDefaultPinAssignmentForPwm(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.GenericBoard.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Board.I2cBusExtensions">
            <summary>
            Contains extension methods that operate on the I2c bus
            </summary>
        </member>
        <member name="M:Iot.Device.Board.I2cBusExtensions.PerformBusScan(System.Device.I2c.I2cBus,System.Int32,System.Int32)">
            <summary>
            Performs a scan on the I2C bus, returning the addresses for all connected devices.
            </summary>
            <param name="bus">The bus to scan</param>
            <param name="lowest">The lowest address to scan. Default 0x03</param>
            <param name="highest">The highest address to scan. Default 0x77</param>
            <returns>A list of bus addresses that are in use, an empty list if no device was found</returns>
            <remarks>This method should never throw an exception. Bus scanning may interfere with normal device operation,
            so this should not be done while devices are being used.</remarks>
        </member>
        <member name="M:Iot.Device.Board.I2cBusExtensions.PerformBusScan(System.Device.I2c.I2cBus,System.IProgress{System.Single},System.Int32,System.Int32)">
            <summary>
            Performs a scan on the I2C bus, returning the addresses for all connected devices.
            </summary>
            <param name="bus">The bus to scan</param>
            <param name="progress">Progress feedback provider. Receives scan progress in percent</param>
            <param name="lowestAddress">The lowest address to scan. Default 0x03</param>
            <param name="highestAddress">The highest address to scan. Default 0x77</param>
            <returns>A list of bus addresses that are in use, an empty list if no device was found</returns>
            <remarks>This method should never throw an exception. Bus scanning may interfere with normal device operation,
            so this should not be done while devices are being used.</remarks>
        </member>
        <member name="M:Iot.Device.Board.I2cBusExtensions.ToUserReadableTable(System.ValueTuple{System.Collections.Generic.List{System.Int32},System.Int32,System.Int32})">
            <summary>
            Converts the output of <see cref="M:Iot.Device.Board.I2cBusExtensions.PerformBusScan(System.Device.I2c.I2cBus,System.IProgress{System.Single},System.Int32,System.Int32)"/> into a user-readable table, corresponding to the output of the standard
            linux command i2cdetect.
            </summary>
            <param name="data">The result of a bus scan</param>
            <returns>A table in form of a multiline string for the first 127 possible devices. An empty field represents an address that was not tested, a -- means no device
            found and a number means there was a device at that address</returns>
        </member>
        <member name="T:Iot.Device.Board.I2cBusManager">
            <summary>
            Manages an I2C bus instance
            </summary>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.#ctor(Iot.Device.Board.Board,System.Int32,System.Int32[],System.Device.I2c.I2cBus)">
            <summary>
            Creates an instance of an I2C bus, given the pins used for that bus
            </summary>
            <param name="board">The board that provides this bus</param>
            <param name="bus">The bus number</param>
            <param name="pins">The pins, in the logical scheme of the board. This must be an array of exactly two pins (for SCL and SDA)</param>
            <param name="busInstance">The wrapped bus instance</param>
        </member>
        <member name="P:Iot.Device.Board.I2cBusManager.BusId">
            <summary>
            The Bus Id of this bus
            </summary>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.CreateDevice(System.Int32)">
            <summary>
            Creates a device on this bus
            </summary>
            <param name="deviceAddress">The device address</param>
            <returns>An I2C device</returns>
            <remarks>No test is performed whether the given device exists and is usable</remarks>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.RemoveDevice(System.Int32)">
            <summary>
            Disposes and removes a device from the bus.
            No exception is thrown if the device is not open
            </summary>
            <param name="deviceAddress">Address of the device to dispose</param>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.Dispose(System.Boolean)">
            <summary>
            Disposes this I2C bus instance. Also disposes all devices associated with this bus.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.QueryComponentInformation">
            <summary>
            Query the component information (the tree of active drivers) for diagnostic purposes.
            </summary>
            <returns>A <see cref="T:System.Device.ComponentInformation"/> instance</returns>
        </member>
        <member name="M:Iot.Device.Board.I2cBusManager.GetActiveManagedPins">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.IDeviceManager.GetActiveManagedPins">
            <summary>
            Returns the list of pins that are currently in use by this manager (excluding pins that are closed)
            </summary>
            <returns>A set of pin numbers</returns>
        </member>
        <member name="M:Iot.Device.Board.IDeviceManager.QueryComponentInformation">
            <summary>
            Returns the component information of this manager
            </summary>
            <returns>An instance of <see cref="T:System.Device.ComponentInformation"/>.</returns>
        </member>
        <member name="T:Iot.Device.Board.KeyboardGpioDriver">
            <summary>
            A GPIO Driver for testing on Windows
            This driver uses the keyboard for simulating GPIO pins.
            Pins 0-2 are output only and represent the keyboard LEDs (Caps lock, Scroll Lock and Num Lock).
            Setting a value to any of these pins toggles the LEDs on the keyboard (if they're physically present).
            Pins above 8 are input only and represent the keyboard keys. To get the pin number,
            cast the corresponding <see cref="T:System.ConsoleKey"/> to int, e.g. int pinNumber = (int)ConsoleKey.A
            </summary>
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.#ctor">
            <summary>
            Creates an instance of the KeyboardGpioDriver
            </summary>
        </member>
        <member name="P:Iot.Device.Board.KeyboardGpioDriver.PinCount">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.OpenPin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.ClosePin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.GetPinMode(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.Read(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.Toggle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.KeyboardGpioDriver.PollingKeyThread">
            <summary>
            Poor man's interrupt handling. This class is not for real production use, so doesn't really matter
            </summary>
        </member>
        <member name="T:Iot.Device.Board.ManagedGpioController">
            <summary>
            A GPIO Controller instance that manages pin usage
            </summary>
        </member>
        <member name="T:Iot.Device.Board.PinUsage">
            <summary>
            Designated (or active) usage of a pin
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.None">
            <summary>
            Pin not currently used (or usage unknown)
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.Gpio">
            <summary>
            Pin used for GPIO (input or output)
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.I2c">
            <summary>
            Pin used for I2C
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.Spi">
            <summary>
            Pin used for SPI
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.Pwm">
            <summary>
            Pin used for PWM (or analog out)
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.Uart">
            <summary>
            Pin used for RS-232
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.AnalogIn">
            <summary>
            Pin used for analog input
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.AnalogOut">
            <summary>
            Pin used for analog output (Digital-to-Analog converter)
            </summary>
        </member>
        <member name="F:Iot.Device.Board.PinUsage.Unknown">
            <summary>
            Unknown usage (i.e. for boards where this state is write-only)
            </summary>
        </member>
        <member name="T:Iot.Device.Board.RaspberryPiBoard">
            <summary>
            Raspberry Pi specific board implementation.
            Contains all the knowledge about which pins can be used for what purpose.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.#ctor">
            <summary>
            Creates an instance of a Rasperry Pi board.
            </summary>
        </member>
        <member name="P:Iot.Device.Board.RaspberryPiBoard.PinCount">
            <summary>
            Number of pins of the board
            </summary>
        </member>
        <member name="P:Iot.Device.Board.RaspberryPiBoard.ConfigurationFile">
            <summary>
            Gets or sets the path to the configuration file for Raspberry PI.
            </summary>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.TryCreateBestGpioDriver">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.Initialize">
            <summary>
            Initializes this instance
            </summary>
            <exception cref="T:System.NotSupportedException">The current hardware could not be identified as a valid Raspberry Pi type</exception>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetHardwareModeForPinUsage(System.Int32,Iot.Device.Board.PinUsage,System.Device.Gpio.PinNumberingScheme,System.Int32)">
            <summary>
            Gets the board-specific hardware mode for a particular pin and pin usage (i.e. the different ALTn modes on the raspberry pi)
            </summary>
            <param name="pinNumber">Pin number to use</param>
            <param name="usage">Requested usage</param>
            <param name="pinNumberingScheme">Pin numbering scheme for the pin provided (logical or physical)</param>
            <param name="bus">Optional bus argument, for SPI and I2C pins</param>
            <returns>
            A member of <see cref="T:System.Device.Gpio.Drivers.RaspberryPi3Driver.AltMode"/> describing the mode the pin is in.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetDefaultPinAssignmentForPwm(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.ActivatePinMode(System.Int32,Iot.Device.Board.PinUsage)">
            <summary>
            Switches a pin to a certain alternate mode. (ALTn mode)
            </summary>
            <param name="pinNumber">The pin number in the logical scheme</param>
            <param name="usage">The desired usage</param>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.DetermineCurrentPinUsage(System.Int32)">
            <summary>
            Gets the current alternate pin mode. (ALTn mode)
            </summary>
            <param name="pinNumber">Pin number, in the logical scheme</param>
            <returns>The current pin usage</returns>
            <remarks>This also works for closed pins, but then uses a bit of heuristics to get the correct mode</remarks>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.IsI2cActivated">
            <summary>
            Checks if the I2C overlay is activated in the configuraztion file.
            </summary>
            <returns>True if it is.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetOverlayPinAssignmentForI2c(System.Int32)">
            <summary>
            Gets the overlay pin assignment for I2C.
            </summary>
            <param name="busId">Bus Id.</param>
            <returns>The set of pins for the given I2C bus.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.IsSpiActivated">
            <summary>
            Checks if the SPI overlay is activated in the configuraztion file.
            </summary>
            <returns>True if it is.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetOverlayPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Gets the overlay pin assignment for Spi.
            </summary>
            <param name="connectionSettings">Connection settings to check.</param>
            <returns>The set of pins for the given SPI bus. If no miso, it will be marked as -1.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.IsPwmActivated">
            <summary>
            Checks if the I2C overlay is activated in the configuraztion file.
            </summary>
            <returns>True if it is.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.GetOverlayPinAssignmentForPwm(System.Int32)">
            <summary>
            Gets the overlay pin assignment for Pwm.
            </summary>
            <param name="pwmChannel">The PWM channel.</param>
            <returns>The set of pins for the given Pwm bus on chipn 0 as only one supported.</returns>
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.RaspberryPiBoard.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Board.SpiDeviceManager.QueryComponentInformation">
            <summary>
            Query the component information (the tree of active drivers) for diagnostic purposes.
            </summary>
            <returns>A <see cref="T:System.Device.ComponentInformation"/> instance</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Brick">
            <summary>
            The main Brick class allowing low level access to motors and sensors
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Brick.SpiAddress">
            <summary>
            used to store the SPI Address
            used mainly when multiple bricks in a raw or not the default SPI address
            up to 254 addresses supported
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Brick.BrickPi3Info">
            <summary>
            Stores all the information regarding the Brick
            This includes id, hardware and firmware versions
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Brick.BrickPi3Voltage">
            <summary>
            Stores the voltage information
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.#ctor(System.Byte,System.Int32,System.Int32)">
            <summary>
            Initialize the brick including SPI communication
            </summary>
            <param name="spiAddress">The Spi Address of the brick</param>
            <param name="busId">The bus id that the device is connected to</param>
            <param name="ChipSelectLine">The chip select line that the device is connected to</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.Dispose">
            <summary>
            Reset the brick, stop the motors, release sensors
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiTransferArray(System.Byte[])">
            <summary>
            Conduct a SPI transaction
            </summary>
            <param name="dataOut">a list of bytes to send.The length of the list will determine how many bytes are transferred.</param>
            <returns>Returns an array of the bytes read.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiRead32(Iot.Device.BrickPi3.Models.SpiMessageType)">
            <summary>
            Read a 32 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <returns>the value read</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiRead16(Iot.Device.BrickPi3.Models.SpiMessageType)">
            <summary>
            Read a 16 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <returns>the vallue read</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiWrite8(Iot.Device.BrickPi3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 8 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <param name="Value">the value to be sent</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiWrite16(Iot.Device.BrickPi3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 16 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <param name="Value">the value to be sent</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiWrite24(Iot.Device.BrickPi3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 24 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <param name="Value">the value to be sent</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SpiWrite32(Iot.Device.BrickPi3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 32 - bit value over SPI
            </summary>
            <param name="MessageType">the SPI message type</param>
            <param name="Value">the value to be sent</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetManufacturer">
            <summary>
            Read the 20 charactor BrickPi3 manufacturer name
            </summary>
            <returns>BrickPi3 manufacturer name string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetBoard">
            <summary>
            Read the 20 charactor BrcikPi3 board name
            </summary>
            <returns>BrickPi3 board name string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetHardwareVersion">
            <summary>
            Read the hardware version
            </summary>
            <returns>hardware version</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetId">
            <summary>
            Read the 128 - bit BrcikPi3 hardware serial number
            </summary>
            <returns>serial number as 32 char HEX formatted string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetFirmwareVersion">
            <summary>
            Read the firmware version
            </summary>
            <returns>firmware version</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetAddress(System.Byte,System.String)">
            <summary>
            Set the SPI address of the BrickPi3
            </summary>
            <param name="address">the new SPI address to use(1 to 255)</param>
            <param name="id">the BrickPi3's unique serial number ID (so that the address can be set while multiple BrickPi3s are stacked on a Raspberry Pi).</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetLed(System.Byte)">
            <summary>
            Set the Led intensity from 0 (off) to 100 (fully bright), 255 used to return the led to BrickPi3 management
            </summary>
            <param name="intensity">Led intensity</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetVoltage3V3">
            <summary>
            Get the 3.3v circuit voltage
            </summary>
            <returns>3.3v circuit voltage</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetVoltage5V">
            <summary>
            Get the 5v circuit voltage
            </summary>
            <returns>5v circuit voltage</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetVoltage9V">
            <summary>
            Get the 9v circuit voltage
            </summary>
            <returns>9v circuit voltage</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetVoltageBatteryVcc">
            <summary>
            Get the battery voltage
            </summary>
            <returns>battery/Vcc voltage</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetSensor(System.Byte)">
            <summary>
            Get the sensor data from a specific port
            The following sensor types each return a single value:
              NONE----------------------- 0
              TOUCH---------------------- 0 or 1(released or pressed)
              NXT_TOUCH------------------ 0 or 1(released or pressed)
              EV3_TOUCH------------------ 0 or 1(released or pressed)
              NXT_ULTRASONIC------------- distance in CM
              NXT_LIGHT_ON--------------- reflected light
              NXT_LIGHT_OFF-------------- ambient light
              NXT_COLOR_RED-------------- red reflected light
              NXT_COLOR_GREEN------------ green reflected light
              NXT_COLOR_BLUE------------- blue reflected light
              NXT_COLOR_OFF-------------- ambient light
              EV3_GYRO_ABS--------------- absolute rotation position in degrees
              EV3_GYRO_DPS--------------- rotation rate in degrees per second
              EV3_COLOR_REFLECTED-------- red reflected light
              EV3_COLOR_AMBIENT---------- ambient light
              EV3_COLOR_COLOR------------ detected color
              EV3_ULTRASONIC_CM---------- distance in CM
              EV3_ULTRASONIC_INCHES------ distance in inches
              EV3_ULTRASONIC_LISTEN------ 0 or 1(no other ultrasonic sensors or another ultrasonic sensor detected)
              EV3_INFRARED_PROXIMITY----- distance 0 - 100 %
            The following sensor types each return a list of values
              CUSTOM--------------------- Pin 1 ADC(5v scale from 0 to 4095), Pin 6 ADC(3.3v scale from 0 to 4095), Pin 5 digital, Pin 6 digital
              I2C------------------------ the I2C bytes read
              NXT_COLOR_FULL------------- detected color, red light reflected, green light reflected, blue light reflected, ambient light
              EV3_GYRO_ABS_DPS----------- absolute rotation position in degrees, rotation rate in degrees per second
              EV3_COLOR_RAW_REFLECTED---- red reflected light, unknown value(maybe a raw ambient value ?)
              EV3_COLOR_COLOR_COMPONENTS- red reflected light, green reflected light, blue reflected light, unknown value(maybe a raw value ?)
              EV3_INFRARED_SEEK---------- a list for each of the four channels.For each channel heading(-25 to 25), distance(-128 or 0 to 100)
              EV3_INFRARED_REMOTE-------- a list for each of the four channels.For each channel red up, red down, blue up, blue down, boadcast
            </summary>
            <param name="port">The sensor port(one at a time). Port 1, 2, 3, or 4</param>
            <returns>Returns the value(s) for the specified sensor.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetSensorType(System.Byte,Iot.Device.BrickPi3.Models.SensorType,System.Int32[])">
            <summary>
            Set the sensor type
            </summary>
            <param name="port">The sensor port(s). Port 1, 2, 3, and/or 4</param>
            <param name="type">The sensor type</param>
            <param name="param">param is used only for some sensors and can be ignore for the others
            param is used for the following sensor types:
              CUSTOM-- a 16 - bit integer used to configure the hardware.
              I2C-- a list of settings:
                param[0]-- Settings / flags
                param[1] -- target Speed in microseconds(0-255). Realistically the speed will vary.
                if SENSOR_I2C_SETTINGS_SAME flag set in I2C Settings:
                   param[2] -- Delay in microseconds between transactions.
                   param[3] -- Address
                   param[4] -- List of bytes to write
                   param[5] -- Number of bytes to read
            </param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorPower(System.Byte,System.Int32)">
            <summary>
            Set the motor power in percent
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="powerPercent">The power from - 100 to 100, or -128 for float</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorPosition(System.Byte,System.Int32)">
            <summary>
            Set the motor target position in degrees
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="positionDegree">The target position in degree</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorPositionKP(System.Byte,System.Byte)">
            <summary>
            Set the motor target position KP constant
            If you set KP higher, the motor will be more responsive to errors in position, at the cost of perhaps overshooting and oscillating.
            KP slows down the motor as it approaches the target, and helps to prevent overshoot.
            In general, if you increase KP, you should also increase KD to keep the motor from overshooting and oscillating.
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="kp">The KP constant (default 25)</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorPositionKD(System.Byte,System.Byte)">
            <summary>
            Set the motor target position KD constant
            If you set KP higher, the motor will be more responsive to errors in position, at the cost of perhaps overshooting and oscillating.
            KD slows down the motor as it approaches the target, and helps to prevent overshoot.
            In general, if you increase kp, you should also increase KD to keep the motor from overshooting and oscillating.
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="kd">The KD constant (default 70)</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorDps(System.Byte,System.Int32)">
            <summary>
            Set the motor target speed in degrees per second
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="dps">The target speed in degrees per second</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.SetMotorLimits(System.Byte,System.Byte,System.Int32)">
            <summary>
            Set the motor speed limit
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="powerPercent">The power limit in percent (0 to 100), with 0 being no limit (100)</param>
            <param name="dps">The speed limit in degrees per second, with 0 being no limit</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetMotorStatus(System.Byte)">
            <summary>
            Read a motor status
            </summary>
            <param name="port">The motor port (one at a time). PortA, PortB, PortC, or PortD.</param>
            <returns>MotorStatus containing the status of the motor</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.OffsetMotorEncoder(System.Byte,System.Int32)">
            <summary>
            Offset a motor encoder
            </summary>
            <param name="port">The Motor port(s). PortA, PortB, PortC, and/or PortD.</param>
            <param name="positionOffset">The encoder offset. Zero the encoder by offsetting it by the current position</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Brick.GetMotorEncoder(System.Byte)">
            <summary>
            Read a motor encoder in degrees
            </summary>
            <param name="port">The motor port (one at a time). PortA, PortB, PortC, or PortD.</param>
            <returns>Returns the encoder position in degrees</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.BrickPiInfo">
            <summary>
            Class containing the board information
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Models.BrickPiInfo.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Instantiate BrickPiInfo object
            <param name="manufacturer">Manufacturer information</param>
            <param name="board">Board information</param>
            <param name="hardwareVersion">Hardware version</param>
            <param name="softwareVersion">Software version</param>
            <param name="id">Id of the brick, can be 1 to 255</param>
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiInfo.Manufacturer">
            <summary>
            Manufacturer information
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiInfo.Board">
            <summary>
            Board information
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiInfo.HardwareVersion">
            <summary>
            Hardware version
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiInfo.SoftwareVersion">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiInfo.Id">
            <summary>
            Id of the brick, can be 1 to 255
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Models.BrickPiInfo.GetHardwareVersion">
            <summary>
            Get the Hardware version as an int array
            </summary>
            <returns>Returns an int array of the hardware version</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Models.BrickPiInfo.GetSoftwareVersion">
            <summary>
            Get the firmware version as an int array
            </summary>
            <returns>Returns an int array of the firmware version</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.BrickPiVoltage">
            <summary>
            Information on brick voltage
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiVoltage.Voltage3V3">
            <summary>
            The exact value of the 3.3V voltage
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiVoltage.Voltage5V">
            <summary>
            The exact value of the 5V voltage
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiVoltage.Voltage9V">
            <summary>
            The exact value of the 9V voltage
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.BrickPiVoltage.VoltageBattery">
            <summary>
            The voltage of the input battery/Vcc
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.MotorPort">
            <summary>
            Port used to select the ports for motors
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorPort.PortA">
            <summary>Port A</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorPort.PortB">
            <summary>Port B</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorPort.PortC">
            <summary>Port C</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorPort.PortD">
            <summary>Port D</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.BrickPortMotor">
            <summary>
            Port used to select the ports for motors
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.BrickPortMotor.PortA">
            <summary>Port A</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.BrickPortMotor.PortB">
            <summary>Port B</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.BrickPortMotor.PortC">
            <summary>Port C</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.BrickPortMotor.PortD">
            <summary>Port D</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.MotorStatusFlags">
            <summary>
            Flags indicating motor status
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorStatusFlags.AllOk">
            <summary></summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorStatusFlags.LowVoltageFloat">
            <summary>LOW_VOLTAGE_FLOAT - The motors are automatically disabled because the battery voltage is too low</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorStatusFlags.Overloaded">
            <summary>OVERLOADED - The motors aren't close to the target (applies to position control and dps speed control).</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.MotorStatus">
            <summary>
            Get the full status of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.MotorStatus.Flags">
            <summary>
            Status of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.MotorStatus.Speed">
            <summary>
            Speed of the motor from -255 to 255
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.MotorStatus.Encoder">
            <summary>
            Encoder of the motor, the position of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Models.MotorStatus.Dps">
            <summary>
            Degree per second of rotation for the motor
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.MotorSpeed">
            <summary>
            Set quickly a speed for the motor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorSpeed.Stop">
            <summary>Stop</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorSpeed.Full">
            <summary>Full speed</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorSpeed.Half">
            <summary>Half speed</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.MotorSpeed.Float">
            <summary>Float motor</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SensorPort">
            <summary>
            Sensor ports 1, 2, 3 and 4
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorPort.Port1">
            <summary>Port 1</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorPort.Port2">
            <summary>Port 2</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorPort.Port3">
            <summary>Port 3</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorPort.Port4">
            <summary>Port 4</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SensorI2CSettings">
            <summary>
            Sensor I2C settings
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorI2CSettings.MidClock">
            <summary>Send the clock pulse between reading and writing. Required by the NXT US sensor.</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorI2CSettings.Pin1_9V">
            <summary>9v pullup on pin 1</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorI2CSettings.Same">
            <summary>Keep performing the same transaction e.g. keep polling a sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorI2CSettings.AllowStretchAck">
            <summary>Allow ACK stretching</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorI2CSettings.AllowStretchAny">
            <summary>Allow any stretching</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SensorType">
            <summary>
            All type of supported sensors
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.I2C">
            <summary>I2C sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.Custom">
            <summary>Custom sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.Touch">
            <summary>Touch sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTTouch">
            <summary>NXT touch sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3Touch">
            <summary>EV3 touch sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTLightOn">
            <summary>NXT light on sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTLightOff">
            <summary>NXT light off sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTColorRed">
            <summary>NXT color red sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTColorGreen">
            <summary>NXT color green sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTColorBlue">
            <summary>NXT color blue sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTColorFull">
            <summary>NXT color full sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTColorOff">
            <summary>NXT color off sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.NXTUltrasonic">
            <summary>NXT ultrasonic sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3GyroAbs">
            <summary>EV3 gyro - absolute angular speed sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3GyroDps">
            <summary>EV3 gyro - angular speed sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3GyroAbsDps">
            <summary>EV3 gyro - absolute angular speed sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3ColorReflected">
            <summary>EV3 color reflected sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3ColorAmbient">
            <summary>EV3 color ambient sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3ColorColor">
            <summary>EV3 color sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3ColorRawReflected">
            <summary>EV3 color raw reflected sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3ColorColorComponents">
            <summary>EV3 color components sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3UltrasonicCentimeter">
            <summary>EV3 ultrasonic centimeter sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3UltrasonicInches">
            <summary>EV3 ultrasonic inches sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3UltrasonicListen">
            <summary>EV3 ultrasonic listen sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3InfraredProximity">
            <summary>EV3 infrared proximity sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3InfraredSeek">
            <summary>EV3 infrared seek sensor</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorType.EV3InfraredRemote">
            <summary>EV3 infrared remote sensor</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SensorState">
            <summary>
            Maind state for data when returned by any of the get_ function
            Used internally by the brick engine
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorState.ValidData">
            <summary>Valid data</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorState.NotConfigured">
            <summary>Not configured</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorState.Configuring">
            <summary>Configuring</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorState.NoData">
            <summary>No data</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorState.I2CError">
            <summary>I2C error</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SensorCustom">
            <summary>
            Flags for use with SENSOR_TYPE.CUSTOM
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin1_9V">
            <summary>Enable 9V out on pin 1 (for LEGO NXT Ultrasonic sensor).</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin5_Out">
            <summary>Set pin 5 state to output.Pin 5 will be set to input if this flag is not set.</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin5_State">
            <summary>
            If PIN5_OUT is set, this will set the state to output high, otherwise the state will
            be output low. If PIN5_OUT is not set, this flag has no effect.
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin6_Out">
            <summary>Set pin 6 state to output. Pin 6 will be set to input if this flag is not set.</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin6_State">
            <summary>
            If PIN6_OUT is set, this will set the state to output high, otherwise the state will
            be output low. If PIN6_OUT is not set, this flag has no effect.
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin1_ADC">
            <summary>Enable the analog/digital converter on pin 1 (e.g. for NXT analog sensors).</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SensorCustom.Pin6_ADC">
            <summary>Enable the analog/digital converter on pin 6.</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Models.SpiMessageType">
            <summary>
            All the supported SPI messages
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetManufacturer">
            <summary>Get manufacturer</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetName">
            <summary>Get name</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetHardwareVersion">
            <summary>Get hardware version</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetFirmwareVersion">
            <summary>Get firmware version</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetId">
            <summary>Get identifier</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetLed">
            <summary>Set LED</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetVoltage3V3">
            <summary>Get Voltage (3.3V)</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetVoltage5V">
            <summary>Get Voltage (5V)</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetVoltage9V">
            <summary>Get Voltage (9V)</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetVoltageVcc">
            <summary>Get Voltage (Vcc)</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetAddress">
            <summary>Set address</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetSensorType">
            <summary>Get sensor type</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetSensor1">
            <summary>Get sensor 1</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetSensor2">
            <summary>Get sensor 2</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetSensor3">
            <summary>Get sensor 3</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetSensor4">
            <summary>Get sensor 4</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.I2CTransact1">
            <summary>I2C transaction 1</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.I2CTransact2">
            <summary>I2C transaction 2</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.I2CTransact3">
            <summary>I2C transaction 3</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.I2CTransact4">
            <summary>I2C transaction 4</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorPower">
            <summary>Set motor power</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorPosition">
            <summary>Set motor position</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorPositionKP">
            <summary>Set proportional factor (KP) of motor position controller</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorPositionKD">
            <summary>Set derivative factor (KD) of motor position controller</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorDps">
            <summary>Set motor angular speed (degrees per second)</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorDpsKP">
            <summary>Set proportional factor (KP) of motor angular speed controller</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorDpsKD">
            <summary>Set derivative factor (KD) of motor angular speed controller</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.SetMotorLimits">
            <summary>Set motor limits</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.OffsetMotorEncoder">
            <summary>Offset motor encoder</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorAEncoder">
            <summary>Get encoder of motor A</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorBEncoder">
            <summary>Get encoder of motor B</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorCEncoder">
            <summary>Get encoder of motor C</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorDEncoder">
            <summary>Get encoder of motor D</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorAStatus">
            <summary>Get status of motor A</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorBStatus">
            <summary>Get status of motor B</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorCStatus">
            <summary>Get status of motor C</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Models.SpiMessageType.GetMotorDStatus">
            <summary>Get status of motor D</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Extensions.EnumExtensions">
            <summary>
            Extensions to get next or previous enum
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Movement.Polarity">
            <summary>
            Polarity of the motor
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Movement.Motor">
            <summary>
            This class contains a motor object and all needed functions and properties to pilot it
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.BrickPortMotor)">
            <summary>
            Create a motor
            </summary>
            <param name="brick">The brick controlling the motor</param>
            <param name="port">Motor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.BrickPortMotor,System.Int32)">
            <summary>
            Create a motor
            </summary>
            <param name="brick">The brick controlling the motor</param>
            <param name="port">Motor port</param>
            <param name="timeout">Timeout</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.SetSpeed(System.Int32)">
            <summary>
            Set the speed of the motor
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.SetTachoCount(System.Int32)">
            <summary>
            Set Tachometer encoder offset
            Use this to reset or setup a specific position
            </summary>
            <param name="position">New offset, 0 to reset</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.Stop">
            <summary>
            Stop the Motor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.Start">
            <summary>
            Start the motor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.Start(System.Int32)">
            <summary>
            Start with the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.SetPolarity(Iot.Device.BrickPi3.Movement.Polarity)">
            <summary>
            Change the polatity of the motor
            </summary>
            <param name="polarity">Polarity of the motor, backward, forward or opposite</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.GetTachoCount">
            <summary>
            Gets the tacho count
            </summary>
            <returns>The tacho count in 0.5 of degrees</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.GetSpeed">
            <summary>
            Get the speed
            </summary>
            <returns>speed is between -255 and +255</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Motor.Speed">
            <summary>
            Set or read the speed of the motor
            speed is between -255 and +255
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Motor.Port">
            <summary>
            Motor port
            </summary>
            <value></value>
        </member>
        <member name="E:Iot.Device.BrickPi3.Movement.Motor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Motor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Motor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Motor.TachoCount">
            <summary>
            Tacho count as a property, events are rasied when value is changing
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Movement.Vehicle">
            <summary>
            Represents BrickPi Vehicle
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.BrickPortMotor,Iot.Device.BrickPi3.Models.BrickPortMotor)">
            <summary>
            Create a vehicule with 2 motors, one left and one right
            </summary>
            <param name="brick">The main brick controlling the motor</param>
            <param name="left">Motor port for left motor</param>
            <param name="right">Motor port for right motor</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.Backward(System.Int32)">
            <summary>
            Run backward at the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.Forward(System.Int32)">
            <summary>
            Run forward at the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.TurnLeft(System.Int32,System.Int32)">
            <summary>
            Turn the vehicule left by the specified number of degrees for each motor. So 360 will do 1 motor turn.
            You need to do some math to have the actual vehicule turning fully at 360. It depends of the reduction used.
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="degrees">degrees to turn each motor</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.TurnRight(System.Int32,System.Int32)">
            <summary>
            Turn the vehicule right by the specified number of degrees for each motor. So 360 will do 1 motor turn.
            You need to do some math to have the actual vehicule turning fully at 360. It depends of the reduction used.
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="degrees">degrees to turn each motor</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.TrunLeftTime(System.Int32,System.Int32)">
            <summary>
            Turn the vehicule left for a number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.TrunRightTime(System.Int32,System.Int32)">
            <summary>
            Turn the vehicule right for a number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.Stop">
            <summary>
            Stop the vehicule
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.Backward(System.Int32,System.Int32)">
            <summary>
            Run backward for the specified number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.Foreward(System.Int32,System.Int32)">
            <summary>
            Run forward for the specified number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Vehicle.PortLeft">
            <summary>
            Return the BrickPortMotor of the left motor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Vehicle.PortRight">
            <summary>
            Return the BrickPortMotor of the right motor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Movement.Vehicle.DirectionOpposite">
            <summary>
            Is the vehicule has inverted direction, then true
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Movement.Vehicle.IsRunning">
            <summary>
            Return true if the vehicule is moving
            </summary>
            <returns>true if vehicule moving</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.EV3ColorSensor">
            <summary>
            Create a EV3 Color sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize an EV3 Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.ColorSensorMode)">
            <summary>
            Initialize an EV3 Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Color mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.ColorSensorMode,System.Int32)">
            <summary>
            Initilaize an EV3 Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Color mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ColorMode">
            <summary>
            Set or get the color mode
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ReadRaw">
            <summary>
            Get the raw value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.Read">
            <summary>
            Read the intensity of the reflected or ambient light in percent. In color mode the color index is returned
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ReadTest">
            <summary>
            Read the test value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ReadAsString">
            <summary>
            Get the color as a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ReadColor">
            <summary>
            Reads the color.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.ReadRGBColor">
            <summary>
            Reads the color of the RGB.
            </summary>
            <returns>The RGB color.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.NumberOfModes">
            <summary>
            Number of modes
            </summary>
            <returns>Number of modes supported</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3ColorSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.GyroMode">
            <summary>
            Sensor modes when using a EV3 Gyro sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.GyroMode.Angle">
            <summary>
            Result will be in degrees
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.GyroMode.AngularVelocity">
            <summary>
            Result will be in degrees per second
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.EV3GyroSensor">
            <summary>
            Create a EV3 Gyro sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize an EV3 Gyro Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.GyroMode)">
            <summary>
            Initialize an EV3 Gyro Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Gyro mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.GyroMode,System.Int32)">
            <summary>
            Initialize an EV3 Gyro Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Gyro mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.Mode">
            <summary>
            Gets or sets the Gyro mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.Reset">
            <summary>
            Reset the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.RotationCount">
            <summary>
            Get the number of rotations (a rotation is 360 degrees) - only makes sense when in angle mode
            </summary>
            <returns>The number of rotations</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.Read">
            <summary>
            Read the gyro sensor value. The returned value depends on the mode.
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.ReadRaw">
            <summary>
            Read the sensor value
            </summary>
            <returns>Value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3GyroSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.IRChannel">
            <summary>
            IR channels
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.IRMode">
            <summary>
            Sensor mode when using a EV3 IR Sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.IRMode.Proximity">
            <summary>
            Use the IR sensor as a distance sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.IRMode.Seek">
            <summary>
            Use the IR sensor to detect the location of the IR Remote
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.IRMode.Remote">
            <summary>
            Use the IR sensor to detect wich Buttons where pressed on the IR Remote
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.BeaconLocation">
            <summary>
            Class for IR beacon location.
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.BeaconLocation.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IR beacon location class.
            </summary>
            <param name="location">Location.</param>
            <param name="distance">Distance.</param>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.BeaconLocation.Location">
            <summary>
            Gets the location of the beacon ranging from minus to plus increasing clockwise when pointing towards the beacon
            </summary>
            <value>The location of the beacon.</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.BeaconLocation.Distance">
            <summary>
            Gets the distance of the beacon in CM (0-100)
            </summary>
            <value>The distance to the beacon.</value>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor">
            <summary>
            Create a EV3 Infrared Sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize an EV3 IR Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.IRMode)">
            <summary>
            Initializes an EV3 IS Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">IR mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.IRMode,System.Int32)">
            <summary>
            Initialize an EV3 IR Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">IR mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.Mode">
            <summary>
            Gets or sets the IR mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.Read">
            <summary>
            Read the sensor value. The returned value depends on the mode. Distance in proximity mode.
            Remote command number in remote mode. Beacon location in seek mode.
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ReadRaw">
            <summary>
            Read the sensor value
            </summary>
            <returns>Value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ReadDistance">
            <summary>
            Read the distance of the sensor in CM (0-100). This will change mode to proximity
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ReadRemoteCommand">
            <summary>
            Reads commands from the IR-Remote. This will change mode to remote
            </summary>
            <returns>The remote command.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.ReadBeaconLocation">
            <summary>
            Gets the beacon location. This will change the mode to seek
            </summary>
            <returns>The beacon location.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.Channel">
            <summary>
            Gets or sets the IR channel used for reading remote commands or beacon location
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3InfraredSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.EV3TouchSensor">
            <summary>
            Create e EV3 Touch sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialise an EV3 Touch sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,System.Int32)">
            <summary>
            Initialize an EV3 Touch Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.IsPressed">
            <summary>
            Determines whether the touch sensor is pressed.
            </summary>
            <returns><c>true</c> if the sensor is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.ReadRaw">
            <summary>
            Reads the raw sensor value
            </summary>
            <returns>The raw.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.Port">
            <summary>
            Return port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3TouchSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor">
            <summary>
            Create a EV3 Ultrasound sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize an EV3 Ulrasonic sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.UltraSonicMode)">
            <summary>
            Initialize an EV3 Ultrasonic sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor mode</param>
            <param name="usmode">Ultrasonic mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.UltraSonicMode,System.Int32)">
            <summary>
            Initialize an EV3 Ultrasonic Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="usmode">Ultrasonic mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.Mode">
            <summary>
            Gets or sets the Gyro mode.
            </summary>
            <value>The mode.</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.Read">
            <summary>
            Read the sensor value. Result depends on the mode
            </summary>
            <returns>Value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.ReadRaw">
            <summary>
            Read the sensor value
            </summary>
            <returns>Value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.EV3UltraSonicSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.ISensor">
            <summary>
            Interface for a sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.ISensor.Value">
            <summary>
            Property to return the raw value of the sensor as an int
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.ISensor.ValueAsString">
            <summary>
            Property to return the raw value of the sensort as a string
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.UpdateSensor(System.Object)">
            <summary>
            To update sensors
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>
            The value as a string
            </returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.ReadRaw">
            <summary>
            Reads the sensor values as a raw int value
            </summary>
            <returns>The value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.GetSensorName">
            <summary>
            Gets the name of the sensor.
            </summary>
            <returns>The sensor name.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.SelectNextMode">
            <summary>
            Selects the next mode.
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.SelectPreviousMode">
            <summary>
            Selects the previous mode.
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.NumberOfModes">
            <summary>
            Numbers the of modes.
            </summary>
            <returns>The number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.ISensor.SelectedMode">
            <summary>
            Returned the name of the selectd mode
            </summary>
            <returns>The mode.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.ISensor.Port">
            <summary>
            Sensor port
            </summary>
            <returns>The sensor port</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.ColorSensorMode">
            <summary>
            The color mode offered by the NXT Color sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.ColorSensorMode.Color">
            <summary>Color mode</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.ColorSensorMode.Reflection">
            <summary>Reflection mode</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.ColorSensorMode.Green">
            <summary>Green mode</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.ColorSensorMode.Blue">
            <summary>Blue mode</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.ColorSensorMode.Ambient">
            <summary>Ambient mode</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.Color">
            <summary>
            Colors that can be read from the color sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.None">
            <summary>No color was read</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Black">
            <summary>Black</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Blue">
            <summary>Blue</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Green">
            <summary>Green</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Yellow">
            <summary>Yellow</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Red">
            <summary>Red</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.White">
            <summary>White</summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.Color.Brown">
            <summary>Brown</summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.RGBColor">
            <summary>
            Class that holds RGB colors
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.RGBColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RGBColor class.
            </summary>
            <param name='red'>Red value</param>
            <param name='green'>Green value</param>
            <param name='blue'>Blue value</param>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.RGBColor.Red">
            <summary>
            Gets the red value
            </summary>
            <value>The red value</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.RGBColor.Green">
            <summary>
            Gets the green value
            </summary>
            <value>The green value</value>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.RGBColor.Blue">
            <summary>
            Gets the blue value
            </summary>
            <value>The blue value</value>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.NXTColorSensor">
            <summary>
            Create a NXT Color sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize a NXT Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.ColorSensorMode)">
            <summary>
            Initialize a NXT Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Color mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.ColorSensorMode,System.Int32)">
            <summary>
            Initialize a NXT Color Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Color mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.NXTColorSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTColorSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTColorSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ColorMode">
            <summary>
            Color mode
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTColorSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ReadRaw">
            <summary>
            Reads raw value from the sensor
            </summary>
            <returns>Value read from the sensor</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.Read">
            <summary>
            Read the intensity of the reflected or ambient light in percent. In color mode the color index is returned
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ReadAsString">
            <summary>
            Reads value from sensor represented as string
            </summary>
            <returns>Sensor value as string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ReadColor">
            <summary>
            Reads the color.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.ReadRGBColor">
            <summary>
            Reads the color of the RGB.
            </summary>
            <returns>The RGB color.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTColorSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.LightMode">
            <summary>
            Sensor mode when using a NXT light sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.LightMode.Relection">
            <summary>
            Use the lgith sensor to read reflected light
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.LightMode.Ambient">
            <summary>
            Use the light sensor to detect the light intensity
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.NXTLightSensor">
            <summary>
            Create a NXT Light sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize a NXT Light Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.LightMode)">
            <summary>
            Initialize a NXT Light Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Light mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.LightMode,System.Int32)">
            <summary>
            Initialize a NXT Light Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="mode">Light mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.NXTLightSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.CutOff">
            <summary>
            This is used to change the level which indicate if the sensor
            is on something dark or clear
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.LightMode">
            <summary>
            Light mode
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTLightSensor.Port">
            <summary>
            Sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.ReadRaw">
            <summary>
            Reads raw data from the sensor
            </summary>
            <returns>Integer value read from the light sensor</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.ReadAsString">
            <summary>
            Reads data from the sensor and coverts it to string
            </summary>
            <returns>String value representing the reading</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTLightSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.NXTSoundSensor">
            <summary>
            Create a NXT Sound sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize a NXT Sound Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor Port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,System.Int32)">
            <summary>
            Initialize a NXT Sound Sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.ReadRaw">
            <summary>
            Reads the raw sensor value
            </summary>
            <returns>The raw.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.Port">
            <summary>
            Return port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTSoundSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.NXTTouchSensor">
            <summary>
            Create a NXT Touch sensor class
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize a new NXT Touch sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,System.Int32)">
            <summary>
            Initialize a new NXT Touch sensor
            </summary>
            <param name="brick">Interface to main Brick component</param>
            <param name="port">Sensor port</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.ReadAsString">
            <summary>
            Reads the sensor value as a string.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.IsPressed">
            <summary>
            Determines whether the touch sensor is pressed.
            </summary>
            <returns><c>true</c> if the sensor is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.ReadRaw">
            <summary>
            Reads the raw sensor value
            </summary>
            <returns>The raw.</returns>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.Port">
            <summary>
            Return port
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.NumberOfModes">
            <summary>
            Number of modes supported
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTTouchSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.UltraSonicMode">
            <summary>
            Sensor mode when using a Sonar sensor
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.UltraSonicMode.Centimeter">
            <summary>
            Result will be in centimeter
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.UltraSonicMode.Inch">
            <summary>
            Result will be in centi-inch
            </summary>
        </member>
        <member name="F:Iot.Device.BrickPi3.Sensors.UltraSonicMode.Listen">
            <summary>
            Sensor is in listen mode
            </summary>
        </member>
        <member name="T:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor">
            <summary>
            Create a NXT Utrasonic sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort)">
            <summary>
            Initialize a NXT Ultrasonic sensor
            </summary>
            <param name="brick">Interface to an instance of <see cref="T:Iot.Device.BrickPi3.Brick"/></param>
            <param name="port">Sensor port</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.UltraSonicMode)">
            <summary>
            Initialize a NXT Ultrasonic sensor
            </summary>
            <param name="brick">Interface to an instance of <see cref="T:Iot.Device.BrickPi3.Brick"/></param>
            <param name="port">Sensor port</param>
            <param name="mode">Ultrasonic mode</param>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.#ctor(Iot.Device.BrickPi3.Brick,Iot.Device.BrickPi3.Models.SensorPort,Iot.Device.BrickPi3.Sensors.UltraSonicMode,System.Int32)">
            <summary>
            Initialize a NXT Ultrasonic sensor
            </summary>
            <param name="brick">Interface to an instance of <see cref="T:Iot.Device.BrickPi3.Brick"/></param>
            <param name="port">Sensor port</param>
            <param name="mode">Ultrasonic mode</param>
            <param name="timeout">Period in millisecond to check sensor value changes</param>
        </member>
        <member name="E:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.PropertyChanged">
            <summary>
            To notify a property has changed. The minimum time can be set up
            with timeout property
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.Port">
            <summary>
            Gets sensor port
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.ValueAsString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.Mode">
            <summary>
            Gets or sets the sonar mode.
            </summary>
            <value>
            The sonar mode
            </value>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.GetSensorName">
            <summary>
            Gets sensor name
            </summary>
            <returns>Sensor name</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.ReadAsString">
            <summary>
            Reads distance as string
            </summary>
            <returns>String representing distance with units</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.ReadDistance">
            <summary>
            Read the distance in either centiinches or centimeter
            </summary>
            <returns>Distance as a float</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.ReadRaw">
            <summary>
            The raw value from the sensor
            </summary>
            <returns>Value as a int</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.SelectNextMode">
            <summary>
            Moves to next mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.SelectPreviousMode">
            <summary>
            Moves to previous mode
            </summary>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.NumberOfModes">
            <summary>
            Number of supported modes
            </summary>
            <returns>Number of modes</returns>
        </member>
        <member name="M:Iot.Device.BrickPi3.Sensors.NXTUltraSonicSensor.SelectedMode">
            <summary>
            Selected mode
            </summary>
            <returns>String representing selected mode</returns>
        </member>
        <member name="T:Iot.Device.BuildHat.Brick">
            <summary>
            The main Brick class allowing low level access to motors and sensors
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.IsActiveSensor(Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Checks if the sensor is an active one.
            </summary>
            <param name="sensorType">The sensor type.</param>
            <returns>True if active</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.IsMotor(Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Checks if the sensor is a motor.
            </summary>
            <param name="sensorType">The sensor type.</param>
            <returns>True if it's a motor.</returns>
        </member>
        <member name="E:Iot.Device.BuildHat.Brick.PowerFault">
            <summary>
            Events raised in case of power fault.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.#ctor(System.IO.Ports.SerialPort,System.Device.Gpio.GpioController,System.Int32,System.Boolean)">
            <summary>
            Creates a Brick with a serial port
            </summary>
            <param name="port">The serial port</param>
            <param name="controller">A GPIO Controller.</param>
            <param name="reset">The rest pin.</param>
            <param name="shouldDispose">True to dispose the GPIO Controller.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.#ctor(System.String,System.Device.Gpio.GpioController,System.Int32,System.Boolean)">
            <summary>
            Creates a Brick with a serial port.
            </summary>
            <param name="port">The serial port name.</param>
            <param name="controller">A GPIO Controller.</param>
            <param name="reset">The rest pin.</param>
            <param name="shouldDispose">True to dispose the GPIO Controller.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.#ctor">
            <summary>
            This is used in the tests only
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Brick.BuildHatInformation">
            <summary>
            Gets the Build Hat information.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Brick.LedMode">
            <summary>
            Gets or sets the led mode.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Brick.InputVoltage">
            <summary>
            Gets the input voltage.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.GetSensorType(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Gets the sensor type connected at a specific port.
            </summary>
            <param name="port">The port to check.</param>
            <returns>The sensor type connected.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.GetMotor(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Gets the attached motor to a port.
            </summary>
            <param name="port">The port.</param>
            <returns>A motor.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SetMotorPower(Iot.Device.BuildHat.Models.SensorPort,System.Int32)">
            <summary>
            Set the motor power in percent
            </summary>
            <param name="port">The Motor port.</param>
            <param name="powerPercent">The power from - 100 to 100</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SetMotorLimits(Iot.Device.BuildHat.Models.SensorPort,System.Double)">
            <summary>
            Set the motor speed limit
            </summary>
            <param name="port">The Motor port.</param>
            <param name="powerLimit">The power limit between 0 and 1.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SetMotorBias(Iot.Device.BuildHat.Models.SensorPort,System.Double)">
            <summary>
            Set the motor bias
            </summary>
            <param name="port">The Motor port.</param>
            <param name="bias">The bias between 0 and 1.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.MoveMotorForSeconds(Iot.Device.BuildHat.Models.SensorPort,System.Double,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run the specified motors for an amount of seconds.
            </summary>
            <param name="port">The Motor port</param>
            <param name="seconds">The amount of seconds.</param>
            <param name="speed">>The speed from - 100 to 100.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
            <param name="token">A cancellation token.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.MoveMotorToAbsolutePosition(Iot.Device.BuildHat.Models.SensorPort,System.Int32,Iot.Device.BuildHat.Models.PositionWay,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run the motor to an absolute position.
            </summary>
            <param name="port">The port.</param>
            <param name="targetPosition">The target angle from -180 to +179.</param>
            <param name="way">The way to go to the position.</param>
            <param name="speed">The speed from - 100 to 100.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
            <param name="token">A cancellation token.</param>
            <exception cref="T:System.ArgumentException">Not a motor or not an active motor.</exception>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.MoveMotorToPosition(Iot.Device.BuildHat.Models.SensorPort,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run the motor to an absolute position.
            </summary>
            <param name="port">The port.</param>
            <param name="targetPosition">The target angle from -180 to +180.</param>
            <param name="speed">The speed from - 100 to 100.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
            <param name="token">A cancellation token.</param>
            <exception cref="T:System.ArgumentException">Not a motor or not an active motor.</exception>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.MoveMotorForDegrees(Iot.Device.BuildHat.Models.SensorPort,System.Int32,System.Int32,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Run the motor for a specific number of degrees.
            </summary>
            <param name="port">The port.</param>
            <param name="targetPosition">The target angle in degrees.</param>
            <param name="speed">The speed from - 100 to 100.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
            /// <param name="token">A cancellation token.</param>
            <exception cref="T:System.ArgumentException">Not a motor or not an active motor.</exception>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.FloatMotor(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Floats the motors and stop all constrains on it.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SelectModeAndRead(Iot.Device.BuildHat.Models.SensorPort,System.Int32,System.Boolean)">
            <summary>
            Select modes on a specific port. This is only possible on active sensors and motors.
            </summary>
            <param name="port">The port.</param>
            <param name="mode">The modes.</param>
            <param name="readOnce">True to read the sensor once or false to have continuous reading enabled.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SelectCombiModesAndRead(Iot.Device.BuildHat.Models.SensorPort,System.Int32[],System.Boolean)">
            <summary>
            Select modes on a specific port. This is only possible on active sensors and motors.
            </summary>
            <param name="port">The port.</param>
            <param name="modes">The modes.</param>
            <param name="readOnce">True to read the sensor once or false to have continuous reading enabled.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.StopContinuousReadingSensor(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Stop reading continuous data from a specific sensor.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SwitchSensorOn(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Switches a sensor on.
            </summary>
            <param name="port">The port.</param>
            <remarks>In case of a motor, this will switch the motor on full speed.</remarks>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SwitchSensorOff(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Switches a sensor off.
            </summary>
            <param name="port">The port.</param>
            <remarks>In case of a motor, this will switch off the motor.</remarks>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.GetSensor(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Gets the sensor connected.
            </summary>
            <param name="port">The port.</param>
            <returns>A sensor.</returns>
            <exception cref="T:System.Exception">A motor or no sensor is connected</exception>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.GetActiveSensor(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Gets the sensor connected.
            </summary>
            <param name="port">The port.</param>
            <returns>A sensor.</returns>
            <exception cref="T:System.Exception">A motor or no sensor is connected</exception>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.WriteBytesToSensor(Iot.Device.BuildHat.Models.SensorPort,System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Writes directly to the sensor. The bytes to the current port, the first one or two bytes being header bytes. The message is padded if
            necessary, and length and checksum fields are automatically populated.
            </summary>
            <param name="port">The port.</param>
            <param name="data">The buffer to send.</param>
            <param name="singleHeader">True for single header byte.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.SendRawCommand(System.String)">
            <summary>
            Send a raw command. This can be used for specific sensors or setup sensors.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.WaitForSensorToConnect(Iot.Device.BuildHat.Models.SensorPort,System.Threading.CancellationToken)">
            <summary>
            Wait to get a sensor connected on a specific port.
            </summary>
            <param name="port">The port.</param>
            <param name="token">A cancellatin token</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.ClearFaults">
            <summary>
            Clears any fault.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Brick.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.BuildHat.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Resource.firmware">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Resource.signature">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Resource.version">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.BuildHatInformation">
            <summary>
            Class containing the board information.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.BuildHatInformation.Version">
            <summary>
            Gets or sets the Version information.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.BuildHatInformation.Signature">
            <summary>
            Gets or sets the signature of the firmawre.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.BuildHatInformation.FirmwareDate">
            <summary>
            Gets or sets the Firmware date.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Models.BuildHatInformation.#ctor(System.String,System.Byte[],System.DateTimeOffset)">
            <summary>
            Create a BuildHat information class.
            </summary>
            <param name="version">The version.</param>
            <param name="signature">The signature.</param>
            <param name="firmwareDate">The firmware date.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.CombiModes">
            <summary>
            A combi mode is a list of available modes
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.CombiModes.Number">
            <summary>
            Gets or sets the combi number
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.CombiModes.Modes">
            <summary>
            Gets or sets a mode
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.LedColor">
            <summary>
            The led colors used with any of the color elements.
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Off">
            <summary>Off</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Black">
            <summary>Black</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Brown">
            <summary>Brown</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Magenta">
            <summary>Magenta</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Blue">
            <summary>Blue</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Cyan">
            <summary>Cyan</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.PaleGreen">
            <summary>Pale Green</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Green">
            <summary>Green</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Yellow">
            <summary>Yellow</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Orange">
            <summary>Orange</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.Red">
            <summary>Red</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedColor.White">
            <summary>White</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.LedMode">
            <summary>
            Led mode for the leds on the Build HAT.
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedMode.VoltageDependant">
            <summary>LEDs lit depend on the voltage on the input power jack (default)</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedMode.Off">
            <summary>LEDs off</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedMode.Orange">
            <summary>Orange</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedMode.Green">
            <summary>Green</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.LedMode.Both">
            <summary>Orange and green together</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.MinimumMaximumValues">
            <summary>
            Minimum and maximum values for a specific mode type
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.MinimumMaximumValues.TypeValues">
            <summary>
            Type of values
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.MinimumMaximumValues.MinimumValue">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.MinimumMaximumValues.MaximumValue">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.ModeDetail">
            <summary>
            Mode details
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.Number">
            <summary>
            Gets the mode number.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.Name">
            <summary>
            Gets the name of the mode
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.Unit">
            <summary>
            Gets the unit of the mode.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.NumberOfDataItems">
            <summary>
            Gets the number of data items.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.DataType">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.NumberOfCharsToDisplay">
            <summary>
            Gets the number of chars to display the value
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.NumberOfData">
            <summary>
            Gets the number of data in the mode
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.DecimalPrecision">
            <summary>
            Gets the decimal preciion (for float, 0 oterhwise)
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.ModeDetail.MinimumMaximumValues">
            <summary>
            Gets the minimum and maximum values for the mode
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.PositionWay">
            <summary>
            When running a motor to a position, the way to go.
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.PositionWay.Shortest">
            <summary>Shortest way</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.PositionWay.Clockwise">
            <summary>Clockwise way</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.PositionWay.AntiClockwise">
            <summary>Anti clockwise way</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.RecommendedPid">
            <summary>
            Recommended PID settings
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.RecommendedPid.Pid1">
            <summary>
            Gets or sets the PID1
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.RecommendedPid.Pid2">
            <summary>
            Gets or sets the PID2
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.RecommendedPid.Pid3">
            <summary>
            Gets or sets the PID4
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Models.RecommendedPid.Pid4">
            <summary>
            Gets or sets the PID5
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.SensorPort">
            <summary>
            Sensor ports 1, 2, 3 and 4
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorPort.PortA">
            <summary>Port A</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorPort.PortB">
            <summary>Port B</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorPort.PortC">
            <summary>Port C</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorPort.PortD">
            <summary>Port D</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.SensorType">
            <summary>
            All type of supported sensors
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SystemMediumMotor">
            <summary>System medium motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SystemTrainMotor">
            <summary>System train motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SystemTurntableMotor">
            <summary>System turntable motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.GeneralPwm">
            <summary>General PWM/third party</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.ButtonOrTouchSensor">
            <summary>Button/touch sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicLargeMotor">
            <summary>Technic large motor (some have active ID)</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicXLMotor">
            <summary>Technic XL motor (some have active ID)</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SimpleLights">
            <summary>Simple lights</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.FutureLights1">
            <summary>Future lights 1</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.FutureLights2">
            <summary>Future lights 2</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SystemFutureActuator">
            <summary>System future actuator (train points)</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.WeDoTiltSensor">
            <summary>WeDo tilt sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.WeDoDistanceSensor">
            <summary>Wido motion sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.ColourAndDistanceSensor">
            <summary>Colour and distance sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.MediumLinearMotor">
            <summary>Medium linear motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicLargeMotorId">
            <summary>Technic large motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicXLMotorId">
            <summary>Technic XL motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikePrimeMediumMotor">
            <summary>SPIKE Prime medium motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikePrimeLargeMotor">
            <summary>SPIKE Prime large motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikePrimeColorSensor">
            <summary>SPIKE Prime colour sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikePrimeUltrasonicDistanceSensor">
            <summary>SPIKE Prime ultrasonic distance sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikePrimeForceSensor">
            <summary>SPIKE Prime force sensor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikeEssential3x3ColorLightMatrix">
            <summary>SPIKE Essential 3x3 colour light matrix</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.SpikeEssentialSmallAngularMotor">
            <summary>SPIKE Essential small angular motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicMediumAngularMotor">
            <summary>Technic medium motor</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.SensorType.TechnicMotor">
            <summary>Techni motor</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Models.TypeValues">
            <summary>
            The type of values for each mode
            </summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.TypeValues.Raw">
            <summary>Raw values</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.TypeValues.Percent">
            <summary>Percent values</summary>
        </member>
        <member name="F:Iot.Device.BuildHat.Models.TypeValues.Signal">
            <summary>Signal values</summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Motors.ActiveMotor">
            <summary>
            Active motor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.ActiveMotor.TargetSpeed">
            <summary>
            Gets or sets the target speed
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.ActiveMotor.Speed">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.ActiveMotor.Position">
            <summary>
            Gets the current tachometer count.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.ActiveMotor.AbsolutePosition">
            <summary>
            Gets the current tachometer count.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.ActiveMotor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort,Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Creates an active motor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
            <param name="motorType">The active motor type.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.GetMotorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.GetSpeed">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.GetPosition">
            <summary>
            Gets the current tachometer count.
            </summary>
            <returns>The current tachometer count.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.GetAbsolutePosition">
            <summary>
            Gets the current absolute tachometer count.
            </summary>
            <returns>The current absolute tachometer count.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.SetSpeed(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.Start">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.Start(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.SetBias(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.SetPowerLimit(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.MoveToAbsolutePosition(System.Int32,Iot.Device.BuildHat.Models.PositionWay,System.Boolean)">
            <summary>
            Run the motor to an absolute position.
            </summary>
            <param name="targetPosition">The target angle from -180 to +180.</param>
            <param name="way">The way to go to the position.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.MoveForSeconds(System.Double,System.Boolean)">
            <summary>
            Run the specified motors for an amount of seconds.
            </summary>
            <param name="seconds">The amount of seconds.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.MoveToPosition(System.Int32,System.Boolean)">
            <summary>
            Run the motor to an absolute position.
            </summary>
            <param name="targetPosition">The target angle from -180 to +180.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.MoveForDegrees(System.Int32,System.Boolean)">
            <summary>
            Run the motor for a specific number of degrees.
            </summary>
            <param name="targetPosition">The target angle in degrees.</param>
            <param name="blocking">True to block the function and wait for the execution.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.ActiveMotor.Float">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.BuildHat.Motors.IMotor">
            <summary>
            Interface for a motor
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.SetSpeed(System.Int32)">
            <summary>
            Set the speed of the motor
            </summary>
            <param name="speed">speed is between -100 and +100</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.Stop">
            <summary>
            Stop the Motor
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.Start">
            <summary>
            Start the motor
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.Start(System.Int32)">
            <summary>
            Start with the specified speed
            </summary>
            <param name="speed">speed is between -100 and +100</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.GetSpeed">
            <summary>
            Get the speed
            </summary>
            <returns>speed is between -100 and +100</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.SetBias(System.Double)">
            <summary>
            Sets the bias of the motor.
            </summary>
            <param name="bias">Bias, must be between 0 and 1.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.SetPowerLimit(System.Double)">
            <summary>
            Sets the power consumption limit.
            </summary>
            <param name="plimit">The power consumption limit. Must be between 0 and 1.</param>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.IMotor.Speed">
            <summary>
            Gets the speed of the motor
            speed is between -100 and +100
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.IMotor.Port">
            <summary>
            Motor port
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.IMotor.SensorType">
            <summary>
            Motor type
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.GetMotorName">
            <summary>
            Gets the name of the sensor.
            </summary>
            <returns>The sensor name.</returns>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.IMotor.IsConnected">
            <summary>
            Gets true if the motor is connected.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.IMotor.Float">
            <summary>
            Floats the motor and stop all constraints on it.
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Motors.PassiveMotor">
            <summary>
            Creates a passive motor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.PassiveMotor.Speed">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort,Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Creates a passive motor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
            <param name="motorType">The active motor type.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.GetMotorName">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.BuildHat.Motors.PassiveMotor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.GetSpeed">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.SetBias(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.SetPowerLimit(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.SetSpeed(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.Start">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.Start(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.Stop">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Motors.PassiveMotor.Float">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ActiveSensor">
            <summary>
            Interface that all active elements implement
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.ValuesAsString">
            <summary>
            Property to return the raw value of the sensort as a string. It will contains as the first elements PxCy.
            x = the port number, y = 0 for continuous reading, 1 for single reading.
            The rest are the measures.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.BaudRate">
            <summary>
            Baud rate the sensor is connected
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.HardwareVersion">
            <summary>
            Hardware version
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.SoftwareVersion">
            <summary>
            Software version
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.CombiModes">
            <summary>
            Gets the possible combi modes. Note, is will be empty if none.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.ModeDetails">
            <summary>
            Gets the mode details of the sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.NumberOfModes">
            <summary>
            Numbers the of modes.
            </summary>
            <returns>The number of modes</returns>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.SpeedPid">
            <summary>
            Gets the recommended Speed PID settings
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.PositionPid">
            <summary>
            Gets the recommended Speed PID settings
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort,Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Creates an active element.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
            <param name="type">The sensor type.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.SelectCombiModesAndRead(System.Int32[],System.Boolean)">
            <summary>
            Returned the name of the selectd mode
            </summary>
            <param name="modes">The mode to select</param>
            <param name="once">True to read only once, false to set the continuous reading</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.SelectModeAndRead(System.Int32,System.Boolean)">
            <summary>
            Returned the name of the selectd mode
            </summary>
            <param name="mode">The mode to select</param>
            <param name="once">True to read only once, false to set the continuous reading</param>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ActiveSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.StopReading">
            <summary>
            Stop reading continuous data from a specific sensor.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.SwitchOn">
            <summary>
            Switches a sensor on.
            </summary>
            <remarks>In case of a motor, this will switch the motor on full speed.</remarks>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.SwitchOff(Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Switches a sensor off.
            </summary>
            <remarks>In case of a motor, this will switch off the motor.</remarks>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ActiveSensor.WriteBytes(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Writes directly to the sensor. The bytes to the current port, the first one or two bytes being header bytes. The message is padded if
            necessary, and length and checksum fields are automatically populated.
            </summary>
            <param name="data">The buffer to send.</param>
            <param name="singleHeader">True for single header byte.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ButtonSensor">
            <summary>
            A simple passive button.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ButtonSensor.IsPressed">
            <summary>
            Gets true when the button is pressed.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ButtonSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ButtonSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Button sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor">
            <summary>
            Color and distance sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.Distance">
            <summary>
            Gets the distance from the object
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.Counter">
            <summary>
            Gets the counter of cumulated object detected.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Creates a color and distance sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.GetDistance">
            <summary>
            Gets the distance of the object from 0 to +10 cm
            </summary>
            <returns>The distance from 0 to +10 cm.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorAndDistanceSensor.GetCounter">
            <summary>
            Gets the the counter of cumulated object detected.
            </summary>
            <returns>The counter.</returns>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ColorLightMatrix">
            <summary>
            SPIKE 3x3 color light matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorLightMatrix.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorLightMatrix.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Color light matrix.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorLightMatrix.DisplayProgressBar(System.Byte)">
            <summary>
            Displays a progress bar style from 0 to 9.
            </summary>
            <param name="progress">The progress bar from 0 to 9.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorLightMatrix.DisplayColor(Iot.Device.BuildHat.Models.LedColor)">
            <summary>
            Displays the 9 leds with the same color.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorLightMatrix.DisplayColorPerPixel(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{Iot.Device.BuildHat.Models.LedColor})">
            <summary>
            Displays each pixel with a color and brightness
            </summary>
            <param name="brightness">The brichtness from 0 (off) to 10 (full). Must be 9 elements.</param>
            <param name="colors">The color. Must be 9 elements.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ColorSensor">
            <summary>
            Color sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorSensor.Color">
            <summary>
            Gets the last measured Color
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorSensor.IsColorDetected">
            <summary>
            Gets true if a color is detected.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorSensor.ReflectedLight">
            <summary>
            Gets the reflected light.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorSensor.AmbiantLight">
            <summary>
            Gets the ambiant light.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ColorSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort,Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Creates a color sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
            <param name="type">The sensor type</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorSensor.GetColor">
            <summary>
            Gets the color, measure the nulmber of setup times.
            </summary>
            <returns>The color.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorSensor.GetReflectedLight">
            <summary>
            Gets the reflected component.
            </summary>
            <returns>The reflected component.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ColorSensor.GetAmbiantLight">
            <summary>
            Gets the ambiant light.
            </summary>
            <returns>The ambiant light.</returns>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.ForceSensor">
            <summary>
            Spike force sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ForceSensor.Force">
            <summary>
            Gets the force in Newtown.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ForceSensor.IsPressed">
            <summary>
            Gets the force in Newtown.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ForceSensor.ContinousMeasurement">
            <summary>
            Gets or sets the continuous measurement for this sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.ForceSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ForceSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Force sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ForceSensor.GetForce">
            <summary>
            Gets the force in N
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.ForceSensor.GetPressed">
            <summary>
            Gets if the sensor is pressed
            </summary>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.PassiveLight">
            <summary>
            A simple light like the train ones.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.PassiveLight.Brightness">
            <summary>
            Sets the brightness from 0 to 100.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.PassiveLight.SensorName">
            <summary>
            Gets the name of the sensor.
            </summary>
            <returns>The sensor name.</returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.PassiveLight.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            PAssive light.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.PassiveLight.SetBrightness(System.Int32)">
            <summary>
            Sets the brigthness from 0 to 100.
            </summary>
            <param name="brightness">The brightness from 0 to 100.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.PassiveLight.On">
            <summary>
            Switch on the light.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.PassiveLight.On(System.Int32)">
            <summary>
            Switches on the light with a specific brightness.
            </summary>
            <param name="brightness">The brightness from 0 to 100.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.PassiveLight.Off">
            <summary>
            Switechs off the light.
            </summary>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.Sensor">
            <summary>
            Interface for a sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.Sensor.IsConnected">
            <summary>
            Gets true if the sensor is connected.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.Sensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort,Iot.Device.BuildHat.Models.SensorType)">
            <summary>
            Creates a sensor
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
            <param name="type">The sensor type.</param>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.Sensor.SensorName">
            <summary>
            Gets the name of the sensor.
            </summary>
            <returns>The sensor name.</returns>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.Sensor.Port">
            <summary>
            Gets the Sensor port
            </summary>
            <returns>The sensor port</returns>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.Sensor.SensorType">
            <summary>
            Gets the sensor type
            </summary>
        </member>
        <member name="E:Iot.Device.BuildHat.Sensors.Sensor.PropertyChanged">
            <summary>
            To notify a property has changed. It means the value has changed.
            </summary>
        </member>
        <member name="E:Iot.Device.BuildHat.Sensors.Sensor.PropertyUpdated">
            <summary>
            To notify a property has been updated. It means the property has been updated regardeless of a change in its value.
            </summary>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.Sensor.OnPropertyChanged(System.String)">
            <summary>
            Raises the on property changed event.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.Sensor.OnPropertyUpdated(System.String)">
            <summary>
            Raises the on property updated event.
            </summary>
            <param name="name">The property name.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor">
            <summary>
            Spike distance sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.Distance">
            <summary>
            Gets the distance. A number is in millimeters.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.ContinousMeasurement">
            <summary>
            Gets or sets the continuous measurement for this sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            Ultrasonic distance sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.GetDistance">
            <summary>
            Gets the distance. From 0 to +10 cm.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.UltrasonicDistanceSensor.AdjustEyesBrightness(System.ReadOnlySpan{System.Byte})">
            <summary>
            Adjust the brightness of the eyes.
            </summary>
            <param name="eyes">The brighness percentage for each of the 4 leds from 0 to 100.</param>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor">
            <summary>
            WeDo distance sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor.Distance">
            <summary>
            Gets the distance. A number between 0 and 10 cm.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor.ContinousMeasurement">
            <summary>
            Gets or sets the continuous measurement for this sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            WeDo ditance sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.WeDoDistanceSensor.GetDistance">
            <summary>
            Gets the distance. From 0 to +10 cm.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.BuildHat.Sensors.WeDoTiltSensor">
            <summary>
            WeDO tilt sensor
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoTiltSensor.Tilt">
            <summary>
            Gets the tilt. It's an angle from -45 to +45
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoTiltSensor.ContinousMeasurement">
            <summary>
            Gets or sets the continuous measurement for this sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.BuildHat.Sensors.WeDoTiltSensor.SensorName">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.WeDoTiltSensor.#ctor(Iot.Device.BuildHat.Brick,Iot.Device.BuildHat.Models.SensorPort)">
            <summary>
            WeDo tilt sensor.
            </summary>
            <param name="brick">The brick.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Iot.Device.BuildHat.Sensors.WeDoTiltSensor.GetTilt">
            <summary>
            Gets the tilt
            </summary>
            <returns></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:Iot.Device.Button.ButtonBase">
            <summary>
            Base implementation of Button logic.
            Hardware independent. Inherit for specific hardware handling.
            </summary>
        </member>
        <member name="E:Iot.Device.Button.ButtonBase.ButtonUp">
            <summary>
            Delegate for button up event.
            </summary>
        </member>
        <member name="E:Iot.Device.Button.ButtonBase.ButtonDown">
            <summary>
            Delegate for button down event.
            </summary>
        </member>
        <member name="E:Iot.Device.Button.ButtonBase.Press">
            <summary>
            Delegate for button pressed event.
            </summary>
        </member>
        <member name="E:Iot.Device.Button.ButtonBase.DoublePress">
            <summary>
            Delegate for button double pressed event.
            </summary>
        </member>
        <member name="E:Iot.Device.Button.ButtonBase.Holding">
            <summary>
            Delegate for button holding event.
            </summary>
        </member>
        <member name="P:Iot.Device.Button.ButtonBase.IsHoldingEnabled">
            <summary>
            Define if holding event is enabled or disabled on the button.
            </summary>
        </member>
        <member name="P:Iot.Device.Button.ButtonBase.IsDoublePressEnabled">
            <summary>
            Define if double press event is enabled or disabled on the button.
            </summary>
        </member>
        <member name="P:Iot.Device.Button.ButtonBase.IsPressed">
            <summary>
            Define if single press event is enabled or disabled on the button.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.#ctor">
            <summary>
            Initialization of the button.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initialization of the button.
            </summary>
            <param name="doublePress">Max ticks between button presses to count as doublePress.</param>
            <param name="holding">Min ms a button is pressed to count as holding.</param>
            <param name="debounceTime">The amount of time during which the transitions are ignored, or zero</param>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.HandleButtonPressed">
            <summary>
            Handler for pressing the button.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.HandleButtonReleased">
            <summary>
            Handler for releasing the button.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.StartHoldingHandler(System.Object)">
            <summary>
            Handler for holding the button.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.Dispose(System.Boolean)">
            <summary>
            Cleanup resources.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="M:Iot.Device.Button.ButtonBase.Dispose">
            <summary>
            Public dispose method for IDisposable interface.
            </summary>
        </member>
        <member name="T:Iot.Device.Button.ButtonHoldingEventArgs">
            <summary>
            Button holding event arguments.
            </summary>
        </member>
        <member name="P:Iot.Device.Button.ButtonHoldingEventArgs.HoldingState">
            <summary>
            Button holding state.
            </summary>
        </member>
        <member name="T:Iot.Device.Button.ButtonHoldingState">
            <summary>
            The different states of a button that is being held.
            </summary>
        </member>
        <member name="F:Iot.Device.Button.ButtonHoldingState.Started">
            <summary>Button holding started.</summary>
        </member>
        <member name="F:Iot.Device.Button.ButtonHoldingState.Completed">
            <summary>Button holding completed.</summary>
        </member>
        <member name="F:Iot.Device.Button.ButtonHoldingState.Canceled">
            <summary>Button holding cancelled.</summary>
        </member>
        <member name="T:Iot.Device.Button.GpioButton">
            <summary>
            GPIO implementation of Button.
            Inherits from ButtonBase.
            </summary>
        </member>
        <member name="P:Iot.Device.Button.GpioButton.HasExternalResistor">
            <summary>
            Specify whether the Gpio associated with the button has an external resistor acting as pull-up or pull-down.
            </summary>
        </member>
        <member name="M:Iot.Device.Button.GpioButton.#ctor(System.Int32,System.Boolean,System.Boolean,System.Device.Gpio.GpioController,System.Boolean,System.TimeSpan)">
            <summary>
            Initialization of the button.
            </summary>
            <param name="buttonPin">GPIO pin of the button.</param>
            <param name="isPullUp">True if the Gpio is either pulled up in hardware or in the Gpio configuration (see <paramref name="hasExternalResistor"/>. False if instead the Gpio is pulled down.</param>
            <param name="hasExternalResistor">When False the pull resistor is configured using the Gpio PinMode.InputPullUp or PinMode.InputPullDown (if supported by the board). Otherwise the Gpio is configured as PinMode.Input.</param>
            <param name="gpio">Gpio Controller.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
            <param name="debounceTime">The amount of time during which the transitions are ignored, or zero</param>
        </member>
        <member name="M:Iot.Device.Button.GpioButton.#ctor(System.Int32,System.TimeSpan,System.TimeSpan,System.Boolean,System.Boolean,System.Device.Gpio.GpioController,System.Boolean,System.TimeSpan)">
            <summary>
            Initialization of the button.
            </summary>
            <param name="buttonPin">GPIO pin of the button.</param>
            <param name="doublePress">Max ticks between button presses to count as doublepress.</param>
            <param name="holding">Min ms a button is pressed to count as holding.</param>
            <param name="isPullUp">True if the Gpio is either pulled up in hardware or in the Gpio configuration (see <paramref name="hasExternalResistor"/>. False if instead the Gpio is pulled down.</param>
            <param name="hasExternalResistor">When False the pull resistor is configured using the Gpio PinMode.InputPullUp or PinMode.InputPullDown (if supported by the board). Otherwise the Gpio is configured as PinMode.Input.</param>
            <param name="gpio">Gpio Controller.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
            <param name="debounceTime">The amount of time during which the transitions are ignored, or zero</param>
        </member>
        <member name="M:Iot.Device.Button.GpioButton.PinStateChanged(System.Object,System.Device.Gpio.PinValueChangedEventArgs)">
            <summary>
            Handles changes in GPIO pin, based on whether the system is pullup or pulldown.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="pinValueChangedEventArgs">The pin argument changes.</param>
        </member>
        <member name="M:Iot.Device.Button.GpioButton.Dispose(System.Boolean)">
            <summary>
            Internal cleanup.
            </summary>
            <param name="disposing">Disposing.</param>
        </member>
        <member name="T:Iot.Device.Buzzer.Buzzer">
            <summary>
            Simple buzzer.
            </summary>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.#ctor(System.Int32)">
            <summary>
            Constructs Buzzer instance
            </summary>
            <param name="pinNumber">Pin connected to buzzer</param>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.#ctor(System.Int32,System.Int32)">
            <summary>
            Create Buzzer class instance with output on specified pin with specified channel.
            </summary>
            <param name="chip">The GPIO pin number in case of a software PWM. The chip in case of a hardware PWM.</param>
            <param name="channel">The channel to use in case of a hardware PWM.</param>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.#ctor(System.Device.Pwm.PwmChannel)">
            <summary>
            Create Buzzer class instance with output on specified pin with specified channel using passed PWM controller.
            </summary>
            <param name="pwmChannel">The PWM controller to use during work.</param>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.StartPlaying(System.Double)">
            <summary>
            Set new or overwrite previously set frequency and start playing the sound.
            </summary>
            <param name="frequency">Tone frequency in Hertz.</param>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.StopPlaying">
            <summary>
            Stop playing tone.
            </summary>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.PlayTone(System.Double,System.Int32)">
            <summary>
            Play tone of specific frequency for specified duration.
            </summary>
            <param name="frequency">Tone frequency in Hertz.</param>
            <param name="duration">Playing duration in millisecons.</param>
        </member>
        <member name="M:Iot.Device.Buzzer.Buzzer.Dispose">
            <summary>
            Dispose Buzzer.
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.CameraInfo">
            <summary>
            Information on the camera listed by the tools
            </summary>
            <param name="Index">The progressive number assigned to the device from Libcamera</param>
            <param name="Name">The name of the device</param>
            <param name="MaxResolution">The maximum resolution supported from the device</param>
            <param name="DevicePath">The native path assigned from the operating system to the device</param>
        </member>
        <member name="M:Iot.Device.Camera.CameraInfo.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Information on the camera listed by the tools
            </summary>
            <param name="Index">The progressive number assigned to the device from Libcamera</param>
            <param name="Name">The name of the device</param>
            <param name="MaxResolution">The maximum resolution supported from the device</param>
            <param name="DevicePath">The native path assigned from the operating system to the device</param>
        </member>
        <member name="P:Iot.Device.Camera.CameraInfo.Index">
            <summary>The progressive number assigned to the device from Libcamera</summary>
        </member>
        <member name="P:Iot.Device.Camera.CameraInfo.Name">
            <summary>The name of the device</summary>
        </member>
        <member name="P:Iot.Device.Camera.CameraInfo.MaxResolution">
            <summary>The maximum resolution supported from the device</summary>
        </member>
        <member name="P:Iot.Device.Camera.CameraInfo.DevicePath">
            <summary>The native path assigned from the operating system to the device</summary>
        </member>
        <member name="M:Iot.Device.Camera.CameraInfo.From(System.String)">
            <summary>
            Parse the string obtained from the --list-cameras command line and
            extracts the main characteristics
            </summary>
            <param name="listOutputString">The string output returned from the execution with --list-cameras command line</param>
            <returns></returns>
            <exception cref="T:System.Exception">The input string has an unexpected strucutre and cannot be parsed</exception>
        </member>
        <member name="T:Iot.Device.Camera.Settings.Command">
            <summary>
            The list of all the commands supported by the LibcameraAppsSettings
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Help">
            <summary>
            The command for the --help option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Version">
            <summary>
            The command for the --version option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.ListCameras">
            <summary>
            The command for the --list-cameras option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Camera">
            <summary>
            The command for the --camera option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Config">
            <summary>
            The command for the --config option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Timeout">
            <summary>
            The command for the --timeout option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Preview">
            <summary>
            The command for the --preview option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Fullscreen">
            <summary>
            The command for the --fullscreen option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.QtPreview">
            <summary>
            The command for the --qt-preview option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Nopreview">
            <summary>
            The command for the --nopreview option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.InfoText">
            <summary>
            The command for the --info-text option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Width">
            <summary>
            The command for the --width option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Height">
            <summary>
            The command for the --height option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.ViewfinderWidth">
            <summary>
            The command for the --viewfinder-width option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.ViewfinderHeight">
            <summary>
            The command for the --viewfinder-height option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Rawfull">
            <summary>
            The command for the --rawfull option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Mode">
            <summary>
            The command for the --mode option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.ViewfinderMode">
            <summary>
            The command for the --viewfinder-mode option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.LoresWidth">
            <summary>
            The command for the --lores-width option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.LoresHeight">
            <summary>
            The command for the --lores-height option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Hflip">
            <summary>
            The command for the --hflip option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Vflip">
            <summary>
            The command for the --vflip option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Rotation">
            <summary>
            The command for the --rotation option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Roi">
            <summary>
            The command for the --roi option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Hdr">
            <summary>
            The command for the --hdr option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Sharpness">
            <summary>
            The command for the --sharpness option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Contrast">
            <summary>
            The command for the --contrast option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Brightness">
            <summary>
            The command for the --brightness option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Saturation">
            <summary>
            The command for the --saturation option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Ev">
            <summary>
            The command for the --ev option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Shutter">
            <summary>
            The command for the --shutter option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Gain">
            <summary>
            The command for the --gain option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Metering">
            <summary>
            The command for the --metering option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Exposure">
            <summary>
            The command for the --exposure option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Awb">
            <summary>
            The command for the --awb option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Awbgains">
            <summary>
            The command for the --awbgains option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Denoise">
            <summary>
            The command for the --denoise option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.TuningFile">
            <summary>
            The command for the --tuning-file option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.AutofocusMode">
            <summary>
            The command for the --autofocus-mode option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.AutofocusRange">
            <summary>
            The command for the --autofocus-range option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.AutofocusSpeed">
            <summary>
            The command for the --autofocus-speed option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.AutofocusWindow">
            <summary>
            The command for the --autofocus-window option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.LensPosition">
            <summary>
            The command for the --lens-position option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Output">
            <summary>
            The command for the --output option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Wrap">
            <summary>
            The command for the --wrap option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Flush">
            <summary>
            The command for the --flush option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.PostProcessFile">
            <summary>
            The command for the --post-process-file option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Quality">
            <summary>
            The command for the --quality option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Exif">
            <summary>
            The command for the --exif option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Timelapse">
            <summary>
            The command for the --timelapse option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Framestart">
            <summary>
            The command for the --framestart option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Datetime">
            <summary>
            The command for the --datetime option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Timestamp">
            <summary>
            The command for the --timestamp option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Restart">
            <summary>
            The command for the --restart option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Keypress">
            <summary>
            The command for the --keypress option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Signal">
            <summary>
            The command for the --signal option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Thumb">
            <summary>
            The command for the --thumb option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Encoding">
            <summary>
            The command for the --encoding option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Raw">
            <summary>
            The command for the --raw option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Latest">
            <summary>
            The command for the --latest option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.AutofocusOnCapture">
            <summary>
            The command for the --autofocus-on-capture option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Bitrate">
            <summary>
            The command for the --bitrate option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Intra">
            <summary>
            The command for the --intra option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Profile">
            <summary>
            The command for the --profile option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Level">
            <summary>
            The command for the --level option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Codec">
            <summary>
            The command for the --codec option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Initial">
            <summary>
            The command for the --initial option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Split">
            <summary>
            The command for the --split option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Segment">
            <summary>
            The command for the --segment option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Circular">
            <summary>
            The command for the --circular option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Inline">
            <summary>
            The command for the --inline option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Listen">
            <summary>
            The command for the --listen option
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.Command.Frames">
            <summary>
            The command for the --frames option
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandCategory">
            <summary>
            Qualifies the category of the commands used by the libcamera-apps according to:
            https://www.raspberrypi.com/documentation/computers/camera_software.html#common-command-line-options
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.Common">
            <summary>
            Common options
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.Preview">
            <summary>
            Options related to the preview window
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.CameraResolution">
            <summary>
            Options related to the camera resolution
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.CameraControl">
            <summary>
            Options used to control the camera
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.Output">
            <summary>
            Options to redirect the image or video output
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.PostProcessing">
            <summary>
            Options to process the image or video after the acquisition but before the output
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.Still">
            <summary>
            Options to control the image acquisition
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandCategory.Video">
            <summary>
            Options to control the video acquisition
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandInputType">
            <summary>
            Represents the type of value expected on the command line
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Void">
            <summary>
            No value is expected
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.IndexOfCamera">
            <summary>
            The list of cameras prefixed by the index
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Filename">
            <summary>
            A filename
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Milliseconds">
            <summary>
            An integer specifying milliseconds
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Microseconds">
            <summary>
            An integer specifying microseconds
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Xywh">
            <summary>
            Four integers specifying x,y,w,h
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Whq">
            <summary>
            Three integers specifying w,h,q (width, height, quality)
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.String">
            <summary>
            A single string
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.FormattableString">
            <summary>
            A single formattable string accepting the following directives.<para/>
            Directive   Substitution<para/>
            %frame      The sequence number of the frame<para/>
            %fps        The instantaneous frame rate<para/>
            %exp        The shutter speed used to capture the image, in microseconds<para/>
            %ag         The analogue gain applied to the image in the sensor<para/>
            %dg         The digital gain applied to the image by the ISP<para/>
            %rg         The gain applied to the red component of each pixel<para/>
            %bg         The gain applied to the blue component of each pixel<para/>
            %focus      The focus metric for the image, where a larger value implies a sharper image<para/>
            %lp         The current lens position in dioptres (1 / distance in metres).<para/>
            %afstate    The autofocus algorithm state (one of idle, scanning, focused or failed).<para/>
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Int">
            <summary>
            An integer
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Decimal">
            <summary>
            An decimal number (dot is the separator)
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.DecimalPair">
            <summary>
            A pair of decimal numbers separated by a comma
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.DecimalOrString">
            <summary>
            An decimal number or the 'default' string
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.SensorMode">
            <summary>
            Sensor Mode string
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Rotate0Or180">
            <summary>
            Rotation 0 or 180
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Metering">
            <summary>
            One of the following strings: centre, spot, average, custom
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Exposure">
            <summary>
            One of the following strings: normal, sport or long
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.WhiteBalance">
            <summary>
            One of the following strings: auto, incandescent, tungsten, fluorescent, indoor, daylight, cloudy, custom
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Denoise">
            <summary>
            One of the following strings: auto, off, cdn_off, cdn_fast, cdn_hq
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.AutofocusMode">
            <summary>
            One of the following strings: default, manual, auto, continuous
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.AutofocusRange">
            <summary>
            One of the following strings: normal, macro, full
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.AutofocusSpeed">
            <summary>
            One of the following strings: normal, fast
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Output">
            <summary>
            One of the following strings: '-' (stdout), 'udp://', 'tcp://' or filename (including %d == progressive number)
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Encoding">
            <summary>
            One of the following strings: jpg, png, bmp, rgb, yuv420
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.H264Profile">
            <summary>
            One of the following strings: baseline, main or high
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.H264Level">
            <summary>
            One of the following strings: 4, 4.1 or 4.2
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Codec">
            <summary>
            One of the following strings: h264, mjpeg, yuv420, libav
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Initial">
            <summary>
            One of the following strings: record or pause
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.Megabytes">
            <summary>
            A number expressing megabytes
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandInputType.ListeningTcpUri">
            <summary>
            A listening Uri in the form tcp://0.0.0.0:8123
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandOption">
            <summary>
            A command line option to configure the application.
            </summary>
            <param name="Category">The category of the command option.</param>
            <param name="Command">The command option enumeration field.</param>
            <param name="Option">The comamand option string that will be passed to the process.</param>
            <param name="Help">The help string for the command option.</param>
            <param name="InputType">The type for the value associated to the command option.</param>
            <param name="OutputType">The type for the value returned by the process when this command option is used.</param>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOption.#ctor(Iot.Device.Camera.Settings.CommandCategory,Iot.Device.Camera.Settings.Command,System.String,System.String,Iot.Device.Camera.Settings.CommandInputType,Iot.Device.Camera.Settings.CommandOutputType)">
            <summary>
            A command line option to configure the application.
            </summary>
            <param name="Category">The category of the command option.</param>
            <param name="Command">The command option enumeration field.</param>
            <param name="Option">The comamand option string that will be passed to the process.</param>
            <param name="Help">The help string for the command option.</param>
            <param name="InputType">The type for the value associated to the command option.</param>
            <param name="OutputType">The type for the value returned by the process when this command option is used.</param>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.Category">
            <summary>The category of the command option.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.Command">
            <summary>The command option enumeration field.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.Option">
            <summary>The comamand option string that will be passed to the process.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.Help">
            <summary>The help string for the command option.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.InputType">
            <summary>The type for the value associated to the command option.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOption.OutputType">
            <summary>The type for the value returned by the process when this command option is used.</summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandOptionAndValue">
            <summary>
            The association between the command option and the desired stringified value,
            </summary>
            <param name="Option">The command option describing the command line to be passed to the process.</param>
            <param name="Value">The value for the command option, formatted as a string</param>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionAndValue.#ctor(Iot.Device.Camera.Settings.CommandOption,System.String)">
            <summary>
            The association between the command option and the desired stringified value,
            </summary>
            <param name="Option">The command option describing the command line to be passed to the process.</param>
            <param name="Value">The value for the command option, formatted as a string</param>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOptionAndValue.Option">
            <summary>The command option describing the command line to be passed to the process.</summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.CommandOptionAndValue.Value">
            <summary>The value for the command option, formatted as a string</summary>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionAndValue.Create(Iot.Device.Camera.Settings.Command,System.String)">
            <summary>
            Create an instance of CommadnOptionAndValue
            </summary>
            <param name="command">The command to use in the command line.</param>
            <param name="value">The value associated to the command option.</param>
            <returns>An instance of this class representing the command option and the provided value.</returns>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandOptionsBuilder">
            <summary>
            Build the command line options using a fluent API.
            The provided values are NOT validated by this builder.
            </summary>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.Get(Iot.Device.Camera.Settings.Command)">
            <summary>
            Gets the CommmandOption, given the matching Command field.
            </summary>
            <param name="command">The command to retrieve.</param>
            <returns>The command option.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.GetByCategory(Iot.Device.Camera.Settings.CommandCategory,Iot.Device.Camera.Settings.Command)">
            <summary>
            Gets the CommmandOption, given the matching CommandCategory and Command fields.
            </summary>
            <param name="category">The category of the command to retrieve.</param>
            <param name="command">The command to retrieve.</param>
            <returns>An instance of the CommandOption.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.#ctor(System.Boolean)">
            <summary>
            Allow to easily build the command line options needed to capture pictures or videos.
            </summary>
            <param name="includeOutputToStdio">True to redirect the stdio output to the given stream.</param>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.GetArguments">
            <summary>
            Retrieves all the command line options and values in a string array.
            </summary>
            <returns>An array of strings with all the command options accumulated in this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.With(Iot.Device.Camera.Settings.CommandOptionAndValue)">
            <summary>
            Adds the option specified in the argument.
            </summary>
            <param name="optionAndValue">The command option and its value to be added to the current instance.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.Remove(Iot.Device.Camera.Settings.CommandOption)">
            <summary>
            Remove the specified option.
            </summary>
            <param name="command">The command to remove.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithListCameras">
            <summary>
            Tells the app to output the text with all the installed cameras and their characteristics.
            </summary>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithCamera(System.Int32)">
            <summary>
            Tells the app to use the camera with the specified index.
            The indexes are obtained from the output when WithListCameras is used.
            </summary>
            <param name="index">The index of the camera to be used.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithOutput(System.String)">
            <summary>
            Tells the app to output the binary content towards the specified output.
            </summary>
            <param name="output">A valid option, URL or filename.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithContinuousStreaming(System.Int32)">
            <summary>
            Adds the options to capture the stream for the given amount of milliseconds.
            The value 0 (default) will capture indefinitely until the process gets stopped.
            This option makes only sense for videos.
            </summary>
            <param name="ms">The length of the capture operation in milliseconds.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithTimeout(System.Int32)">
            <summary>
            Sets the timeout option to 1ms which is the minimum delay to take a still picture.
            When capturing pictures, the value '0' will continue to capture indefinitely which is rarely desired.
            Instead, to capture a single still picture immediately, use the value '1' (1ms delay).
            </summary>
            <param name="ms">The time after which a still picture is captured, in milliseconds.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithTimelapse(System.Int32)">
            <summary>
            This option is only valid on still pictures.
            It captures a new image every interval (specified in milliseconds).
            The format of the filename should use the counter. For example: "image%d.jpg".
            </summary>
            <param name="ms">The interval in milliseconds.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithHflip">
            <summary>
            Adds the option to mirror horizontally.
            </summary>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithVflip">
            <summary>
            Adds the option to mirror vertically.
            </summary>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithResolution(System.Int32,System.Int32)">
            <summary>
            Adds the resolution options.
            </summary>
            <param name="width">The width of the image.</param>
            <param name="height">The heighy of the image.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithImageQuality(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Adds the image quality options.
            </summary>
            <param name="sharpness">The sharpness value (must be positive, typically no more than 2.0).</param>
            <param name="contrast">The contrast value (must be zero or positive, typically no more than 2.0).</param>
            <param name="brightness">The brightness value (must be between -1.0=black and 1.0=white).</param>
            <param name="saturation">The saturation value (0 is gray, 1.0 is the default, larger values are saturated).</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithPictureOptions(System.Int32,System.String)">
            <summary>
            Adds the option to take a still picture.
            </summary>
            <param name="quality">0 to 100, default is 93.</param>
            <param name="encoding">One of the following strings: jpg, png, bmp, rgb, yuv420.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithH264VideoOptions(System.String,System.String,System.Int32)">
            <summary>
            Adds the option to capture a video stream in H.264 format.
            This method will automatically set H264 and the 'inline' option that writes the H264 header to
            every Intra frame. The frequency of Intra frames can be changed.
            </summary>
            <param name="profile">The H264 profile used by the hardware encoder: baseline, main or high.</param>
            <param name="level">The level of the H264 protocol: 4, 4.1 or 4.2.</param>
            <param name="intra">The frequency of I (Intra) frames (number of frames).</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.WithMJPEGVideoOptions(System.Int32)">
            <summary>
            Adds the option to capture a video stream in MJPEG format.
            </summary>
            <param name="quality">The quality of each MJPEG picture: 100 is maximum quality and 50 is the default.</param>
            <returns>A reference to this instance.</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.CommandOptionsBuilder.AddTimeout(System.Int32)">
            <summary>
            This option has a different meaning for still pictures and videos.
            When capturing videos, the value '0' means to capture forever.
            When capturing pictures, the value '0' will continue to capture indefinitely which is rarely desired.
            Instead, to capture a single still picture immediately, use the value '1' (1ms delay).
            </summary>
            <param name="ms">When a still picture is captured, it represents the time, in milliseconds, after which the still picture is saved.
            When a video is captured, it represents the time after which the capture will start.</param>
        </member>
        <member name="T:Iot.Device.Camera.Settings.CommandOutputType">
            <summary>
            Represents the type of value expected on the command line
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandOutputType.Void">
            <summary>
            No value is expected
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.CommandOutputType.IndexOfCamera">
            <summary>
            The list of cameras prefixed by the index
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.LibcameraAppsSettings">
            <summary>
            Settings for all the Libcamera-apps
            https://www.raspberrypi.com/documentation/computers/camera_software.html#common-command-line-options
            </summary>
        </member>
        <member name="P:Iot.Device.Camera.Settings.LibcameraAppsSettings.DefaultOptions">
            <summary>
            Gets the default options for the Libcamera-apps
            </summary>
        </member>
        <member name="T:Iot.Device.Camera.Settings.ProcessSettingsFactory">
            <summary>
            A factory for the <see cref="T:Iot.Device.Common.ProcessSettings"/> class.
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.ProcessSettingsFactory.RaspiStill">
            <summary>
            The process name of the legacy application used to capture still pictures on the Raspbian OS
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.ProcessSettingsFactory.RaspiVid">
            <summary>
            The process name of the legacy application used to capture video streams on the Raspbian OS
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.ProcessSettingsFactory.LibcameraStill">
            <summary>
            The process name of the libcamera application used to capture still pictures on the Raspbian OS
            </summary>
        </member>
        <member name="F:Iot.Device.Camera.Settings.ProcessSettingsFactory.LibcameraVid">
            <summary>
            The process name of the libcamera application used to capture video streams on the Raspbian OS
            </summary>
        </member>
        <member name="M:Iot.Device.Camera.Settings.ProcessSettingsFactory.CreateForRaspistill">
            <summary>
            Creates a ProcessSettings instance targeting raspistill.
            </summary>
            <returns>An instance of the <see cref="T:Iot.Device.Common.ProcessSettings"/> class</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.ProcessSettingsFactory.CreateForRaspivid">
            <summary>
            Creates a ProcessSettings instance targeting raspivid.
            </summary>
            <returns>An instance of the <see cref="T:Iot.Device.Common.ProcessSettings"/> class</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.ProcessSettingsFactory.CreateForLibcamerastillAndStderr">
            <summary>
            Creates a ProcessSettings instance targeting libcamera-still and capturing stderr.
            </summary>
            <returns>An instance of the <see cref="T:Iot.Device.Common.ProcessSettings"/> class</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.ProcessSettingsFactory.CreateForLibcamerastill">
            <summary>
            Creates a ProcessSettings instance targeting libcamera-still.
            </summary>
            <returns>An instance of the <see cref="T:Iot.Device.Common.ProcessSettings"/> class</returns>
        </member>
        <member name="M:Iot.Device.Camera.Settings.ProcessSettingsFactory.CreateForLibcameravid">
            <summary>
            Creates a ProcessSettings instance targeting raspivid.
            </summary>
            <returns>An instance of the <see cref="T:Iot.Device.Common.ProcessSettings"/> class</returns>
        </member>
        <member name="T:Iot.Device.Card.CardTransceiver">
            <summary>
            Abstract class implementing a specific Write and Read function
            This class allow to transceive information with the card
            This class has to be implemented in all RFID/NFC/Card readers
            So Mifare cards can be used the same way independent of any reader
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CardTransceiver.Transceive(System.Byte,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},Iot.Device.Card.NfcProtocol)">
            <summary>
            This function has to be implemented by all NFC/RFID/Card readers. This function is used in exchange of data with
            the reader and the cards.
            </summary>
            <param name="targetNumber">Some readers have a notion of target number for the cards as they can read multiple ones</param>
            <param name="dataToSend">A standardized raw buffer with the command at the position 0 in the array</param>
            <param name="dataFromCard">If any data are read from the card, they will be put into this array</param>
            <param name="protocol">NFC protocol for this data exchange (e.g., Mifare)</param>
            <returns>-1 in case of error, otherwise the number of bytes read and copied into the <paramref name="dataFromCard"/> array</returns>
        </member>
        <member name="M:Iot.Device.Card.CardTransceiver.ReselectTarget(System.Byte)">
            <summary>
            Once you have an authentication operation failing with Mifare cards or a read/write, the card stop.
            TYhe only way to have it back is to send the unselect and anti collision.
            This function provides this feature
            </summary>
            <param name="targetNumber">The target number to reselect</param>
            <returns>True if success</returns>
        </member>
        <member name="P:Iot.Device.Card.CardTransceiver.MaximumReadSize">
            <summary>
            The maximum number of bytes that can be read from the card in a single transaction,
            (excluding CRC). This is constrained by the operating mode as well as transceiver limitations (such as
            the size of a FIFO buffer in the transceiver).
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CardTransceiver.MaximumWriteSize">
            <summary>
            The maximum number of bytes that can be written to the card in a single transaction,
            (excluding CRC). This is constrained by the operating mode as well as transceiver limitations (such as
            the size of a FIFO buffer in the transceiver).
            </summary>
        </member>
        <member name="T:Iot.Device.Card.ErrorType">
            <summary>
            The type of error
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.ProcessCompletedNormal">
            <summary>
            Process completed normally
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.ProcessCompletedWarning">
            <summary>
            Process completed with warning
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.ProcessAbortedExecution">
            <summary>
            Process aborted during execution
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.ProcessAbortedChecking">
            <summary>
            Process aborted during checking phase
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.StateNonVolatileMemoryUnchangedSelectedFileInvalidated">
            <summary>
            Selected file invalidated
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.StateNonVolatileMemoryChangedAuthenticationFailed">
            <summary>
            Authentication failed
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.StateNonVolatileMemoryChanged">
            <summary>
            Volatile memory changed
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.CommandNotAllowedAuthenticationMethodBlocked">
            <summary>
            Command not allowed because of authentication
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.CommandNotAllowedReferenceDataInvalidated">
            <summary>
            Command not allowed because of invalid data
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.CommandNotAllowedConditionsNotSatisfied">
            <summary>
            Command not allowed as some conditions are not satisfied
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.WrongParameterP1P2FunctionNotSupported">
            <summary>
            Wrong P1 or P2 parameters
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.WrongParameterP1P2FileNotFound">
            <summary>
            File not found with current P1 and P2
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.WrongParameterP1P2RecordNotFound">
            <summary>
            Record not found with current P1 and P2
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.ReferenceDataNotFound">
            <summary>
            Reference data not found
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.WrongLength">
            <summary>
            Wrong length
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.BytesStillAvailable">
            <summary>
            Bytes still available to read
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.InstructionCodeNotSupportedOrInvalid">
            <summary>
            Instruction code not supported or not valid
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.Unknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="F:Iot.Device.Card.ErrorType.Success">
            <summary>
            Success = Process completed normally
            </summary>
        </member>
        <member name="T:Iot.Device.Card.NfcProtocol">
            <summary>
            NFC protocol
            These include standards as well as proprietary command sets, for which transceivers
            may have special support. For example, Mifare is conveyed across ISO/IEC 14443-3 (Type A),
            and transceivers have built-in support for Mifare authentication commands.
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Unknown">
            <summary>
            Unknown or unspecified
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Iso14443_3">
            <summary>
            ISO/IEC 14443-3 (Type A or B)
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Iso14443_4">
            <summary>
            ISO/IEC 14443-4 (Type A or B)
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Mifare">
            <summary>
            Mifare Classic
            Proprietary commands on top of ISO/IEC 14443-3 Type A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Jewel">
            <summary>
            Innovision Jewel
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.JisX6319_4">
            <summary>
            JIS X 6319-4. Compatible with FeliCa.
            </summary>
        </member>
        <member name="F:Iot.Device.Card.NfcProtocol.Iso15693">
            <summary>
            ISO/IEC 15693
            </summary>
        </member>
        <member name="T:Iot.Device.Card.ProcessError">
            <summary>
            Processing error class
            </summary>
        </member>
        <member name="P:Iot.Device.Card.ProcessError.ErrorType">
            <summary>
            The Error type
            </summary>
        </member>
        <member name="P:Iot.Device.Card.ProcessError.CorrectLegnthOrBytesAvailable">
            <summary>
            Complementary data for some errors
            </summary>
        </member>
        <member name="M:Iot.Device.Card.ProcessError.#ctor(System.Span{System.Byte})">
            <summary>
            Constructor to process the error
            </summary>
            <param name="errorToProcess">A span of byte</param>
        </member>
        <member name="T:Iot.Device.Card.VersionSupported">
            <summary>
            All supported version for the NFC reader
            TODO: if more readers appear, this can be for sure place
            in common and more modes can be added
            </summary>
        </member>
        <member name="F:Iot.Device.Card.VersionSupported.Iso18092">
            <summary>
            Support for Iso 18092
            </summary>
        </member>
        <member name="F:Iot.Device.Card.VersionSupported.IsoIec14443TypeB">
            <summary>
            Support for Iso/Iec 14443 TypeB
            </summary>
        </member>
        <member name="F:Iot.Device.Card.VersionSupported.IsoIec14443TypeA">
            <summary>
            Support for Iso/Iec 14443 TypeA
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.ApduCommands">
            <summary>
            The list of predefined commands to communicate with the card
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.ApplicationDataDetail">
            <summary>
            Application data details
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.ApplicationDataDetail.Sfi">
            <summary>
            The Short File Identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.ApplicationDataDetail.Start">
            <summary>
            The index of record to start reading
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.ApplicationDataDetail.End">
            <summary>
            The index of last record to read
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.ApplicationDataDetail.NumberOfRecords">
            <summary>
            The number of records
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.BerSplitter">
            <summary>
            A simple Basic Encoding Rules (defined in ISO/IEC 8825–1) decoder
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.BerSplitter.Tags">
            <summary>
            A list of Tag
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.BerSplitter.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructor taking a BER encoded array
            </summary>
            <param name="toSplit">The byte array to be decoded</param>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.ConversionType">
            <summary>
            The type of conversion for the data conversion.
            This apply only to the know types, the default is
            Byte Array which uses a simple BitConverter.ToString()
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.ByteArray">
            <summary>
            Byte array
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.BcdToString">
            <summary>
            BCD to string
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.RawString">
            <summary>
            Raw string
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.Date">
            <summary>
            Date format
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.DecimalNumber">
            <summary>
            Decimal number
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.ConversionType.Time">
            <summary>
            Time
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.CreditCard">
            <summary>
            The Credit Card class
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.CreditCard.TailerSize">
            <summary>
            The size of the tailer elements. Some readers add an extra byte
            usually 0x00 especially NFC ones. While Smart Card readers usually do not
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.CreditCard.Tags">
            <summary>
            A list of Tags that is contained by the Credit Card
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.CreditCard.LogEntries">
            <summary>
            The list of log entries in binary format
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.#ctor(Iot.Device.Card.CardTransceiver,System.Byte,System.Int32)">
            <summary>
            Create a Credit Card class
            </summary>
            <param name="nfc">A compatible Card reader</param>
            <param name="target">The target number as some readers needs it</param>
            <param name="tailerSize">Size of the tailer, most NFC readers add an extra byte 0x00</param>
            <remarks>The target number can be found with the NFC/Card reader you are using. For example the PN532 require a target number,
            the normal smart card readers usually don't as they only support 1 card at a time.</remarks>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.ProcessExternalAuthentication(System.Span{System.Byte})">
            <summary>
            Process external authentication
            </summary>
            <param name="issuerAuthenticationData">The authentication data</param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.GetChallenge(System.Span{System.Byte})">
            <summary>
            Get a challenge to process authentication
            </summary>
            <param name="unpredictableNumber">the unpredictable number to be generated by the card, it should be 8 bytes</param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.VerifyPin(System.ReadOnlySpan{System.Byte})">
            <summary>
            Verify the pin. Note this command may not be supported for your specific credit card
            </summary>
            <param name="pindigits">The pin in a byte array, between 4 and 8 array length. Pin numbers should be bytes like in the following example:
            byte[] pin = new byte[] { 1, 2, 3, 4 };
            </param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.GetPinTries">
            <summary>
            Get the number of pin tries left. Your credit card may not support this command.
            Use GetData(DataType.PinTryCounter) instead if you get a -1 as answer
            </summary>
            <returns>the number of tries left or -1 if not successful</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.Select(System.Span{System.Byte})">
            <summary>
            Select an application identifier
            </summary>
            <param name="toSelect">The application identifier</param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.ReadCreditCardInformation">
            <summary>
            Gather all the public information present in the credit card.
            Fill then Tag list with all the found information. You can get
            all the credit card information in the Tags property.
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.FillTags">
            <summary>
            Please refer to EMV 4.3 Book 3, Integrated Circuit Card Specifications for Payment Systems.
            https://www.emvco.com/emv-technologies/contact/. The file system and how to access it is mainly
            explained on chapter 5 and chapter 7.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.ReadLogEntries(System.Byte,System.Byte)">
            <summary>
            Read log records
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.ReadRecord(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Read a specific record
            </summary>
            <param name="sfi">The Short File Identifier</param>
            <param name="record">The Record to read</param>
            <param name="isLogEntry">Are we reading a log entry or something else?</param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.GetProcessingOptions(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Get Processing Options
            </summary>
            <param name="pdolToSend">The PDOL array to send</param>
            <param name="pdol">The return PDOL elements</param>
            <returns>The error status</returns>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.CreditCard.GetData(Iot.Device.Card.CreditCardProcessing.DataType)">
            <summary>
            Get additional data
            </summary>
            <param name="dataType">The type of data to read</param>
            <returns>The error status</returns>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.DataType">
            <summary>
            Additional data that can be extracted from the Credit Card
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.DataType.ApplicationTransactionCounter">
            <summary>
            Application transaction counter
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.DataType.PinTryCounter">
            <summary>
            Number of pin try left
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.DataType.LastOnlineAtcRegister">
            <summary>
            Last online ATC register
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.DataType.LogFormat">
            <summary>
            Log format
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.Source">
            <summary>
            The source of a Tag
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.Source.Icc">
            <summary>
            Card
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.Source.Terminal">
            <summary>
            Terminal
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.Source.Issuer">
            <summary>
            Issuer
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.Tag">
            <summary>
            A Tag class containing part of a card information
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.Tag.#ctor">
            <summary>
            Create an empty tag
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.Tag.#ctor(System.UInt32,System.Byte[],System.UInt32,System.Collections.Generic.List{Iot.Device.Card.CreditCardProcessing.Tag})">
            <summary>
            Instantiate Tag class containing part of a card information
            </summary>
            <param name="tagNumber">The Tag number.</param>
            <param name="data">The data of the Tag.</param>
            <param name="parent">The Tag parent, 0 is it's a root Tag.</param>
            <param name="tags">List of Tag that this Tag can contain if it's a constructed one or a template or a DOL.</param>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.Tag.TagNumber">
            <summary>
            The Tag number
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.Tag.Data">
            <summary>
            The data of the Tag
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.Tag.Parent">
            <summary>
            The Tag parent, 0 is it's a root Tag
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.Tag.IsConstructed">
            <summary>
            True if the Tag is constructed, which means contains sub Tags
            A constructed tag is not necessary a template
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.Tag.Tags">
            <summary>
            List of Tag that this Tag can contain if it's a constructed one
            or a template or a DOL
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.Tag.SearchTag(System.Collections.Generic.List{Iot.Device.Card.CreditCardProcessing.Tag},System.UInt32)">
            <summary>
            Search for a specific tag in a list of Tag including the sub Tags
            </summary>
            <param name="tagToSearch">The list of tags to search in</param>
            <param name="tagNumber">The tag number to search for</param>
            <returns>A list of tags</returns>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.TagDetails">
            <summary>
            Class containing the Tag and the details including description
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.TagDetails.#ctor">
            <summary>
            TagDetail constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.TagDetails.#ctor(Iot.Device.Card.CreditCardProcessing.Tag)">
            <summary>
            Constructor using an existing Tag
            </summary>
            <param name="tag">The tag</param>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.TagTemplateParent">
            <summary>
            The list of templates that contain this Tag
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.IsTemplate">
            <summary>
            True if this Tag is a template
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.IsDol">
            <summary>
            True is this Tag is a Data Object Link
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.Description">
            <summary>
            Description of this Tag
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.Decoder">
            <summary>
            The type of encoding used by this Tag
            </summary>
        </member>
        <member name="P:Iot.Device.Card.CreditCardProcessing.TagDetails.Source">
            <summary>
            The source of the tag, if it's from the card, the terminal or both
            </summary>
        </member>
        <member name="M:Iot.Device.Card.CreditCardProcessing.TagDetails.ToString">
            <summary>
            Convert the data array to a string depending on how the data are coded
            </summary>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.TagList">
            <summary>
            Class containing the tag list definitions, their types, sources and numbers
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TagList.Tags">
            <summary>
            List of Tags description, source, conversion for display as well as if they are templates or contain Data Object Link
            This list is coming from the EMV documentation, see EMV book 3, Annexe A
            </summary>
        </member>
        <member name="T:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier">
            <summary>
            Terminal Transaction Qualifier, capabilities and requirement
            for the terminal to interact with the card.
            This is used when asking for the Processing Data containing the
            details of the files to read to get card information
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.MagStripeSupported">
            <summary>
            Magnetic Stripe Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.EmvModeSupported">
            <summary>
            Emv Mode Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.EmvContactChipSupported">
            <summary>
            Emv Contact Chip Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.OfflineOnlyReader">
            <summary>
            Offline Only Reader
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.OnlinePinSupported">
            <summary>
            Online Pin Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.SignatureSupported">
            <summary>
            Signature Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.OfflineDataAuthentication">
            <summary>
            Offline Data Authentication
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.OnlineCryptogramRequired">
            <summary>
            Online Cryptogram Required
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.CvmRequired">
            <summary>
            Cvm Required
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.ContactChipOfflinePinSupported">
            <summary>
            Contact Chip Offline Pin Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.IssuerUpdateProcessingSupported">
            <summary>
            Issuer Update Processing Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Card.CreditCardProcessing.TerminalTransactionQualifier.ConsumerDeviceCvmSupported">
            <summary>
            Consumer Device Cvm Supported
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.AccessSector">
            <summary>
            All access sectors rights for the keys and the access bits
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.None">
            <summary>
            No access
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteKeyAWithKeyA">
            <summary>
            Write Key A With Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteKeyAWithKeyB">
            <summary>
            Write Key A With Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.ReadAccessBitsWithKeyA">
            <summary>
            Read Access Bits With Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.ReadAccessBitsWithKeyB">
            <summary>
            Read Access Bits With Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteKeyBWithKeyA">
            <summary>
            Write Key B With Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteKeyBWithKeyB">
            <summary>
            Write Key B With Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteAccessBitsWithKeyA">
            <summary>
            Write Access Bits With Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.WriteAccessBitsWithKeyB">
            <summary>
            Write Access Bits With Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.ReadKeyB">
            <summary>
            Sometimes the KeyB may be read
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessSector.ReadKeyBWithKeyA">
            <summary>
            Read Key B With Key A
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.AccessType">
            <summary>
            The type of access for the data sectors
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.ReadKeyA">
            <summary>
            Read Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.ReadKeyB">
            <summary>
            Read Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.WriteKeyA">
            <summary>
            Write Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.WriteKeyB">
            <summary>
            Write Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.IncrementKeyA">
            <summary>
            Increment Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.IncrementKeyB">
            <summary>
            Increment Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.DecrementTransferRestoreKeyA">
            <summary>
            Decrement Transfer Restore Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.AccessType.DecrementTransferRestoreKeyB">
            <summary>
            Decrement Transfer Restore Key B
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareApplicationIdentifier">
            <summary>
            Mifare application identifier as defined in https://www.nxp.com/docs/en/application-note/AN10787.pdf
            This identifies an application within a Mifare application directory.
            It is an unsigned 16-bit quantity (2 bytes, little-endian order)
            The high-order 8 bits identify the function cluster, and
            the low-order 8 bits define an application code within that cluster
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.#ctor(System.UInt16)">
            <summary>
            Construct a MifareApplicationIdentifier from an ushort
            </summary>
            <param name="appId">application identifier as a ushort</param>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Construct a MifareApplicationIdentifier from a sequence of bytes
            </summary>
            <param name="bytes">two bytes representing the application identifier</param>
            <exception cref="T:System.ArgumentException">the input is not 2 bytes long</exception>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.CopyTo(System.Span{System.Byte})">
            <summary>
            Copy the MifareApplicationIdentifier to a sequence of bytes
            </summary>
            <param name="bytes">bytes that will receive the value</param>
            <exception cref="T:System.ArgumentException">the output span is not 2 bytes long</exception>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareApplicationIdentifier.FunctionCluster">
            <summary>
            The function cluster for this application identifier (high-order 8 bits)
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareApplicationIdentifier.ApplicationCode">
            <summary>
            The application code for this application identifier (low-order 8 bits)
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareApplicationIdentifier.IsAdmin">
            <summary>
            Indicates if this is an administrative application ID
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.ToString">
            <summary>
            Convert to a string that represents the value in hexadecimal
            </summary>
            <returns>the string representation of this application identifier</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.op_Explicit(System.UInt16)~Iot.Device.Card.Mifare.MifareApplicationIdentifier">
            <summary>
            Convert a ushort to a MifareApplicationIdentifier
            </summary>
            <param name="appId">application identifier as a ushort</param>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.op_Explicit(Iot.Device.Card.Mifare.MifareApplicationIdentifier)~System.UInt16">
            <summary>
            Convert a MifareApplicationIdentifier to a ushort
            </summary>
            <param name="appId">application identifier</param>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.Equals(System.Object)">
            <summary>
            Equality comparison (object)
            </summary>
            <param name="obj">the object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.Equals(Iot.Device.Card.Mifare.MifareApplicationIdentifier)">
            <summary>
            Equality comparison (MifareApplicationIdentifier)
            </summary>
            <param name="other">the other MifareApplicationIdentifier to compare</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.GetHashCode">
            <summary>
            Get a hash code for this object
            </summary>
            <returns>the hash code</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.op_Equality(Iot.Device.Card.Mifare.MifareApplicationIdentifier,Iot.Device.Card.Mifare.MifareApplicationIdentifier)">
            <summary>
            Equality operator
            </summary>
            <param name="lhs">left hand operand to be compared</param>
            <param name="rhs">right hand operand to be compared</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareApplicationIdentifier.op_Inequality(Iot.Device.Card.Mifare.MifareApplicationIdentifier,Iot.Device.Card.Mifare.MifareApplicationIdentifier)">
            <summary>
            Inequality operator
            </summary>
            <param name="lhs">left hand operand to be compared</param>
            <param name="rhs">right hand operand to be compared</param>
            <returns>true if not equal</returns>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorFree">
            Administrative application identifiers
            <summary>
            Identifies an unallocated sector
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorDefect">
            <summary>
             Identifies a bad sector
             This sector cannot be used, e.g., because the sector trailer is not writeable or
             the authentication keys are unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorReserved">
            <summary>
            Identifies a reserved sector
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorAdditionalDirectory">
            <summary>
            Identifies an additional directory sector
            This is currently unused, reserved for future cards
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorCardHolderInformation">
            <summary>
            Identifies a sector containing cardholder information
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareApplicationIdentifier.AdminSectorNotApplicable">
            <summary>
            Identifies that a sector does not exist
            This is used for entries in the directory that are beyond the end of the card,
            for example, sectors 32 through 39 of a 2K card
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareCard">
            <summary>
            A Mifare card class
            Supports Mifare Classic 1K and 4K
            Also supports Mifare Plus 2K and 4K operating in SL1
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.DefaultKeyA">
            <summary>
            Default Key A
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.DefaultKeyB">
            <summary>
            Default Key B
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.DefaultFirstBlockNdefKeyA">
            <summary>
            Default Mifare Application Directory block Key A for NDEF card
            The MAD is in the first sector on all cards and also sector 16 on 2K and 4K cards
            </summary>
            <remarks>See https://www.nxp.com/docs/en/application-note/AN10787.pdf for more information</remarks>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.DefaultBlocksNdefKeyA">
            <summary>
            Default block Key A for NDEF card
            </summary>
            <remarks>See https://www.nxp.com/docs/en/application-note/AN10787.pdf for more information</remarks>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.Target">
            <summary>
            The tag number detected by the reader, only 1 or 2
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.Command">
            <summary>
            The command to execute on the card
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.KeyA">
            <summary>
            Key A Used for encryption/decryption
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.KeyB">
            <summary>
            Key B Used for encryption/decryption
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.SerialNumber">
            <summary>
            UUID is the Serial Number, called MAC sometimes
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.Capacity">
            <summary>
            The storage capacity
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.BlockNumber">
            <summary>
            The block number to authenticate or read or write
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.Data">
            <summary>
            The Data which has been read or to write for the specific block
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareCard.ReselectAfterError">
            <summary>
            Reselect the card after a card command fails
            After an error, the card will not respond to any further commands
            until it is reselected. If this property is false, the caller
            is responsible for calling ReselectCard when RunMifareCardCommand
            returns an error (-1).
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.BlockNumberToBlockGroup(System.Byte)">
            <summary>
            Determine the block group corresponding to a block number
            </summary>
            <param name="blockNumber">block number</param>
            <returns>block group</returns>
            In a 1K card there are 16 sectors, each containing four blocks.
            In a 2K card there are 32 sectors, each containing four blocks.
            In a 4K card there are four blocks in the first 32 sectors and 16 blocks in the remaining sectors.
            There are three groups of data blocks (either 1 or 5 blocks per group).
            The last block in the sector is the sector trailer.
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.BlockNumberToSector(System.Byte)">
            <summary>
            Determine the sector number corresponding to a particular block number
            </summary>
            <param name="blockNumber">block number</param>
            <returns>sector number</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.SectorToBlockNumber(System.Byte,System.Byte)">
            <summary>
            Determine the first block number of a specified sector and block group
            </summary>
            <param name="sector">sector number</param>
            <param name="group">group (0 to 3, where 3 is the sector trailer)</param>
            <returns>block number of the first (or only) block in the group</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.#ctor(Iot.Device.Card.CardTransceiver,System.Byte)">
            <summary>
            Constructor for Mifarecard
            </summary>
            <param name="rfid">A card transceiver class</param>
            <param name="target">The target number as some card readers attribute one</param>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.RunMifareCardCommand">
            <summary>
            Run the last setup command. In case of reading bytes, they are automatically pushed into the Data property
            </summary>
            <returns>-1 if the process fails otherwise the number of bytes read</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EncodeSectorTailer(Iot.Device.Card.Mifare.AccessSector)">
            <summary>
            Get the sector tailer bytes for a specific access sector configuration
            </summary>
            <param name="accessSector">the access sector</param>
            <returns>the 3 bytes for configuration</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EncodeSectorTailer(System.Byte,Iot.Device.Card.Mifare.AccessType)">
            <summary>
            Encode the sector tailer access type for a specific block
            </summary>
            <param name="blockNumber">The block sector to encode</param>
            <param name="accessType">The access type to encode</param>
            <returns>The encoded sector tailer for the specific block</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.SectorTailerAccess(System.Byte,System.Byte[])">
            <summary>
            Get the sector tailer access information
            </summary>
            <param name="blockNumber">the block sector number</param>
            <param name="sectorData">The full sector data to decode</param>
            <returns>the access sector rights</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.BlockAccess(System.Byte,System.Byte[])">
            <summary>
            Get the block access information
            </summary>
            <param name="blockNumber">the block number</param>
            <param name="sectorData">the sector tailer data</param>
            <returns>The access type rights</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EncodeSectorAndClockTailer(Iot.Device.Card.Mifare.AccessSector,Iot.Device.Card.Mifare.AccessType[])">
            <summary>
            Encode the desired access for the full sector including the block tailer
            </summary>
            <param name="accessSector">The access desired</param>
            <param name="accessTypes">An array of 3 AccessType determining access of each block</param>
            <returns>The 3 bytes encoding the rights</returns>
            This is a synonym of EncodeSectorAndBlockTailer (for backward compatibility)
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EncodeSectorAndBlockTailer(Iot.Device.Card.Mifare.AccessSector,Iot.Device.Card.Mifare.AccessType[])">
            <summary>
            Encode the desired access for the full sector including the block tailer
            </summary>
            <param name="accessSector">The access desired</param>
            <param name="accessTypes">An array of 3 AccessType determining access of each block</param>
            <returns>The 3 bytes encoding the rights</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EncodeDefaultSectorAndBlockTailer">
            <summary>
            Encode with default value the access sector and tailer blocks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.SetCapacity(System.UInt16,System.Byte)">
            <summary>
            From the ATQA and SAK data find common card capacity
            </summary>
            <param name="ATQA">The ATQA response</param>
            <param name="SAK">The SAK response</param>
            <remarks>Does not recognize Mifare Plus cards, capacity must be set manually</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.IsSectorBlock(System.Byte)">
            <summary>
            Is it a block sector?
            </summary>
            <param name="blockNumber">Input block number</param>
            <returns>True if it is a sector block</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.GetNumberBlocks(System.Byte)">
            <summary>
            Get the number of blocks for a specific sector
            </summary>
            <param name="sectorNumber">Input sector number</param>
            <returns>The number of blocks for this specific sector</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.GetNumberBlocks">
            <summary>
            Get the number of blocks for a specific sector
            </summary>
            <returns>The number of blocks for this specific sector</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.GetNumberSectors">
            <summary>
            Get the number of sectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.Serialize">
            <summary>
            Depending on the command, serialize the needed data
            Authentication will serialize the command, the concerned key and
            the serial number
            Reading data will just serialize the command
            Writing data will serialize the data as well
            </summary>
            <returns>The serialized bits</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.EraseSector(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Erase one sector
            </summary>
            <param name="newKeyA">The new key A, empty to use current one</param>
            <param name="newKeyB">The new key B, empty to use current one</param>
            <param name="sector">The sector number. Refer to Mifare documentation to understand how blocks work especially for Mifare 2K and 4K</param>
            <param name="authenticateWithKeyA">True to authenticate with current Key A, false to authenticate with Key B</param>
            <param name="resetAccessBytes">True to reset all the access bytes</param>
            <returns>True if success</returns>
            <remarks>Sector 0 can't be fully erase, only the blocks 1 and 2 will be erased</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.ReselectCard">
            <summary>
            Select the card. Needed if authentication or read/write failed
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.FormatNdef(System.ReadOnlySpan{System.Byte})">
            <summary>
            Format the entire card to NDEF
            </summary>
            <param name="keyB">The key B to be used for formatting, if empty, will use the default key B</param>
            <returns>True if success</returns>
            <exception cref="T:System.ArgumentException">The card size is unknown or the specified KeyB is invalid</exception>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.FormatNdef(System.UInt32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Format a portion of the card to NDEF
            </summary>
            <param name="numberOfSectors">The number of sectors for NDEF, if zero, use the entire card</param>
            <param name="keyB">The key B to be used for formatting, if empty, will use the default key B</param>
            <returns>True if success</returns>
            <exception cref="T:System.ArgumentException">The card size is unknown or the specified KeyB is invalid</exception>
            <remarks>The requested number of sectors are configured as NFC Forum sectors. To reserve some
            space on the card for other purposes, specify a nonzero value for <paramref name="numberOfSectors" />
            and then allocate additional applications using <see cref="T:Iot.Device.Card.Mifare.MifareDirectory"/> </remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.WriteNdefMessage(Iot.Device.Ndef.NdefMessage,System.Boolean)">
            <summary>
            Write an NDEF Message
            </summary>
            <param name="message">The NDEF Message to write</param>
            <param name="writeKeyA">True to write with Key A, false to write with Key B</param>
            <returns>True if success</returns>
            <exception cref="T:System.ArgumentException">If using KeyB, it must be 6 bytes long</exception>
            <exception cref="T:System.InvalidOperationException">The card is not formatted for NDEF</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The message to be written is larger than the available space on the card</exception>
            <remarks>The Mifare application directory indicates range of sectors for NDEF. Normally,
            these begin at sector 1. The message must fit within the allocated space on the card.</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.IsFormattedNdef">
            <summary>
            Check if the card is formatted to NDEF
            </summary>
            <returns>True if NDEF formatted</returns>
            <remarks>This checks for a Mifare application directory in sector 0 and
            (for 2K and 4K cards) sector 16, that there is an NDEF application, that
            the sector trailer is readable in all sectors in that application, and
            that the GPB byte is set correctly in the trailers.</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.WriteDataBlock(System.Byte)">
            <summary>
            Perform a write using the 16 bytes present in Data on a specific block
            </summary>
            <param name="block">The block number to write</param>
            <returns>True if success</returns>
            <remarks>You will need to be authenticated properly before</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.ReadDataBlock(System.Byte)">
            <summary>
            Perform a read and place the result into the 16 bytes Data property on a specific block
            </summary>
            <param name="block">The block number to write</param>
            <returns>True if success</returns>
            /// <remarks>You will need to be authenticated properly before</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareCard.TryReadNdefMessage(Iot.Device.Ndef.NdefMessage@)">
            <summary>
            Try to read a NDEF Message from a Mifare card
            </summary>
            <param name="message">The NDEF message</param>
            <returns>True if success</returns>
            <remarks>The Mifare application directory indicates the range of sectors used for NDEF. Normally
            these begin at sector 1.</remarks>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareCardCapacity">
            <summary>
            Different storage capacity for Mifare cards
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCapacity.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCapacity.Mifare300">
            <summary>
            Mifare 300
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCapacity.Mifare1K">
            <summary>
            Mifare 1K
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCapacity.Mifare2K">
            <summary>
            Mifare 2K
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCapacity.Mifare4K">
            <summary>
            Mifare 4K
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareCardCommand">
            <summary>
            List of commands available for the Mifare cards
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.AuthenticationA">
            <summary>
            Authentication A for Key A
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.AuthenticationB">
            <summary>
            Authentication B for Key B
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Read16Bytes">
            <summary>
            Read 16 Bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Write16Bytes">
            <summary>
            Write 16 Bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Write4Bytes">
            <summary>
            Write 4 Bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Incrementation">
            <summary>
            Incrementation
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Decrementation">
            <summary>
            Decrementation
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Transfer">
            <summary>
            Transfer
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Mifare.MifareCardCommand.Restore">
            <summary>
            Restore
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareDirectory">
            <summary>
            Mifare application directory
            This describes the assignent of sectors on the MifareCard to applications.
            The on-card directory is described in https://www.nxp.com/docs/en/application-note/AN10787.pdf
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.CreateEmpty(Iot.Device.Card.Mifare.MifareCard)">
            <summary>
            Create an empty MifareDirectory for a specified MifareCard
            </summary>
            <param name="card">the card associated with this directory</param>
            <exception cref="T:System.ArgumentException">the card capacity must be 1K, 2K, or 4K</exception>
            <remarks>This allocates a maximum size directory (5 blocks == 80 bytes),
            which is stored in sector 0, blocks 1 and 2, and (for 2K and 4K cards)
            in sector 16 blocks 64, 65, and 66. Sectors are marked as free (0);
            sectors beyond the end of the card are marked as NotApplicable.</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.LoadFromCard(Iot.Device.Card.Mifare.MifareCard)">
            <summary>
            Load the MifareDirectory from a specified MifareCard
            The directory blocks must have the correct Akey and access bytes.
            The directory CRC must be valid.
            </summary>
            <param name="card">the card whose directory is being loaded</param>
            <exception cref="T:System.ArgumentException">the card capacity must be 1K, 2K, or 4K</exception>
            <returns>new MifareDirectory if success, null if error</returns>
            <remarks>This always returns a maximum size directory (5 blocks == 80 bytes),
            regardless of the card size. Sectors beyond the end of the card are
            marked as NotApplicable.</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.CalculateCrc(System.ReadOnlySpan{System.Byte})">
            <summary>
            Calculate the CRC byte for a Mifare application directory segment
            </summary>
            <param name="data">The data bytes in the directory segment</param>
            <returns>Checksum byte</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.StoreToCard(System.ReadOnlySpan{System.Byte})">
            <summary>
            Store the MifareDirectory to its MifareCard
            </summary>
            <param name="keyB">authentication key B for the directory sectors</param>
            <returns>true if successful, false in case of failure</returns>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareDirectory.CardPublisherSector">
            <summary>
            Card publisher sector (if any)
            If non-zero, this indicates the sector that is allocated to the card publisher.
            </summary>
            <remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">the sector number is too large or is equal to 0x10</exception>
            According to https://www.nxp.com/docs/en/application-note/AN10787.pdf , 2K and 4K
            cards can optionally indicate a second card publisher sector in the directory in sector 16.
            This implementation does not support that configuration: it provides no way to get the
            second value, and setting this property will change both to the same value.
            </remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.GetApplications(System.Func{Iot.Device.Card.Mifare.MifareApplicationIdentifier,System.Boolean})">
            <summary>
            Get directory entries for all applications matching a particular filter criterion
            </summary>
            <param name="matchFilter">match condition for each application ID; if null, matches every non-administrative application</param>
            <returns>all directory entries that match the filter criterion</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.TryGetApplication(Iot.Device.Card.Mifare.MifareApplicationIdentifier)">
            <summary>
            Try to get a directory entry for a particular application ID
            </summary>
            <param name="matchAppId">application ID of desired application</param>
            <returns>directory entry for the specified application (or null if it is not present in the directory)</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.Allocate(Iot.Device.Card.Mifare.MifareApplicationIdentifier,System.UInt32)">
            <summary>
            Allocate sectors in the directory for a specified application
            This only updates the directory, not the application's data blocks or sector trailers.
            The directory must be written back to the card with <see cref="M:Iot.Device.Card.Mifare.MifareDirectory.StoreToCard(System.ReadOnlySpan{System.Byte})"/>.
            Specifying an allocation of 0 sectors will cause the largest available contiguous
            set of sectors to be allocated to this application. If the directory is
            empty, this allocates everything.
            </summary>
            <param name="appId">the application to be allocated</param>
            <param name="numberOfSectors">the number of sectors to be allocated</param>
            <returns>a directory entry for the new application or null if the allocation fails</returns>
            <remarks>The allocation is based upon sectors, not blocks. On a 4K card,
            the first 32 sectors are 4 blocks (3 data blocks plus the sector trailer)
            and the last 8 sectors are 16 blocks (15 dsata blocks plus the sector trailer).</remarks>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectory.Free(Iot.Device.Card.Mifare.MifareDirectoryEntry,System.Boolean)">
            <summary>
            Free the sectors associated with the specified directory entry
            This only updates the directory, not the data blocks or sector trailers.
            The directory must be written back to the card with <see cref="M:Iot.Device.Card.Mifare.MifareDirectory.StoreToCard(System.ReadOnlySpan{System.Byte})"/>.
            If the sectors cannot be reused for some reason, such as if the authentication key
            has been lost or the sector trailer is read-only, then the sectors should be freed as
            "defective" so that they will not be available for reallocation.
            </summary>
            <param name="entry">the directory entry to be freed</param>
            <param name="defective">if true, the freed sectors will not be available for reallocation</param>
        </member>
        <member name="T:Iot.Device.Card.Mifare.MifareDirectoryEntry">
            <summary>
            Describes the sectors assigned to a Mifare application in the directory.
            Sector 0 and (on cards larger than 1K) sector 16 are used for the directory.
            Mifare applications are assigned a contiguous range of sectors, except
            that the assignment is discontiguous across sector 16 (which is skipped)
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectoryEntry.#ctor(Iot.Device.Card.Mifare.MifareApplicationIdentifier,System.Byte,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="appId">application identifier</param>
            <param name="firstSector">first sector assigned to this application</param>
            <param name="numberOfSectors">number of sectors assigned to this application</param>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareDirectoryEntry.ApplicationIdentifier">
            <summary>
            Mifare application identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareDirectoryEntry.FirstSector">
            <summary>
            First assigned sector
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareDirectoryEntry.NumberOfSectors">
            <summary>
            Number of sectors
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Mifare.MifareDirectoryEntry.NumberOfBlocks">
            <summary>
            Number of data blocks
            This is not simply a multiple of the number of sectors, because the
            last eight sectors on a 4K card are larger than the first 32.
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectoryEntry.GetAllSectors">
            <summary>
            Get all sectors that are assigned to this application
            </summary>
            <returns>enumeration of assigned sector numbers</returns>
        </member>
        <member name="M:Iot.Device.Card.Mifare.MifareDirectoryEntry.GetAllDataBlocks">
            <summary>
            Get all data blocks that are assigned to this application
            </summary>
            <returns>enueration of assigned data block numbers</returns>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.AuthenticationConfiguration">
            <summary>
            Contains the Authentication Configuration elements
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.AuthenticationConfiguration.IsReadWriteAuthenticationRequired">
            <summary>
            Is Read Write Authentication Required
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.AuthenticationConfiguration.AuthenticationPageRequirement">
            <summary>
            Gets or sets the authentication page requirement
            </summary>
            <remarks>If the page is higher than the capacity, it means no authentication required.</remarks>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.AuthenticationConfiguration.IsWritingLocked">
            <summary>
            Is user configuration permanently locked against write access, except PWD and PACK
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.AuthenticationConfiguration.MaximumNumberOfPossibleTries">
            <summary>
            Maximum number of possible try, 0 = disabled, 1 to 7 enabled
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.Configuration">
            <summary>
            The different configuration elements
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.Configuration.#ctor">
            <summary>
            Create a default Configuration
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.Mirror">
            <summary>
            Gets or sets the Mirror configuration.
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.Authentication">
            <summary>
            Gets or sets the Authentication configuration.
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.NfcCounter">
            <summary>
            Gets or sets the NFC counter configuration
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.IsStrongModulation">
            <summary>
            Is the strong Mirror Modulation Mode enabled
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.IsSleepEnabled">
            <summary>
            Is the sleep mode enabled
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.Configuration.FieldDetectPin">
            <summary>
            Field Detect Pin mode
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.Configuration.Serialize">
            <summary>
            Serialize the configuration in a 8 bytes array skipping Password and Pack
            </summary>
            <returns>The serialized byte array</returns>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.FieldDetectPin">
            <summary>
            Field detection pin mode
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.FieldDetectPin.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.FieldDetectPin.FirstStateOfFrame">
            <summary>
            Enabled by first State of Frame so start of the communication
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.FieldDetectPin.TagSelectopn">
            <summary>
            Enabled when a tag is selected
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.FieldDetectPin.FieldPresence">
            <summary>
            Enabled when a field is present
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.MirrorConfiguration">
            <summary>
            The Mirror Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorConfiguration.UidMirrorSize">
            <summary>
            The size in bytes of the UID Mirror
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorConfiguration.NfcCounterMirrorSize">
            <summary>
            The size in bytes of the NFC counter Mirror
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorConfiguration.UidAndNfcCounterMirrorSize">
            <summary>
            The size in bytes when both mirror counter are activated = 14 + 1 + 6
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.MirrorConfiguration.#ctor">
            <summary>
            Create a default Mirror Configuration
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.MirrorConfiguration.MirrorType">
            <summary>
            Gets or sets the Mirror Type
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.MirrorConfiguration.Page">
            <summary>
            Gets or sets the Mirror Page
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.MirrorConfiguration.Position">
            <summary>
            Gets or sets the Mirror Position in the page from 0 to 3
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.MirrorType">
            <summary>
            The type of mirror activated
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorType.None">
            <summary>
            No mirror activated
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorType.UidAscii">
            <summary>
            UID ASCII activated
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.MirrorType.NfcCounter">
            <summary>
            NFC counter activated
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.NfcCounterConfiguration">
            <summary>
            NFC counter configuration class
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.NfcCounterConfiguration.IsEnabled">
            <summary>
            Is the Counter enabled
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.NfcCounterConfiguration.IsPasswordProtected">
            <summary>
            Is the counter password protected
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.UltralightCard">
            <summary>
            A Ultralight card class
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCard.DefaultPassword">
            <summary>
            Default password used for write and read
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.Target">
            <summary>
            The tag number detected by the reader, only 1 or 2
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.NdefCapacity">
            <summary>
            The NDEF capacity in bytes
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.UltralightCardType">
            <summary>
            The type of card
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.BlockNumber">
            <summary>
            The block number to authenticate or read or write
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.Data">
            <summary>
            The Data which has been read or to write for the specific block
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.Command">
            <summary>
            The command to execute on the card
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.Counter">
            <summary>
            The counter to read or increment
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.AuthenticationKey">
            <summary>
            Authentication key
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.SerialNumber">
            <summary>
            UUID is the Serial Number, called MAC sometimes
            </summary>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.ReselectAfterError">
            <summary>
            Reselect the card after a card command fails
            After an error, the card will not respond to any further commands
            until it is reselected. If this property is false, the caller
            is responsible for calling ReselectCard when RunUltralightCommand
            returns an error (-1).
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.IsUltralightCard(System.UInt16,System.Byte)">
            <summary>
            Check if this is a Ultralight card type
            </summary>
            <param name="ATQA">The ATQA</param>
            <param name="SAK">The SAK</param>
            <returns>True if this is an Ultralight</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.#ctor(Iot.Device.Card.CardTransceiver,System.Byte)">
            <summary>
            Constructor for Ultralight
            </summary>
            <param name="rfid">A card transceiver class</param>
            <param name="target">The target number as some card readers attribute one</param>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.GetVersion">
            <summary>
            Get the version data
            </summary>
            <returns>Empty byte array if error, otherwise a 8 bytes array</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.ReadFast(System.Byte,System.Byte)">
            <summary>
            Read at once multiple pages blocks of 4 bytes
            </summary>
            <param name="startPage">The start block</param>
            <param name="endPage">The end block</param>
            <returns>A buffer with the read bytes</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.RunUltralightCommand">
            <summary>
            Run the last setup command. In case of reading bytes, they are automatically pushed into the Data property
            </summary>
            <returns>-1 if the process fails otherwise the number of bytes read</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.IsPageReadOnly(System.Byte)">
            <summary>
            Check if a page is read only
            </summary>
            <param name="page">The page number</param>
            <returns>True is read only</returns>
        </member>
        <member name="P:Iot.Device.Card.Ultralight.UltralightCard.NumberBlocks">
            <summary>
            Get the number of blocks for a specific sector
            </summary>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.ReselectCard">
            <summary>
            Select the card. Needed if authentication or read/write failed
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.WriteNdefMessage(Iot.Device.Ndef.NdefMessage)">
            <summary>
            Write an NDEF Message
            </summary>
            <param name="message">The NDEF Message to write</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.IsFormattedNdef">
            <summary>
            Check if the card formated to NDEF
            </summary>
            <returns>True if NDEF formated</returns>
            <remarks>It will only check the first 2 block of the first sector and that the GPB is set properly</remarks>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.FormatNdef(System.ReadOnlySpan{System.Byte})">
            <summary>
            Format the Card to NDEF
            </summary>
            <param name="authenticationKey">An authentication key if authentication is required.</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.TryReadNdefMessage(Iot.Device.Ndef.NdefMessage@)">
            <summary>
            Try to read a NDEF Message from a Mifare card
            </summary>
            <param name="message">The NDEF message</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.ProcessAuthentication(System.ReadOnlySpan{System.Byte})">
            <summary>
            Process authentication
            </summary>
            <param name="authenticationKkey">An authentication key</param>
            <returns>True if success</returns>
            <remarks>Depending on the type of authentication, the process will be done transparently</remarks>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.GetCounter(System.Byte)">
            <summary>
            Get the counter value
            </summary>
            <param name="counter">A valid counter value, can vary depending on the card. 0xFF will ignore the value and use the one set in Counter</param>
            <returns>The counter value or -1 if any error</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.IncreaseCounter(System.Byte,System.Int32)">
            <summary>
            Increase a counter by a specified amount
            </summary>
            <param name="counter">A valid counter value, can vary depending on the card. 0xFF will ignore the value and use the one set in Counter</param>
            <param name="increment">The amount to increment the counter. If negative, it will use the value of Data</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.WriteDataBlock(System.Byte)">
            <summary>
            Perform a write using the 16 bytes present in Data on a specific block
            </summary>
            <param name="block">The block number to write</param>
            <returns>True if success</returns>
            <remarks>You will need to be authenticated properly before</remarks>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.GetSignature">
            <summary>
            Get the chip signature
            </summary>
            <returns>The signature or an empty array</returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.TryGetConfiguration(Iot.Device.Card.Ultralight.Configuration@)">
            <summary>
            Try to get the configuration
            </summary>
            <param name="configuration">The detailed configuration</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.WriteConfiguration(Iot.Device.Card.Ultralight.Configuration)">
            <summary>
            Write the configuration
            </summary>
            <param name="configuration">The configuration to write</param>
            <returns>True if success</returns>
            <remarks>An authentication has to happen and will use the credentials stored</remarks>
        </member>
        <member name="M:Iot.Device.Card.Ultralight.UltralightCard.SetPassword(System.ReadOnlySpan{System.Byte})">
            <summary>
            Set the password, the AuthenticationKey is used as the old password
            </summary>
            <param name="newAuthenticationKkey">The new authentication key</param>
            <returns>True if success</returns>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.UltralightCardType">
            <summary>
            Capacity of the Ultralight card
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag210">
            <summary>
            Ultralight NTAG210
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag212">
            <summary>
            Ultralight NTAG212
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag213">
            <summary>
            Ultralight NTAG213 144 bytes NDEF
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag213F">
            <summary>
            Ultralight NTAG213F
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag215">
            <summary>
            Ultralight NTAG215 1504 bytes NDEF
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag216">
            <summary>
            Ultralight NTAG216 888 bytes NDEF
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag216F">
            <summary>
            Ultralight NTAG216
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightEV1MF0UL1101">
            <summary>
            Ultralight EV1 MF0UL1101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightEV1MF0ULH1101">
            <summary>
            Ultralight EV1 MF0ULH1101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightEV1MF0UL2101">
            <summary>
            Ultralight EV1 MF0UL2101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightEV1MF0ULH2101">
            <summary>
            Ultralight EV1 MF0ULH2101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H1101">
            <summary>
            Ultralight NTAG I2C NT3H1101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H1101W0">
            <summary>
            Ultralight NTAG I2C NT3H1101W0
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H2111W0">
            <summary>
            Ultralight NTAG I2C NT3H2111W0
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H2101">
            <summary>
            Ultralight NTAG I2C NT3H2101
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H1201W0">
            <summary>
            Ultralight NTAG I2C NT3H1201W0
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtagI2cNT3H2211W0">
            <summary>
            Ultralight NTAG I2C NT3H2211W0
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightC">
            <summary>
            Ultralight C contactless ticket
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.UltralightNtag203">
            <summary>
            Ultralight NAG203 144 bytes NDEF
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCardType.MifareUltralight">
            <summary>
            The older Mifare Ultralight model
            </summary>
        </member>
        <member name="T:Iot.Device.Card.Ultralight.UltralightCommand">
            <summary>
            List of commands available for the Mifare cards
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.GetVersion">
            <summary>
            Get the NTAG version
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.Read16Bytes">
            <summary>
            Read 16 Bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.ReadFast">
            <summary>
            Read multiple pages at once
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.WriteCompatible">
            <summary>
            Write 16 Bytes but only last significant 4 bytes are written
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.Write4Bytes">
            <summary>
            Write 4 Bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.ReadCounter">
            <summary>
            Read the current value of the NFC one way counter
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.IncreaseCounter">
            <summary>
            Increase he 24 bit counter
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.PasswordAuthentication">
            <summary>
            Password authentication with 4 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.ThreeDsAuthenticationPart1">
            <summary>
            For Ultralight C 3DS authentication
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.ThreeDsAuthenticationPart2">
            <summary>
            For Ultralight C 3DS authentication
            </summary>
        </member>
        <member name="F:Iot.Device.Card.Ultralight.UltralightCommand.ReadSignature">
            <summary>
            Read the ECC specific 32 byte signature
            </summary>
        </member>
        <member name="T:Iot.Device.Rfid.ApplicationType">
            <summary>
            Application type for 106 kbps type B cards
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.ApplicationType.Proprietary">
            <summary>
            Proprietary application type
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.ApplicationType.ApplicationBytesCoded">
            <summary>
            Byte coded application type
            </summary>
        </member>
        <member name="T:Iot.Device.Rfid.Data106kbpsInnovisionJewel">
            <summary>
            Create a 106 kbpd Innovision Jewel card
            </summary>
        </member>
        <member name="M:Iot.Device.Rfid.Data106kbpsInnovisionJewel.#ctor(System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Create a 106 kbpd Innovision Jewel card.
            </summary>
            <param name="targetNumber">The target number, should be 1 or 2 with PN532.</param>
            <param name="atqa">Known as SENS_RES in the documentation.</param>
            <param name="jewelId">The Jewel card ID.</param>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsInnovisionJewel.TargetNumber">
            <summary>
            The target number, should be 1 or 2 with PN532
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsInnovisionJewel.Atqa">
            <summary>
            Known as SENS_RES in the documentation
            Answer To reQuest, Type A
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsInnovisionJewel.JewelId">
            <summary>
            The Jewel card ID
            </summary>
        </member>
        <member name="T:Iot.Device.Rfid.Data106kbpsTypeA">
            <summary>
            Create a 106 kbpd card like a Mifare card
            </summary>
        </member>
        <member name="M:Iot.Device.Rfid.Data106kbpsTypeA.#ctor(System.Byte,System.UInt16,System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Create a 106 kbpd card like a Mifare card
            </summary>
            <param name="targetNumber">he target number, should be 1 or 2 with PN532.</param>
            <param name="atqa">Known as SENS_RES in the documentation.</param>
            <param name="sak">Know as SEL_RES in the documentation.</param>
            <param name="nfcId">The unique NFC ID.</param>
            <param name="ats">Potential extra Answer To Select data.</param>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeA.TargetNumber">
            <summary>
            The target number, should be 1 or 2 with PN532
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeA.Atqa">
            <summary>
            Known as SENS_RES in the documentation
            Answer To reQuest, Type A
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeA.Sak">
            <summary>
            Know as SEL_RES in the documentation
            Select AcKnowledge
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeA.NfcId">
            <summary>
            The unique NFC ID
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeA.Ats">
            <summary>
            Potential extra Answer To Select data
            </summary>
        </member>
        <member name="T:Iot.Device.Rfid.Data106kbpsTypeB">
            <summary>
            Core elements for a 106 kpbs type B card like a credit card
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.TargetNumber">
            <summary>
            The target number, should be 1 or 2 with PN532
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.NfcId">
            <summary>
            The unique NFC ID
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.ApplicationData">
            <summary>
            Application data
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.Command">
            <summary>
            The command send during the ATQB request
            Standard one should be 0x50
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.MaxFrameSize">
            <summary>
            The Max Frame Size
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.BitRates">
            <summary>
            The bit rate
            TODO: find more details on this elements it can be
            transformed as an enum
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.ISO14443_4Compliance">
            <summary>
            Is this card fully compliant with ISO 14443_4?
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.NadSupported">
            <summary>
            Is Node Address supported?
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.CidSupported">
            <summary>
            Is Card Identifier supported?
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.FrameWaitingTime">
            <summary>
            The frame waiting time in µ seconds
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data106kbpsTypeB.ApplicationType">
            <summary>
            The application type
            </summary>
        </member>
        <member name="M:Iot.Device.Rfid.Data106kbpsTypeB.#ctor(System.Byte[])">
            <summary>
            Create a 106 kbps card type B like a credit card
            </summary>
            <param name="atqb">Data to decode</param>
        </member>
        <member name="T:Iot.Device.Rfid.Data212_424kbps">
            <summary>
            212 and 424 card elements
            </summary>
        </member>
        <member name="M:Iot.Device.Rfid.Data212_424kbps.#ctor(System.Byte,System.Byte,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            212 and 424 card elements.
            </summary>
            <param name="targetNumber">The target number, should be 1 or 2 with PN532.</param>
            <param name="responseCode">The response code.</param>
            <param name="nfcId">The unique NFC ID.</param>
            <param name="pad">The Pad.</param>
            <param name="systemCode">The system code.</param>
        </member>
        <member name="P:Iot.Device.Rfid.Data212_424kbps.TargetNumber">
            <summary>
            The target number, should be 1 or 2 with PN532
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data212_424kbps.ResponseCode">
            <summary>
            The response code
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data212_424kbps.NfcId">
            <summary>
            The unique NFC ID
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data212_424kbps.Pad">
            <summary>
            The Pad
            </summary>
        </member>
        <member name="P:Iot.Device.Rfid.Data212_424kbps.SystemCode">
            <summary>
            The system code
            </summary>
        </member>
        <member name="T:Iot.Device.Rfid.MaxFrameSize">
            <summary>
            Bit rate supported by 144443-4B
            http://ww1.microchip.com/downloads/en/AppNotes/doc2056.pdf
            page 20
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B016">
            <summary>
            16 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B024">
            <summary>
            24 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B032">
            <summary>
            32 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B040">
            <summary>
            40 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B048">
            <summary>
            48 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B064">
            <summary>
            64 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B096">
            <summary>
            96 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B128">
            <summary>
            128 bytes
            </summary>
        </member>
        <member name="F:Iot.Device.Rfid.MaxFrameSize.B256">
            <summary>
            256 bytes
            </summary>
        </member>
        <member name="T:Iot.Device.Ccs811.Ccs811Sensor">
            <summary>
            Ultra-Low Power Digital Gas Sensor for Monitoring Indoor Air Quality
            Documentation can be found here: https://www.sciosense.com/products/environmental-sensors/ccs811-gas-sensor-solution/
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Ccs811Sensor.I2cFirstAddress">
            <summary>
            The first default I2C address when the Address pin is put to low
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Ccs811Sensor.I2cSecondAddress">
            <summary>
            The second default I2C address when the Address pin is put to high
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Ccs811Sensor.I2cTypicalFrequency">
            <summary>
            The typical operating speed for the bus
            Note that minimum is 10 KHz and the maximum is 400 KHz
            The device can operate in Stretching mode is the transfer is too fast.
            This stretching may not be well supported in all the hardware, in case of
            issue, it is recommended to lower the operating frequency
            </summary>
        </member>
        <member name="T:Iot.Device.Ccs811.Ccs811Sensor.MeasurementReadyHandler">
            <summary>
            Event raised when interruption pin is selected
            </summary>
            <param name="sender">This sensor</param>
            <param name="args">The measurement</param>
        </member>
        <member name="E:Iot.Device.Ccs811.Ccs811Sensor.MeasurementReady">
            <summary>
            The event handler for the measurement
            </summary>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.#ctor(System.Device.I2c.I2cDevice,System.Device.Gpio.GpioController,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The CCS811 sensor constructor
            </summary>
            <param name="i2cDevice">A valid I2C device</param>
            <param name="gpioController">An optional controller, either the default one will be used, either none will be created if any pin is used</param>
            <param name="pinWake">An awake pin, it is optional, this pin can be set to the ground if the sensor is always on</param>
            <param name="pinInterruption">An interruption pin when a measurement is ready, best use when you specify a threshold</param>
            <param name="pinReset">An optional hard reset pin</param>
            <param name="shouldDispose">Should the GPIO controller be disposed at the end</param>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.OperationMode">
            <summary>
            Set or get the operation mode
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.Error">
            <summary>
            Get the error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.HardwareIdentification">
            <summary>
            Get the hardware identification, it has to be 0x81
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.InterruptEnable">
            <summary>
            Is the hardware interrupt enabled
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.HardwareVersion">
            <summary>
            Hardware version should be 0x1X, any X seems valid
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.ApplicationVersion">
            <summary>
            Get the application version
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.BootloaderVersion">
            <summary>
            Get the boot loader version
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.WakeEnable">
            <summary>
            Is the wake feature enabled
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.IsDataReady">
            <summary>
            Do we have data ready to read?
            </summary>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.TryReadGasData(UnitsNet.VolumeConcentration@,UnitsNet.VolumeConcentration@,UnitsNet.ElectricCurrent@,System.Int32@)">
            <summary>
            Read the equivalent CO2 in ppm and equivalent Total Volatile Compound in ppb
            </summary>
            <param name="equivalentCO2">The equivalent CO2 (eCO2) output range for CCS811 is from
            400ppm up to 29206ppm.</param>
            <param name="equivalentTotalVolatileOrganicCompound">The equivalent Total Volatile Organic Compound (eTVOC)
            output range for CCS811 is from 0ppb up to 32768ppb</param>
            <param name="rawCurrentSelected">Raw data containing the value of the
            current through the sensor(0μA to 63μA)</param>
            <param name="rawAdcReading">Raw data containing  the
            readings of the voltage across the sensor with the selected
            current(1023 = 1.65V) where 1023 is the maximum value</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.TryReadGasData(UnitsNet.VolumeConcentration@,UnitsNet.VolumeConcentration@)">
            <summary>
            Read the equivalent CO2 in ppm and equivalent Total Volatile Compound in ppb
            </summary>
            <param name="equivalentCO2">The equivalent CO2 (eCO2) output range for CCS811 is from
            400ppm up to 29206ppm.</param>
            <param name="equivalentTotalVolatileOrganicCompound">The equivalent Total Volatile Organic Compound (eTVOC)
            output range for CCS811 is from 0ppb up to 32768ppb</param>
            <returns>True if success</returns>
        </member>
        <member name="P:Iot.Device.Ccs811.Ccs811Sensor.BaselineAlgorithmCalculation">
            <summary>
            Get or set the encoded version of the current baseline used in Algorithm Calculations
            </summary>
            <remarks>A previously stored value may be written back to this two byte
            register and the Algorithms will use the new value in its
            calculations(until it adjusts it as part of its internal Automatic
            Baseline Correction). Please refer to documentation to understand when to restore a
            previous baseline: https://www.sciosense.com/wp-content/uploads/2020/01/Application-Note-Baseline-Save-and-Restore-on-CCS811.pdf</remarks>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.SetEnvironmentData(UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            Set the environmental data, this is impacting the equivalent calculation
            of the gas.
            </summary>
            <param name="temperature">The temperature</param>
            <param name="humidity">The relative humidity, best to use Percent from 0 to 100</param>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.SetThreshold(UnitsNet.VolumeConcentration,UnitsNet.VolumeConcentration)">
            <summary>
            Set the threshold for the equivalent CO2. The pinInterrupt should be existing so
            interruptions are activated. If not, then the function will return false
            </summary>
            <param name="lowEquivalentCO2">The low value for the threshold</param>
            <param name="highEquivalentCO2">The high value for the threshold</param>
            <returns>True if success</returns>
            <remarks>Difference between the low and high value should be more than 50. This is called
            the hysteresis value.</remarks>
        </member>
        <member name="M:Iot.Device.Ccs811.Ccs811Sensor.Dispose">
            <summary>
            Dispose the sensor
            </summary>
        </member>
        <member name="T:Iot.Device.Ccs811.Error">
            <summary>
            The possible errors from the error register
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.WriteRegisterInvalid">
            <summary>The CCS811 received an I²C write request addressed to this station but with
            invalid register address ID</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.ReadRegisterInvalid">
            <summary>The CCS811 received an I²C read request to a mailbox ID that is invalid</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.MeasurementModeInvalid">
            <summary>The CCS811 received an I²C request to write an unsupported mode to
            MEAS_MODE</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.MaximumSensorResistanceReached">
            <summary>The sensor resistance measurement has reached or exceeded the maximum
            range</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.HeaterCurrentFault">
            <summary>The Heater current in the CCS811 is not in range</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Error.HeaterVoltageFault">
            <summary>The Heater voltage is not being applied correctly</summary>
        </member>
        <member name="T:Iot.Device.Ccs811.MeasurementArgs">
            <summary>
            Arguments of the Measurement Threshold event
            Contains the measurements done and potential error
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.MeasurementArgs.MeasurementSuccess">
            <summary>
            True if measurement is successful
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.MeasurementArgs.EquivalentCO2">
            <summary>
            Equivalent CO2, best is to use PartsPerMilion for a readable range
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.MeasurementArgs.EquivalentTotalVolatileOrganicCompound">
            <summary>
            Equivalent Total Volatile Organic Compound, best is to use PartsPerBilion for a readable range
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.MeasurementArgs.RawCurrentSelected">
            <summary>
            Raw current selected, best to use MicroAmpere for a readable range
            </summary>
        </member>
        <member name="P:Iot.Device.Ccs811.MeasurementArgs.RawAdcReading">
            <summary>
            Raw ADC reading
            </summary>
        </member>
        <member name="T:Iot.Device.Ccs811.OperationMode">
            <summary>
            Modes of Operation
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.OperationMode.Idle">
            <summary>
            Mode 0: Idle, low current mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.OperationMode.ConstantPower1Second">
            <summary>
            Mode 1: Constant power mode, IAQ measurement every second
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.OperationMode.PluseHeating10Second">
            <summary>
            Mode 2: Pulse heating mode IAQ measurement every 10 seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.OperationMode.LowPower60Second">
            <summary>
            Mode 3: Low power pulse heating mode IAQ
            measurement every 60 seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.OperationMode.ConstantPower250Millisecond">
            <summary>
            Mode 4: Constant power mode, sensor measurement
            every 250ms
            </summary>
        </member>
        <member name="T:Iot.Device.Ccs811.Register">
            <summary>
            Internal register. Source CCS811-Datasheet.pdf, page 17
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.STATUS">
            <summary>Status register</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.MEAS_MODE">
            <summary>Measurement mode and conditions register</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.ALG_RESULT_DATA">
            <summary>Algorithm result. The most significant 2 bytes contain a
            ppm estimate of the equivalent CO2 (eCO2) level, and
            the next two bytes contain a ppb estimate of the total
            VOC level.</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.RAW_DATA">
            <summary>Raw ADC data values for resistance and current source
            used.</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.ENV_DATA">
            <summary>Temperature and humidity data can be written to
            enable compensation</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.THRESHOLDS">
            <summary>Thresholds for operation when interrupts are only
            generated when eCO2 ppm crosses a threshold</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.BASELINE">
            <summary>The encoded current baseline value can be read. A
            previously saved encoded baseline can be written.</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.HW_ID">
            <summary>Hardware ID. The value is 0x81</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.HW_Version">
            <summary>Hardware Version. The value is 0x1X</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.FW_Boot_Version">
            <summary>Firmware Boot Version. The first 2 bytes contain the
            firmware version number for the boot code</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.FW_App_Version">
            <summary>Firmware Application Version. The first 2 bytes contain
            the firmware version number for the application code</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.Internal_State">
            <summary>Internal Status register</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.ERROR_ID">
            <summary>Error ID. When the status register reports an error its
            source is located in this register</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.APP_ERASE">
            <summary>
            If the correct 4 bytes (0xE7 0xA7 0xE6 0x09) are written
            to this register in a single sequence the device will start
            the application erase
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.APP_DATA">
            <summary>
            Transmit flash code for the bootloader to write to the
            application flash code space.
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.APP_VERIFY">
            <summary>
            Starts the process of the bootloader checking though
            the application to make sure a full image is valid.
            </summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.APP_START">
            <summary>Swith from boot to start applicaiton mode</summary>
        </member>
        <member name="F:Iot.Device.Ccs811.Register.SW_RESET">
            <summary>If the correct 4 bytes (0x11 0xE5 0x72 0x8A) are written
            to this register in a single sequence the device will reset
            and return to BOOT mode.</summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayEntryMode.DisplayShift">
            <summary>
            Enabled to shift the display left when <see cref="F:Iot.Device.CharacterLcd.DisplayEntryMode.Increment"/> is enabled
            or right if <see cref="F:Iot.Device.CharacterLcd.DisplayEntryMode.Increment"/> is disabled.
            </summary>
            <remarks>The "S" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayEntryMode.Increment">
            <summary>
            Set to increment the CGRAM/DDRAM address by 1 when a character code is
            written into or read from and moves the cursor to the right. Disabling
            decrements and moves the cursor to the left.
            </summary>
            <remarks>The "I/D" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayEntryMode.Command">
            <summary>
            The flag for entry mode- must be set.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayControl.BlinkOn">
            <summary>
            Set for enabling cursor blinking.
            </summary>
            <remarks>The "B" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayControl.CursorOn">
            <summary>
            Set for enabling the cursor.
            </summary>
            <remarks>The "C" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayControl.DisplayOn">
            <summary>
            Set for enabling the entire display.
            </summary>
            <remarks>The "D" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayControl.Command">
            <summary>
            The flag for display control- must be set.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayShift.Right">
            <summary>
            When set shifts right, otherwise shifts left.
            </summary>
            <remarks>The "R/L" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayShift.Display">
            <summary>
            When set shifts the display when data is entered, otherwise shifts the cursor.
            </summary>
            <remarks>The "S/C" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayShift.Command">
            <summary>
            The flag for display and cursor shift- must be set.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayFunction.ExtendedInstructionSet">
            <summary>
            When set, commands (other than <see cref="T:Iot.Device.CharacterLcd.DisplayFunction"/>) are from the
            extended (NXP/Philips, Sitronix) instruction set. For Sitronix (ST7036) this
            is extended intstruction set 1.
            </summary>
            <remarks>
            The "H" option from the NXP datasheet. The "IS1" option from Sitronix.
            Not all driver ICs support this.
            </remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayFunction.Font5x10">
             <summary>
             If set font is 5x10, otherwise font is 5x8.
             </summary>
             <remarks>
             The "F" option from the HD44780 datasheet.
            
             The displays that supported 5x10 are extremely rare.
            
             On NXP/Philips chips this is the "M" option that
             controls the number of display lines. When set the
             driver is set to 2 line x 16 characters. Otherwise
             the driver is set to 1 line by 32 characters.
            
             For Sitronix, this is referred to as "DH" and sets
             double height mode.
             </remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayFunction.TwoLine">
             <summary>
             If set display is two line, otherwise display is one line.
             </summary>
             <remarks>
             The "N" option from the datasheet.
            
             When set to one line, shifting the display right pulls
             address 0x4F to the 1st display position. When set to two
             lines, shifting right pulls 0x27 for the first line and
             0x67 for the second.
             </remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayFunction.EightBit">
            <summary>
            If set display uses all eight data pins, otherwise display uses
            four data pins.
            </summary>
            <remarks>The "DL" option from the datasheet.</remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.DisplayFunction.Command">
            <summary>
            The flag for setting display function- must be set.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.Hd44780">
             <summary>
             Supports LCD character displays compatible with the HD44780 LCD controller/driver.
             Also supports serial interface adapters such as the MCP23008.
             </summary>
             <remarks>
             The Hitatchi HD44780 was released in 1987 and set the standard for LCD controllers. Hitatchi does not make this chipset anymore, but
             most character LCD drivers are intended to be fully compatible with this chipset. Some examples: Sunplus SPLC780D, Sitronix ST7066U,
             Samsung KS0066U, Aiptek AIP31066, and many more.
            
             Some compatible chips extend the HD44780 with addtional pins and features. They are still fully compatible. The ST7036 is one example.
            
             This implementation was drawn from numerous datasheets and libraries such as Adafruit_Python_CharLCD.
             </remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780.ClearDisplayCommand">
            <summary>
            Command which can be used to clear the display
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780.ReturnHomeCommand">
            <summary>
            Command which can be used to return (cursor) home
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780.SetCGRamAddressCommand">
            <summary>
            Command which can be used to set CG RAM address
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780.SetDDRamAddressCommand">
            <summary>
            Command which can be used to set DD RAM address
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780._rowOffsets">
            <summary>
            Offsets of the rows
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.Hd44780._lcdInterface">
            <summary>
            LCD interface used by the device
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.#ctor(System.Drawing.Size,Iot.Device.CharacterLcd.LcdInterface)">
            <summary>
            Initializes a new HD44780 LCD controller.
            </summary>
            <param name="size">The logical size of the LCD.</param>
            <param name="lcdInterface">The interface to use with the LCD.</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.Size">
            <summary>
            Logical size, in characters, of the LCD.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.NumberOfCustomCharactersSupported">
            <summary>
            Returns the number of custom characters for this display.
            A custom character is one that can be user-defined and assigned to a slot using <see cref="M:Iot.Device.CharacterLcd.Hd44780.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})"/>
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Initialize(System.Int32)">
            <summary>
            Initializes the display by setting the specified columns and lines.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.BacklightOn">
            <summary>
            Enable/disable the backlight. (Will always return false if no backlight pin was provided.)
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendData(System.Byte)">
            <summary>
            Sends byte to the device
            </summary>
            <param name="value">Byte to be sent to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendCommand(System.Byte)">
            <summary>
            Sends command to the device
            </summary>
            <param name="command">Byte representing the command to be sent</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendCommandAndWait(System.Byte)">
            <summary>
            The initialization sequence and some other complex commands should be sent with delays, or the display may
            behave unexpectedly. It may show random, blinking characters
            or display text very faintly only.
            </summary>
            <param name="command">The command to send</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendData(System.ReadOnlySpan{System.Byte})">
            <summary>
            Sends data to the device
            </summary>
            <param name="values">Data to be send to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendData(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends data to the device
            </summary>
            <param name="values">Data to be send to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SendCommands(System.ReadOnlySpan{System.Byte})">
            <summary>
            Send commands to the device
            </summary>
            <param name="commands">Each byte represents command being sent to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.GetTwoLineMode(System.Int32)">
            <summary>
            Determines if the device should use two line mode
            </summary>
            <param name="rows">Number of rows on the device</param>
            <returns>True if device should use two line mode</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.InitializeRowOffsets(System.Int32)">
            <summary>
            Initializes row offsets
            </summary>
            <param name="rows">Rows to be initialized</param>
            <returns>Array of offsets</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.WaitForNotBusy(System.Int32)">
            <summary>
            Wait for the device to not be busy.
            </summary>
            <param name="microseconds">Time to wait if checking busy state isn't possible/practical.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Clear">
            <summary>
            Clears the LCD, returning the cursor to home and unshifting if shifted.
            Will also set to Increment.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Home">
            <summary>
            Moves the cursor to the first line and first column, unshifting if shifted.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to an explicit column and row position.
            </summary>
            <param name="left">The column position from left to right starting with 0.</param>
            <param name="top">The row position from the top starting with 0.</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.DisplayOn">
            <summary>
            Enable/disable the display.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.UnderlineCursorVisible">
            <summary>
            Enable/disable the underline cursor.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.BlinkingCursorVisible">
            <summary>
            Enable/disable the blinking cursor.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.AutoShift">
            <summary>
            When enabled the display will shift rather than the cursor.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.Hd44780.Increment">
            <summary>
            Gets/sets whether the cursor location increments (true) or decrements (false).
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.ShiftDisplayLeft">
            <summary>
            Move the display left one position.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.ShiftDisplayRight">
            <summary>
            Move the display right one position.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.ShiftCursorLeft">
            <summary>
            Move the cursor left one position.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.ShiftCursorRight">
            <summary>
            Move the cursor right one position.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})">
             <summary>
             Fill one of the 8 CGRAM locations (character codes 0 - 7) with custom characters.
             </summary>
             <remarks>
             The custom characters also occupy character codes 8 - 15.
            
             You can find help designing characters at https://www.quinapalus.com/hd44780udg.html.
            
             The datasheet description for custom characters is very difficult to follow. Here is
             a rehash of the technical details that is hopefully easier:
            
             Only 6 bits of addresses are available for character ram. That makes for 64 bytes of
             available character data. 8 bytes of data are used for each character, which is where
             the 8 total custom characters comes from (64/8).
            
             Each byte corresponds to a character line. Characters are only 5 bits wide so only
             bits 0-4 are used for display. Whatever is in bits 5-7 is just ignored. Store bits
             there if it makes you happy, but it won't impact the display. '1' is on, '0' is off.
            
             In the built-in characters the 8th byte is usually empty as this is where the underline
             cursor will be if enabled. You can put data there if you like, which gives you the full
             5x8 character. The underline cursor just turns on the entire bottom row.
            
             5x10 mode is effectively useless as displays aren't available that utilize it. In 5x10
             mode *16* bytes of data are used for each character. That leaves room for only *4*
             custom characters. The first character is addressable from code 0, 1, 8, and 9. The
             second is 2, 3, 10, 11 and so on...
            
             In this mode *11* bytes of data are actually used for the character data, which
             effectively gives you a 5x11 character, although typically the last line is blank to
             leave room for the underline cursor. Why the modes are referred to as 5x8 and 5x10 as
             opposed to 5x7 and 5x10 or 5x8 and 5x11 is a mystery. In an early pre-release data
             book 5x7 and 5x10 is used (Advance Copy #AP4 from July 1985). Perhaps it was a
             marketing change?
            
             As only 11 bytes are used in 5x10 mode, but 16 bytes are reserved, the last 5 bytes
             are useless. The datasheet helpfully suggests that you can store your own data there.
             The same would be true for bits 5-7 of lines that matter for both 5x8 and 5x10.
             </remarks>
             <param name="location">Should be between 0 and 7</param>
             <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.CreateCustomCharacter(System.Int32,System.Byte[])">
            <summary>
            Fill one of the 8 CGRAM locations (character codes 0 - 7) with custom characters.
            See <see cref="M:Iot.Device.CharacterLcd.Hd44780.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})"/> for details.
            </summary>
            <param name="location">Should be between 0 and 7</param>
            <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Write(System.String)">
            <summary>
            Write text to display.
            </summary>
            <param name="text">Text to be displayed.</param>
            <remarks>
            There are only 256 characters available. There are chip variants
            with different character sets. Characters from space ' ' (32) to
            '}' are usually the same with the exception of '\', which is a
            yen symbol on some chips '¥'.
            </remarks>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Write(System.Char[])">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Hd44780.Dispose">
            <summary>
            Releases unmanaged resources used by Hd44780
            and optionally release managed resources
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.ICharacterLcd">
            <summary>
            Interface for character LCD Low-Level handler
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.BacklightOn">
            <summary>
            Enable/disable the backlight. (Will always return false if no backlight pin was provided.)
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.DisplayOn">
            <summary>
            Enable/disable the display.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.UnderlineCursorVisible">
            <summary>
            Enable/disable the underline cursor.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.BlinkingCursorVisible">
            <summary>
            Enable/disable the blinking cursor.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.Size">
            <summary>
            Returns the size of the display.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.ICharacterLcd.NumberOfCustomCharactersSupported">
            <summary>
            Returns the number of custom characters for this display.
            A custom character is one that can be user-defined and assigned to a slot using <see cref="M:Iot.Device.CharacterLcd.ICharacterLcd.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})"/>
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.Clear">
            <summary>
            Clears the display and moves the cursor to the top left.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})">
             <summary>
             Fill one of the 8 CGRAM locations (character codes 0 - 7) with custom characters.
             </summary>
             <remarks>
             The custom characters also occupy character codes 8 - 15.
            
             You can find help designing characters at https://www.quinapalus.com/hd44780udg.html.
            
             The datasheet description for custom characters is very difficult to follow. Here is
             a rehash of the technical details that is hopefully easier:
            
             Only 6 bits of addresses are available for character ram. That makes for 64 bytes of
             available character data. 8 bytes of data are used for each character, which is where
             the 8 total custom characters comes from (64/8).
            
             Each byte corresponds to a character line. Characters are only 5 bits wide so only
             bits 0-4 are used for display. Whatever is in bits 5-7 is just ignored. Store bits
             there if it makes you happy, but it won't impact the display. '1' is on, '0' is off.
            
             In the built-in characters the 8th byte is usually empty as this is where the underline
             cursor will be if enabled. You can put data there if you like, which gives you the full
             5x8 character. The underline cursor just turns on the entire bottom row.
            
             5x10 mode is effectively useless as displays aren't available that utilize it. In 5x10
             mode *16* bytes of data are used for each character. That leaves room for only *4*
             custom characters. The first character is addressable from code 0, 1, 8, and 9. The
             second is 2, 3, 10, 11 and so on...
            
             In this mode *11* bytes of data are actually used for the character data, which
             effectively gives you a 5x11 character, although typically the last line is blank to
             leave room for the underline cursor. Why the modes are referred to as 5x8 and 5x10 as
             opposed to 5x7 and 5x10 or 5x8 and 5x11 is a mystery. In an early pre-release data
             book 5x7 and 5x10 is used (Advance Copy #AP4 from July 1985). Perhaps it was a
             marketing change?
            
             As only 11 bytes are used in 5x10 mode, but 16 bytes are reserved, the last 5 bytes
             are useless. The datasheet helpfully suggests that you can store your own data there.
             The same would be true for bits 5-7 of lines that matter for both 5x8 and 5x10.
             </remarks>
             <param name="location">Should be between 0 and <see cref="P:Iot.Device.CharacterLcd.ICharacterLcd.NumberOfCustomCharactersSupported"/>.</param>
             <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.CreateCustomCharacter(System.Int32,System.Byte[])">
            <summary>
            Fill one of the 8 CGRAM locations (character codes 0 - 7) with custom characters.
            See <see cref="M:Iot.Device.CharacterLcd.ICharacterLcd.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})"/> for details.
            </summary>
            <param name="location">Should be between 0 and <see cref="P:Iot.Device.CharacterLcd.ICharacterLcd.NumberOfCustomCharactersSupported"/>.</param>
            <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to an explicit column and row position.
            </summary>
            <param name="left">The column position from left to right starting with 0.</param>
            <param name="top">The row position from the top starting with 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The given position is not inside the display.</exception>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.Write(System.String)">
            <summary>
            Write text to the display, without any character translation.
            </summary>
            <param name="text">Text to be displayed.</param>
            <remarks>
            There are only 256 characters available. Different chip variants
            have different character sets. Characters from space ' ' (32) to
            '}' are usually the same with the exception of '\', which is a
            yen symbol ('¥') on some chips.
            </remarks>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place.
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.ICharacterLcd.Write(System.Char[])">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place.
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="T:Iot.Device.CharacterLcd.CharacterLcdExtensions">
            <summary>
            Extension methods for ICharacterLcd
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.CharacterLcdExtensions.CreateCustomCharacter(Iot.Device.CharacterLcd.ICharacterLcd,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a custom character for standard displays with 8-pixel-per-row characters. See <see cref="M:Iot.Device.CharacterLcd.ICharacterLcd.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})"/> for details.
            </summary>
            <param name="self">Instance of ICharacterLcd. This method can be called as extension method on this instance</param>
            <param name="location">Index of the character to create in the hardware character table</param>
            <param name="b0">First row data (standard displays only use the lower 5 bits of each row)</param>
            <param name="b1">Second row data</param>
            <param name="b2">Third row data</param>
            <param name="b3">Fourth row data</param>
            <param name="b4">Fifth row data</param>
            <param name="b5">Sixth row data</param>
            <param name="b6">Seventh row data</param>
            <param name="b7">Eight row data</param>
        </member>
        <member name="T:Iot.Device.CharacterLcd.Lcd1602">
            <summary>
            16x2 HD44780 compatible character LCD display.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd1602.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs a new HD44780 based 16x2 LCD controller, using GPIO pins.
            </summary>
            <param name="registerSelectPin">The pin that controls the regsiter select.</param>
            <param name="enablePin">The pin that controls the enable switch.</param>
            <param name="dataPins">Collection of pins holding the data that will be printed on the screen.</param>
            <param name="backlightPin">The optional pin that controls the backlight of the display.</param>
            <param name="backlightBrightness">The brightness of the backlight. 0.0 for off, 1.0 for on.</param>
            <param name="readWritePin">The optional pin that controls the read and write switch.</param>
            <param name="controller">The controller to use with the LCD. If not specified, uses the platform default.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd1602.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Constructs a new HD44780 based 16x2 LCD controller with integrated I2c support.
            </summary>
            <remarks>
            This is for on-chip I2c support. For connecting via I2c GPIO expanders, use the GPIO constructor <see cref="M:Iot.Device.CharacterLcd.Lcd1602.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)"/>.
            </remarks>
            <param name="device">The I2c device for the LCD.</param>
            <param name="uses8Bit">True if the device uses 8 Bit commands, false if it handles only 4 bit commands.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd1602.#ctor(Iot.Device.CharacterLcd.LcdInterface)">
            <summary>
            Constructs a new 16x2 LCD controller with the given interface
            </summary>
            <param name="lcdInterface">The LCD Interface</param>
        </member>
        <member name="T:Iot.Device.CharacterLcd.Lcd2004">
            <summary>
            20x4 HD44780 compatible character LCD display.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd2004.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs a new HD44780 based 20x4 LCD controller.
            </summary>
            <param name="registerSelectPin">The pin that controls the regsiter select.</param>
            <param name="enablePin">The pin that controls the enable switch.</param>
            <param name="dataPins">Collection of pins holding the data that will be printed on the screen.</param>
            <param name="backlightPin">The optional pin that controls the backlight of the display.</param>
            <param name="backlightBrightness">The brightness of the backlight. 0.0 for off, 1.0 for on.</param>
            <param name="readWritePin">The optional pin that controls the read and write switch.</param>
            <param name="controller">The controller to use with the LCD. If not specified, uses the platform default.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd2004.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Constructs a new HD44780 based 16x2 LCD controller with integrated I2c support.
            </summary>
            <remarks>
            This is for on-chip I2c support. For connecting via I2c GPIO expanders, use the GPIO constructor <see cref="M:Iot.Device.CharacterLcd.Lcd1602.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)"/>.
            </remarks>
            <param name="device">The I2c device for the LCD.</param>
            <param name="uses8Bit">True if the device uses 8 Bit commands, false if it handles only 4 bit commands.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.Lcd2004.#ctor(Iot.Device.CharacterLcd.LcdInterface)">
            <summary>
            Constructs a new LCD 20x4 controller with the given interface
            </summary>
            <param name="lcdInterface">The LCD Interface</param>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdConsole">
            <summary>
            This is a high-level interface to an LCD display.
            It supports automatic wrapping of text, automatic scrolling and code page mappings.
            This class is thread safe, however using Write from different threads may lead to unexpected results, since the order is not guaranteed.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdConsole._currentData">
            <summary>
            The text currently on the display (required for arbitrary scrolling)
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.#ctor(Iot.Device.CharacterLcd.ICharacterLcd,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Iot.Device.CharacterLcd.LcdConsole"/> class using the specified LCD low-level interface.
            This class automatically configures the low-level interface. Do not use the low-level interface at the same time.
            </summary>
            <param name="lcd">The low-level LCD interface.</param>
            <param name="romType">Name of character ROM of display. Currently supported types: A00 and A02.</param>
            <param name="shouldDispose">If the class should dispose the LCD driver when it is disposed. Defaults to true</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.CursorLeft">
            <summary>
            Position of the cursor, from left.
            Note: May be outside the bounds of the display.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.CursorTop">
            <summary>
            Position of the cursor, from top
            Note: May be outside the bounds of the display.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.ScrollUpDelay">
            <summary>
            If this is larger than zero, an a wait is introduced each time the display wraps to the next line or scrolls up. Can be used to print long texts to the display,
            but keeping it readable.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.BacklightOn">
            <summary>
            Enables or disables the backlight
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.DisplayOn">
            <summary>
            Enables or disables the display
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.LineFeedMode">
            <summary>
            Sets the Line Feed Mode.
            This defines what happens when writting past the end of the line/screen.
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdConsole.Size">
            <summary>
            Size of the display
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.Clear">
            <summary>
            Clears the screen and sets the cursor back to the start.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to an explicit column and row position.
            The position may be outside the bounds of the display. Any subsequent writes will then have no effect, unless <see cref="P:Iot.Device.CharacterLcd.LcdConsole.LineFeedMode"/> allows it or a newline character is written.
            </summary>
            <param name="left">The column position from left to right starting with 0.</param>
            <param name="top">The row position from the top starting with 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The new position negative.</exception>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.Write(System.String)">
            <summary>
            Write text to display.
            </summary>
            <param name="text">Text to be displayed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> was null.</exception>
            <remarks>
            There are only 256 characters available. There are chip variants
            with different character sets. Characters from space ' ' (32) to
            '}' are usually the same with the exception of '\', which is a
            yen symbol on some chips '¥'. See constructor for character map definitions.
            </remarks>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.ReplaceLine(System.Int32,System.String)">
            <summary>
            Replaces the text of the given line.
            This will overwrite the text in the given line, filling up with spaces, if needed.
            This will never wrap to the next line, and line feeds in the input string are not allowed.
            </summary>
            <param name="lineNumber">0-based index of the line to start</param>
            <param name="text">Text to insert. No newlines supported.</param>
            <exception cref="T:System.ArgumentException">The string contains newlines.</exception>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.FindLineWraps(System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Find where we need to insert additional newlines
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.WriteLine(System.String)">
            <summary>
            Writes the given text to the current position, then wraps to the next line.
            </summary>
            <param name="text">Text to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="text"/> was null.</exception>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.BlinkDisplay(System.Int32)">
            <summary>
            Blinks the display text (and the backlight, if available).
            Can be used to get user attention.
            Operation is synchronous.
            </summary>
            <param name="times">Number of times to blink. The blink rate is 1 Hz</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.BlinkDisplayAsync(System.Int32)">
            <summary>
            Blinks the display in the background
            </summary>
            <param name="times">Number of times to blink</param>
            <returns>A task handle</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.RefreshFromBuffer">
            <summary>
            Refreshes the display from the cache (i.e. after a scroll operation)
            Does not change the cursor position
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.ScrollUp">
            <summary>
            Scrolls the text up by one row, clearing the last row. Does not change the cursor position.
            Implementation note: Caller must own the lock.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.WriteCurrentLine(System.String)">
            <summary>
            This is expected to be called only with a string length of less or equal the remaining number of characters on the current line.
            Implementation note: Caller must own the lock.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.CreateEncoding(System.Globalization.CultureInfo,System.String,System.Char,System.Int32,Iot.Device.Graphics.LcdCharacterEncodingFactory)">
            <summary>
            Creates an encoding that can be used for an LCD display.
            Typically, the returned value will be loaded using <see cref="M:Iot.Device.CharacterLcd.LcdConsole.LoadEncoding(Iot.Device.Graphics.LcdCharacterEncoding)"/>.
            </summary>
            <param name="culture">Required display culture (forwarded to the factory)</param>
            <param name="romType">The name of the ROM for which the encoding is to be applied. The default factory supports roms A00 and A02.</param>
            <param name="unknownCharacter">The character to print for unknown letters, default: ?</param>
            <param name="maxNumberOfCustomCharacters">The maximum number of custom characters supported by the hardware.</param>
            <param name="factory">Character encoding factory that delivers the mapping of the Char type to the hardware ROM character codes. May add special characters into
            the character ROM. Default: Null (Use internal factory)</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.LoadEncoding(System.Text.Encoding)">
            <summary>
            Loads the specified encoding.
            This behaves as <see cref="M:Iot.Device.CharacterLcd.LcdConsole.LoadEncoding(Iot.Device.Graphics.LcdCharacterEncoding)"/> when the argument is of the dynamic type <see cref="T:Iot.Device.Graphics.LcdCharacterEncoding"/>, otherwise like an encding
            with no special characters.
            </summary>
            <param name="encoding">The encoding to load.</param>
            <returns>See true if the encoding was correctly loaded.</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.LoadEncoding(Iot.Device.Graphics.LcdCharacterEncoding)">
            <summary>
            Loads the specified character encoding. This loads any custom characters from the encoding to the display.
            </summary>
            <param name="encoding">The encoding to load.</param>
            <returns>True if the character encoding was successfully loaded, false if there are not enough custom slots for all the required custom characters.
            This may also return false if the encoding factory returned incomplete results, such as a missing custom character for a special diacritic.</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.ResetEncoding">
            <summary>
            Resets the character encoding to hardware defaults (using simply the lower byte of a char).
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdConsole.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdInterface">
            <summary>
            Abstraction layer for accessing the lcd IC.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.CreateGpio(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates a GPIO based interface for the LCD.
            </summary>
            <param name="registerSelectPin">The pin that controls the register select.</param>
            <param name="enablePin">The pin that controls the enable switch.</param>
            <param name="dataPins">Collection of pins holding the data that will be printed on the screen.</param>
            <param name="backlightPin">The optional pin that controls the backlight of the display.</param>
            <param name="backlightBrightness">The brightness of the backlight. 0.0 for off, 1.0 for on.</param>
            <param name="readWritePin">The optional pin that controls the read and write switch.</param>
            <param name="controller">The controller to use with the LCD. If not specified, uses the platform default.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.CreateFromShiftRegister(System.Int32,System.Int32,System.Int32[],System.Int32,Iot.Device.Multiplexing.ShiftRegister,System.Boolean)">
            <summary>
            Creates a ShiftRegister based interface for the LCD.
            </summary>
            <remarks>
            Pin parameters should be set according to which output pin of the shift register they are connected to
            (e.g. 0 to 7 for 8bit shift register).
            </remarks>
            <param name="registerSelectPin">The pin that controls the register select.</param>
            <param name="enablePin">The pin that controls the enable switch.</param>
            <param name="dataPins">Collection of pins holding the data that will be printed on the screen.</param>
            <param name="backlightPin">The optional pin that controls the backlight of the display.</param>
            <param name="shiftRegister">The shift register that drives the LCD.</param>
            <param name="shouldDispose">True to dispose the shift register.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.CreateI2c(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Create an integrated I2c based interface for the LCD.
            </summary>
            <remarks>
            This is for on-chip I2c support. For connecting via I2c GPIO expanders, use the GPIO interface <see cref="M:Iot.Device.CharacterLcd.LcdInterface.CreateGpio(System.Int32,System.Int32,System.Int32[],System.Int32,System.Single,System.Int32,System.Device.Gpio.GpioController,System.Boolean)"/>.
            </remarks>
            <param name="device">The I2c device for the LCD.</param>
            <param name="uses8Bit">True if the device uses 8 Bit commands, false if it handles only 4 bit commands.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendData(System.Byte)">
            <summary>
            Sends byte to LCD device
            </summary>
            <param name="value">Byte value to be sed</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendCommand(System.Byte)">
            <summary>
            Sends command to the LCD device
            </summary>
            <param name="command">Byte representing the command</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendData(System.ReadOnlySpan{System.Byte})">
            <summary>
            Sends data to the LCD device
            </summary>
            <param name="values">Bytes to be send to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendData(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends data to the LCD device
            </summary>
            <param name="values">Char to be send to the device</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendCommands(System.ReadOnlySpan{System.Byte})">
            <summary>
            Send commands to the LCD device
            </summary>
            <param name="values">Each byte represents command to be send</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.SendCommandAndWait(System.Byte)">
            <summary>
            The initialization sequence and some other complex commands should be sent with delays, or the display may
            behave unexpectedly. It may show random, blinking characters
            or display text very faintly only.
            </summary>
            <param name="command">The command to send</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdInterface.EightBitMode">
            <summary>
            True if device uses 8-bits for communication, false if device uses 4-bits
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdInterface.WaitMultiplier">
             <summary>
             The command wait time multiplier for the LCD.
             </summary>
             <remarks>
             In order to handle controllers that might be running at a much slower clock
             we're exposing a multiplier for any "hard coded" waits. This can also be
             used to reduce the wait time when the clock runs faster or other overhead
             (time spent in other code) allows for more aggressive timing.
            
             There is a busy signal that can be checked that could make this moot, but
             currently we are unable to check the signal fast enough to make gains (or
             even equal) going off hard timings. The busy signal also requires having a
             r/w pin attached.
             </remarks>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.WaitForNotBusy(System.Int32)">
            <summary>
            Wait for the device to not be busy.
            </summary>
            <param name="microseconds">Time to wait if checking busy state isn't possible/practical.</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdInterface.BacklightOn">
            <summary>
            Enable/disable the backlight. (Will always return false if no backlight pin was provided.)
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged resources used by LcdInterface
            and optionally release managed resources
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdInterface.Gpio">
            <summary>
            Standard direct pin access to the HD44780 controller.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdInterface.Gpio._rsPin">
            <summary>
            Register select pin. Low is for writing to the instruction
            register and reading the address counter. High is for reading
            and writing to the data register.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdInterface.Gpio._rwPin">
            <summary>
            Read/write pin. Low for write, high for read.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdInterface.Gpio._enablePin">
            <summary>
            Enable pin. Pulse high to process a read/write.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdInterface.I2c">
            <summary>
            Built-in I2c access to the Hd44780 compatible controller. The Philips/NXP LCD driver ICs
            (such as the PCF2119x) are examples of this support.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdInterface.I2c.ControlByteFlags.ControlByteFollows">
            <summary>
            When set, another control byte will follow the next data/command byte.
            Otherwise the last control byte will be used.
            </summary>
            <remarks>
            This is only relevant when sending multiple bytes of data to the register.
            When a new I2c transmission is made, the first byte is always assumed to
            be a control byte. This flag is needed if you want to flip the "RS" bit
            in a stream of bytes.
            </remarks>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LcdInterface.I2c.ControlByteFlags.RegisterSelect">
            <summary>
            When set the data register will be selected (i.e. equivalent to
            RS pin being high). Otherwise the instruction/command register
            will be updated.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdInterface.I2c4Bit">
            <summary>
            Built-in I2c access to the Hd44780 compatible controller. The Philips/NXP LCD driver ICs
            (such as the PCF2119x) are examples of this support.
            This driver uses 4-Bit access (each character/command is split into 2x4 bits for transmission)
            </summary>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdInterface.I2c4Bit.BacklightOn">
            <summary>
            This Display supports enabling/disabling the backlight.
            The text on the display is not affected by disabling the backlight - it is just very hard to read.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdInterface.ShiftRegisterLcdInterface">
            <summary>
            This interface allows the control of a character lcd using a shift register.
            The shift register can be controlled using a minimum of three pins so using this method
            saves pins on the microcontroller compared to direct GPIO connection.
            This interface adds support for I/O expanders that allow connection to an HD44780 display
            through a shift register e.g. https://www.adafruit.com/product/292
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdInterface.ShiftRegisterLcdInterface.#ctor(System.Int32,System.Int32,System.Int32[],System.Int32,Iot.Device.Multiplexing.ShiftRegister,System.Boolean)">
            <summary>
            ShiftRegister based interface for the LCD.
            </summary>
            <remarks>
            Pin parameters should be set according to which output pin of the shift register they are connected to
            (e.g. 0 to 7 for 8bit shift register).
            </remarks>
            <param name="registerSelectPin">The pin that controls the register select.</param>
            <param name="enablePin">The pin that controls the enable switch.</param>
            <param name="dataPins">Collection of pins holding the data that will be printed on the screen.</param>
            <param name="backlightPin">The optional pin that controls the backlight of the display.</param>
            <param name="shiftRegister">The shift register that drives the LCD.</param>
            <param name="shouldDispose">True to dispose the shift register.</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdInterface.ShiftRegisterLcdInterface.BacklightOn">
            <summary>
            This Display supports enabling/disabling the backlight.
            The text on the display is not affected by disabling the backlight - it is just very hard to read.
            </summary>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdRgb">
            <summary>
            Supports I2c LCDs with I2c RGB backlight, such as the Grove - LCD RGB Backlight (i.e. 16x2 LCD character display with RGB backlight).
            </summary>
            <remarks>
            This implementation was drawn from numerous libraries such as Grove_LCD_RGB_Backlight.
            </remarks>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.#ctor(System.Drawing.Size,System.Device.I2c.I2cDevice,System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new HD44780 LCD controller.
            </summary>
            <param name="size">Size of the device in characters. Usually 16x2 or 20x4.</param>
            <param name="lcdDevice">The I2C device to control LCD display.</param>
            <param name="rgbDevice">The I2C device to control RGB backlight.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.#ctor(System.Drawing.Size,Iot.Device.CharacterLcd.LcdInterface,System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new HD44780 LCD with an RGB Backlight.
            </summary>
            <param name="size">Size of the device in characters. Usually 16x2 or 20x4.</param>
            <param name="lcdInterface">Interface to the display.</param>
            <param name="rgbDevice">The I2C device to control RGB backlight.</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdRgb.BacklightOn">
            <summary>
            Enable/disable the backlight.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.SetRgbRegister(Iot.Device.CharacterLcd.RgbRegisters,System.Byte)">
            <summary>
            Sets register for RGB backlight.
            </summary>
            <param name="addr">The register address.</param>
            <param name="value">The register value.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.ForceSetBacklightColor(System.Drawing.Color)">
            <summary>
            Sets the backlight color without any checks.
            </summary>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.InitRgb">
            <summary>
            Initializes RGB device.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.SetBacklightColor(System.Drawing.Color)">
            <summary>
            Sets the backlight color.
            The action will be ignored in case of the backlight is disabled.
            </summary>
            <param name="color">The color to set.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdRgb.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LcdValueUnitDisplay">
            <summary>
            Displays a value and an unit in a big font on an LCD Display.
            Requires a display with at least 20x4 characters
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.#ctor(Iot.Device.CharacterLcd.ICharacterLcd,System.Globalization.CultureInfo)">
            <summary>
            Creates an instance of <see cref="T:Iot.Device.CharacterLcd.LcdValueUnitDisplay"/>
            </summary>
            <param name="lcd">Interface to the display</param>
            <param name="culture">User culture</param>
        </member>
        <member name="P:Iot.Device.CharacterLcd.LcdValueUnitDisplay.Culture">
            <summary>
            Returns the active culture.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.InitForRom(System.String,Iot.Device.Graphics.LcdCharacterEncodingFactory)">
            <summary>
            Initializes the display for use as a big-number display.
            Configures the display with some graphic blocks for the display of big numbers.
            </summary>
            <param name="romName">Name of the character Rom, required to properly print culture-specific characters in the small text display</param>
            <param name="factory">Encoding factory or null</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.StopShowing">
            <summary>
            Stop showing big characters.
            This method can be used to signal that the display will be used for different purposes. Before a Display method is used,
            <see cref="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.InitForRom(System.String,Iot.Device.Graphics.LcdCharacterEncodingFactory)"/> needs to be called again. This clears the display.
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.DisplayTime(System.DateTime,System.String)">
            <summary>
            Display the current time
            </summary>
            <param name="dateTime">Time to display</param>
            <param name="format">Time format specifier, default "t" (default short time format with hours and minutes and eventually AM/PM).
            Anything after the first space in the formatted string is printed as small text. This will for instance be AM/PM when the format specifier "T" is used,
            since only 6 chars (and two separators) fit on the display.</param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.DisplayValue(System.String,System.String)">
            <summary>
            Display the given value/unit pair. The value must be pre-formatted with the required number of digits, ie. "2.01".
            The value should only contain one of ".", ":" or ",", or the printed result may be unexpected.
            </summary>
            <param name="formattedValue">Pre-formatted value to print</param>
            <param name="unitText">Unit or name of value. This is printed in normal small font on the bottom right corner of the display. </param>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.DisplayBigTextAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Scrolls a text in big font trough the display
            </summary>
            <param name="text">Text to display</param>
            <param name="scrollSpeed">Speed between scroll steps (one step being one display cell width)</param>
            <param name="cancellationToken">Token for cancelling the operation</param>
            <returns>A task handle</returns>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.Clear">
            <summary>
            Clears the display
            </summary>
        </member>
        <member name="M:Iot.Device.CharacterLcd.LcdValueUnitDisplay.LoadSeparationChar(System.Char)">
            <summary>
            Character code 7 is always used for the separation char, which is one of ":", "." or ",".
            </summary>
            <param name="separationChar">Separation character</param>
        </member>
        <member name="T:Iot.Device.CharacterLcd.LineWrapMode">
            <summary>
            Controls what happens when the cursor moves beyond the end of the display (both horizontally or vertically).
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LineWrapMode.Truncate">
            <summary>
            The cursor will stay beyond the edge of the screen.
            Any further write attempts will not do anything until the cursor is moved or the display cleared.
            A newline will move to the next line, unless already on the last line of the display.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LineWrapMode.Wrap">
            <summary>
            Wraps to the next line if the end of the line is reached.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.LineWrapMode.WordWrap">
            <summary>
            Attempts to wrap at word borders when the text does not fit on the (remaining part of) the line.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_MODE1">
            <summary>
            Mode register 1.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_MODE2">
            <summary>
            Mode register 2.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_LEDOUT">
            <summary>
            LED output state.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_RED">
            <summary>
            Brightness control LED2.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_GREEN">
            <summary>
            Brightness control LED1.
            </summary>
        </member>
        <member name="F:Iot.Device.CharacterLcd.RgbRegisters.REG_BLUE">
            <summary>
            Brightness control LED0.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.CharlieplexSegment">
            <summary>
            Provides support for Charlieplex multiplexing.
            https://wikipedia.org/wiki/Charlieplexing
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.#ctor(System.Int32[],System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new Charlieplex type that can be use for multiplex over a relatively small number of GPIO pins.
            </summary>
            <param name="pins">The set of pins to use.</param>
            <param name="nodeCount">The count of nodes (like LEDs) that will be addressable. If 0, then the Charlieplex maximum is used for the pins provided (n^2-n).</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling.</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.GetNodes(System.Int32[],System.Int32)">
            <summary>
            Provides the set of Charlie nodes given the set of pins and the count provided.
            If count = 0, then the Charlieplex maximum is used for the pins provided (n^2-n).
            </summary>
            <param name="pins">The pins to use for the segment.</param>
            <param name="nodeCount">The number of nodes to use. Default is the Charlieplex maximum.</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.CharlieplexSegment.NodeCount">
            <summary>
            The number of nodes (like LEDs) that can be addressed.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Write(System.Int32,System.Device.Gpio.PinValue,System.TimeSpan)">
            <summary>
            Write a PinValue to a node, to update Charlieplex segment.
            Address scheme is 0-based. Given 8 nodes, addresses would be 0-7.
            Displays nodes in their updated configuration for the specified duration.
            </summary>
            <param name="node">Node to update.</param>
            <param name="value">Value to write.</param>
            <param name="duration">Time to display segment, in milliseconds (default is 0; not displayed).</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Display(System.Threading.CancellationToken)">
            <summary>
            Displays nodes in their current configuration for the specified duration.
            </summary>
            <param name="token">CancellationToken used to signal when method should exit.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Dispose">
            <summary>
            Cleanup.
            Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.CharlieplexSegment.Length">
            <summary>
            The length of the segment; the number of GPIO pins it exposes.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#Item(System.Int32)">
            <summary>
            Segment values.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a PinValue to a virtual segment.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#Write(System.Byte)">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each bit, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes discrete underlying bits to a virtual output.
            Writes each byte, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#TurnOffAll">
            <summary>
            Clears shift register.
            Performs a latch.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#Display(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.CharlieplexSegment.Iot#Device#Multiplexing#IOutputSegment#DisplayAsync(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.CharlieplexSegmentNode">
            <summary>
            Represents a node in a Charlieplexed circuit.
            https://wikipedia.org/wiki/Charlieplexing
            </summary>
        </member>
        <member name="F:Iot.Device.Multiplexing.CharlieplexSegmentNode.Anode">
            <summary>
            Anode leg (power) for a device/load
            </summary>
        </member>
        <member name="F:Iot.Device.Multiplexing.CharlieplexSegmentNode.Cathode">
            <summary>
            Cathode leg (ground) for a device/load
            </summary>
        </member>
        <member name="F:Iot.Device.Multiplexing.CharlieplexSegmentNode.Value">
            <summary>
            Value of node
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.GpioOutputSegment">
            <summary>
            IOutputSegment implementation that uses GpioController.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.#ctor(System.Int32[],System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            IOutputSegment implementation that uses GpioController.
            </summary>
            <param name="pins">The GPIO pins that should be used and are connected.</param>
            <param name="gpioController">The GpioController to use. If one isn't provided, one will be created.</param>
            <param name="shouldDispose">The policy to use (true, by default) for disposing the GPIO controller when disposing this instance.</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.GpioOutputSegment.Length">
            <summary>
            The length of the segment; the number of GPIO pins it exposes.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.GpioOutputSegment.Item(System.Int32)">
            <summary>
            Segment values.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a PinValue to a virtual segment.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.Write(System.Byte)">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each bit, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each byte, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.TurnOffAll">
            <summary>
            Writes a byte to the underlying GpioController.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.Display(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.DisplayAsync(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.GpioOutputSegment.Dispose">
            <summary>
            Disposes the underlying GpioController.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.IOutputSegment">
            <summary>
            Abstracts a segment of outputs from multiplexing sources (like a shift register).
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.IOutputSegment.Length">
            <summary>
            Length of segment (number of outputs)
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.IOutputSegment.Item(System.Int32)">
            <summary>
            Segment values.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a PinValue to a virtual segment.
            Does not display output until calling Display() or Display(CancellationToken ct) methods.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.Write(System.Byte)">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each bit, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes discrete underlying bits to a virtual output.
            Writes each byte, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.TurnOffAll">
            <summary>
            Turns off all outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.Display(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.IOutputSegment.DisplayAsync(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.Utility.VirtualOutputSegment">
            <summary>
            Interface that abstracts multiplexing over a segment of outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.#ctor(System.Int32)">
            <summary>
            A virtual implementation of IOutputSegment that manages the values of a set of virtual outputs.
            This type is intended as a helper to be used in IOutputSegment implementations.
            </summary>
            <param name="length">The number of outputs in the segment.</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Length">
            <summary>
            Length of segment (number of outputs).
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Item(System.Int32)">
            <summary>
            Segment values.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a PinValue to a virtual segment.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Write(System.Byte)">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each bit, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes discrete underlying bits to a virtual output.
            Writes each byte, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.TurnOffAll">
            <summary>
            Writes a Low PinValue to all outputs.
            Performs a latch.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Display(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.DisplayAsync(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Utility.VirtualOutputSegment.Dispose">
            <summary>
            Disposes any native resources.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.Mbi5027">
            <summary>
            MBI5027 16-Bit shift register With 3-State output register and error detection.
            Supports SPI and GPIO control.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027.#ctor(Iot.Device.Multiplexing.Mbi5027PinMapping,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize a new shift register connected through GPIO.
            </summary>
            <param name="pinMapping">The pin mapping to use by the binding.</param>
            <param name="bitLength">Bit length of register, including chained registers. Default is 16 bits.</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling.</param>
            <param name="shouldDispose">Option (true by default) to dispose the GPIO controller when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027.#ctor(System.Device.Spi.SpiDevice,System.Int32)">
            <summary>
            Initializes a new shift register device connected through SPI.
            Uses 3 pins (SDI -> SDI, SCLK -> SCLK, CE0 -> LE)
            </summary>
            <param name="spiDevice">SpiDevice used for serial communication.</param>
            <param name="bitLength">Bit length of register, including chained registers. Default is 8 bits.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027.EnableDetectionMode">
            <summary>
            Enable open/short eror detection mode.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027.ReadOutputErrorStatus">
            <summary>
            Read output error status.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027.EnableNormalMode">
            <summary>
            Enable normal mode.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.Mbi5027PinMapping">
            <summary>
            Represents pin bindings for the MBI5027.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Mbi5027PinMapping.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="sdi">Serial data in pin</param>
            <param name="clk">Shift register pin (shift to data register)</param>
            <param name="le">Register clock pin (latch)</param>
            <param name="oe">Output enable pin</param>
            <param name="sdo">Serial data out pin -- required for open circuit detection</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.Minimal">
            <summary>
            Minimal pin bindings for the MBI5027.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.Complete">
            <summary>
            Complete pin bindings for the MBI5027.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.Sdi">
            <summary>
            Serial data in pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.Sdo">
            <summary>
            Serial data out pin.
            Only used (directly) for open circuit detection.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.OE">
            <summary>
            OE (output enable) pin .
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.LE">
            <summary>
            LE (shift register clock/latch) pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Mbi5027PinMapping.Clk">
            <summary>
            Clk (data register clock) pin number.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.ShiftRegister">
            <summary>
            Generic shift register implementation. Supports multiple register lengths.
            Compatible with SN74HC595, MBI5027 and MBI5168, for example.
            Supports SPI and GPIO control.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.#ctor(Iot.Device.Multiplexing.ShiftRegisterPinMapping,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize a new shift register connected through GPIO.
            </summary>
            <param name="pinMapping">The pin mapping to use by the binding.</param>
            <param name="bitLength">Bit length of register, including chained registers.</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling.</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.#ctor(System.Device.Spi.SpiDevice,System.Int32)">
            <summary>
            Initialize a new shift register device connected through SPI.
            Uses 3 pins (SDI -> SDI, SCLK -> SCLK, CE0 -> LE)
            </summary>
            <param name="spiDevice">SpiDevice used for serial communication.</param>
            <param name="bitLength">Bit length of register, including chained registers.</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.GpioController">
            <summary>
            GPIO controller.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.SpiDevice">
            <summary>
            SPI device.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.BitLength">
            <summary>
            Bit length across all connected registers.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.UsesSpi">
            <summary>
            Reports if shift register is connected with SPI.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.UsesGpio">
            <summary>
            Reports if shift register is connected with GPIO.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.ShiftClear">
            <summary>
            Shifts zeros.
            Will dim all connected LEDs, for example.
            Assumes register bit length evenly divisible by 8.
            Supports GPIO controller or SPI device.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.ShiftBit(System.Device.Gpio.PinValue)">
            <summary>
            Writes PinValue value to storage register.
            This will shift existing values to the next storage slot.
            Does not latch.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.ShiftByte(System.Byte,System.Boolean)">
            <summary>
            Shifts a byte -- 8 bits -- to the storage register.
            Assumes register bit length evenly divisible by 8.
            Pushes / overwrites any existing values.
            Latches by default.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Latch">
            <summary>
            Latches values in data register to output pi.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.OutputEnable">
            <summary>
            Switch output register to high or low-impedance state.
            Enables or disables register outputs, but does not delete values.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Dispose">
            <summary>
            Cleanup.
            Failing to dispose this class, especially when callbacks are active, may lead to undefined behavior.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.Length">
            <summary>
            The length of the segment; the number of GPIO pins it exposes.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegister.Iot#Device#Multiplexing#IOutputSegment#Item(System.Int32)">
            <summary>
            Segment values.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Iot#Device#Multiplexing#IOutputSegment#Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a PinValue to a virtual segment.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Write(System.Byte)">
            <summary>
            Writes discrete underlying bits to a virtual segment.
            Writes each bit, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes discrete underlying bits to a virtual output.
            Writes each byte, left to right. Least significant bit will written to index 0.
            Does not display output.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Iot#Device#Multiplexing#IOutputSegment#TurnOffAll">
            <summary>
            Clears shift register.
            Performs a latch.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Iot#Device#Multiplexing#IOutputSegment#Display(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegister.Iot#Device#Multiplexing#IOutputSegment#DisplayAsync(System.Threading.CancellationToken)">
            <summary>
            Displays current state of segment.
            Segment is displayed at least until token receives a cancellation signal, possibly due to a specified duration expiring.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.ShiftRegisterPinMapping">
            <summary>
            Represents pin mappings for the ShiftRegister binding.
            Requires specifying 3 pins (serial data in, data clock, and latch).
            Can specify output enable pin (otherwise, wire to ground).
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.ShiftRegisterPinMapping.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="serialData">Serial data in pin</param>
            <param name="clock">Shift register clock pin</param>
            <param name="latchEnable">Register clock pin (latch)</param>
            <param name="outputEnable">Output enable pin</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.Minimal">
            <summary>
            Minimal pin bindings for ShiftRegister.
            Output enable should be wired to ground when using Minimal mapping.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.Complete">
            <summary>
            Complete pin bindings for ShiftRegister.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.SerialDataInput">
            <summary>
            Serial data in pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.Clock">
            <summary>
            Storage register clock pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.LatchEnable">
            <summary>
            Shift register clock pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.ShiftRegisterPinMapping.OutputEnable">
            <summary>
            Output enable pin.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.Sn74hc595">
            <summary>
            SN74HC595 8-Bit Shift Registers With 3-State Output Registers
            Supports SPI and GPIO control
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Sn74hc595.#ctor(Iot.Device.Multiplexing.Sn74hc595PinMapping,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize a new shift register connected through GPIO.
            </summary>
            <param name="pinMapping">The pin mapping to use by the binding.</param>
            <param name="bitLength">Bit length of register, including chained registers. Default is 8 bits.</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling.</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.Sn74hc595.#ctor(System.Device.Spi.SpiDevice,System.Int32)">
            <summary>
            Initialize a new Sn74hc595 device connected through SPI.
            Uses 3 pins (MOSI -> SER, SCLK -> SRCLK, CE0 -> RCLK)
            </summary>
            <param name="spiDevice">SpiDevice used for serial communication.</param>
            <param name="bitLength">Bit length of register, including chained registers.</param>
        </member>
        <member name="M:Iot.Device.Multiplexing.Sn74hc595.ClearStorage(System.Boolean)">
            <summary>
            Clear storage register.
            Requires use of GPIO controller.
            </summary>
        </member>
        <member name="T:Iot.Device.Multiplexing.Sn74hc595PinMapping">
            <summary>
            Represents pin mapping for the Sn74hc595 binding.
            Requires specifying at least three pins (serial data in, data clock, and latch).
            The other two pins (output enable and shift register clear) should either be specified or separately wired.
            </summary>
        </member>
        <member name="M:Iot.Device.Multiplexing.Sn74hc595PinMapping.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="ser">Serial data pin</param>
            <param name="srclk">Shift register pin (shift to data register)</param>
            <param name="rclk">Register clock pin (latch)</param>
            <param name="oe">Output enable pin</param>
            <param name="srclr">Shift register clear pin (shift register is cleared)</param>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.Minimal">
            <summary>
            Minimal pin bindings for the Sn74hc595.
            Output enable should be wired to ground when using Minimal mapping.
            Shift register clear should be wired high when using Minimal mapping.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.Complete">
            <summary>
            Standard pin bindings for the Sn74hc595.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.Ser">
            <summary>
            SER (data) pin number.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.SrClk">
            <summary>
            SRCLK (shift) pin number.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.RClk">
            <summary>
            RCLK (latch) pin number.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.OE">
            <summary>
            OE (output enable) pin number.
            </summary>
        </member>
        <member name="P:Iot.Device.Multiplexing.Sn74hc595PinMapping.SrClr">
            <summary>
            SRCLR (clear register) pin number.
            </summary>
        </member>
        <member name="T:Iot.Device.Common.NumberHelper">
            <summary>
            Helpers for number.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.NumberHelper.Bcd2Dec(System.Byte)">
            <summary>
            BCD To decimal
            </summary>
            <param name="bcd">BCD Code</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Iot.Device.Common.NumberHelper.Bcd2Dec(System.Byte[])">
            <summary>
            BCD To decimal
            </summary>
            <param name="bcds">BCD Code</param>
            <returns>decimal</returns>
        </member>
        <member name="M:Iot.Device.Common.NumberHelper.Dec2Bcd(System.Int32)">
            <summary>
            Decimal To BCD
            </summary>
            <param name="dec">decimal</param>
            <returns>BCD Code</returns>
        </member>
        <member name="T:Iot.Device.Common.AngleExtensions">
            <summary>
            Provides extension methods for <see cref="T:UnitsNet.Angle"/>
            </summary>
        </member>
        <member name="M:Iot.Device.Common.AngleExtensions.Normalize(UnitsNet.Angle,System.Boolean)">
            <summary>
            Normalizes the angle so it is between 0° and 360° or between -180° and +180° respectively.
            </summary>
            <param name="self">Instance to normalize</param>
            <param name="toFullCircle">Set to true to normalize to 0-360°, otherwise normalizes to +/-180°</param>
        </member>
        <member name="M:Iot.Device.Common.AngleExtensions.Difference(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>
            Calculate the difference between two angles. Useful to compute the angle error between a desired and an actual track.
            </summary>
            <param name="currentTrack">First angle, actual direction</param>
            <param name="destinationTrack">Second angle, desired direction</param>
            <returns>The normalized result of <paramref name="currentTrack"/>-<paramref name="destinationTrack"/>. The value is negative if
            the current track is to port (left) of the the desired track and positive otherwise</returns>
        </member>
        <member name="M:Iot.Device.Common.AngleExtensions.TrueToMagnetic(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>
            Helper method to convert a true angle to a magnetic one, given the variation.
            </summary>
            <param name="angleTrue">Course relative to true north</param>
            <param name="variation">Variation. Positive for east</param>
            <returns>The magnetic course</returns>
            <remarks>Remember: From true to false with the wrong sign</remarks>
        </member>
        <member name="M:Iot.Device.Common.AngleExtensions.MagneticToTrue(UnitsNet.Angle,UnitsNet.Angle)">
            <summary>
            Convert magnetic angle to true angle, given the variation
            </summary>
            <param name="angleMagnetic">Magnetic north angle</param>
            <param name="variation">Variation (positive east)</param>
            <returns>True north angle</returns>
        </member>
        <member name="M:Iot.Device.Common.AngleExtensions.TryAverageAngle(System.Collections.Generic.IEnumerable{UnitsNet.Angle},UnitsNet.Angle@)">
            <summary>
            Calculates the average (medium) of a set of points.
            See https://en.wikipedia.org/wiki/Mean_of_circular_quantities
            This method fails if an empty input set is provided or the inputs are evenly distributed over the circle.
            </summary>
            <param name="inputAngles">A set of angles</param>
            <param name="result">The angle that is the mean of the given angles.</param>
            <returns>True on success, false otherwise.</returns>
        </member>
        <member name="T:Iot.Device.Common.DebuggerOutputLogger">
            <summary>
            A logger that prints to the debug console
            </summary>
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLogger.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Iot.Device.Common.DebuggerOutputLogger"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Common.DebuggerOutputLogger.MinLogLevel">
            <summary>
            Sets the minimum log level
            </summary>
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Common.DebuggerOutputLoggerProvider">
            <summary>
            Creates a debugger logger
            </summary>
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLoggerProvider.CreateLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Common.DebuggerOutputLoggerProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Common.FileSetStream">
            <summary>
            A stream that combines a set of files. Can be used to read from a consecutive
            list of files, e.g. log files that are split by size or date.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a new instance using a set of files.
            </summary>
            <param name="fileNames">A list of file names</param>
            <exception cref="T:System.IO.FileNotFoundException">One of the files doesn't exist</exception>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.IO.Stream}})">
            <summary>
            Create a new instance using a set of files.
            </summary>
            <param name="files">A list of file names or streams. If the stream of a pair is non-null, it is used instead of the name</param>
            <exception cref="T:System.IO.FileNotFoundException">One of the files doesn't exist</exception>
            <exception cref="T:System.InvalidOperationException">A stream was provided that is not readable</exception>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.Loop">
            <summary>
            True to indicate that reading should restart at the beginning when the list ends.
            </summary>
            <remarks>
            If this is true, the stream has no end, and reading will always succeed (unless
            the file list is empty)
            </remarks>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.CanRead">
            <summary>
            This returns true.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.CanSeek">
            <summary>
            This returns false.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.CanWrite">
            <summary>
            This returns false.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.Length">
            <summary>
            This is not supported
            </summary>
        </member>
        <member name="P:Iot.Device.Common.FileSetStream.Position">
            <summary>
            This is not supported
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.Flush">
            <summary>
            This does nothing
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">Buffer to fill</param>
            <param name="offset">Offset to start filling the buffer</param>
            <param name="count">Maximum number of bytes to read.</param>
            <returns>The number of bytes actually read</returns>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This operation is unsupported.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.SetLength(System.Int64)">
            <summary>
            This operation is unsupported.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This operation is unsupported.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.FileSetStream.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Common.GeographicPosition">
            <summary>
            Represents a position in WGS84 coordinates. This is the standard coordinate format for most GNSS receivers currently available.
            An instance with Latitude = Longitude = Height = 0 is considered invalid. A real GNSS receiver will never output this exact value
            and that position is far out in the ocean.
            </summary>
            <remarks>
            This object stores ellipsoidal height, depending on the GNSS receiver and the application, this needs to be transformed to geoidal height.
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.#ctor">
            <summary>
            Initializes an empty geographic position
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.#ctor(Iot.Device.Common.GeographicPosition)">
            <summary>
            Copy constructor
            </summary>
            <param name="pos">Input position</param>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Iot.Device.Common.GeographicPosition"/> instance from latitude, longitude and ellipsoidal height.
            </summary>
            <param name="latitude">Latitude of position, in degrees. Valid values are -90 - +90</param>
            <param name="longitude">Longitude of position, in degrees. Valid values are -180 to +180 or 0 to 360, depending on application</param>
            <param name="ellipsoidalHeight">Height over the WGS84 ellipsoid.</param>
            <remarks>No exception is thrown on denormalized or out-of-range positions.</remarks>
        </member>
        <member name="P:Iot.Device.Common.GeographicPosition.EllipsoidalHeight">
            <summary>
            Height over the WGS84 ellipsoid
            </summary>
        </member>
        <member name="P:Iot.Device.Common.GeographicPosition.Latitude">
            <summary>
            Latitude. Positive for north of equator, negative for south.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.GeographicPosition.Longitude">
            <summary>
            Longitude. Positive for east of Greenwich, negative for west.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.GetDegreesMinutesSeconds(System.Double,System.Int32,System.Double@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Returns the given angle as degrees, minutes and seconds
            </summary>
            <param name="angle">Input angle, in degrees</param>
            <param name="secDigits">Number of digits for the second</param>
            <param name="normalizedVal">Normalized angle value (to -180 to 180)</param>
            <param name="degrees">Full degrees</param>
            <param name="minutes">Full minutes</param>
            <param name="seconds">Seconds including requested number of digits</param>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.GetDegreesMinutes(System.Double,System.Int32,System.Double@,System.Int32@,System.Double@)">
            <summary>
            Returns the given angle as degree and minutes
            </summary>
            <param name="angle">Input angle, in degrees</param>
            <param name="minDigits">Number of digits for the minutes</param>
            <param name="normalizedVal">Normalized angle value (to -180 to 180)</param>
            <param name="degrees">Full degrees</param>
            <param name="minutes">Minutes including requested number of digits</param>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.op_Equality(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition)">
            <summary>
            Equality operator. See <see cref="M:Iot.Device.Common.GeographicPosition.Equals(Iot.Device.Common.GeographicPosition)"/>
            </summary>
            <param name="a">First instance to compare</param>
            <param name="b">Second instance to compare</param>
            <returns>True on equality, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.op_Inequality(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition)">
            <summary>
            Inequality operator. See <see cref="M:Iot.Device.Common.GeographicPosition.Equals(Iot.Device.Common.GeographicPosition)"/>
            </summary>
            <param name="a">First instance to compare</param>
            <param name="b">Second instance to compare</param>
            <returns>True on inequality, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.Clone">
            <summary>
            Creates a copy of this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.ContainsValidPosition">
            <summary>
            Returns true if this instance contains a valid position.
            An invalid position is either when <see cref="P:Iot.Device.Common.GeographicPosition.Latitude"/> and <see cref="P:Iot.Device.Common.GeographicPosition.Longitude"/> and <see cref="P:Iot.Device.Common.GeographicPosition.EllipsoidalHeight"/> are exactly zero,
            when either value is NaN or when the position is out of range.
            </summary>
            <returns>See above</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.EqualPosition(Iot.Device.Common.GeographicPosition,System.Double)">
            <summary>
            Returns true if the two positions are (almost) equal. This ignores the altitude.
            </summary>
            <param name="position">Position to compare with</param>
            <param name="delta">Allowed delta, in degrees</param>
            <returns>True if the two positions are closer than the delta. The default value is around 1cm</returns>
            <remarks>This does a simple comparison based on the floating point values, it should not be used with large deltas.
            To get the distance between two positions, use <see cref="M:Iot.Device.Common.GeographicPositionExtensions.DistanceTo(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition)"/> instead.</remarks>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.Equals(System.Object)">
            <summary>
            Equality comparer. Compares the two positions for equality within about 1cm.
            </summary>
            <param name="obj">The other position</param>
            <returns>True if the two positions are almost identical</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.Equals(Iot.Device.Common.GeographicPosition)">
            <summary>
            Equality comparer. Compares the two positions for equality within about 1cm.
            </summary>
            <param name="position">The other position</param>
            <returns>True if the two positions are almost identical</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.ToString">
            <summary>
            Returns a string representation of this position.
            </summary>
            <returns>A string representation in degrees, minutes and seconds for both latitude and longitude</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.ToString(System.String,System.IFormatProvider)">
            <summary>
            Formats this <see cref="T:Iot.Device.Common.GeographicPosition"/> instance to a string.
            The format string can contain up to three groups of format identifiers of the form "Xn", where X is one of
            * D: Decimal display: The value is printed in decimal notation
            * U: Decimal, unsigned: The value is printed in decimal notation, omitting the sign. When using N or E (see below), the sign is typically omitted.
            * M: Minutes: The value is displayed as degrees minutes
            * S: Seconds: The value is displayed as degrees minutes seconds
            A single digit after the letter indicates the number of digits for the last group (e.g. M2 uses two digits for the minutes)
            The first of the above letters prints the latitude, the second the longitude and the third the altitude.
            Additionally, the following special letters can be anywhere in the format string:
            * N: North/South: Prints "N" when the latitude is greater or equal to 0, "S" otherwise
            * E: East/West Prints "E" when the longitude is greater or equal to 0, "W" otherwise
            Any other letters (including spaces) are printed as-is.
            <example>
            "Format specifier" - "Output"
            "D3 D3" - "10.000° 23.500°"
            "U3N D3E" - "10.000°N 23.500°E"
            "U3N D3E" - "10.500°N 23.512°E"
            "M2N M2E" - "10° 30.00'N 23° 30.74'E"
            "S1N S2N D0m" - "10° 30' 00.0\"N 023° 30' 44.42\"E -100m"
            </example>
            </summary>
            <param name="format">The format string. Possible options see above</param>
            <param name="formatProvider">The format provider</param>
            <returns>A string representation of this position</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.GetNumDigits(System.String,System.Int32)">
            <summary>
            Gets a number after the given index from the format string. Only one digit supported.
            </summary>
            <param name="format">The format string</param>
            <param name="index">The index of the identifier (the last letter)</param>
            <returns>An interger or null, if none was found at the given position</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPosition.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Common.GeographicPositionExtensions">
            <summary>
            Extensions for positions
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.NormalizeLongitudeTo180Degrees(Iot.Device.Common.GeographicPosition)">
            <summary>
            Normalizes the longitude to +/- 180°
            This is the common form for displaying longitudes. <see cref="M:Iot.Device.Common.GeographicPositionExtensions.NormalizeLongitudeTo360Degrees(Iot.Device.Common.GeographicPosition)"/> is used when the area of interest
            is close to the date border (in the pacific ocean)
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.NormalizeAngleTo180Degrees(System.Double)">
            <summary>
            Normalizes the angle to +/- 180°
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.DistanceTo(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition)">
            <summary>
            Calculate the distance to another position
            </summary>
            <param name="position1">The first position. This argument can be implicitly given</param>
            <param name="position2">The position to go to</param>
            <returns>The distance between the two points</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.DirectionTo(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition)">
            <summary>
            Calculates the initial angle to travel to get to another position.
            Calculates on the great circle, therefore the direction to the target is not constant along the path
            </summary>
            <param name="position1">The initial position. This argument can be implicitly given</param>
            <param name="position2">The destination position</param>
            <returns>The angle to travel</returns>
            <remarks>If both distance and direction are required, prefer to use <see cref="M:Iot.Device.Common.GreatCircle.DistAndDir(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length@,UnitsNet.Angle@)"/></remarks>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.MoveBy(Iot.Device.Common.GeographicPosition,UnitsNet.Angle,UnitsNet.Length)">
            <summary>
            Move a certain distance into a direction. Where do I end?
            </summary>
            <param name="position">Start position.</param>
            <param name="direction">Direction to travel</param>
            <param name="distance">Distance to travel</param>
            <returns>The destination position</returns>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.NormalizeLongitudeTo360Degrees(Iot.Device.Common.GeographicPosition)">
            <summary>
            Normalizes the longitude to [0..360°)
            This coordinate form is advised if working in an area near the date border in the pacific ocean.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GeographicPositionExtensions.NormalizeAngleTo360Degrees(System.Double)">
            <summary>
            Normalizes an angle to [0..360°)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_LATITUDE">
            <summary>
            Calculate latitude
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_LONGITUDE">
            <summary>
            Calculate longitude
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_AZIMUTH">
            <summary>
            Calculate azimuth
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_DISTANCE">
            <summary>
             Calculate distance
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_DISTANCE_IN">
            <summary>
            Allow distance as input
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.GEOD_REDUCEDLENGTH">
            <summary>
            Calculate reduced length
            </summary>
        </member>
        <member name="T:Iot.Device.Common.GeoidCalculations.geod_geodesic">
            <summary>
            Geodesic helper struct (pre-computed ellipsoid parameters)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.geod_geodesic.a">
            <summary>
            Equatorial radius
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.geod_geodesic.f">
            Flattening
        </member>
        <member name="T:Iot.Device.Common.GeoidCalculations.geod_geodesicline">
             The struct containing information about a single geodesic.  This must be
             initialized by geod_lineinit(), geod_directline(), geod_gendirectline(),
             or geod_inverseline() before use.
            ********************************************************************
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.geod_geodesicline.lat1">
            <summary>
            the starting latitude
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.geod_geodesicline.lon1">
            <summary>
            the starting longitude
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GeoidCalculations.geod_geodesicline.azi1">
            <summary>
            The starting azimuth
            </summary>
        </member>
        <member name="T:Iot.Device.Common.GreatCircle">
            <summary>
            This class provides some basic geodetic calculations on the WGS84 ellipsoid.
            This returns exact distances between two points, considering the non-spherical shape of the earth.
            The results are accurate for distances greater than about 1cm.
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GreatCircle.Wgs84A">
            <summary>
            Semi-Mayor Axis of the WGS ellipsoid
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GreatCircle.Wgs84F">
            <summary>
            Flattening "f" of the WGS84 ellipsoid (1.0 / 298.25722357)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GreatCircle.MetersPerDegreeeLatitude">
            <summary>
            m per degree latitude
            </summary>
        </member>
        <member name="F:Iot.Device.Common.GreatCircle.MetersPerDegreeLongitude">
            <summary>
            m per degree longitude on the equator
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.DistAndDir(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length@,UnitsNet.Angle@)">
            <summary>
            Returns the distance and direction between two points on the globe
            </summary>
            <param name="position1">Input position 1</param>
            <param name="position2">Input position 2</param>
            <param name="distance">Great circle distance between the positions</param>
            <param name="direction">Initial direction to travel, in degrees true</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="position1"/> or <paramref name="position2"/> are null.</exception>
            <remarks>The distance and direction are calculated for the great circle. That is the shortest distance between two points on the globe.
            This path does not follow a constant direction (for large distances)</remarks>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.DistAndDir(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length@,UnitsNet.Angle@,UnitsNet.Angle@)">
            <summary>
            Returns the distance and direction between two points on the globe
            </summary>
            <param name="position1">Input position 1</param>
            <param name="position2">Input position 2</param>
            <param name="distance">Great circle distance between the positions</param>
            <param name="directionAtStart">Initial direction to travel, in degrees true</param>
            <param name="directionAtEnd">Angle in which the voyage should start. True angle in which the direction lies when standing at the start position.</param>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="position1"/> or <paramref name="position2"/> are null.</exception>
            <remarks>This path does not follow a constant direction (for large distances)</remarks>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.DistAndDir(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Returns the distance and direction between two points on the globe
            </summary>
            <param name="latitude1">Input latitude 1, in degrees</param>
            <param name="longitude1">Input longitude 1, in degrees</param>
            <param name="latitude2">Input latitude 2, in degrees</param>
            <param name="longitude2">Input longitude 2, in degrees</param>
            <param name="distance">Distance between points, on the great circle, in meters.</param>
            <param name="direction">Angle in which the voyage should start. True angle in which the direction lies when standing at the start position.</param>
            <remarks>This path does not follow a constant direction (for large distances).
            Prefer using the method <see cref="M:Iot.Device.Common.GreatCircle.DistAndDir(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length@,UnitsNet.Angle@)"/> instead,
            to avoid errors from exchanged parameters or wrong units</remarks>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CrossTrackError(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length@,UnitsNet.Length@)">
            <summary>
            Computes cross-track error, that is the distance the current position is away from the route from origin to destination
            </summary>
            <param name="origin">Start of current leg</param>
            <param name="destination">End of current leg</param>
            <param name="currentPosition">Current position</param>
            <param name="crossTrackError">The distance perpendicular to the leg. Positive if the current position is to the right of the leg.</param>
            <param name="distanceTogoAlongRoute">Distance to go on track (with current position projected back to the leg)</param>
            <remarks>Accuracy may be limited for distances &gt; 100km</remarks>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CalculateVelocityTowardsTarget(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Speed,UnitsNet.Angle)">
            <summary>
            Calculate the velocity towards (or away from) the target. This is often also called VMG (=Velocity made good)
            </summary>
            <param name="destination">Target waypoint</param>
            <param name="currentPosition">Current position</param>
            <param name="currentSpeed">Current speed over ground</param>
            <param name="currentTrack">Current track (course over ground)</param>
            <returns>Speed towards target. Negative if moving away from target</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CalcCoords(Iot.Device.Common.GeographicPosition,UnitsNet.Angle,UnitsNet.Length)">
            <summary>
            Calculate the coordinate one will be when traveling for the given distance in the given direction
            </summary>
            <param name="start">Starting point</param>
            <param name="direction">Initial direction</param>
            <param name="distance">Distance to travel</param>
            <returns>The new position</returns>
            <exception cref="T:System.ArgumentNullException">The start position is null</exception>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CalcCoords(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculate the coordinate one will be when traveling for the given distance in the given direction
            </summary>
            <param name="startLatitude">Starting point latitude</param>
            <param name="startLongitude">Starting point longitude</param>
            <param name="direction">Initial direction</param>
            <param name="distance">Distance to travel</param>
            <param name="resultLatitude">End point latitude</param>
            <param name="resultLongitude">End point longitude</param>
            <remarks>Prefer using <see cref="M:Iot.Device.Common.GreatCircle.CalcCoords(Iot.Device.Common.GeographicPosition,UnitsNet.Angle,UnitsNet.Length)"/> to avoid errors from exchanged parameters or wrong units</remarks>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CalculateRoute(Iot.Device.Common.GeographicPosition,Iot.Device.Common.GeographicPosition,UnitsNet.Length)">
            <summary>
            Calculate a list of waypoints along the route from start to end.
            </summary>
            <param name="start">Starting position</param>
            <param name="end">End position</param>
            <param name="distanceStep">Distance between waypoints</param>
            <returns>A list of waypoints</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.CalculateRoute(Iot.Device.Common.GeographicPosition,UnitsNet.Angle,UnitsNet.Length,UnitsNet.Length)">
            <summary>
            Calculate waypoints along a route
            </summary>
            <param name="start">Starting position</param>
            <param name="direction">Starting direction</param>
            <param name="totalDistance">Distance to travel</param>
            <param name="distanceStep">Waypoint step distance</param>
            <returns>A list of waypoints</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.DegreesToRadians(System.Double)">
            <summary>
            Convert a value to radians.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.AviaticToRadians(System.Double)">
            <summary>
            Converts an angle in aviatic definition to mathematic definition.
            Aviatic angles are in degrees, where 0 degrees is north, counting clockwise, mathematic angles
            are in radians, starting east and going counterclockwise.
            </summary>
            <param name="val">Aviatic angle, degrees</param>
            <returns>Mathematic angle, radians, fast-normalized to 0..2Pi</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.AngleDifferenceSignedDegrees(System.Double,System.Double)">
            <summary>
            Calculate the difference between two angles, return degrees.
            </summary>
            <param name="a">First angle, in degrees</param>
            <param name="b">Second angle, in degrees</param>
            <returns>Difference, ranging -180 to +180, in degrees.</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.RadiansToDegrees(System.Double)">
            <summary>
            Converts an angle in radians to angle in decimal degrees
            </summary>
            <param name="radians">Angle in radians (0-2*Pi)</param>
            <returns>Angle in decimal degrees (0-360)</returns>
        </member>
        <member name="M:Iot.Device.Common.GreatCircle.RadiansToAviatic(System.Double)">
            <summary>
            Convert angle from mathematic to aviatic.
            See also AviaticToRadians()
            </summary>
            <param name="val">Mathematic value in radians</param>
            <returns>Aviatic value in degrees</returns>
        </member>
        <member name="T:Iot.Device.Common.LogDispatcher">
            <summary>
            This class contains static members that provide log support.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.LogDispatcher.LoggerFactory">
            <summary>
            The default logger factory for the whole assembly.
            If this is null (the default), logging is disabled
            </summary>
        </member>
        <member name="M:Iot.Device.Common.LogDispatcher.GetLogger(System.String)">
            <summary>
            Gets a logger with the given name
            </summary>
            <param name="loggerName">Name of the logger</param>
            <returns>A reference to a <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</returns>
        </member>
        <member name="M:Iot.Device.Common.LogDispatcher.GetCurrentClassLogger(System.Object)">
            <summary>
            Gets a logger with the name of the current class
            </summary>
            <param name="currentClass">The class whose logger shall be retrieved</param>
            <returns>A <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance</returns>
        </member>
        <member name="T:Iot.Device.Common.LogDispatcher.ScopeDisposable">
            <summary>
            This doesn't really do anything
            </summary>
        </member>
        <member name="T:Iot.Device.Common.ProcessRunner">
            <summary>
            Controls an external process
            </summary>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.#ctor(Iot.Device.Common.ProcessSettings)">
            <summary>
            Creates an instance of the ProcessRunner by getting the
            Process Settings
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessRunner.PId">
            <summary>
            Gets the PID of the process that is running or null
            </summary>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.Dispose">
            <summary>
            Dispose the active running process
            </summary>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.Kill">
            <summary>
            Kill the process
            </summary>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.GetFullCommandLine(System.String[])">
            <summary>
            <summary>
            Retrieves the full command line equivalent to the one run from this class.
            The working directory is either ProcessSettings.WorkingDirectory or, if null,
            the Environment.CurrentDirectory.
            The working directory is important when referring to files from the command line.
            </summary>
            </summary>
            <param name="arguments">The array of command line arguments.</param>
            <returns>Returns the full command that can be executed on the terminal.</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ExecuteAsync(System.String[],System.IO.Stream)">
            <summary>
            Execute the process with a number of arguments. The target
            Stream receives the stdout of the process
            </summary>
            <param name="arguments">The array of command line arguments.</param>
            <param name="target">The stream that will receive the output of the process.</param>
            <returns>A task that will be completed as soon as the process terminates.</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ExecuteAsync(System.String,System.IO.Stream)">
            <summary>
            Execute the process with a number of arguments.
            The target Stream receives the stdout of the process, if any.
            If the process is not expected to return any output (for example when
            the app directly writes one or more files), the stream can be null
            </summary>
            <param name="argsString">A string will the complete command line of the process.</param>
            <param name="target">The stream that will receive the output of the process.</param>
            <returns>A task that will be completed as soon as the process terminates.</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ExecuteReadOutputAsStringAsync(System.String[])">
            <summary>
            Execute the process with the given arguments and returns the
            output as a string, decoded as UTF8
            </summary>
            <param name="arguments">The array of command line arguments.</param>
            <returns>A task that represents the read operation.
            The returned value represents the output of the process encoded as a UTF8 string.</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ExecuteReadOutputAsStringAsync(System.String)">
            <summary>
            Execute the process with the given arguments and
            returns the output as a string, decoded as UTF8
            </summary>
            <param name="argsString">A string will the complete command line of the process.</param>
            <returns>A task that represents the read operation.
            The returned value represents the output of the process encoded as a UTF8 string.</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ContinuousRunAsync(System.String[],System.IO.Stream)">
            <summary>
            Runs the execute on a separate thread
            </summary>
            <param name="arguments">The array of command line arguments.</param>
            <param name="target">The stream that will receive the output of the process.</param>
            <returns>A task that represent the new thread communicating with the process.
            The returned value is the task that represents the output being copied to the target stream</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ContinuousRunAsync(System.String,System.IO.Stream)">
            <summary>
            Runs the execute on a separate thread
            </summary>
            <param name="argsString">A string will the complete command line of the process.</param>
            <param name="target">The stream that will receive the output of the process.</param>
            <returns>A task that represent the new thread communicating with the process.
            The returned value is the task that represents the output being copied to the target stream</returns>
        </member>
        <member name="M:Iot.Device.Common.ProcessRunner.ExecuteAsync(System.String,System.IO.Pipelines.PipeWriter)">
            <summary>
            Execute the process with a number of arguments. The target Pipe
            receive the stdout of the process
            </summary>
            <param name="argsString">A string will the complete command line of the process.</param>
            <param name="target">The pipe that will receive the output of the process.</param>
            <returns>A task that will be completed as soon as the process terminates.</returns>
        </member>
        <member name="T:Iot.Device.Common.ProcessSettings">
            <summary>
            The settings used to run the external process driving
            the image or video acquisition.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessSettings.Filename">
            <summary>
            Gets or sets the relative or absolute executable file to run.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessSettings.BufferSize">
            <summary>
            Gets or sets the size of the buffer used to copy the stream of incoming data.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessSettings.WorkingDirectory">
            <summary>
            Gets or sets the working directory used when the process is started.
            If null or empty string, Environment.CurrentDirectory will be used.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessSettings.CaptureStderrInsteadOfStdout">
            <summary>
            Gets or sets whether stderr should be captured instead of stdout.
            When true, the stderr output is captured instead of the stdout.
            This is needed in apps that outputs text such as the app usage.
            </summary>
        </member>
        <member name="P:Iot.Device.Common.ProcessSettings.MaxMillisecondsToWaitAfterProcessCompletes">
            <summary>
            Gets or sets the number of milliseconds that are waited before
            forcibly closing (kill) the process when the operation is completed.
            </summary>
        </member>
        <member name="T:Iot.Device.Common.SimpleConsoleLogger">
            <summary>
            A simple console logger - logs all incoming log messages to the console
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLogger.#ctor(System.String)">
            <summary>
            Creates console output with color support
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLogger.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Creates console output with color support
            </summary>
        </member>
        <member name="P:Iot.Device.Common.SimpleConsoleLogger.MinLogLevel">
            <summary>
            Specifies the minimum log level that is printed. Default is Information
            </summary>
        </member>
        <member name="P:Iot.Device.Common.SimpleConsoleLogger.LoggerName">
            <summary>
            Name of the logger
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Common.SimpleConsoleLoggerFactory">
            <summary>
            Provides a very simple console logger that does not require a reference to Microsoft.Extensions.Logging.dll
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLoggerFactory.#ctor">
            <summary>
            Constructs a console logger with the default log level.
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLoggerFactory.#ctor(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Constructs a logger factory that creates loggers with the given log level
            </summary>
            <param name="minLogLevel">Minimum log level to use</param>
        </member>
        <member name="P:Iot.Device.Common.SimpleConsoleLoggerFactory.MinLogLevel">
            <summary>
            Sets the log level for new loggers.
            Note that changing this value will only affect new loggers
            </summary>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLoggerFactory.AddProvider(Microsoft.Extensions.Logging.ILoggerProvider)">
            <summary>
            The console logger is built-in here
            </summary>
            <param name="provider">Argument is ignored</param>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLoggerFactory.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Common.SimpleConsoleLoggerFactory.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Common.WeatherHelper">
            <summary>
            This class contains methods to calculate meteorological values from different
            sensor measurements. Multiple sensor inputs are used to generate additional information.
            </summary>
        </member>
        <member name="F:Iot.Device.Common.WeatherHelper.SpecificGasConstantOfAir">
            <summary>
            Gas constant of dry Air, J / (kg * K)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.WeatherHelper.SpecificGasConstantOfVapor">
            <summary>
            Gas constant of vapor, J / (kg * K)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.WeatherHelper.DefaultTemperatureGradient">
            <summary>
            Default atmospheric temperature gradient = 0.0065K/m (or 0.65K per 100m)
            </summary>
        </member>
        <member name="F:Iot.Device.Common.WeatherHelper.MeanSeaLevel">
            <summary>
            The mean sea-level pressure (MSLP) is the average atmospheric pressure at mean sea level
            </summary>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateHeatIndex(UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            The heat index (or apparent temperature) is used to measure the amount of discomfort
            during the summer months when heat and humidity often combine to make it feel hotter
            than it actually is. The heat index is usually used for afternoon high temperatures.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <param name="relativeHumidity">The relative humidity (RH)</param>
            <returns>The heat index, also known as the apparent temperature</returns>
            <remarks>
            Formula from https://www.wpc.ncep.noaa.gov/html/heatindex_equation.shtml
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverWater(UnitsNet.Temperature)">
            <summary>
            Calculates the saturated vapor pressure for a given air temperature over water.
            The formula used is valid for temperatures between -100°C and +100°C.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <returns>The saturated vapor pressure</returns>
            <remarks>
            From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser, after D. Sonntag (1982)
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateSaturatedVaporPressureOverIce(UnitsNet.Temperature)">
            <summary>
            Calculates the saturated vapor pressure for a given air temperature over ice.
            The formula used is valid for temperatures between -100°C and +0°C.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <returns>The saturated vapor pressure</returns>
            <remarks>
            From https://de.wikibooks.org/wiki/Tabellensammlung_Chemie/_Stoffdaten_Wasser, after D. Sonntag (1982)
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateActualVaporPressure(UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            Calculates the actual vapor pressure.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <param name="relativeHumidity">The relative humidity (RH)</param>
            <returns>The actual vapor pressure</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateDewPoint(UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            Calculates the dew point. The dew point is the temperature at which, given the other values remain constant - dew or fog would start
            building up.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <param name="relativeHumidity">The relative humidity (RH)</param>
            <returns>The dew point</returns>
            <remarks>
            Source https://en.wikipedia.org/wiki/Dew_point
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAbsoluteHumidity(UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            Calculates the absolute humidity in g/m³.
            </summary>
            <param name="airTemperature">The dry air temperature</param>
            <param name="relativeHumidity">The relative humidity (RH)</param>
            <returns>The absolute humidity in g/m³</returns>
            <remarks>
            Source https://de.wikipedia.org/wiki/Luftfeuchtigkeit#Absolute_Luftfeuchtigkeit
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.GetRelativeHumidityFromActualAirTemperature(UnitsNet.Temperature,UnitsNet.RelativeHumidity,UnitsNet.Temperature)">
            <summary>
            Calculates a corrected relative humidity. This is useful if you have a temperature/humidity sensor that is
            placed in a location where the temperature is different from the real ambient temperature (like it sits inside a hot case)
            and another temperature-only sensor that gives more reasonable ambient temperature readings.
            Do note that the relative humidity is dependent on the temperature, because it depends on how much water a volume of air
            can contain, which increases with temperature.
            </summary>
            <param name="airTemperatureFromHumiditySensor">Temperature measured by the humidity sensor</param>
            <param name="relativeHumidityMeasured">Humidity measured</param>
            <param name="airTemperatureFromBetterPlacedSensor">Temperature measured by better placed sensor</param>
            <returns>A corrected humidity. The value will be lower than the input value if the better placed sensor is cooler than
            the "bad" sensor.</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Pressure,UnitsNet.Temperature)">
            <summary>
            Calculates the altitude in meters from the given pressure, sea-level pressure and air temperature.
            </summary>
            <param name="pressure">The pressure at the point for which altitude is being calculated</param>
            <param name="seaLevelPressure">The sea-level pressure</param>
            <param name="airTemperature">The dry air temperature at the point for which altitude is being calculated</param>
            <returns>The altitude</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Temperature)">
            <summary>
            Calculates the altitude in meters from the given pressure and air temperature. Assumes mean sea-level pressure.
            </summary>
            <param name="pressure">The pressure at the point for which altitude is being calculated</param>
            <param name="airTemperature">The dry air temperature at the point for which altitude is being calculated</param>
            <returns>The altitude</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure,UnitsNet.Pressure)">
            <summary>
            Calculates the altitude in meters from the given pressure and sea-level pressure. Assumes temperature of 15C.
            </summary>
            <param name="pressure">The pressure at the point for which altitude is being calculated</param>
            <param name="seaLevelPressure">The sea-level pressure</param>
            <returns>The altitude</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure)">
            <summary>
            Calculates the altitude in meters from the given pressure. Assumes mean sea-level pressure and temperature of 15C.
            </summary>
            <param name="pressure">The pressure at the point for which altitude is being calculated</param>
            <returns>The altitude</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)">
            <summary>
            Calculates the approximate sea-level pressure from given absolute pressure, altitude and air temperature.
            </summary>
            <param name="pressure">The air pressure at the point of measurement</param>
            <param name="altitude">The altitude at the point of the measurement</param>
            <param name="airTemperature">The air temperature</param>
            <returns>The estimated absolute sea-level pressure</returns>
            <remarks><see cref="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)"/> solved for sea level pressure</remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)">
            <summary>
            Calculates the approximate absolute pressure from given sea-level pressure, altitude and air temperature.
            </summary>
            <param name="seaLevelPressure">The sea-level pressure</param>
            <param name="altitude">The altitude in meters at the point for which pressure is being calculated</param>
            <param name="airTemperature">The air temperature at the point for which pressure is being calculated</param>
            <returns>The estimated absolute pressure at the given altitude</returns>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateTemperature(UnitsNet.Pressure,UnitsNet.Pressure,UnitsNet.Length)">
            <summary>
            Calculates the temperature gradient for the given pressure difference
            </summary>
            <param name="pressure">The air pressure at the point for which temperature is being calculated</param>
            <param name="seaLevelPressure">The sea-level pressure</param>
            <param name="altitude">The altitude in meters at the point for which temperature is being calculated</param>
            <returns>The standard temperature at the given altitude, when the given pressure difference is known</returns>
            <remarks><see cref="M:Iot.Device.Common.WeatherHelper.CalculatePressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)"/> solved for temperature</remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Length)">
            <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)"/>. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            <example>
            You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0°C. The met service will show that
            you are within a high-pressure area of around 1020 hPa.
            </example>
            </summary>
            <param name="measuredPressure">Measured pressure at the observation point</param>
            <param name="measuredTemperature">Measured temperature at the observation point</param>
            <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m). Do not use the height obtained by calling <see cref="M:Iot.Device.Common.WeatherHelper.CalculateAltitude(UnitsNet.Pressure)"/>
            or any of its overloads, since that would use redundant data.</param>
            <returns>The barometric pressure at the point of observation</returns>
            <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Pressure,UnitsNet.Length)">
            <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)"/>. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            <example>
            You are at 650m over sea and measure a pressure of 948.7 hPa and a temperature of 24.0°C. The met service will show that
            you are within a high-pressure area of around 1020 hPa.
            </example>
            </summary>
            <param name="measuredPressure">Measured pressure at the observation point</param>
            <param name="measuredTemperature">Measured temperature at the observation point</param>
            <param name="vaporPressure">Vapor pressure, meteorologic definition</param>
            <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m)</param>
            <returns>The barometric pressure at the point of observation</returns>
            <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateBarometricPressure(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.Length,UnitsNet.RelativeHumidity)">
            <summary>
            Calculates the barometric pressure from a raw reading, using the reduction formula from the german met service.
            This is a more complex variant of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateSeaLevelPressure(UnitsNet.Pressure,UnitsNet.Length,UnitsNet.Temperature)"/>. It gives the value that a weather station gives
            for a particular area and is also used in meteorological charts.
            Use this method if you also have the relative humidity.
            </summary>
            <param name="measuredPressure">Measured pressure at the observation point</param>
            <param name="measuredTemperature">Measured temperature at the observation point</param>
            <param name="measurementAltitude">Height over sea level of the observation point (to be really precise, geopotential heights have
            to be used above ~750m)</param>
            <param name="relativeHumidity">Relative humidity at point of measurement</param>
            <returns>The barometric pressure at the point of observation</returns>
            <remarks>
            From https://de.wikipedia.org/wiki/Barometrische_Höhenformel#Anwendungen
            </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature)">
            <summary>
            Simplified air density (not taking humidity into account)
            </summary>
            <param name="airPressure">Measured air pressure</param>
            <param name="temperature">Measured temperature</param>
            <returns>Approximate standard air density</returns>
            <remarks>From https://de.wikipedia.org/wiki/Luftdichte </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature,UnitsNet.RelativeHumidity)">
            <summary>
            Calculates the air density
            </summary>
            <param name="airPressure">Measured air pressure</param>
            <param name="temperature">Measured temperature</param>
            <param name="humidity">Measured relative humidity</param>
            <returns>Approximate standard air density at sea level</returns>
            <remarks>From https://de.wikipedia.org/wiki/Luftdichte </remarks>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateWindchill(UnitsNet.Temperature,UnitsNet.Speed)">
            <summary>
            Calculates the wind chill temperature - this is the perceived temperature in (heavy) winds at cold temperatures.
            This is only useful at temperatures below about 20°C, above use <see cref="M:Iot.Device.Common.WeatherHelper.CalculateHeatIndex(UnitsNet.Temperature,UnitsNet.RelativeHumidity)"/> instead.
            Not suitable for wind speeds &lt; 5 km/h.
            </summary>
            <param name="temperature">The measured air temperature</param>
            <param name="windSpeed">The wind speed (measured at 10m above ground)</param>
            <returns>The perceived temperature. Note that this is not a real temperature, and the skin will never really reach
            this temperature. This is more an indication on how fast the skin will reach the air temperature. If the skin
            reaches a temperature of about -5°C, frostbite might occur.</returns>
            <remarks>From https://de.wikipedia.org/wiki/Windchill </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">The wind speed is less than zero</exception>
        </member>
        <member name="M:Iot.Device.Common.WeatherHelper.CalculateWindForce(UnitsNet.Density,UnitsNet.Speed,System.Double)">
            <summary>
            Calculates the wind force on an object.
            </summary>
            <param name="densityOfAir">The denisty of the air, calculated using one of the overloads of <see cref="M:Iot.Device.Common.WeatherHelper.CalculateAirDensity(UnitsNet.Pressure,UnitsNet.Temperature)"/></param>
            <param name="windSpeed">The speed of the wind</param>
            <param name="pressureCoefficient">Pressure coefficient for the shape of the object. Use 1 for a rectangular object directly facing the wind</param>
            <returns>The Pressure the wind applies on the object</returns>
            <remarks>From https://de.wikipedia.org/wiki/Winddruck </remarks>
        </member>
        <member name="T:Iot.Device.MathExtensions">
            <summary>
            Implementations of some functions missing in older .NET versions
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="M:Iot.Device.MathExtensions.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns val, limited to the range min-max (inclusive)
            </summary>
        </member>
        <member name="T:Iot.Device.Graphics.BdfFont">
            <summary>
            Represents Bitmap Distribution Format (BDF) font, partial implementation of specifications.
            Specifications can be found here: https://www.adobe.com/content/dam/acom/en/devnet/font/pdfs/5005.BDF_Spec.pdf
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.Width">
            <summary>
            Character width
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.Height">
            <summary>
            Character height
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.XDisplacement">
            <summary>
            X displacement of the character
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.YDisplacement">
            <summary>
            Y Displacement of the character
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.DefaultChar">
            <summary>
            Default character
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.CharsCount">
            <summary>
            Number of characters
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.GlyphMapper">
            <summary>
            GlyphMapper is mapping from the character number to the index of the character bitmap data in the buffer GlyphUshortData.
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.GlyphUshortData">
            <summary>
            The buffer containing all the data
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.BdfFont.Load(System.String)">
            <summary>
            Loads BdfFont from a specified path
            </summary>
            <param name="fontFilePath">Path of the file representing the font</param>
            <returns>BdfFont instance</returns>
        </member>
        <member name="M:Iot.Device.Graphics.BdfFont.GetCharData(System.Char,System.ReadOnlySpan{System.UInt16}@)">
            <summary>
            Get character data or data for default character
            </summary>
            <param name="character">Character whose data needs to be retrieved</param>
            <param name="charData">Character data</param>
        </member>
        <member name="P:Iot.Device.Graphics.BdfFont.SupportedChars">
            <summary>
            Characters supported by this font
            </summary>
            <value>Array of supported characters</value>
        </member>
        <member name="M:Iot.Device.Graphics.BdfFont.GetCharData(System.Int32,System.Span{System.Int32}@,System.Boolean)">
            <summary>
            Get character data
            </summary>
            <param name="charOrdinal">Character ordinal</param>
            <param name="data">Buffer to be sliced and filled with character data</param>
            <param name="useDefaultChar">Use default character if not found</param>
            <returns>True if data could be retrieved</returns>
        </member>
        <member name="T:Iot.Device.Graphics.BitmapImage">
            <summary>
            An abstract class for a bitmap image, to be implemented by an image provider.
            This class is also the factory to create new bitmaps with the current image factory.
            The image factory must implement <see cref="T:Iot.Device.Graphics.IImageFactory"/> and must be registered using a call to
            <see cref="M:Iot.Device.Graphics.BitmapImage.RegisterImageFactory(Iot.Device.Graphics.IImageFactory)"/>.
            </summary>
            <remarks>
            This class does not have an implementation within Iot.Device.Bindings.dll. You can use the Iot.Device.Bindings.SkiaSharpAdapter.dll
            as a supported operating-system independent implementation of this class or write your own implementation.
            </remarks>
        </member>
        <member name="F:Iot.Device.Graphics.BitmapImage.s_currentFactory">
            <summary>
            The currently registered image factory
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.#ctor(System.Int32,System.Int32,System.Int32,Iot.Device.Graphics.PixelFormat)">
            <summary>
            Initializes a <see cref="T:Iot.Device.Graphics.BitmapImage" /> instance with the specified data, width, height and stride.
            </summary>
            <param name="width">Width of the image</param>
            <param name="height">Height of the image</param>
            <param name="stride">Number of bytes per row</param>
            <param name="pixelFormat">The pixel format of the data</param>
        </member>
        <member name="P:Iot.Device.Graphics.BitmapImage.Width">
            <summary>
            Width of the image
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BitmapImage.Height">
            <summary>
            Height of the image
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BitmapImage.Stride">
            <summary>
            Number of bytes per row
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BitmapImage.PixelFormat">
            <summary>
            The format of the image
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.BitmapImage.Item(System.Int32,System.Int32)">
            <summary>
            Accesses the pixel at the given position
            </summary>
            <param name="x">Pixel X position</param>
            <param name="y">Pixel Y position</param>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.RegisterImageFactory(Iot.Device.Graphics.IImageFactory)">
            <summary>
            Register an image factory.
            </summary>
            <param name="factory">The image factory to register</param>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.CreateBitmap(System.Int32,System.Int32,Iot.Device.Graphics.PixelFormat)">
            <summary>
            Creates a bitmap using the active factory. This requires an implementation to be registered.
            See <see cref="T:Iot.Device.Graphics.BitmapImage"/> for details.
            </summary>
            <param name="width">Width of the image, in pixels</param>
            <param name="height">Height of the image, in pixels</param>
            <param name="pixelFormat">Desired pixel format</param>
            <returns>A new bitmap with the provided size</returns>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.CreateFromFile(System.String)">
            <summary>
            Create a bitmap from a file. This requires an implementation to be registered.
            See <see cref="T:Iot.Device.Graphics.BitmapImage"/> for details.
            </summary>
            <param name="filename">The file to load</param>
            <returns>A bitmap</returns>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.CreateFromStream(System.IO.Stream)">
            <summary>
            Create a bitmap from an open stream. This requires an implementation to be registered.
            See <see cref="T:Iot.Device.Graphics.BitmapImage"/> for details.
            </summary>
            <param name="data">The data stream</param>
            <returns>A bitmap</returns>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.Clear(System.Drawing.Color)">
            <summary>
            Clears the image to specific color
            </summary>
            <param name="color">Color to clear the image. Defaults to black.</param>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets pixel at specific position
            </summary>
            <param name="x">X coordinate of the pixel</param>
            <param name="y">Y coordinate of the pixel</param>
            <param name="color">Color to set the pixel to</param>
            <remarks>The use of <see cref="M:Iot.Device.Graphics.BitmapImage.SetPixel(System.Int32,System.Int32,System.Drawing.Color)"/> and <see cref="M:Iot.Device.Graphics.BitmapImage.GetPixel(System.Int32,System.Int32)"/> is usually slow. For fast image updates, grab the underlying
            raw buffer by calling <see cref="M:Iot.Device.Graphics.BitmapImage.AsByteSpan"/> or use the <see cref="M:Iot.Device.Graphics.BitmapImage.GetDrawingApi"/> method and use high-level drawing functions.</remarks>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the given position
            </summary>
            <param name="x">X coordinate of the pixel</param>
            <param name="y">Y coordinate of the pixel</param>
            <returns>The color of the pixel</returns>
            <remarks>The use of <see cref="M:Iot.Device.Graphics.BitmapImage.SetPixel(System.Int32,System.Int32,System.Drawing.Color)"/> and <see cref="M:Iot.Device.Graphics.BitmapImage.GetPixel(System.Int32,System.Int32)"/> is usually slow. For fast image updates, grab the underlying
            raw buffer by calling <see cref="M:Iot.Device.Graphics.BitmapImage.AsByteSpan"/> or use the <see cref="M:Iot.Device.Graphics.BitmapImage.GetDrawingApi"/> method and use high-level drawing functions.</remarks>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.AsByteSpan">
            <summary>
            Return the data pointer as a raw span of bytes
            </summary>
            <returns>A span of bytes</returns>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.SaveToFile(System.String,Iot.Device.Graphics.ImageFileType)">
            <summary>
            Saves this bitmap to a file
            </summary>
            <param name="filename">The filename to save it to</param>
            <param name="fileType">The filetype to use.</param>
            <remarks>
            Generally, the method is not checking that the filename extension matches the file type provided.
            </remarks>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.SaveToStream(System.IO.Stream,Iot.Device.Graphics.ImageFileType)">
            <summary>
            Save the image to a stream
            </summary>
            <param name="stream">The stream to save the data to</param>
            <param name="format">The image format</param>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
            <param name="disposing">True if disposing, false if called from finalizer</param>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.Dispose">
            <summary>
            Disposes this instance. Correctly disposing instance of this class is important to prevent memory leaks or overload of the garbage collector.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.BitmapImage.GetDrawingApi">
            <summary>
            Returns an abstraction interface for drawing to this bitmap.
            </summary>
        </member>
        <member name="T:Iot.Device.Graphics.Converters">
            <summary>
            Contains a set of converters from <see cref="T:System.Drawing.Bitmap"/> to <see cref="T:Iot.Device.Graphics.BitmapImage"/>, for
            easy conversion of legacy code that still uses the obsolete System.Drawing library
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.Converters.ToBitmapImage(System.Drawing.Bitmap)">
            <summary>
            Convert a <see cref="T:System.Drawing.Bitmap"/> to a <see cref="T:Iot.Device.Graphics.BitmapImage"/>
            </summary>
            <param name="bmp">Input bitmap</param>
            <returns>An image</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bmp"/> is null</exception>
            <exception cref="T:System.NotSupportedException">The input format is not supported</exception>
        </member>
        <member name="M:Iot.Device.Graphics.Converters.AdjustImageDestination(Iot.Device.Graphics.BitmapImage,System.Drawing.Point@,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the target position and size so that a given image can be copied to a target image without scaling and without further cropping.
            This ensures the destination rectangle, starting at the given point lies within the image.
            </summary>
            <param name="image">The input image size</param>
            <param name="leftTop">[in, out] The top left corner of the input image to show. If at the bottom or right edge of the destination, this will be
            reset so that the right edge of the input image is at the right edge of the destination</param>
            <param name="destination">The destination rectangle. If this is larger than the input image, the size will be cropped</param>
        </member>
        <member name="T:Iot.Device.Graphics.Font5x8">
            <summary>
            The specific PCD8544 font for Nokia 5110
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.Font5x8.Ascii">
            <summary>
            ASCII Font specific to the PCD8544 Nokia 5110 screen but can be used as a generic 5x8 font.
            Font characters are column bit mask.
            Font size is 5 pixels width and 8 pixels height. Each byte represent a vertical column for the character.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.Font5x8.#ctor">
            <summary>
            Constructor for Font 5x8
            </summary>
        </member>
        <member name="T:Iot.Device.Graphics.GraphicDisplay">
            <summary>
            An interface for representing graphic displays
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.GraphicDisplay.ScreenWidth">
            <summary>
            The width of the display, in pixels
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.GraphicDisplay.ScreenHeight">
            <summary>
            The height of the display, in pixels
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.GraphicDisplay.NativePixelFormat">
            <summary>
            The native display format of the display (the number of colors it can actually display)
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.CanConvertFromPixelFormat(Iot.Device.Graphics.PixelFormat)">
            <summary>
            Checks whether the <see cref="M:Iot.Device.Graphics.GraphicDisplay.DrawBitmap(Iot.Device.Graphics.BitmapImage)"/> method can convert the given format into the native format.
            </summary>
            <param name="format">The format to convert</param>
            <returns>True if yes, false if no</returns>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.GetBackBufferCompatibleImage">
            <summary>
            Returns an image that can act as back buffer (has a supported image format and the right size).
            Updating this bitmap does not change the screen. Use <see cref="M:Iot.Device.Graphics.GraphicDisplay.DrawBitmap(Iot.Device.Graphics.BitmapImage)"/> to show the bitmap/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.ClearScreen">
            <summary>
            Clears the screen to black
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.DrawBitmap(Iot.Device.Graphics.BitmapImage)">
            <summary>
            Send a bitmap to the display buffer.
            </summary>
            <param name="bm">The bitmap to be sent to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.Dispose(System.Boolean)">
            <summary>
            Standard dispose pattern
            </summary>
            <param name="disposing">True if disposing, false if in finalizer</param>
        </member>
        <member name="M:Iot.Device.Graphics.GraphicDisplay.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Graphics.IGraphics">
            <summary>
            This declarative interface provides the basis for drawing functions using image specific APIs.
            This interface is empty. The implementation is provided via extension methods.
            </summary>
        </member>
        <member name="T:Iot.Device.Graphics.IImageFactory">
            <summary>
            Factory interface for creating bitmaps.
            An instance of this interface shall be provided by library-specific adapter classes.
            The class <see cref="T:Iot.Device.Graphics.BitmapImage"/> requires an instance of this interface to work properly.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.IImageFactory.CreateBitmap(System.Int32,System.Int32,Iot.Device.Graphics.PixelFormat)">
            <summary>
            Creates a bitmap with the given size and format
            </summary>
            <param name="width">Width of the bitmap, in pixels</param>
            <param name="height">Height of the bitmap in pixels</param>
            <param name="pixelFormat">The desired pixel format</param>
            <returns>An empty bitmap of the given size</returns>
        </member>
        <member name="M:Iot.Device.Graphics.IImageFactory.CreateFromStream(System.IO.Stream)">
            <summary>
            Creates a bitmap from a stream (e.g. an image file)
            </summary>
            <param name="file">The stream to open</param>
            <returns>A bitmap from the given stream</returns>
        </member>
        <member name="T:Iot.Device.Graphics.ImageFileType">
            <summary>
            Image file type list
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.ImageFileType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.ImageFileType.Png">
            <summary>
            Png file
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.ImageFileType.Bmp">
            <summary>
            Windows Bitmap
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.ImageFileType.Jpg">
            <summary>
            Jpeg file
            </summary>
        </member>
        <member name="T:Iot.Device.Graphics.LcdCharacterEncoding">
            <summary>
            Provides the character encoding for an LCD display.
            Instances of this class are generated by <see cref="T:Iot.Device.Graphics.LcdCharacterEncodingFactory"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.Char,System.Byte},System.Char)">
            <summary>
            Creates an instance of <see cref="T:Iot.Device.Graphics.LcdCharacterEncoding"/>.
            </summary>
            <param name="cultureName">Culture name for this encoding (informational only)</param>
            <param name="readOnlyMemoryName">Name of the ROM (hard coded read-only character memory) on the display</param>
            <param name="characterMap">The character map to use</param>
            <param name="unknownLetter">The character to print when a letter not in the map is found. This letter must be part of the map</param>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.Char,System.Byte},System.Char,System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Creates an instance of <see cref="T:Iot.Device.Graphics.LcdCharacterEncoding"/>.
            </summary>
            <param name="cultureName">Culture name for this encoding (informational only)</param>
            <param name="readOnlyMemoryName">Name of the ROM (hard coded read-only character memory) on the display</param>
            <param name="characterMap">The character map to use</param>
            <param name="unknownLetter">The character to print when a letter not in the map is found</param>
            <param name="extraCharacters">The pixel map of characters required for this culture but not found in the character ROM</param>
        </member>
        <member name="P:Iot.Device.Graphics.LcdCharacterEncoding.IsSingleByte">
            <summary>
            Always returns true for this class.
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.LcdCharacterEncoding.EncodingName">
            <inheritDoc/>
        </member>
        <member name="P:Iot.Device.Graphics.LcdCharacterEncoding.ExtraCharacters">
            <summary>
            The list of pixel maps for extra characters that are required for this culture.
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.LcdCharacterEncoding.AllCharactersSupported">
            <summary>
            This is internally set to false if we already know that we won't be able to display all required characters
            </summary>
        </member>
        <member name="P:Iot.Device.Graphics.LcdCharacterEncoding.ReadOnlyMemoryName">
            <summary>
            Specified Name of the hardcoded character memory set for which this Encoding is intended. An encoding shall only be loaded to
            a matching display.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Reverse mapping is not supported for this encoding.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetMaxByteCount(System.Int32)">
            <inheritDoc/>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncoding.GetMaxCharCount(System.Int32)">
            <inheritDoc/>
        </member>
        <member name="T:Iot.Device.Graphics.LcdCharacterEncodingFactory">
            <summary>
            Factory for creating Encodings that support different cultures on different LCD Displays.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.Create(System.Globalization.CultureInfo,System.String,System.Char,System.Int32)">
            <summary>
            Creates the character mapping optimized for the given culture.
            Checks whether the characters required for a given culture are available in the installed character map and tries
            to add them as user-defined characters, if possible.
            </summary>
            <param name="culture">Culture for which support is required</param>
            <param name="romName">ROM type of attached chip. Supported values: "A00", "A02", "SplC780"</param>
            <param name="unknownLetter">Letter that is printed when an unknown character is encountered. This letter must be part of the
            default rom set</param>
            <param name="maxNumberOfCustomCharacters">Maximum number of custom characters supported on the hardware. Should be 8 for Hd44780-controlled displays.</param>
            <returns>The newly created encoding. Whether the encoding can be loaded to a certain display will be decided later.</returns>
            <exception cref="T:System.ArgumentException">The character specified as unknownLetter must be part of the mapping.</exception>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.AssignLettersForCurrentCulture(System.Collections.Generic.Dictionary{System.Char,System.Byte},System.Globalization.CultureInfo,System.String,System.Collections.Generic.List{System.Byte[]},System.Int32)">
            <summary>
            Tries to generate letters important in that culture but missing from the current rom set
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.SpecialLettersForCulture(System.Globalization.CultureInfo,System.Collections.Generic.Dictionary{System.Char,System.Byte})">
            <summary>
            Returns the set of special characters required for a given culture/language.
            This may include diacritics (ä, ö, ø), currency signs (€) or similar chars.
            If any of the returned characters are not found in the ROM map, <see cref="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.CreateLetter(System.Char,System.String)"/> is called to obtain the pixel representation of the given character.
            A maximum of 8 extra characters can be added to the ones in the ROM.
            </summary>
            <param name="culture">Culture to support</param>
            <param name="characterMapping">The character map, pre-loaded with the characters from the character ROM. This may be extended by explicitly adding direct mappings
            where an alternative is allowed (i.e. mapping capital diacritics to normal capital letters É -> E, when there's not enough room to put É into character RAM.</param>
            <returns>A string with the set of special characters for a language, i.e. "äöüß€ÄÖÜ" for German</returns>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.CreateLetter(System.Char,System.String)">
            <summary>
            Creates the given letter for the given ROM type.
            Overwrite this only if an alternate ROM is used.
            </summary>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.CreateLetterA00(System.Char)">
            <summary>
            Creates the given letter from a pixel map for Rom Type A00 (7-pixel high letters, bottom row empty)
            </summary>
            <param name="character">Character to create</param>
            <returns>An 8-Byte array of the pixel map for the created letter.</returns>
            <remarks>
            Currently requires the characters to be hardcoded here. Would be nice if we could generate the pixel maps from an existing font, such as Consolas
            </remarks>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.CreateLetterA02(System.Char)">
            <summary>
            Creates the given letter from a pixel map for Rom Type A02 (7 or 8 Pixel high letters, bottom row filled)
            </summary>
            <param name="character">Character to create</param>
            <returns>An 8-Byte array of the pixel map for the created letter.</returns>
            <remarks>
            Currently requires the characters to be hardcoded here. Would be nice if we could generate the pixel maps from an existing font, such as Consolas
            </remarks>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.CreateCustomCharacter(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Combines a set of bytes into a pixel map
            </summary>
            <example>
            Use as follows to create letter 'ü':
            <code>
            CreateCustomCharacter(
                       0b_01010,
                       0b_00000,
                       0b_10001,
                       0b_10001,
                       0b_10001,
                       0b_10011,
                       0b_01101,
                       0b_00000)
            </code>
            </example>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.ConvertFont8to5bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Convert a 8 bytes array with 5 lower bit character representation into a
            5 bytes array with all bit character representation vertically ordered.
            </summary>
            <param name="font8">A span of bytes, must be 8 bytes length</param>
            <returns>A 5 bytes array containing the character</returns>
        </member>
        <member name="M:Iot.Device.Graphics.LcdCharacterEncodingFactory.ConvertFont5to8bytes(System.ReadOnlySpan{System.Byte})">
            <summary>
            Convert a 5 bytes array with 8 bits vertically encoded character representation into a
            8 bytes array with the lower 5 bits.
            </summary>
            <param name="font5">A span of bytes, must be 5 bytes length</param>
            <returns>A 8 bytes array containing the character</returns>
        </member>
        <member name="T:Iot.Device.Graphics.PixelFormat">
            <summary>
            Specifies the pixel format of an image.
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.PixelFormat.Unspecified">
            <summary>
            The format is unspecified.
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.PixelFormat.Format32bppArgb">
            <summary>
            The standard 32 bit image format
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.PixelFormat.Format32bppXrgb">
            <summary>
            32 bit image format with ignored alpha
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.PixelFormat.Format16bppRgb565">
            <summary>
            16 bit RGB image format (5 bits for red, 6 bits for green and 5 bits for blue)
            </summary>
        </member>
        <member name="F:Iot.Device.Graphics.PixelFormat.Format1bppBw">
            <summary>
            1 bit black and white image
            </summary>
        </member>
        <member name="T:Iot.Device.CpuTemperature.CpuTemperature">
            <summary>
            CPU temperature.
            On Windows, the value returned is driver dependent and may not represent actual CPU temperature, but more one
            of the case sensors. Use OpenHardwareMonitor for better environmental representation in Windows.
            </summary>
        </member>
        <member name="M:Iot.Device.CpuTemperature.CpuTemperature.#ctor">
            <summary>
            Creates an instance of the CpuTemperature class
            </summary>
        </member>
        <member name="P:Iot.Device.CpuTemperature.CpuTemperature.Temperature">
            <summary>
            Gets CPU temperature
            </summary>
        </member>
        <member name="P:Iot.Device.CpuTemperature.CpuTemperature.IsAvailable">
            <summary>
            Is CPU temperature available
            </summary>
        </member>
        <member name="M:Iot.Device.CpuTemperature.CpuTemperature.ReadTemperatures">
            <summary>
            Returns all known temperature sensor values.
            </summary>
            <returns>A list of name/value pairs for temperature sensors</returns>
        </member>
        <member name="M:Iot.Device.CpuTemperature.CpuTemperature.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.DCMotor.DCMotor">
            <summary>
            Direct current (DC) motor
            </summary>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.#ctor(System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs generic <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance
            </summary>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotor.Speed">
            <summary>
            Gets or sets the speed of the motor. Range is -1..1 or 0..1 for 1-pin connection.
            1 means maximum speed, 0 means no movement and -1 means movement in opposite direction.
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotor.Controller">
            <summary>
            <see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins
            </summary>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Device.Pwm.PwmChannel)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using only one pin which allows to control speed in one direction.
            </summary>
            <param name="speedControlChannel"><see cref="T:System.Device.Pwm.PwmChannel"/> used to control the speed of the motor</param>
            <returns>DCMotor instance</returns>
            <remarks>
            PWM pin <paramref name="speedControlChannel"/> can be connected to either enable pin of the H-bridge.
            or directly to the one of two inputs related with the motor direction (if H-bridge allows inputs to change frequently).
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using only one pin which allows to control speed in one direction.
            </summary>
            <param name="speedControlPin">Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz)</param>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> related to the <paramref name="speedControlPin"/></param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <returns><see cref="T:Iot.Device.DCMotor.DCMotor"/> instance</returns>
            <remarks>
            <paramref name="speedControlPin"/> can be connected to either enable pin of the H-bridge.
            or directly to the on of two inputs related with the motor direction (if H-bridge allows inputs to change frequently).
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Device.Pwm.PwmChannel,System.Int32,System.Device.Gpio.GpioController,System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using two pins which allows to control speed in both directions.
            </summary>
            <param name="speedControlChannel"><see cref="T:System.Device.Pwm.PwmChannel"/> used to control the speed of the motor</param>
            <param name="directionPin">Pin used to control the direction of the motor</param>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> related to the <paramref name="directionPin"/></param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <param name="singleBiDirectionPin">True if a controller with one direction input is used,
            false if a controller with two direction inputs is used</param>
            <returns><see cref="T:Iot.Device.DCMotor.DCMotor"/> instance</returns>
            <remarks>
            <paramref name="speedControlChannel"/> should be connected to the one of two inputs
            related with the motor direction (if H-bridge allows inputs to change frequently),
            or to PWM input if a controller with one direction input is used.
            <paramref name="directionPin"/> should be connected to H-bridge input corresponding to one of the motor inputs.
            or to direction input if a controller with one direction input is used.
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean,System.Boolean)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using two pins which allows to control speed in both directions.
            </summary>
            <param name="speedControlPin">Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz)</param>
            <param name="directionPin">Pin used to control the direction of the motor</param>
            <param name="controller">GPIO controller related to <paramref name="speedControlPin"/> and <paramref name="directionPin"/></param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <param name="singleBiDirectionPin">True if a controller with one direction input is used,
            false if a controller with two direction inputs is used</param>
            <returns><see cref="T:Iot.Device.DCMotor.DCMotor"/> instance</returns>
            <remarks>
            <paramref name="speedControlPin"/> should be connected to the one of two inputs
            related with the motor direction (if H-bridge allows inputs to change frequently),
            or to PWM input if a controller with one direction input is used.
            <paramref name="directionPin"/> should be connected to H-bridge input corresponding to one of the motor inputs.
            or to direction input if a controller with one direction input is used.
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Device.Pwm.PwmChannel,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using three pins which allows to control speed in both directions.
            </summary>
            <param name="speedControlChannel"><see cref="T:System.Device.Pwm.PwmChannel"/> used to control the speed of the motor</param>
            <param name="directionPin">First pin used to control the direction of the motor</param>
            <param name="otherDirectionPin">Second pin used to control the direction of the motor</param>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> related to <paramref name="directionPin"/> and <paramref name="otherDirectionPin"/></param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <returns><see cref="T:Iot.Device.DCMotor.DCMotor"/> instance</returns>
            <remarks>
            When speed is non-zero the value of <paramref name="otherDirectionPin"/> will always be opposite to that of <paramref name="directionPin"/>.
            <paramref name="speedControlChannel"/> should be connected to enable pin of the H-bridge.
            <paramref name="directionPin"/> should be connected to H-bridge input corresponding to one of the motor inputs.
            <paramref name="otherDirectionPin"/> should be connected to H-bridge input corresponding to the remaining motor input.
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Create(System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance using three pins which allows to control speed in both directions.
            </summary>
            <param name="speedControlPin">Pin used to control the speed of the motor with software PWM (frequency will default to 50Hz)</param>
            <param name="directionPin">First pin used to control the direction of the motor</param>
            <param name="otherDirectionPin">Second pin used to control the direction of the motor</param>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> related to <paramref name="speedControlPin"/>, <paramref name="directionPin"/> and <paramref name="otherDirectionPin"/></param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <returns><see cref="T:Iot.Device.DCMotor.DCMotor"/> instance</returns>
            <remarks>
            When speed is non-zero the value of <paramref name="otherDirectionPin"/> will always be opposite to that of <paramref name="directionPin"/>
            PWM pin <paramref name="speedControlPin"/> should be connected to enable pin of the H-bridge.
            <paramref name="directionPin"/> should be connected to H-bridge input corresponding to one of the motor inputs.
            <paramref name="otherDirectionPin"/> should be connected to H-bridge input corresponding to the remaining motor input.
            Connecting motor directly to GPIO pin is not recommended and may damage your board.
            </remarks>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotor.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance.
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotor2PinNoEnable.Speed">
            <summary>
            Gets or sets the speed of the motor.
            Speed is a value from 0 to 1 or -1 to 1 if direction pin has been provided.
            1 means maximum speed, signed value changes the direction.
            </summary>
        </member>
        <member name="T:Iot.Device.DCMotor.DCMotor2PinWithBiDirectionalPin">
            <summary>
            class for H-bridge controller with only one direction input and PWM input
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotor2PinWithBiDirectionalPin.Speed">
            <summary>
            Gets or sets the speed of the motor.
            Speed is a value from -1 to 1
            1 means maximum speed, signed value changes the direction.
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotor3Pin.Speed">
            <summary>
            Gets or sets the speed of the motor.
            Speed is a value from -1 to 1.
            1 means maximum speed, signed value changes the direction.
            </summary>
        </member>
        <member name="T:Iot.Device.DCMotor.DCMotorWithStartStop">
            <summary>
            Direct current (DC) motor with Start/Stop
            </summary>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotorWithStartStop.#ctor(Iot.Device.DCMotor.DCMotor)">
            <summary>
            Constructs instance with added Start() and Stop() as additional protection
            </summary>
            <param name="innerMotor">Crate DCMotor instance</param>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotorWithStartStop.Dispose">
            <summary>
            Releases the resources used by the <see cref="T:Iot.Device.DCMotor.DCMotor"/> instance.
            </summary>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotorWithStartStop.Start">
            <summary>
            Enable motor operation.
            </summary>
        </member>
        <member name="M:Iot.Device.DCMotor.DCMotorWithStartStop.Stop">
            <summary>
            Disable motor operation.
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotorWithStartStop.Speed">
            <summary>
            Gets or sets the speed of the motor. Range is -1..1 or 0..1 for 1-pin connection.
            1 means maximum speed, 0 means no movement and -1 means movement in opposite direction.
            </summary>
        </member>
        <member name="P:Iot.Device.DCMotor.DCMotorWithStartStop.Enabled">
            <summary>
            Get or Set motor status.
            </summary>
        </member>
        <member name="T:Iot.Device.DHTxx.Dht10">
            <summary>
            Temperature and Humidity Sensor DHT10
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.Dht10.DefaultI2cAddress">
            <summary>
            DHT10 Default I2C Address
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht10.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Create a DHT10 sensor through I2C
            </summary>
            <param name="i2cDevice">I2C Device</param>
        </member>
        <member name="T:Iot.Device.DHTxx.Dht11">
            <summary>
            Temperature and Humidity Sensor DHT11
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht11.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a DHT11 sensor
            </summary>
            <param name="pin">The pin number (GPIO number)</param>
            <param name="pinNumberingScheme">The GPIO pin numbering scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.DHTxx.Dht12">
            <summary>
            Temperature and Humidity Sensor DHT12
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.Dht12.DefaultI2cAddress">
            <summary>
            DHT12 Default I2C Address
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht12.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a DHT12 sensor
            </summary>
            <param name="pin">The pin number (GPIO number)</param>
            <param name="pinNumberingScheme">The GPIO pin numbering scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht12.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Create a DHT12 sensor through I2C
            </summary>
            <param name="i2cDevice">I2C Device</param>
        </member>
        <member name="T:Iot.Device.DHTxx.Dht21">
            <summary>
            Temperature and Humidity Sensor DHT21
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht21.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a DHT22 sensor
            </summary>
            <param name="pin">The pin number (GPIO number)</param>
            <param name="pinNumberingScheme">The GPIO pin numbering scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.DHTxx.Dht22">
            <summary>
            Temperature and Humidity Sensor DHT22
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.Dht22.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a DHT22 sensor
            </summary>
            <param name="pin">The pin number (GPIO number)</param>
            <param name="pinNumberingScheme">The GPIO pin numbering scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.DHTxx.DhtBase">
            <summary>
            Temperature and Humidity Sensor DHTxx
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._readBuff">
            <summary>
            Read buffer
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._pin">
            <summary>
            GPIO pin
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._shouldDispose">
            <summary>
            True to dispose the Gpio Controller
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._i2cDevice">
            <summary>
            I2C device used to communicate with the device
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._controller">
            <summary>
            <see cref="T:System.Device.Gpio.GpioController"/> related with the <see cref="F:Iot.Device.DHTxx.DhtBase._pin"/>.
            </summary>
        </member>
        <member name="F:Iot.Device.DHTxx.DhtBase._isLastReadSuccessful">
            <summary>
            True when the last read values are valid
            </summary>
        </member>
        <member name="P:Iot.Device.DHTxx.DhtBase.IsLastReadSuccessful">
            <summary>
            How last read went, <c>true</c> for success, <c>false</c> for failure
            </summary>
        </member>
        <member name="P:Iot.Device.DHTxx.DhtBase.Temperature">
            <summary>
            Get the last read temperature
            </summary>
            <remarks>
            If last read was not successful, it returns <code>default(Temperature)</code>
            </remarks>
        </member>
        <member name="P:Iot.Device.DHTxx.DhtBase.Humidity">
            <summary>
            Get the last read of relative humidity in percentage
            </summary>
            <remarks>
            If last read was not successful, it returns <code>default(RelativeHumidity)</code>
            </remarks>
        </member>
        <member name="P:Iot.Device.DHTxx.DhtBase.MinTimeBetweenReads">
            <summary>
            Gets or sets the minimum time between sensor reads.
            When querying the sensor faster than this, the last values will be returned (whether valid or not)
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a DHT sensor
            </summary>
            <param name="pin">The pin number (GPIO number)</param>
            <param name="pinNumberingScheme">The GPIO pin numbering scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Create a DHT sensor through I2C (Only DHT12)
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.ReadData">
            <summary>
            Read data from the sensor. Returns the last read value if the last read operation was too close.
            </summary>
            <returns>The raw data last read</returns>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.ReadThroughOneWire">
            <summary>
            Read through One-Wire
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.ReadThroughI2c">
            <summary>
            Read through I2C
            </summary>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.TryReadTemperature(UnitsNet.Temperature@)">
            <summary>
            Returns the current temperature
            </summary>
            <param name="temperature">[Out] The current temperature on success</param>
            <returns>True on success, false if reading failed</returns>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.TryReadHumidity(UnitsNet.RelativeHumidity@)">
            <summary>
            Returns the current relative humidity
            </summary>
            <param name="humidity">[Out] The current relative humidity on success</param>
            <returns>True on success, false if reading failed</returns>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.GetHumidity(System.Span{System.Byte})">
            <summary>
            Converting data to humidity
            </summary>
            <param name="readBuff">Data</param>
            <returns>Humidity</returns>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.GetTemperature(System.Span{System.Byte})">
            <summary>
            Converting data to Temperature
            </summary>
            <param name="readBuff">Data</param>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.DHTxx.DhtBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Alignment">
            <summary>
            Alignment of displayed values
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Alignment.Left">
            <summary>
            Aligns displayed value to the left side of the display
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Alignment.Right">
            <summary>
            Aligns displayed value to the right side of the display
            </summary>
        </member>
        <member name="T:Iot.Device.Display.BiColorBarGraph">
            <summary>
            Represents a 24-Segment bargraph that can display multiple colors.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.BiColorBarGraph.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize BarGraph display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.BiColorBarGraph.Item(System.Int32)">
            <summary>
            Indexer for bargraph.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.BiColorBarGraph.Fill(Iot.Device.Display.LedColor)">
            <summary>
            Enable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.BiColorBarGraph.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.BiColorBarGraph.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.BiColorBarGraph.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.BlinkRate">
            <summary>
            Blink rates
            </summary>
            <remarks>Specific to <see cref="T:Iot.Device.Display.Ht16k33"/> LED driver</remarks>
        </member>
        <member name="F:Iot.Device.Display.BlinkRate.Off">
            <summary>
            Turn off blinking
            </summary>
        </member>
        <member name="F:Iot.Device.Display.BlinkRate.Blink2Hz">
            <summary>
            Blink display at 2Hz (2x per second)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.BlinkRate.Blink1Hz">
            <summary>
            Blink display at 1Hz (1x per second)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.BlinkRate.BlinkHalfHz">
            <summary>
            Blink display at 0.5Hz (Once every 2 seconds)
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Ht16k33">
            <summary>
            HT16K33 LED display driver
            </summary>
            <remarks>
            Datasheet: https://www.adafruit.com/datasheets/ht16K33v110.pdf
            Sources:
            https://github.com/adafruit/Adafruit_LED_Backpack/blob/master/Adafruit_LEDBackpack.cpp
            https://github.com/sobek1985/Adafruit_LEDBackpack/blob/master/Adafruit_LEDBackpack/AlphaNumericFourCharacters.cs
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.DefaultI2cAddress">
            <summary>
            HT16K33 default I2C address
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.MaxBrightness">
            <summary>
            Maximum level of brightness
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33._i2cDevice">
            <summary>
            I2C device interface
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33._bufferingEnabled">
            <summary>
            Buffering enabled
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.AutoFlush">
            <summary>
            Calls <see cref="M:Iot.Device.Display.Ht16k33.Flush"/> if <see cref="P:Iot.Device.Display.Ht16k33.BufferingEnabled"/> is false
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33._displayOn">
            <summary>
            Display on/off state
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33._brightness">
            <summary>
            Initial brightness level
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33._blinkRate">
            <summary>
            Initial blinking rate
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.TurnOnOscillator">
            <summary>
            Send turn on oscillator command to device
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.SetBrightness">
            <summary>
            Send set brightness command to device
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.SetBlinkDisplayOn">
            <summary>
            Send Blink/DisplayOn command to device
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize HT16K33 device
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Ht16k33.BufferingEnabled">
            <summary>
            Gets or sets whether buffering is enabled
            </summary>
            <remarks>
            When set to true the display buffer is only flushed to the device when explicitly calling the <see cref="M:Iot.Device.Display.Ht16k33.Flush"/> method.
            Setting it to false also implicitly calls <see cref="M:Iot.Device.Display.Ht16k33.Flush"/>
            </remarks>
        </member>
        <member name="P:Iot.Device.Display.Ht16k33.Brightness">
            <summary>
            Gets or sets level of display brightness
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Brightness must be between 0 and <see cref="F:Iot.Device.Display.Ht16k33.MaxBrightness"/></exception>
        </member>
        <member name="P:Iot.Device.Display.Ht16k33.BlinkRate">
            <summary>
            Gets or sets display blink rate, also turns on display if turned off
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="P:Iot.Device.Display.Ht16k33.DisplayOn">
            <summary>
            Sets screen on/off
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Write raw data to display buffer
            </summary>
            <param name="data">Array of bytes to write to the display</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.Clear">
            <summary>
            Clear display buffer
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Ht16k33.Flush">
            <summary>
            Flush buffer to display
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.Command.Blink">
            <summary>
            HT16K33 blink command
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.Command.BlinkDisplayOn">
            <summary>
            HT16K33 blink display on command
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.Command.TurnOnOscillator">
            <summary>
            HT16K33 turn on oscillator command
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.Command.SetBrightness">
            <summary>
            HT16K33 set brightness command
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Ht16k33.Command.BrightnessMask">
            <summary>
            HT16K33 brightness bit mask
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Dot">
            <summary>
            Dot display setup
            </summary>
            <remarks>Specific to device <see cref="T:Iot.Device.Display.Large4Digit7SegmentDisplay"/></remarks>
        </member>
        <member name="F:Iot.Device.Display.Dot.Off">
            <summary>
            Disable all dots
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Dot.CenterColon">
            <summary>
            Center colon
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Dot.LeftColon">
            <summary>
            Left colon
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Dot.LeftUpper">
            <summary>
            Left upper dot
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Dot.LeftLower">
            <summary>
            Left lower dot
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Dot.DecimalPoint">
            <summary>
            Decimal point (between third and fourth digits)
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Font">
            <summary>
            Fonts for 7-Segment displays
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_0">
            <summary>
            Digit 0
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_1">
            <summary>
            Digit 1
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_2">
            <summary>
            Digit 2
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_3">
            <summary>
            Digit 3
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_4">
            <summary>
            Digit 4
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_5">
            <summary>
            Digit 5
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_6">
            <summary>
            Digit 6
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_7">
            <summary>
            Digit 7
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_8">
            <summary>
            Digit 8
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_9">
            <summary>
            Digit 9
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_A">
            <summary>
            Hexadecimal digit A (upper case letter A)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_B">
            <summary>
            Hexadecimal digit B (letter b)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_C">
            <summary>
            Hexadecimal digit C (upper case letter C)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_D">
            <summary>
            Hexadecimal digit D (letter d)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_E">
            <summary>
            Hexadecimal digit E (upper case letter E)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Digit_F">
            <summary>
            Hexadecimal digit F (upper case letter F)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_a">
            <summary>
            Lower case letter a
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_A">
            <summary>
            Upper case letter A
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_b">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_B">
            <summary>
            Upper case letter B (same as digit 8)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_c">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_C">
            <summary>
            Upper case letter C
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_d">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_D">
            <summary>
            Upper case letter D (same as digit 0)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_e">
            <summary>
            Lower case letter e
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_E">
            <summary>
            Upper case letter E
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_f">
            <summary>
            Lower case letter f (same as upper case letter F)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_F">
            <summary>
            Upper case letter F (same as lower case letter f)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_g">
            <summary>
            Lower case letter g (same as digit 9)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_G">
            <summary>
            Upper case letter G
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_h">
            <summary>
            Lower case letter h
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_H">
            <summary>
            Upper case letter H
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_i">
            <summary>
            Lower case letter i
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_I">
            Upper case letter I  (same as | /pipe/ symbol)
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_j">
            <summary>
            Lower case letter j
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_J">
            <summary>
            Upper case letter J
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_l">
            <summary>
            Lower case letter l
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_L">
            <summary>
            Upper case letter L
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_n">
            <summary>
            Lower case letter n
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_N">
            <summary>
            Upper case letter N
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_o">
            <summary>
            Lower case letter o
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_O">
            <summary>
            Upper case letter O (same as digit 0)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_p">
            <summary>
            Lower case letter p (same as upper case letter P)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_P">
            <summary>
            Upper case letter P (same as lower case letter p)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_r">
            <summary>
            Lower case letter r
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_R">
            <summary>
            Upper case letter R
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_s">
            <summary>
            Lower case letter s (same as digit 5 and upper case letter S)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_S">
            <summary>
            Upper case letter S (same as digit 5 and lower case letter s)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_t">
            <summary>
            Lower case letter t
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_u">
            <summary>
            Lower case letter u
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_U">
            <summary>
            Upper case letter U
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_y">
            <summary>
            Lower case letter y (same as upper case letter Y)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_Y">
            <summary>
            Upper case letter Y (same as lower case letter y)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_z">
            <summary>
            Upper case letter z (same as upper case letter Z)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Letter_Z">
            <summary>
            Upper case letter Z (same as lower case letter z)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_Minus">
            <summary>
            - symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_Equals">
            <summary>
            = symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_Underscore">
            <summary>
            _ symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_Pipe">
            <summary>
            | symbol (same as upper case letter I)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_Degree">
            <summary>
            ° symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_LeftSquareBracket">
            <summary>
            [ symbol (same as upper case letter C)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Symbol_RightSquareBracket">
            <summary>
            ] symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font.Whitespace">
            <summary>
            Whitespace
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Font14">
            <summary>
            Fonts for 14-Segment displays
            </summary>
            <remarks>
            Sources:
            Derived from /src/devices/Display/Font.cs
            Using https://upload.wikimedia.org/wikipedia/commons/7/7c/14-segment_ASCII.svg as reference.
            Leds inside outer segments are referenced as
            points of the compass.
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_0">
            <summary>
            Digit 0
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_1">
            <summary>
            Digit 1
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_2">
            <summary>
            Digit 2
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_3">
            <summary>
            Digit 3
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_4">
            <summary>
            Digit 4
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_5">
            <summary>
            Digit 5
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_6">
            <summary>
            Digit 6
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_7">
            <summary>
            Digit 7
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_8">
            <summary>
            Digit 8
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_9">
            <summary>
            Digit 9
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_A">
            <summary>
            Hexadecimal digit A (upper case letter A)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_B">
            <summary>
            Hexadecimal digit B (letter b)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_C">
            <summary>
            Hexadecimal digit C (upper case letter C)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_D">
            <summary>
            Hexadecimal digit D (letter d)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_E">
            <summary>
            Hexadecimal digit E (upper case letter E)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Digit_F">
            <summary>
            Hexadecimal digit F (upper case letter F)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_a">
            <summary>
            Lower case letter a
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_A">
            <summary>
            Upper case letter A
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_b">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_B">
            <summary>
            Upper case letter B (same as digit 8)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_c">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_C">
            <summary>
            Upper case letter C
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_d">
            <summary>
            Lower case letter b
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_D">
            <summary>
            Upper case letter D (same as digit 0)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_e">
            <summary>
            Lower case letter e
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_E">
            <summary>
            Upper case letter E
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_f">
            <summary>
            Lower case letter f (same as upper case letter F)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_F">
            <summary>
            Upper case letter F (same as lower case letter f)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_g">
            <summary>
            Lower case letter g (same as digit 9)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_G">
            <summary>
            Upper case letter G
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_h">
            <summary>
            Lower case letter h
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_H">
            <summary>
            Upper case letter H
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_i">
            <summary>
            Lower case letter i
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_I">
            Upper case letter I  (same as | /pipe/ symbol)
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_j">
            <summary>
            Lower case letter j
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_J">
            <summary>
            Upper case letter J
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_k">
            <summary>
            Lower case letter k
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_K">
            <summary>
            Upper case letter K
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_l">
            <summary>
            Lower case letter l
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_L">
            <summary>
            Upper case letter L
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_m">
            <summary>
            Lower case letter l
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_M">
            <summary>
            Upper case letter L
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_n">
            <summary>
            Lower case letter n
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_N">
            <summary>
            Upper case letter N
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_o">
            <summary>
            Lower case letter o
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_O">
            <summary>
            Upper case letter O (same as digit 0)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_p">
            <summary>
            Lower case letter p (same as upper case letter P)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_P">
            <summary>
            Upper case letter P (same as lower case letter p)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_q">
            <summary>
            Lower case letter q
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_Q">
            <summary>
            Upper case letter Q
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_r">
            <summary>
            Lower case letter r
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_R">
            <summary>
            Upper case letter R
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_s">
            <summary>
            Lower case letter s (same as digit 5 and upper case letter S)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_S">
            <summary>
            Upper case letter S (same as digit 5 and lower case letter s)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_t">
            <summary>
            Lower case letter t
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_T">
            <summary>
            Upper case letter T
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_u">
            <summary>
            Lower case letter u
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_U">
            <summary>
            Upper case letter U
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_v">
            <summary>
            Lower case letter v
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_V">
            <summary>
            Upper case letter V
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_w">
            <summary>
            Lower case letter w
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_W">
            <summary>
            Upper case letter W
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_x">
            <summary>
            Lower case letter x
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_X">
            <summary>
            Upper case letter X
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_y">
            <summary>
            Lower case letter y (same as upper case letter Y)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_Y">
            <summary>
            Upper case letter Y (same as lower case letter y)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_z">
            <summary>
            Upper case letter z (same as upper case letter Z)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Letter_Z">
            <summary>
            Upper case letter Z (same as lower case letter z)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Minus">
            <summary>
            - symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Plus">
            <summary>
            - symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_ForwardSlash">
            <summary>
            / symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_BackSlash">
            <summary>
            \ symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Equals">
            <summary>
            = symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Underscore">
            <summary>
            _ symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Pipe">
            <summary>
            | symbol (same as upper case letter I)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Degree">
            <summary>
            ° symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_LeftSquareBracket">
            <summary>
            [ symbol (same as upper case letter C)
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_RightSquareBracket">
            <summary>
            ] symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_FullStop">
            <summary>
            . symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Asterisk">
            <summary>
            * symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_Percent">
            <summary>
            % symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Symbol_QuestionMark">
            <summary>
            ? symbol
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Font14.Whitespace">
            <summary>
            Whitespace
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Segment">
            <summary>
            Individual segment bits
            </summary>
            <remarks>
             --0--
            |     |
            5     1
            |     |
             --6--
            |     |
            4     2
            |     |
             --3--   . 7
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.Segment.None">
            <summary>
            No segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.Top">
            <summary>
            Top segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.TopRight">
            <summary>
            Top right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.BottomRight">
            <summary>
            Bottom right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.Bottom">
            <summary>
            Bottom segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.BottomLeft">
            <summary>
            Bottom left segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.TopLeft">
            <summary>
            Top left segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.Middle">
            <summary>
            Middle segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment.Dot">
            <summary>
            Dot
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Segment14">
             <summary>
             Individual segment bits
             </summary>
             <remarks>
              -----8-----
             |\    |    /|
             | \   |   / |
             |  0  1  2  |
             13  \ | /   14
             |    \|/    |
             |-15-----16-|
             |    /|\    |
             12   / | \  10
             |  3  4  5  |
             | /   |   \ |
              ----11----- .6
            
             Sources:
             Derived from /src/devices/Display/FontHelper.cs
             </remarks>
        </member>
        <member name="F:Iot.Device.Display.Segment14.None">
            <summary>
            No segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.NorthWest">
            <summary>
            NorthWest
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.North">
            <summary>
            Nort
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.NorthEast">
            <summary>
            NorthEast
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.SouthWest">
            <summary>
            SouthWest
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.South">
            <summary>
            SoutH
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.SouthEast">
            <summary>
            SouthEast
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.FullStop">
            <summary>
            Dot
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Top">
            <summary>
            Top segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.TopRight">
            <summary>
            Top right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.BottomRight">
            <summary>
            Bottom right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Bottom">
            <summary>
            Bottom segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.BottomLeft">
            <summary>
            Bottom left segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.TopLeft">
            <summary>
            Top left segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.West">
            <summary>
            West
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.East">
            <summary>
            East
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Middle">
            <summary>
            Middle segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Left">
            <summary>
            Whole left segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Right">
            <summary>
            Whole right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.Center">
            <summary>
            Whole right segment
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.ForwardSlash">
            <summary>
            Forward Slash
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Segment14.BackSlash">
            <summary>
            Back Slash
            </summary>
        </member>
        <member name="T:Iot.Device.Display.FontHelper">
            <summary>
            Provides segment mappings for hexadecimal digits and certain ASCII characters
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper.s_hexDigits">
            <summary>
            Hexadecimal digit (0..F) fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper.s_upperCaseLetters">
            <summary>
            Upper case letter fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper.s_lowerCaseLetters">
            <summary>
            Lower case letter fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper.HexadecimalMask">
            <summary>
            Used to mask upper 4 bits of a byte for a single hexadecimal value
            </summary>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.GetHexDigit(System.Byte)">
            <summary>
            Convert byte value hexadecimal digit (0..F) to corresponding font bits
            </summary>
            <param name="digit">hexadecimal digit (0..F)</param>
            <returns>corresponding font</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.ConvertHexDigits(System.Span{System.Byte})">
            <summary>
            Converts a span of bytes to their corresponding hexadecimal digits' font representation
            </summary>
            <param name="digits">list of hexadecimal digits (will be converted in place!)</param>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.GetHexDigits(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a span of bytes to their corresponding hexadecimal digits' font representation
            </summary>
            <param name="digits">list of hexadecimal digits (will be converted in place!)</param>
            <returns>list of corresponding digit fonts</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.GetCharacter(System.Char)">
            <summary>
            Convert character value to corresponding font segments
            </summary>
            <param name="value">input character</param>
            <returns>corresponding font bits</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.ConvertString(System.ReadOnlySpan{System.Char},System.Span{Iot.Device.Display.Font})">
            <summary>
            Convert a string of characters to corresponding fonts
            </summary>
            <param name="input">input string</param>
            <param name="output">list of corresponding character fonts</param>
        </member>
        <member name="M:Iot.Device.Display.FontHelper.GetString(System.String)">
            <summary>
            Convert a string of characters to corresponding font segments
            </summary>
            <param name="input">input string</param>
            <returns>list of corresponding character fonts</returns>
        </member>
        <member name="T:Iot.Device.Display.FontHelper14">
            <summary>
            Provides segment mappings for hexadecimal digits and certain ASCII characters
            </summary>
            <remarks>
            Sources:
            Derived from /src/devices/Display/FontHelper.cs
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.FontHelper14.s_hexDigits">
            <summary>
            Hexadecimal digit (0..F) fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper14.s_upperCaseLetters">
            <summary>
            Upper case letter fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper14.s_lowerCaseLetters">
            <summary>
            Lower case letter fonts
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FontHelper14.HexadecimalMask">
            <summary>
            Used to mask upper 4 bits of a byte for a single hexadecimal value
            </summary>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.GetHexDigit(System.Byte)">
            <summary>
            Convert byte value hexadecimal digit (0..F) to corresponding font bits
            </summary>
            <param name="digit">hexadecimal digit (0..F)</param>
            <returns>corresponding font</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.ConvertHexDigits(System.Span{System.Byte})">
            <summary>
            Converts a span of bytes to their corresponding hexadecimal digits' font representation
            </summary>
            <param name="digits">list of hexadecimal digits (will be converted in place!)</param>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.GetHexDigits(System.ReadOnlySpan{System.Byte})">
            <summary>
            Converts a span of bytes to their corresponding hexadecimal digits' font representation
            </summary>
            <param name="digits">list of hexadecimal digits (will be converted in place!)</param>
            <returns>list of corresponding digit fonts</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.GetCharacter(System.Char)">
            <summary>
            Convert character value to corresponding font segments
            </summary>
            <param name="value">input character</param>
            <returns>corresponding font bits</returns>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.ConvertString(System.ReadOnlySpan{System.Char},System.Span{Iot.Device.Display.Font14})">
            <summary>
            Convert a string of characters to corresponding fonts
            </summary>
            <param name="input">input string</param>
            <param name="output">list of corresponding character fonts</param>
        </member>
        <member name="M:Iot.Device.Display.FontHelper14.GetString(System.String)">
            <summary>
            Convert a string of characters to corresponding font segments
            </summary>
            <param name="input">input string</param>
            <returns>list of corresponding character fonts</returns>
        </member>
        <member name="T:Iot.Device.Display.ISevenSegmentDisplay">
            <summary>
            Represents a 7-Segment display that can display multiple digits
            </summary>
        </member>
        <member name="P:Iot.Device.Display.ISevenSegmentDisplay.NumberOfDigits">
            <summary>
            Gets the number of digits supported by the display
            </summary>
        </member>
        <member name="P:Iot.Device.Display.ISevenSegmentDisplay.Item(System.Int32)">
            <summary>
            Gets or sets a single digit's segments by id
            </summary>
            <param name="address">address of digit</param>
        </member>
        <member name="M:Iot.Device.Display.ISevenSegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Segment},System.Int32)">
            <summary>
            Write a series of digits to the display buffer
            </summary>
            <param name="digits">a list of digits represented in segments</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="M:Iot.Device.Display.ISevenSegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Font},System.Int32)">
            <summary>
            Write a series of characters to the display buffer
            </summary>
            <param name="characters">a list of characters represented in fonts</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="T:Iot.Device.Display.Large4Digit7SegmentDisplay">
            <summary>
            Adafruit 1.2" 4-Digit 7-Segment Display w/I2C Backpack
            </summary>
            <remarks>
            Comes in yellow, green and red colors:
            https://www.adafruit.com/product/1268
            https://www.adafruit.com/product/1269
            https://www.adafruit.com/product/1270
            Sources:
            https://github.com/adafruit/Adafruit_LED_Backpack/blob/master/Adafruit_LEDBackpack.cpp
            https://github.com/sobek1985/Adafruit_LEDBackpack/blob/master/Adafruit_LEDBackpack/AlphaNumericFourCharacters.cs
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.MaxNumberOfDigits">
            <summary>
            Number of digits supported by display
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Large4Digit7SegmentDisplay.Address">
            <summary>
            Digit address within display buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.Address.Digit1">
            <summary>
            First digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.Address.Digit2">
            <summary>
            Second digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.Address.Dots">
            <summary>
            Dot setting bits
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.Address.Digit3">
            <summary>
            Third digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.Address.Digit4">
            <summary>
            Fourth digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.s_digitAddressList">
            <summary>
            List of digit addresses for sequential writing
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay.s_clearBuffer">
            <summary>
            Empty display buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit7SegmentDisplay._displayBuffer">
            <summary>
            Display buffer
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.TranslateDigitToBufferAddress(System.Int32)">
            <summary>
            Translate digit number to buffer address
            </summary>
            <param name="digit">digit to translate</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digit"/></exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize 7-Segment display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Large4Digit7SegmentDisplay.NumberOfDigits">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Display.Large4Digit7SegmentDisplay.Item(System.Int32)">
            <summary>
            Gets or sets a single digit's segments by id
            </summary>
            <param name="address">digit address (0..3)</param>
            <returns>Segment in display buffer for the given address</returns>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
            <remarks>Write clears dots, you'll have to reset them afterwards</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startAddress"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:Iot.Device.Display.Large4Digit7SegmentDisplay"/> only supports <see cref="F:Iot.Device.Display.Large4Digit7SegmentDisplay.MaxNumberOfDigits"/> digits</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Segment},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Font},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Write(System.Int32,Iot.Device.Display.Alignment)">
            <summary>
            Write integer value as decimal digits
            </summary>
            <param name="value">integer value</param>
            <param name="alignment">alignment on display (left or right, right is default)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> must be between -999..9999</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Write(System.String,Iot.Device.Display.Alignment)">
            <summary>
            Write string value to display
            </summary>
            <param name="value">value to display, max 4 characters, or 5 characters if the 3rd character is ':' (this also turns on the center colon), or 6 characters if 1st character is also ':'</param>
            <remarks>
            * Unsupported characters will be replaced as whitespace
            * This method clears the buffer before writing, so dots have to be reset afterwards
            </remarks>
            <param name="alignment">alignment on display (left or right, right is default)</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>[2] must be a ':'</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> can contain maximum 5 characters</exception>
        </member>
        <member name="P:Iot.Device.Display.Large4Digit7SegmentDisplay.Dots">
            <summary>
            Gets or sets dot configuration
            </summary>
            <remarks>The <see cref="M:Iot.Device.Display.Large4Digit7SegmentDisplay.Clear"/> method also clears the dots as well.</remarks>
        </member>
        <member name="T:Iot.Device.Display.Large4Digit14SegmentDisplay">
            <summary>
            PIMORONI FOUR LETTER PHAT 14 segment display
            </summary>
            <remarks>
            https://shop.pimoroni.com/products/four-letter-phat
            Sources:
            Derived from /src/devices/Display/Large4Digit7SegmentDisplay.cs
            https://github.com/adafruit/Adafruit_LED_Backpack/blob/master/Adafruit_LEDBackpack.cpp
            https://github.com/sobek1985/Adafruit_LEDBackpack/blob/master/Adafruit_LEDBackpack/AlphaNumericFourCharacters.cs
            </remarks>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.MaxNumberOfDigits">
            <summary>
            Number of digits supported by display
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Large4Digit14SegmentDisplay.Address">
            <summary>
            Digit address within display buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.Address.Digit1">
            <summary>
            First digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.Address.Digit2">
            <summary>
            Second digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.Address.Digit3">
            <summary>
            Third digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.Address.Digit4">
            <summary>
            Fourth digit
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.s_digitAddressList">
            <summary>
            List of digit addresses for sequential writing
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay.s_clearBuffer">
            <summary>
            Empty display buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Large4Digit14SegmentDisplay._displayBuffer">
            <summary>
            Display buffer
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.TranslateDigitToBufferAddress(System.Int32)">
            <summary>
            Translate digit number to buffer address
            </summary>
            <param name="digit">digit to translate</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="digit"/></exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize 7-Segment display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Large4Digit14SegmentDisplay.NumberOfDigits">
            <summary>
            Gets the number of digits supported by the display
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Large4Digit14SegmentDisplay.Item(System.Int32)">
            <summary>
            Gets or sets a single digit's segments by id
            </summary>
            <param name="address">digit address (0..3)</param>
            <returns>Segment in display buffer for the given address</returns>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
            <remarks>Write clears dots, you'll have to reset them afterwards</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startAddress"/></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="T:Iot.Device.Display.Large4Digit7SegmentDisplay"/> only supports <see cref="F:Iot.Device.Display.Large4Digit14SegmentDisplay.MaxNumberOfDigits"/> digits</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.ReadOnlySpan{System.UInt16},System.Int32)">
            <summary>
            Write raw data to display buffer
            </summary>
            <param name="digits">Array of ushort to write to the display</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Segment14},System.Int32)">
            <summary>
            Write a series of digits to the display buffer
            </summary>
            <param name="digits">a list of digits represented in segments</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.ReadOnlySpan{Iot.Device.Display.Font14},System.Int32)">
            <summary>
            Write a series of characters to the display buffer
            </summary>
            <param name="characters">a list of characters represented in fonts</param>
            <param name="startAddress">Address to start writing from</param>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.Int32,Iot.Device.Display.Alignment)">
            <summary>
            Write integer value as decimal digits
            </summary>
            <param name="value">integer value</param>
            <param name="alignment">alignment on display (left or right, right is default)</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> must be between -999..9999</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.Write(System.String,Iot.Device.Display.Alignment)">
            <summary>
            Write string value to display
            </summary>
            <param name="value">value to display, max 4 characters, or 5 characters if the 3rd character is ':' (this also turns on the center colon), or 6 characters if 1st character is also ':'</param>
            <remarks>
            * Unsupported characters will be replaced as whitespace
            * This method clears the buffer before writing, so dots have to be reset afterwards
            </remarks>
            <param name="alignment">alignment on display (left or right, right is default)</param>
            <exception cref="T:System.ArgumentException"><paramref name="value"/>[2] must be a ':'</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value"/> can contain maximum 5 characters</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.WriteHex(System.Byte[])">
            <summary>
            Write an array of up to 4 bytes as hex
            </summary>
            <param name="values">Array of bytes</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="values"/>Length of array must be greater 0 and less than  MaxNumberOfDigits</exception>
        </member>
        <member name="M:Iot.Device.Display.Large4Digit14SegmentDisplay.WriteChar(System.Char,System.Int32)">
            <summary>
            Write a single char to a spcific display digit
            </summary>
            <param name="c">The character to display</param>
            <param name="pos">zero-based index of character position from the left</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="pos"/>position must be between 0 and MaxNumberOfDigits-1</exception>
        </member>
        <member name="T:Iot.Device.Display.LedColor">
            <summary>
            Describes LED colors in an LED matrix or bargraph.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.LedColor.Off">
            <summary>
            Disable LED.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.LedColor.Red">
            <summary>
            Enable red LED.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.LedColor.Green">
            <summary>
            Enable green LED.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.LedColor.Yellow">
            <summary>
            Enable both green and red LEDs, producing a yellow color.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Matrix16x8">
            <summary>
            Represents an 8x16 LED matrix using the HT16K33 LED Matrix driver.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix16x8.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize Matrix display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Matrix16x8.Width">
            <summary>
            Width of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix16x8.Height">
            <summary>
            Height of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix16x8.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for updating matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix16x8.Fill">
            <summary>
            Enable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix16x8.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix16x8.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix16x8.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Matrix8x8">
            <summary>
            Represents an 8x8 LED matrix using the HT16K33 LED Matrix driver.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize Matrix display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8.Width">
            <summary>
            Width of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8.Height">
            <summary>
            Height of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for updating matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8.Fill">
            <summary>
            Enable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Matrix8x8Bicolor">
            <summary>
            Represents an 8x8 LED matrix using the HT16K33 LED Matrix driver.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize Matrix display
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8Bicolor.Width">
            <summary>
            Width of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8Bicolor.Height">
            <summary>
            Height of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Matrix8x8Bicolor.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for updating matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.Fill(Iot.Device.Display.LedColor)">
            <summary>
            Enable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.Write(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Matrix8x8Bicolor.Write(System.ReadOnlySpan{System.Byte},Iot.Device.Display.LedColor)">
            <summary>
            Writes bytes to matrix, row by row
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Current">
            <summary>
            IS31FL3730 current setting for row output.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA5">
            <summary>
            5 mA.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA10">
            <summary>
            10 mA.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA35">
            <summary>
            35 mA.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA40">
            <summary>
            40 mA (default).
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA45">
            <summary>
            45 mA.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Current.CmA75">
            <summary>
            75 mA.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.DisplayMode">
            <summary>
            IS31FL3730 display mode, controlling which matrices are used.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.DisplayMode.MatrixOneOnly">
            <summary>
            Enable matrix one only.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.DisplayMode.MatrixTwoOnly">
            <summary>
            Enable matrix two only.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.DisplayMode.MatrixOneAndTwo">
            <summary>
            Enable matrix one and two.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Internal.Is31fl3730FunctionRegister">
            <summary>
            Register addresses for the Function Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.Configuration">
            <summary>
            Address for Configuration Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.Matrix1">
            <summary>
            Address for Matrix 1 Data Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.UpdateColumn">
            <summary>
            Address for Update Column Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.LightingEffect">
            <summary>
            Address for Lighting Effect Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.Matrix2">
            <summary>
            Address for Matrix 2 Data Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.Pwm">
            <summary>
            Address for PWM Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730FunctionRegister.Reset">
            <summary>
            Address for Reset Register.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Internal.Is31fl3730MatrixValues">
            <summary>
            IS31FL3730 matrix driver values.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730MatrixValues.EightBitValue">
            <summary>
            Arbitrary 8-bit value to write to Update Column Register, as required by datasheet.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730MatrixValues.MatrixOneDecimalMask">
            <summary>
            Matrix one decimal point mask.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730MatrixValues.MatrixOneDecimalRow">
            <summary>
            Matrix one decimal point row.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730MatrixValues.MatrixTwoDecimalMask">
            <summary>
            Matrix two mask for decimal point.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Internal.Is31fl3730MatrixValues.MatrixTwoDecimalRow">
            <summary>
            Matrix two decimal point row.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Is31fl3730">
            <summary>
            Represents an IS31FL3730 LED Matrix driver
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize IS31FL3730 device.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.Is31fl3730.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Is31fl3730.BufferingEnabled">
            <summary>
            Enables or disables auto-buffering.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Is31fl3730.Item(System.Int32)">
            <summary>
            Indexer for matrices.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.UpdateBrightness(System.Byte)">
            <summary>
            Update bright of LED matrix for each of 128 items.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.UpdateCurrent(Iot.Device.Display.Current)">
            <summary>
            Update current setting for each row output of LED matrix (default value is 40 mA).
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.UpdateConfiguration(Iot.Device.Display.ShowdownMode,Iot.Device.Display.MatrixMode,Iot.Device.Display.DisplayMode)">
            <summary>
            Update configuration register, which controls shutdown, matrix, and display modes.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.ResetRegisters">
            <summary>
            Resets all registers to default value.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Write(System.Int32,System.Int32,System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Write LED for matrix.
            </summary>
            <param name="matrix">The matrix to use.</param>
            <param name="x">The x dimension for the LED.</param>
            <param name="y">The y dimension for the LED.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Read(System.Int32,System.Int32,System.Int32)">
            <summary>
            Read value of LED for matrix.
            </summary>
            <param name="matrix">The matrix to use.</param>
            <param name="x">The x dimension for the LED.</param>
            <param name="y">The y dimension for the LED.</param>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.WriteDecimalPoint(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Update decimal point for matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Fill(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Fill LEDs with value, per matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Fill(System.Device.Gpio.PinValue)">
            <summary>
            Fill LEDs with value.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Flush(System.Int32)">
            <summary>
            Fill LEDs with value, per matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3730.Flush">
            <summary>
            Fill LEDs with value.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.MatrixMode">
            <summary>
            IS31FL3730 matrix modes, controlling the size of the matrix.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.MatrixMode.Size8x8">
            <summary>
            Represents a 8x8 LED matrix.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.MatrixMode.Size7x9">
            <summary>
            Represents a 7x9 LED matrix.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.MatrixMode.Size6x10">
            <summary>
            Represents a 6x10 LED matrix.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.MatrixMode.Size5x11">
            <summary>
            Represents an 5x11 LED matrix.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.ShowdownMode">
            <summary>
            IS31FL3730 shutdown mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.ShowdownMode.Normal">
            <summary>
            Enable normal operation.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.ShowdownMode.Shutdown">
            <summary>
            Enable shutdown mode.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.DotMatrix">
            <summary>
            Represents a virtual LED Matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix.#ctor(Iot.Device.Display.DotMatrix5x7[])">
            <summary>
            Initialize virtual Dot Matrix.
            </summary>
            <param name="matrices">The matrices to use.</param>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix.Width">
            <summary>
            Width (x-axis) of matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix.Height">
            <summary>
            Height (y-axis) for matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix.Item(System.Int32)">
            <summary>
            Indexer for matrix.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix.Length">
            <summary>
            Length (or count) of matrices.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix.Fill(System.Device.Gpio.PinValue)">
            <summary>
            Fill LEDs with value.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix.InitializeI2c(System.Device.I2c.I2cDevice)">
            <summary>
            Default Is31fl3730 initialization
            </summary>
        </member>
        <member name="T:Iot.Device.Display.DotMatrix5x7">
            <summary>
            Represents LED Dot Matrix driven by IS31FL3730.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix5x7.#ctor(Iot.Device.Display.Is31fl3730,System.Int32)">
            <summary>
            Initialize Dot Matrix IS31FL3730 device.
            </summary>
            <param name="is31fl3730">The <see cref="T:Iot.Device.Display.Is31fl3730"/> to create with.</param>
            <param name="matrix">The index of the matrix (of a pair).</param>
        </member>
        <member name="P:Iot.Device.Display.DotMatrix5x7.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for matrix.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix5x7.Fill(System.Device.Gpio.PinValue)">
            <summary>
            Fill LEDs with value.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix5x7.WriteDecimalPoint(System.Device.Gpio.PinValue)">
            <summary>
            Fill matrix (0 is dark; 1 is lit).
            </summary>
        </member>
        <member name="F:Iot.Device.Display.DotMatrix5x7.BaseWidth">
            <summary>
            Width of LED matrix (x axis).
            </summary>
        </member>
        <member name="F:Iot.Device.Display.DotMatrix5x7.BaseHeight">
            <summary>
            Height of LED matrix (y axis).
            </summary>
        </member>
        <member name="T:Iot.Device.Display.DotMatrix10x7">
            <summary>
            Represents an IS31FL3731 LED Matrix driver
            </summary>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix10x7.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize Dot Matrix Breakout IS31FL3730 device.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="M:Iot.Device.Display.DotMatrix10x7.#ctor(Iot.Device.Display.Is31fl3730)">
            <summary>
            Initialize Dot Matrix Breakout IS31FL3730 device.
            </summary>
            <param name="is31fl3730">The <see cref="T:Iot.Device.Display.Is31fl3730"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.DotMatrix10x7.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.MicroDotPhat30x7">
            <summary>
            Represents a Pimoroni Micro Dot pHat.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.MicroDotPhat30x7.#ctor(System.Device.I2c.I2cDevice,System.Device.I2c.I2cDevice,System.Device.I2c.I2cDevice)">
            <summary>
            Initialize Micro Dot pHAT IS31FL3730 device.
            </summary>
            <param name="first">The first <see cref="T:System.Device.I2c.I2cDevice"/> Dot Matrix pair.</param>
            <param name="second">The first <see cref="T:System.Device.I2c.I2cDevice"/> Dot Matrix pair.</param>
            <param name="third">The first <see cref="T:System.Device.I2c.I2cDevice"/> Dot Matrix pair.</param>
        </member>
        <member name="M:Iot.Device.Display.MicroDotPhat30x7.#ctor(Iot.Device.Display.Is31fl3730,Iot.Device.Display.Is31fl3730,Iot.Device.Display.Is31fl3730)">
            <summary>
            Initialize Micro Dot pHAT IS31FL3730 device.
            </summary>
            <param name="first">The first <see cref="T:Iot.Device.Display.Is31fl3730"/> Dot Matrix pair.</param>
            <param name="second">The first <see cref="T:Iot.Device.Display.Is31fl3730"/> Dot Matrix pair.</param>
            <param name="third">The first <see cref="T:Iot.Device.Display.Is31fl3730"/> Dot Matrix pair.</param>
        </member>
        <member name="F:Iot.Device.Display.MicroDotPhat30x7.I2cAddresses">
            <summary>
            I2C addresses for Micro Dot pHat, left to right.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Is31fl3731">
            <summary>
            Represents an IS31FL3731 LED Matrix driver
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize IS31FL3731 device
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32)">
            <summary>
            Initialize IS31FL3731 device
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
            <param name="width">The width of the LED matrix.</param>
            <param name="height">The height of the LED matrix.</param>
        </member>
        <member name="F:Iot.Device.Display.Is31fl3731.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Is31fl3731.Width">
            <summary>
            Width of LED matrix (x axis).
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Is31fl3731.Height">
            <summary>
            Height of LED matrix (y axis).
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.Initialize">
            <summary>
            Initialize LED driver.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Is31fl3731.Item(System.Int32,System.Int32)">
            <summary>
            Indexer for updating matrix, with PWM register.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.WritePixel(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Set value for LED.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.WriteAllPixels(System.Int32[0:,0:])">
            <summary>
            Set value for all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.Fill(System.Byte,System.Byte)">
            <summary>
            Fill all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.EnableAllLeds(System.Byte)">
            <summary>
            Enable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.DisableAllLeds(System.Byte)">
            <summary>
            Disable all LEDs.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.SetBlinkingRate(System.Int32)">
            <summary>
            Enable blinking at given rate.
            </summary>
            <param name="rate">Set the blinking rate.</param>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.Reset">
            <summary>
            Reset device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.Shutdown(System.Boolean)">
            <summary>
            Set the shutdown mode.
            </summary>
            <param name="shutdown">Set the showdown mode. `true` sets device into shutdown mode. `false` sets device into normal operation.</param>
        </member>
        <member name="M:Iot.Device.Display.Is31fl3731.GetLedAddress(System.Int32,System.Int32)">
            <summary>
            Gets the hardware location for the pixel.
            </summary>
            <param name="x">Specifies the x value.</param>
            <param name="y">Specifies the y value.</param>
        </member>
        <member name="T:Iot.Device.Display.CommandRegister">
            <summary>
            Register addresses for the Command Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.CommandRegister.Command">
            <summary>
            Address for Command Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.CommandRegister.Function">
            <summary>
            Address for Function Register.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.FrameRegister">
            <summary>
            Register addresses for the Frame Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FrameRegister.Led">
            <summary>
            Address for the LED Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FrameRegister.Blink">
            <summary>
            Address for the Blink Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FrameRegister.Pwm">
            <summary>
            Address for the PWM Register.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.FunctionRegister">
            <summary>
            Register addresses for the Function Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FunctionRegister.Configuration">
            <summary>
            Address for the LED Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FunctionRegister.DisplayOption">
            <summary>
            Address for the Display Option Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Display.FunctionRegister.Shutdown">
            <summary>
            Address for the Shutdown Register.
            </summary>
        </member>
        <member name="T:Iot.Device.Display.Backpack16x9">
            <summary>
            Represents 16x9 matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Backpack16x9.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.Backpack16x9.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Backpack16x9.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Bonnet16x8">
            <summary>
            Represents 16x8 matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Bonnet16x8.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.Bonnet16x8.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Bonnet16x8.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Breakout11x7">
            <summary>
            Represents 11x7 matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Breakout11x7.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.Breakout11x7.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Breakout11x7.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.BreakoutRgb5x5">
            <summary>
            Represents 5x5 RGB matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.BreakoutRgb5x5.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.BreakoutRgb5x5.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.BreakoutRgb5x5.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.BreakoutRgb5x5.WritePixelRgb(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Write RGB value.
            </summary>
            <param name="x">Horizontal pixel position.</param>
            <param name="y">Vertical pixel position.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="T:Iot.Device.Display.LedShimRgb28x1">
            <summary>
            Represents 28x1 RGB matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.LedShimRgb28x1.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.LedShimRgb28x1.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.LedShimRgb28x1.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.LedShimRgb28x1.WritePixelRgb(System.Int32,System.Drawing.Color)">
            <summary>
            Write RGB value.
            </summary>
            <param name="x">Horizontal pixel position.</param>
            <param name="color">Color value.</param>
        </member>
        <member name="T:Iot.Device.Display.ScrollPhat17x7">
            <summary>
            Represents 16x8 matrix, driven by an IS31FL3731 LED chip.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.ScrollPhat17x7.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize LED driver.
            </summary>
            <param name="i2cDevice">The <see cref="T:System.Device.I2c.I2cDevice"/> to create with.</param>
        </member>
        <member name="F:Iot.Device.Display.ScrollPhat17x7.DefaultI2cAddress">
            <summary>
            Default I2C address for device.
            </summary>
        </member>
        <member name="M:Iot.Device.Display.ScrollPhat17x7.GetLedAddress(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Display.Pcd8544Enums.ScreenTemperature">
            <summary>
            Temperature set for the PCD8544
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Pcd8544Enums.ScreenTemperature.Coefficient0">
            <summary>Temperature Coefficient 0</summary>
        </member>
        <member name="F:Iot.Device.Display.Pcd8544Enums.ScreenTemperature.Coefficient1">
            <summary>Temperature Coefficient 1</summary>
        </member>
        <member name="F:Iot.Device.Display.Pcd8544Enums.ScreenTemperature.Coefficient2">
            <summary>Temperature Coefficient 2</summary>
        </member>
        <member name="F:Iot.Device.Display.Pcd8544Enums.ScreenTemperature.Coefficient3">
            <summary>Temperature Coefficient 3</summary>
        </member>
        <member name="T:Iot.Device.Display.Pcd8544">
            <summary>
            PCD8544 - 48 × 84 pixels matrix LCD, famous Nokia 5110 screen
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.PixelScreenSize">
            <summary>
            The size of the screen in terms of pixels
            </summary>
        </member>
        <member name="F:Iot.Device.Display.Pcd8544.ScreenBufferByteSize">
            <summary>
            Size of the screen 48 x 84 / 8 in bytes
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.Size">
            <summary>
            The size of the screen in terms of characters
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.ScreenWidth">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.ScreenHeight">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.NativePixelFormat">
            <inheritdoc />
        </member>
        <member name="F:Iot.Device.Display.Pcd8544.ColorBitPerPixel">
            <summary>
            Number of bit per pixel for the color
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.#ctor(System.Int32,System.Device.Spi.SpiDevice,System.Int32,System.Device.Pwm.PwmChannel,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create Pcd8544
            </summary>
            <param name="dataCommandPin">The data command pin.</param>
            <param name="spiDevice">The SPI device.</param>
            <param name="resetPin">The reset pin. Use a negative number if you don't want to use it</param>
            <param name="pwmBacklight">The PWM channel for the back light</param>
            <param name="gpioController">The GPIO Controller.</param>
            <param name="shouldDispose">True to dispose the GPIO controller</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.#ctor(System.Int32,System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create Pcd8544
            </summary>
            <param name="dataCommandPin">The data command pin.</param>
            <param name="spiDevice">The SPI device.</param>
            <param name="resetPin">The reset pin. Use a negative number if you don't want to use it</param>
            <param name="backlightPin">The pin back light</param>
            <param name="gpioController">The GPIO Controller.</param>
            <param name="shouldDispose">True to dispose the GPIO controller</param>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.Enabled">
            <summary>
            Enable the screen
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.BacklightBrightness">
            <summary>
            Change the back light from 0.0 to 1.0.
            If a pin is used, the threshold for full light is more then 0.5.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.Bias">
            <summary>
            The bias for 0 to 7. Bias represent the voltage applied to the LCD. The highest, the darker the screen will be.
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.InvertedColors">
            <summary>
            True to inverse the screen color
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.Contrast">
            <summary>
            Get or set the contrast from 0 to 127
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.Temperature">
            <summary>
            Get or set the temperature coefficient
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.BacklightOn">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.DisplayOn">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.UnderlineCursorVisible">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.BlinkingCursorVisible">
            <summary>
            This is not supported on this screen, this function will have no effect
            </summary>
        </member>
        <member name="P:Iot.Device.Display.Pcd8544.NumberOfCustomCharactersSupported">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.CreateCustomCharacter(System.Int32,System.ReadOnlySpan{System.Byte})">
            <summary>
            Add a specific character to the font. It will replace existing embedded font character if it does already exist.
            </summary>
            <remarks>
            Normal font character is a 5 bytes array aligned vertically. If the array is 8 bytes long, it will assume the
            font encoding is then on the lower 5 bits of each bytes.
            </remarks>
            <param name="location">Should be between 0 and <see cref="P:Iot.Device.Display.Pcd8544.NumberOfCustomCharactersSupported"/>.</param>
            <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.CreateCustomCharacter(System.Int32,System.Byte[])">
            <summary>
            Add a specific character to the font. It will replace existing embedded font character if it does already exist.
            </summary>
            <remarks>
            Normal font character is a 5 bytes array aligned vertically. If the array is 8 bytes long, it will assume the
            font encoding is then on the lower 5 bits of each bytes.
            </remarks>
            <param name="location">Should be between 0 and <see cref="P:Iot.Device.Display.Pcd8544.NumberOfCustomCharactersSupported"/>.</param>
            <param name="characterMap">Provide an array of 8 bytes containing the pattern</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Draw">
            <summary>
            Draw what's in memory to the the screen
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Clear">
            <summary>
            Clear the screen
            </summary>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.SetByteMap(System.ReadOnlySpan{System.Byte})">
            <summary>
            Set the byte map
            </summary>
            <param name="byteMap">A 504 sized byte representing the full image</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Write(System.String)">
            <summary>
            Write text
            </summary>
            <param name="text">The text to write</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Write(System.ReadOnlySpan{System.Char})">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place.
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Write(System.Char[])">
            <summary>
            Write a raw byte stream to the display.
            Used if character translation already took place.
            </summary>
            <param name="text">Text to print</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.WriteLine(System.String)">
            <summary>
            Write text and set cursor position to next line
            </summary>
            <param name="text">The text to write</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.SetCursorPosition(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to an explicit column and row position.
            </summary>
            <param name="left">The column position from left to right starting with 0 to 83.</param>
            <param name="top">The row position from the top starting with 0 to 5.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The given position is not inside the display.</exception>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a point
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="isOn">True if the point has pixels on, false for off.</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawPoint(System.Drawing.Point,System.Boolean)">
            <summary>
            Draw a point
            </summary>
            <param name="point">The point to draw.</param>
            <param name="isOn">True if the point has pixels on, false for off.</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draw a line
            </summary>
            <param name="x1">The first point X coordinate.</param>
            <param name="y1">The first point Y coordinate.</param>
            <param name="x2">The second point X coordinate.</param>
            <param name="y2">The second point Y coordinate.</param>
            <param name="isOn">True if the line has pixels on, false for off.</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawLine(System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>
            Draw a line
            </summary>
            <param name="p1">First point coordinate.</param>
            <param name="p2">Second point coordinate.</param>
            <param name="isOn">True if the line has pixels on, false for off.</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="isOn">True if the rectangle has pixels on, false for off.</param>
            <param name="isFilled">If it's filled or not.</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawRectangle(System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="p">The coordinate of the point.</param>
            <param name="size">The size of the rectangle.</param>
            <param name="isOn">True if the rectangle has pixels on, false for off.</param>
            <param name="isFilled">If it's filled or not.</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawRectangle(System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draw a rectangle
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="isOn">True if the rectangle has pixels on, false for off.</param>
            <param name="isFilled">If it's filled or not.</param>
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.DrawBitmap(Iot.Device.Graphics.BitmapImage)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.CanConvertFromPixelFormat(Iot.Device.Graphics.PixelFormat)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.GetBackBufferCompatibleImage">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Display.Pcd8544.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.ExplorerHat.DCMotorExtensions">
            <summary>
            Extensions methods to operate with DCMotors
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.DCMotorExtensions.Forwards(Iot.Device.DCMotor.DCMotor,System.Double)">
            <summary>
            Motor turns forwards at indicated speed
            </summary>
            <param name="motor">DCMotor instance to extend</param>
            <param name="speed">Indicated speed</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.DCMotorExtensions.Backwards(Iot.Device.DCMotor.DCMotor,System.Double)">
            <summary>
            Motor turns backwards at indicated speed
            </summary>
            <param name="motor">DCMotor instance to extend</param>
            <param name="speed">Indicated speed</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.DCMotorExtensions.Stop(Iot.Device.DCMotor.DCMotor)">
            <summary>
            Stops the <see cref="N:Iot.Device.DCMotor"/>
            </summary>
            <param name="motor">DCMotor instance to extend</param>
        </member>
        <member name="T:Iot.Device.ExplorerHat.ExplorerHat">
            <summary>
            Pimoroni Explorer HAT for Raspberry Pi
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.ExplorerHat.Motors">
            <summary>
            Explorer HAT DCMotors collection
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.ExplorerHat.Lights">
            <summary>
            Explorer HAT led array
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.ExplorerHat.#ctor(System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize <see cref="T:Iot.Device.ExplorerHat.ExplorerHat"/> instance
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.ExplorerHat.Dispose">
            <summary>
            Disposes the <see cref="T:Iot.Device.ExplorerHat.ExplorerHat"/> instance
            </summary>
        </member>
        <member name="T:Iot.Device.ExplorerHat.Led">
            <summary>
            Represents a led light
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Led.Pin">
            <summary>
            GPIO pin to which led is attached
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Led.IsOn">
            <summary>
            Gets if led is switched on or not
            </summary>
            <value></value>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Led.#ctor(System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Iot.Device.ExplorerHat.Led"/> instance
            </summary>
            <param name="pin">Underlying rpi GPIO pin number</param>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> used by <see cref="T:Iot.Device.ExplorerHat.Led"/> to manage GPIO resources</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Led.On">
            <summary>
            Switch on this led light
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Led.Off">
            <summary>
            Switch off this led light
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Led.Dispose">
            <summary>
            Disposes the <see cref="T:Iot.Device.ExplorerHat.Led"/> instance
            </summary>
        </member>
        <member name="T:Iot.Device.ExplorerHat.Lights">
            <summary>
            Represents the Explorer HAT led array
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.One">
            <summary>
            Blue led (#1)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Two">
            <summary>
            Yellow led (#2)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Three">
            <summary>
            Red led (#3)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Four">
            <summary>
            Green led (#4)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Blue">
            <summary>
            Blue led (#1)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Yellow">
            <summary>
            Yellow led (#2)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Red">
            <summary>
            Red led (#3)
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Lights.Green">
            <summary>
            Green led (#4)
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.#ctor(System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Iot.Device.ExplorerHat.Lights"/> instance
            </summary>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> used by <see cref="T:Iot.Device.ExplorerHat.Lights"/> to manage GPIO resources</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.On">
            <summary>
            Switch on all led lights
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.Off">
            <summary>
            Switch off all led lights
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.Dispose">
            <summary>
            Disposes the <see cref="T:Iot.Device.ExplorerHat.Lights"/> instance
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of leds
            </summary>
            <returns>An enumerator that can be used to iterate through the collection of leds</returns>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Lights.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection of leds
            </summary>
            <returns>An enumerator that can be used to iterate through the collection of leds</returns>
        </member>
        <member name="T:Iot.Device.ExplorerHat.Motors">
            <summary>
            Represents the Explorer HAT DCMotors collection
            </summary>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Motors.One">
            <summary>
            Motor #1
            </summary>
            <value></value>
        </member>
        <member name="P:Iot.Device.ExplorerHat.Motors.Two">
            <summary>
            Motor #2
            </summary>
            <value></value>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Motors.Forwards(System.Double)">
            <summary>
            Both motors turns forwards at indicated speed
            </summary>
            <param name="speed">Indicated speed</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Motors.Backwards(System.Double)">
            <summary>
            Both motors turns backwards at indicated speed
            </summary>
            <param name="speed">Indicated speed</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Motors.Stop">
            <summary>
            Both motors stops
            </summary>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Motors.#ctor(System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a <see cref="T:Iot.Device.ExplorerHat.Motors"/> instance
            </summary>
            <param name="controller"><see cref="T:System.Device.Gpio.GpioController"/> used by <see cref="T:Iot.Device.ExplorerHat.Motors"/> to manage GPIO resources</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.ExplorerHat.Motors.Dispose">
            <summary>
            Disposes the <see cref="T:Iot.Device.ExplorerHat.Motors"/> instance
            </summary>
        </member>
        <member name="T:Iot.Device.Ft2232H.Ft2232HDevice">
            <summary>
            FT232H Device
            </summary>
        </member>
        <member name="M:Iot.Device.Ft2232H.Ft2232HDevice.GetFt2232H">
            <summary>
            Gets all the FT2232H connected
            </summary>
            <returns>A list of FT2232H</returns>
        </member>
        <member name="M:Iot.Device.Ft2232H.Ft2232HDevice.GetPinNumberFromString(System.String)">
            <summary>
            Gets the pin number from a string
            </summary>
            <param name="pin">A string</param>
            <returns>The pin number, -1 in case it's not found.</returns>
            <remarks>Valid pins are ADBUS0 to 7, D0 to 7, ACBUS0 to 7, C0 to 7,
            TCK, SK, CLK, MOSI, MISO, SDA, TDI, DI, TDO, DO,
            TMS, CS, GPIOL0 to 3, GPIOH0 to 7</remarks>
        </member>
        <member name="M:Iot.Device.Ft2232H.Ft2232HDevice.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a FT2232H device object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="M:Iot.Device.Ft2232H.Ft2232HDevice.#ctor(Iot.Device.FtCommon.FtDevice)">
            <summary>
            Instantiates a FT2232H device object.
            </summary>
            <param name="ftDevice">a FT Device</param>
        </member>
        <member name="T:Iot.Device.Ft232H.Ft232HDevice">
            <summary>
            FT232H Device
            </summary>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HDevice.GetFt232H">
            <summary>
            Gets all the FT232H connected
            </summary>
            <returns>A list of FT232H</returns>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HDevice.GetPinNumberFromString(System.String)">
            <summary>
            Gets the pin number from a string
            </summary>
            <param name="pin">A string</param>
            <returns>The pin number, -1 in case it's not found.</returns>
            <remarks>Valid pins are ADBUS0 to 7, D0 to 7, ACBUS0 to 7, C0 to 7,
            TCK, SK, CLK, MOSI, MISO, SDA, TDI, DI, TDO, DO,
            TMS, CS, GPIOL0 to 3, GPIOH0 to 7</remarks>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HDevice.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a FT232H device object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HDevice.#ctor(Iot.Device.FtCommon.FtDevice)">
            <summary>
            Instantiates a FT232H device object.
            </summary>
            <param name="ftDevice">a FT Device</param>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HDevice.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ft232H.Ft232HGpio">
            <summary>
            GPIO driver for the FT232H
            </summary>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HGpio.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HGpio.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.#ctor(Iot.Device.FtCommon.Ftx232HDevice)">
            <summary>
            Creates a GPIO Driver
            </summary>
            <param name="deviceInformation">The FT232H device</param>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HGpio.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ft232H.Ft232HI2cBus">
            <summary>
            I2C Bus for FT232H
            </summary>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HI2cBus.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cBus.#ctor(Iot.Device.FtCommon.Ftx232HDevice)">
            <summary>
            Creates anI2C Bus
            </summary>
            <param name="deviceInformation">a FT232H device</param>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cBus.CreateDevice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cBus.RemoveDevice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft232H.Ft232HI2cDevice">
            <summary>
            I2C Device for FT232H
            </summary>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HI2cDevice.ConnectionSettings">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cDevice.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cDevice.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cDevice.WriteRead(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HI2cDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft232H.Ft232HSpi">
            <summary>
            SPI Device for FT232H
            </summary>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HSpi.ConnectionSettings">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Ft232H.Ft232HSpi.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.TransferFullDuplex(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft232H.Ft232HSpi.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft4232H.Ft4232HDevice">
            <summary>
            FT4232H Device
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4232H.Ft4232HDevice.GetFt2232H">
            <summary>
            Gets all the FT4232H connected
            </summary>
            <returns>A list of FT4232H</returns>
        </member>
        <member name="M:Iot.Device.Ft4232H.Ft4232HDevice.GetPinNumberFromString(System.String)">
            <summary>
            Gets the pin number from a string
            </summary>
            <param name="pin">A string</param>
            <returns>The pin number, -1 in case it's not found.</returns>
            <remarks>Valid pins are ADBUS0 to 7, D0 to 7, ACBUS0 to 7, C0 to 7,
            TCK, SK, CLK, MOSI, MISO, SDA, TDI, DI, TDO, DO,
            TMS, CS, GPIOL0 to 3, GPIOH0 to 7</remarks>
        </member>
        <member name="M:Iot.Device.Ft4232H.Ft4232HDevice.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a FT4232H device object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="M:Iot.Device.Ft4232H.Ft4232HDevice.#ctor(Iot.Device.FtCommon.FtDevice)">
            <summary>
            Instantiates a FT4232H device object.
            </summary>
            <param name="ftDevice">a FT Device</param>
        </member>
        <member name="T:Iot.Device.FtCommon.Ftx232HDevice">
            <summary>
            FTx32H base Device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.Ftx232HDevice.PinCountConst">
            <summary>
            Number of pins
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.GetFtx232H">
            <summary>
            Gets all the FTx232H connected
            </summary>
            <returns>A list of FTx232H</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a FTx232H device object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.#ctor(Iot.Device.FtCommon.FtDevice)">
            <summary>
            Instantiates a FTx232H device object.
            </summary>
            <param name="ftDevice">a FT Device</param>
        </member>
        <member name="P:Iot.Device.FtCommon.Ftx232HDevice.Channel">
            <summary>
            Gets the channel.
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.Ftx232HDevice.PinCount">
            <summary>
            Gets the number of pins for this specific FT device.
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.Ftx232HDevice.I2cBusFrequencyKbps">
            <summary>
            Gets or sets the I2C Bus frequency. Default value is 400 KHz.
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.CreateI2cBusCore(System.Int32,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <summary>
            Creates SPI device related to this device
            </summary>
            <param name="settings">The SPI settings</param>
            <param name="pins">The pins to use</param>
            <returns>a SPI device</returns>
            <remarks>You can create either an I2C, either an SPI device.
            You can create multiple SPI devices, the first one will be the one used for the clock frequency.
            They all have to have different Chip Select. You can use any of the 3 to 15 pin for this function.</remarks>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.TryCreateBestGpioDriver">
            <summary>
            Creates the <see cref="T:Iot.Device.Ft232H.Ft232HGpio"/> controller
            </summary>
            <returns>A new GPIO driver</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.Reset">
            <summary>
            Resets the device.
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.SetupMpsseMode">
            <summary>
            Multi-Protocol Synchronous Serial Engine (MPSSE). The purpose of the MPSSE command processor is to
            communicate with devices which use synchronous protocols (such as JTAG or SPI) in an efficient manner.
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.DiscardInput">
            <summary>
            Clears all the input data to get an empty buffer.
            </summary>
            <returns>True for success</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.Ftx232HDevice.Dispose(System.Boolean)">
            <summary>
            Dispose FTx232H device.
            </summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtBitMode">
            <summary>
            Bit Mode used for pins.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.ResetIoBitMode">
            <summary>Reset the IO Bit Mode.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.AsynchronousBitBang">
            <summary>Asynchronous Bit Bang Mode.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.Mpsee">
            <summary>MPSSE.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.SynchronousBitBang">
            <summary>Synchronous Bit Bang Mode.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.McuHostBusEmulation">
            <summary>MCU Host Bus Emulation.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtBitMode.FastSerialForOptoIsolation">
            <summary>Fast Serial For Opto-Isolation.</summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtChannel">
            <summary>
            The channel used when multi channels are used (like in FT2232H, FT4232H).
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtChannel.A">
            <summary>Channel A.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtChannel.B">
            <summary>Channel B.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtChannel.C">
            <summary>Channel C.</summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtChannel.D">
            <summary>Channel A.</summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtCommon">
            <summary>
            Common static functions for the FT4222
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.FtCommon.GetDevices">
            <summary>
            Returns the list of FTDI device connected
            </summary>
            <returns>A list of devices connected</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtCommon.GetDevices(Iot.Device.FtCommon.FtDeviceType[])">
            <summary>
            Get specific list of devices
            </summary>
            <param name="ftDeviceTypes">The types of devices</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.FtCommon.FtDevice">
            <summary>
            FT4222 device information
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a DeviceInformation object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.Flags">
            <summary>
            Indicates device state.  Can be any combination of the following: FT_FLAGS_OPENED, FT_FLAGS_HISPEED
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.Type">
            <summary>
            Indicates the device type.  Can be one of the following: FT_DEVICE_232R, FT_DEVICE_2232C, FT_DEVICE_BM, FT_DEVICE_AM, FT_DEVICE_100AX or FT_DEVICE_UNKNOWN
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.Id">
            <summary>
            The Vendor ID and Product ID of the device.
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.LocId">
            <summary>
            The physical location identifier of the device.
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.SerialNumber">
            <summary>
            The device serial number.
            </summary>
        </member>
        <member name="P:Iot.Device.FtCommon.FtDevice.Description">
            <summary>
            The device description.
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.CreateI2cBusCore(System.Int32,System.Int32[])">
            <summary>
            Creates I2C bus related to this device
            </summary>
            <returns>I2cBus instance</returns>
            <remarks>You can create either an I2C, either an SPI device.</remarks>
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.CreateSimplePwmChannel(System.Int32,System.Int32,System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.GetDefaultPinAssignmentForPwm(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <summary>
            Creates SPI device related to this device
            </summary>
            <param name="settings">The SPI settings</param>
            <param name="pins">The pins for this SPI instance</param>
            <returns>a SPI device</returns>
            <remarks>You can create either an I2C, either an SPI device.
            You can create multiple SPI devices, the first one will be the one used for the clock frequency.
            They all have to have different Chip Select. You can use any of the 3 to 15 pin for this function.</remarks>
        </member>
        <member name="M:Iot.Device.FtCommon.FtDevice.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.FtCommon.FtDeviceType">
            <summary>
            List of FTDI device types
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft232BOrFt245B">
            <summary>
            FT232B or FT245B device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft8U232AmOrFTtU245Am">
            <summary>
            FT8U232AM or FT8U245AM device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft8U100Ax">
            <summary>
            FT8U100AX device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.UnknownDevice">
            <summary>
            Unknown device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft2232">
            <summary>
            FT2232 device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft232ROrFt245R">
            <summary>
            FT232R or FT245R device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft2232H">
            <summary>
            FT2232H device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft4232H">
            <summary>
            FT4232H device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft232H">
            <summary>
            FT232H device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.FtXSeries">
            <summary>
            FT X-Series device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft4222HMode0or2With2Interfaces">
            <summary>
            FT4222 hi-speed device Mode 0 - 2 interfaces
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft4222HMode1or2With4Interfaces">
            <summary>
            FT4222 hi-speed device Mode 1 or 2 - 4 interfaces
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft4222HMode3With1Interface">
            <summary>
            FT4222 hi-speed device Mode 3 - 1 interface
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtDeviceType.Ft4222OtpProgrammerBoard">
            <summary>
            OTP programmer board for the FT4222.
            </summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtFlag">
            <summary>
            Flags for the device status
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtFlag.PortOpened">
            <summary>
            Indicates that the device is open
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtFlag.HiSpeedMode">
            <summary>
            Indicates that the device is enumerated as a hi-speed USB device
            </summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtFunction">
            <summary>
            Imports for the ftd2xx.dll as well as libft4222
            </summary>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_CreateDeviceInfoList(System.UInt32@)">
            <summary>
            Create Device Information List.
            </summary>
            <param name="numdevs">number of devices</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_GetDeviceInfoDetail(System.UInt32,System.UInt32@,Iot.Device.FtCommon.FtDeviceType@,System.UInt32@,System.UInt32@,System.Byte@,System.Byte@,System.IntPtr@)">
            <summary>
            Get Device Information Detail.
            </summary>
            <param name="index">Index of the device</param>
            <param name="flags">Flags</param>
            <param name="chiptype">Device type</param>
            <param name="id">ID</param>
            <param name="locid">Location ID</param>
            <param name="serialnumber">Serial Number</param>
            <param name="description">Description</param>
            <param name="ftHandle">Handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_OpenEx(System.UInt32,Iot.Device.FtCommon.FtOpenType,Iot.Device.FtCommon.SafeFtHandle@)">
            <summary>
            Open a device.
            </summary>
            <param name="pvArg1">The device element identifying the device, depends on the flag</param>
            <param name="dwFlags">The flag how to open the device</param>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_Close(System.IntPtr)">
            <summary>
            Close the device.
            </summary>
            <param name="ftHandle">The device handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_ResetDevice(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Reset the device.
            </summary>
            <param name="ftHandle">The device handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetTimeouts(Iot.Device.FtCommon.SafeFtHandle,System.UInt32,System.UInt32)">
            <summary>
            Sets timeouts.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="dwReadTimeout">Read timeout in milliseconds</param>
            <param name="dwWriteTimeout">Write timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetLatencyTimer(Iot.Device.FtCommon.SafeFtHandle,System.Byte)">
            <summary>
            Sets latency timer.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="ucLatency">The latency in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetFlowControl(Iot.Device.FtCommon.SafeFtHandle,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets flow control.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="usFlowControl">The type of flow control</param>
            <param name="uXon">Byte used for Xon</param>
            <param name="uXoff">Byte used for Xoff</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetBitMode(Iot.Device.FtCommon.SafeFtHandle,System.Byte,Iot.Device.FtCommon.FtBitMode)">
            <summary>
            Set bit mode.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="ucMask">bit mode mask</param>
            <param name="ucMode">bit mode</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_GetBitMode(Iot.Device.FtCommon.SafeFtHandle,System.Byte@)">
            <summary>
            Get bit mode.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="ucMode">The actual value of each pin regarless if they are input or output.</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_GetQueueStatus(Iot.Device.FtCommon.SafeFtHandle,System.UInt32@)">
            <summary>
            Get queued status, this is used only to read the status of number of bytes to write.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="lpdwAmountInRxQueue">number of available bytes in queue</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_Read(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt32,System.UInt32@)">
            <summary>
            Read.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="lpBuffer">The buffer to place the bytes in</param>
            <param name="dwBytesToRead">The number of bytes to read</param>
            <param name="lpdwBytesReturned">The number of byte read</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_Write(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt32,System.UInt32@)">
            <summary>
            Write.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="lpBuffer">The buffer containing the bytes to send</param>
            <param name="dwBytesToWrite">The number of bytes to write</param>
            <param name="lpdwBytesWritten">The number of bytes written</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetChars(Iot.Device.FtCommon.SafeFtHandle,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets chars for interruption.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="uEventCh">0 to ignore the event, 1 use it</param>
            <param name="uEventChEn">The char to use</param>
            <param name="uErrorCh">0 to ignore the error event, 1 use it</param>
            <param name="uErrorChEn">The char to use for error</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.FtCommon.FtFunction.FT_SetUSBParameters(Iot.Device.FtCommon.SafeFtHandle,System.UInt32,System.UInt32)">
            <summary>
            Sets the USB transfer parameters.
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="dwInTransferSize">Transfer size of the buffer to read</param>
            <param name="dwOutTransferSize">Transfer size of the buffer to write</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.FtCommon.FtOpcode">
            <summary>
            Form Application note:
            AN_108_Command_Processor_for_MPSSE_and_MCU_Host_Bus_Emulation_Modes.pdf
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusVeClockMSBFirst">
            <summary>
            0x10,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusVeClockMSBFirst">
            <summary>
            0x11,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnPlusVeClockMSBFirst">
            <summary>
            0x12,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnMinusVeClockMSBFirst">
            <summary>
            0x13,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesInOnPlusVeClockMSBFirst">
            <summary>
            0x20,
            LengthL,
            LengthH
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesInOnMinusVeClockMSBFirst">
            <summary>
            0x24,
            LengthL,
            LengthH
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsInOnPlusVeClockMSBFirst">
            <summary>
            0x22,
            Length
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsInOnMinusVeClockMSBFirst">
            <summary>
            0x26,
            Length
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusBytesInOnPlusVeClockMSBFirst">
            <summary>
            0x31,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusBytesInOnMinusVeClockMSBFirst">
            <summary>
            0x34,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnMinusBitsInOnPlusVeClockMSBFirst">
            <summary>
            0x33,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnPlusBitsInOnMinusVeClockMSBFirst">
            <summary>
            0x36,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusVeClockLSBFirst">
            <summary>
            0x18,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusVeClockLSBFirst">
            <summary>
            0x19,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnPlusVeClockLSBFirst">
            <summary>
            0x1A,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnMinusVeClockLSBFirst">
            <summary>
            0x1B,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesInOnPlusVeClockLSBFirst">
            <summary>
            0x28,
            LengthL,
            LengthH
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesInOnMinusVeClockLSBFirst">
            <summary>
            0x2C,
            LengthL,
            LengthH
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsInOnPlusVeClockLSBFirst">
            <summary>
            0x2A,
            Length
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsInOnMinusVeClockSBFirst">
            <summary>
            0x2E,
            Length
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusBytesInOnPlusVeClockLSBFirst">
            <summary>
            0x39,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusBytesInOnMinusVeClockLSBFirst">
            <summary>
            0x3C,
            LengthL,
            LengthH,
            Byte1
            ..
            Byte65536 (max)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnMinusBitsInOnPlusVeClockLSBFirst">
            <summary>
            0x3B,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBitsOutOnPlusBitsInOnMinusVeClockLSBFirst">
            <summary>
            0x3E,
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusVeClockTMSPinLSBFirst">
            <summary>
            0x4A
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusVeClockTMSPinSBFirst">
            <summary>
            0x4B
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusDataInOnPlusVeClockTMSPinSBFirst">
            <summary>
            0x6A
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusDataInOnPlusVeClockTMSPinSBFirst">
            <summary>
            0x6B
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnPlusDataInOnMinusVeClockTMSPinSBFirst">
            <summary>
            0x6E
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockDataBytesOutOnMinusDataInOnMinusVeClockTMSPinSBFirst">
            <summary>
            0x6F
            Length,
            Byte1
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SetDataBitsLowByte">
            <summary>
            0x80,
            0xValue,
            0xDirection
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SetDataBitsHighByte">
            <summary>
            0x82,
            0xValue,
            0xDirection
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ReadDataBitsLowByte">
            <summary>
            0x81,
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ReadDataBitsHighByte">
            <summary>
            0x83,
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ConnectTDItoTDOforLoopback">
            <summary>
            0x84,
            This will connect the TDI/DO output to the TDO/DI input for loopback testing.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.DisconnectTDItoTDOforLoopback">
            <summary>
            0x85,
            This will disconnect the TDI output from the TDO input for loopback testing.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SetTCKSKDivisor">
            <summary>
            Set TCK/SK Divisor (FT2232D)
            0x86,
            0xValueL,
            0xValueH
            TCK/SK period = 12MHz / (( 1 +[(0xValueH * 256) OR 0xValueL] ) * 2)
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SetClockDivisor">
            <summary>
            0x86,
            0xValueL,
            0xValueH,
            or example with the divide by 5 set as on:
            The TCK frequency can be worked out by the following algorithm :
            TCK period = 12MHz / (( 1 +[ (0xValueH * 256) OR 0xValueL] ) * 2)
            0x0000 6 MHz
            0xFFFF 91.553 Hz
            For example with the divide by 5 set as off:
            The TCK frequency can be worked out by the following algorithm :
            TCK period = 60MHz / (( 1 +[ (0xValueH * 256) OR 0xValueL] ) * 2)
            0x0000 30 MHz
            0xFFFF 457.763 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.CPUModeReadShortAddress">
            <summary>
            0x90,
            0xAddrLow
            This will read 1 byte from the target device.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.CPUModeReadExtendedAddress">
            <summary>
            0x91,
            0xAddrHigh
            0xAddrLow
            This will read 1 byte from the target device.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.CPUModeWriteShortAddress">
            <summary>
            0x92,
            0xAddrLow,
            0xData
            This will write 1 byte from the target device.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.CPUModeWriteExtendedAddress">
            <summary>
            0x93,
            0xAddrHigh,
            0xAddrLow,
            0xData
            This will write 1 byte from the target device.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SendImmediate">
            <summary>
            0x87,
            This will make the chip flush its buffer back to the PC.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.WaitOnIOHigh">
            <summary>
            0x88,
            This will cause the MPSSE controller to wait until GPIOL1 (JTAG) or I/O1 (CPU) is high. Once it is detected
            as high, it will move on to process the next instruction. The only way out of this will be to disable the
            controller if the I/O line never goes high.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.WaitOnIOLow">
            <summary>
            0x89,
            This will cause the controller to wait until GPIOL1 (JTAG) or I/O1 (CPU) is low. Once it is detected as low,
            it will move on to process the next instruction. The only way out of this will be to disable the controller if
            the I/O line never goes low.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.DisableClockDivideBy5">
            <summary>
            0x8A
            This will turn off the divide by 5 from the 60 MHz clock.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.EnableClockDivideBy5">
            <summary>
            0x8B
            This will turn on the divide by 5 from the 60 MHz clock to give a 12MHz master clock for backward
            compatibility with FT2232D designs
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.Enable3PhaseDataClocking">
            <summary>
            0x8C
            This will give a 3 stage data shift for the purposes of supporting interfaces such as I2C which need the
            data to be valid on both edges of the clk. So it will appear as
            Data setup for ½ clock period -> pulse clock for ½ clock period -> Data hold for ½ clock period.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.Disable3PhaseDataClocking">
            <summary>
            0x8D
            This will give a 2 stage data shift which is the default state. So it will appear as
            Data setup for ½ clock period -> Pulse clock for ½ clock period
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockForNBitsWithNoDataTransfer">
            <summary>
            0x8E
            Length,
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockForNx8BitsWithNoDataTransfer">
            <summary>
            0x8F
            LengthL,
            LengthH,
            A length of 0x0000 will do 8 clocks
            and a length of 0xFFFF will do 524288 clocks
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockContinuouslyAndWaitOnIOHigh">
            <summary>
            0x94
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockContinuouslyAndWaitOnIOLow">
            <summary>
            0x95
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.TurnOnAdaptativeClocking">
            <summary>
            0x96,
            Adaptive clocking is required when using the JTAG interface on an ARM processor.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.TurnOffAdaptativeClocking">
            <summary>
            0x97,
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockForNx8BitsWithNoDataTransferOrUntilGPIOL1IsHigh">
            <summary>
            0x9C
            LengthL,
            LengthH,
            A length of 0x0000 will do 8 clocks
            and a length of 0xFFFF will do 524288 clocks or until GPIOL1 is high.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.ClockForNx8BitsWithNoDataTransferOrUntilGPIOL1IsLow">
            <summary>
            0x9D
            LengthL,
            LengthH,
            A length of 0x0000 will do 8 clocks
            and a length of 0xFFFF will do 524288 clocks or until GPIOL1 is low.
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpcode.SetIOOnlyDriveOn0AndTristateOn1">
            <summary>
            0x9E
            LowByteEnablesForOnlyDrive0
            HighByteEnablesForOnlyDrive0
            This will make the I/Os only drive when the data is ‘0’ and tristate on the data being ‘1’ when the
            appropriate bit is set. Use this op-code when configuring the MPSSE for I2C use.
            </summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtOpenType">
            <summary>
            How to open the FTDI chip
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpenType.OpenBySerialNumber">
            <summary>
            Open by serial number
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpenType.OpenByDescription">
            <summary>
            Open by description
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtOpenType.OpenByLocation">
            <summary>
            Open by location
            </summary>
        </member>
        <member name="T:Iot.Device.FtCommon.FtStatus">
            <summary>
            Errors for FT4222
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.Ok">
            <summary>
            Status OK
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidHandle">
            <summary>
            The device handle is invalid
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceNotFound">
            <summary>
            Device not found
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceNotOpen">
            <summary>
            Device is not open
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.IoError">
            <summary>
            IO error
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InsufficientResources">
            <summary>
            Insufficient resources
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidParameter">
            <summary>
            A parameter was invalid
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidBaudRate">
            <summary>
            The requested baud rate is invalid
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceNotOpenForErase">
            <summary>
            Device not opened for erase
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceNotOpenForWrite">
            <summary>
            Device not opened for write
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.FailedToWriteToDevice">
            <summary>
            Failed to write to device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EepromFailedToRead">
            <summary>
            Failed to read the device EEPROM
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EepromFailedToWrite">
            <summary>
            Failed to write the device EEPROM
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EepromFailedToErase">
            <summary>
            Failed to erase the device EEPROM
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EepromNotPresent">
            <summary>
            An EEPROM is not fitted to the device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EepromNotProgrammed">
            <summary>
            Device EEPROM is blank
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidArguments">
            <summary>
            Invalid arguments
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.OtherError">
            <summary>
            An other error has occurred
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceListNotReady">
            <summary>
            The device list is not ready
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.DeviceNotSupported">
            <summary>
            Device not supported
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.SpiMasterClockNotSupported">
            <summary>
            Spi master do not support 80MHz/CLK_2
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.VenderCommandNotSupported">
            <summary>
            Vender command not supported
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.Ft4222IsNotSpiMode">
            <summary>
            FT4222 is not in SPI mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.Ft4222IsNotI2cMode">
            <summary>
            FT4222 is not in I2C mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.Ft4222IsNotSpiSingleMode">
            <summary>
            FT4222 is not in SPI single mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.Ft4222IsNotSpiMultiMode">
            <summary>
            FT4222 is not in SPI multi mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.WrongI2cAddress">
            <summary>
            Wrong I2C address
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidFunction">
            <summary>
            Invalid function
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InvalidPointer">
            <summary>
            Invalid pointer
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.ExceededMaximumTransferSize">
            <summary>
            Exceeded maximum transfer size
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.FailedToReadDevice">
            <summary>
            Failed to read device
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.I2cNotSupportedInThisMode">
            <summary>
            I2C is not supported in this mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioNotSupportedInThisMode">
            <summary>
            GPIO is not supported in this mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioExceededMaximumPortNumber">
            <summary>
            GPIO exceeded maximum port number
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioWriteNotSupported">
            <summary>
            GPIO write not supported
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioPullUpInvalidInInputMode">
            <summary>
            GPIO pull up invalid in input mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioPullDownInvalidInInputMode">
            <summary>
            GPIO pull down invalid in input mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioOpenDrainInvalidInOutputMode">
            <summary>
            GPIO open drain invalid in output mode
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.InterruptNotSupported">
            <summary>
            Interrupt not supported
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.GpioInputNotSupported">
            <summary>
            GPIO input not supported
            </summary>
        </member>
        <member name="F:Iot.Device.FtCommon.FtStatus.EventNotSupported">
            <summary>
            Event not supported
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222Common">
            <summary>
            Common static functions for the FT4222
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Common.GetVersions">
            <summary>
            Get the versions of the chipset and dll
            </summary>
            <returns>Both the chipset and dll versions</returns>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222Device">
            <summary>
            FT4222 device information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.GetFt4222">
            <summary>
            Gets all the FT4222 connected
            </summary>
            <returns>A list of FT4222</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.#ctor(Iot.Device.FtCommon.FtFlag,Iot.Device.FtCommon.FtDeviceType,System.UInt32,System.UInt32,System.String,System.String)">
            <summary>
            Instantiates a FT4222 Device object.
            </summary>
            <param name="flags">Indicates device state.</param>
            <param name="type">Indicates the device type.</param>
            <param name="id">The Vendor ID and Product ID of the device.</param>
            <param name="locId">The physical location identifier of the device.</param>
            <param name="serialNumber">The device serial number.</param>
            <param name="description">The device description.</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.#ctor(Iot.Device.FtCommon.FtDevice)">
            <summary>
            Instantiates a FT4222 Device object.
            </summary>
            <param name="ftdevice">a FT Device</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.CreateI2cBusCore(System.Int32,System.Int32[])">
            <summary>
            Creates an I2C Bus
            </summary>
            <param name="busNumber">The I2C bus number to create. Must be 0</param>
            <param name="pins">The pins for I2C (0 and 1)</param>
            <returns>An I2C bus</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.GetDefaultI2cBusNumber">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.GetDefaultPinAssignmentForI2c(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.GetDefaultPinAssignmentForSpi(System.Device.Spi.SpiConnectionSettings)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.CreateSimpleSpiDevice(System.Device.Spi.SpiConnectionSettings,System.Int32[])">
            <summary>
            Creates SPI device related to this device
            </summary>
            <param name="settings">The SPI settings</param>
            <param name="pins">The pins used for SPI (0-3)</param>
            <returns>a SPI device</returns>
            <remarks>You can create either an I2C or an SPI device.
            You can create multiple SPI devices, the first one will be the one used for the clock frequency.
            They all have to have different Chip Select. You can use any of the 3 to 15 pin for this function.</remarks>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Device.TryCreateBestGpioDriver">
            <summary>
            Creates the <see cref="T:Iot.Device.Ft4222.Ft4222Gpio"/> controller
            </summary>
            <returns>A new GPIO driver</returns>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222Gpio">
            <summary>
            GPIO driver for the FT4222
            </summary>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222Gpio.PinCount">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222Gpio.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.#ctor(Iot.Device.Ft4222.Ft4222Device)">
            <summary>
            Create a FT4222 GPIO driver
            </summary>
            <param name="device">An FT Device</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.#ctor(System.Int32)">
            <summary>
            Create a FT4222 GPIO driver
            </summary>
            <param name="deviceNumber">Number of the device in the device list, default 0</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Gpio.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222I2c">
            <summary>
            FT4222 I2C Device
            </summary>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222I2c.ConnectionSettings">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2c.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2c.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2c.WriteRead(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2c.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222I2cBus">
            <summary>
            FT4222 I2C Device
            </summary>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222I2cBus.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2cBus.#ctor(Iot.Device.Ft4222.Ft4222Device)">
            <summary>
            Create a FT4222 I2C Device
            </summary>
            <param name="deviceInformation">Device information. Use FtCommon.GetDevices to get it.</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2cBus.CreateDevice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2cBus.RemoveDevice(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222I2cBus.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft4222.Ft4222Spi">
            <summary>
            Create a SPI Device based on FT4222 chipset
            </summary>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222Spi.ConnectionSettings">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Ft4222.Ft4222Spi.DeviceInformation">
            <summary>
            Store the FTDI Device Information
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Spi.#ctor(System.Device.Spi.SpiConnectionSettings)">
            <summary>
            Create an SPI FT4222 class
            </summary>
            <param name="settings">SPI Connection Settings</param>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Spi.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Spi.TransferFullDuplex(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Spi.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ft4222.Ft4222Spi.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ft4222.FtClockRate">
            <summary>
            System clock rate
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtClockRate.Clock60MHz">
            <summary>
            60 MHz
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtClockRate.Clock24MHz">
            <summary>
            24 MHz
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtClockRate.Clock48MHz">
            <summary>
            48 MHz
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtClockRate.Clock80MHz">
            <summary>
            80 MHz
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.FtFunction">
            <summary>
            Imports for the ftd2xx.dll as well as libft4222
            </summary>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_CreateDeviceInfoList(System.UInt32@)">
            <summary>
            Create Device Information List
            </summary>
            <param name="numdevs">number of devices</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_GetDeviceInfoDetail(System.UInt32,System.UInt32@,Iot.Device.FtCommon.FtDeviceType@,System.UInt32@,System.UInt32@,System.Byte@,System.Byte@,System.IntPtr@)">
            <summary>
            Get Device Information Detail
            </summary>
            <param name="index">Index of the device</param>
            <param name="flags">Flags</param>
            <param name="chiptype">Device type</param>
            <param name="id">ID</param>
            <param name="locid">Location ID</param>
            <param name="serialnumber">Serial Number</param>
            <param name="description">Description</param>
            <param name="ftHandle">Handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_OpenEx(System.UInt32,Iot.Device.FtCommon.FtOpenType,Iot.Device.FtCommon.SafeFtHandle@)">
            <summary>
            Open a device
            </summary>
            <param name="pvArg1">The device element identifying the device, depends on the flag</param>
            <param name="dwFlags">The flag how to open the device</param>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_Close(System.IntPtr)">
            <summary>
            Close the device
            </summary>
            <param name="ftHandle">The device handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_CreateDeviceInfoListLinux(System.UInt32@)">
            <summary>
            Create Device Information List
            </summary>
            <param name="numdevs">number of devices</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_GetDeviceInfoDetailLinux(System.UInt32,System.UInt32@,Iot.Device.FtCommon.FtDeviceType@,System.UInt32@,System.UInt32@,System.Byte@,System.Byte@,System.IntPtr@)">
            <summary>
            Get Device Information Detail
            </summary>
            <param name="index">Index of the device</param>
            <param name="flags">Flags</param>
            <param name="chiptype">Device type</param>
            <param name="id">ID</param>
            <param name="locid">Location ID</param>
            <param name="serialnumber">Serial Number</param>
            <param name="description">Description</param>
            <param name="ftHandle">Handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_OpenExLinux(System.UInt32,Iot.Device.FtCommon.FtOpenType,Iot.Device.FtCommon.SafeFtHandle@)">
            <summary>
            Open a device
            </summary>
            <param name="pvArg1">The device element identifying the device, depends on the flag</param>
            <param name="dwFlags">The flag how to open the device</param>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_CloseLinux(System.IntPtr)">
            <summary>
            Close the device
            </summary>
            <param name="ftHandle">The device handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_CreateDeviceInfoListWin(System.UInt32@)">
            <summary>
            Create Device Information List
            </summary>
            <param name="numdevs">number of devices</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_GetDeviceInfoDetailWin(System.UInt32,System.UInt32@,Iot.Device.FtCommon.FtDeviceType@,System.UInt32@,System.UInt32@,System.Byte@,System.Byte@,System.IntPtr@)">
            <summary>
            Get Device Information Detail
            </summary>
            <param name="index">Index of the device</param>
            <param name="flags">Flags</param>
            <param name="chiptype">Device type</param>
            <param name="id">ID</param>
            <param name="locid">Location ID</param>
            <param name="serialnumber">Serial Number</param>
            <param name="description">Description</param>
            <param name="ftHandle">Handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_OpenExWin(System.UInt32,Iot.Device.FtCommon.FtOpenType,Iot.Device.FtCommon.SafeFtHandle@)">
            <summary>
            Open a device
            </summary>
            <param name="pvArg1">The device element identifying the device, depends on the flag</param>
            <param name="dwFlags">The flag how to open the device</param>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT_CloseWin(System.IntPtr)">
            <summary>
            Close the device
            </summary>
            <param name="ftHandle">The device handle</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_UnInitialize(System.IntPtr)">
            <summary>
            Uninitialize a device, call before closing the device
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SetClock(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.FtClockRate)">
            <summary>
            Set the device system clock
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="clk">The system clock rate</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GetClock(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.FtClockRate@)">
            <summary>
            Get the system clock
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="clk">The system clock rate</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SetWakeUpInterrupt(Iot.Device.FtCommon.SafeFtHandle,System.Boolean)">
            <summary>
            Set the Wake Up Interrupt
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="enable">True to enable, false to disable</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SetInterruptTrigger(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioTrigger)">
            <summary>
            Set Interrupt Trigger
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="trigger">The trigger type</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SetSuspendOut(Iot.Device.FtCommon.SafeFtHandle,System.Boolean)">
            <summary>
            Set Suspend Out
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="enable">True to enable, false to disable</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GetMaxTransferSize(Iot.Device.FtCommon.SafeFtHandle,System.UInt16@)">
            <summary>
            Get the maximum transfer buffer size thru USB
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="pMaxSize">the maximum size in bytes</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SetEventNotification(Iot.Device.FtCommon.SafeFtHandle,System.UInt64,System.IntPtr)">
            <summary>
            Set event notification
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="mask">Event mask</param>
            <param name="param">Event Parameter</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GetVersion(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.FtVersion@)">
            <summary>
            Get the version of the chip and dll
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="pVersion">A version structure</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_ChipReset(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Reset the chipset
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_Init(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.SpiOperatingMode,Iot.Device.Ft4222.SpiClock,Iot.Device.Ft4222.SpiClockPolarity,Iot.Device.Ft4222.SpiClockPhase,System.Byte)">
            <summary>
            Initialize the chip SPI as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="ioLine">The operation mode, none, single, dual or quad</param>
            <param name="clock">The SPI clock divider of the system clock</param>
            <param name="cpol">The clock polarity</param>
            <param name="cpha">The clock phase</param>
            <param name="ssoMap">The chip select starting by 0x01</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_SetLines(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.SpiOperatingMode)">
            <summary>
            Set the operation mode for SPI as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="spiMode">The operation mode, none, single, dual or quad</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_SingleRead(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@,System.Boolean)">
            <summary>
            Operate a single SPI read as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The output read buffer</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeOfRead">Number of bytes read</param>
            <param name="isEndTransaction">True if this is the final SPI transaction</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_SingleWrite(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@,System.Boolean)">
            <summary>
            Operate a single SPI write as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the buffer</param>
            <param name="isEndTransaction">True if this is the final SPI transaction</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_SingleReadWrite(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.Byte@,System.UInt16,System.UInt16@,System.Boolean)">
            <summary>
            Operate a single read and write SPI operation as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="readBuffer">The output read buffer</param>
            <param name="writeBuffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of buffer to transfer</param>
            <param name="isEndTransaction">True if this is the final SPI transaction</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPIMaster_MultiReadWrite(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.Byte@,System.Byte,System.UInt16,System.UInt16,System.UInt32@)">
            <summary>
            Operate multiple read and write SPI operations as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="readBuffer">The output read buffer</param>
            <param name="writeBuffer">The buffer to write</param>
            <param name="singleWriteBytes">singleWriteBytes</param>
            <param name="multiWriteBytes">multiWriteBytes</param>
            <param name="multiReadBytes">multiReadBytes</param>
            <param name="sizeOfRead">The size of the read buffer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_Init(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Initialize the chipset as a SPI replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_InitEx(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.SpiReplicaProtocol)">
            <summary>
            Initialize the chipset as a SPI replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="protocolOpt">Initialize with, without protocol or never send the acknowledge</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_SetMode(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.SpiClockPolarity,Iot.Device.Ft4222.SpiClockPhase)">
            <summary>
            Set SPI as replica clock modes
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="cpol">The clock polarity</param>
            <param name="cpha">The clock phase</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_GetRxStatus(Iot.Device.FtCommon.SafeFtHandle,System.UInt16@)">
            <summary>
            Get the SPI as salve RX status
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="pRxSize">The RX size</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_Read(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate a SPI read as replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The output read buffer</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeOfRead">The size of the read buffer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_Write(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate a SPI write as a replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size what has been sent</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPISlave_RxQuickResponse(Iot.Device.FtCommon.SafeFtHandle,System.Boolean)">
            <summary>
            Get or set the SPI as replica Rx quick response
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="enable">True to enable it, false to disable it</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPI_Reset(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Reset the SPI
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPI_ResetTransaction(Iot.Device.FtCommon.SafeFtHandle,System.Byte)">
            <summary>
            Reset a specific SPI transaction ID
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="spiIdx">The SPI ID</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_SPI_SetDrivingStrength(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.PinDrivingStrength,Iot.Device.Ft4222.PinDrivingStrength,Iot.Device.Ft4222.PinDrivingStrength)">
            <summary>
            Set the intensity of the pin out on SPI
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="clkStrength">The intensity of the clock pin</param>
            <param name="ioStrength">The intensity of the SDO and SDI pins</param>
            <param name="ssoStrength">The intensity of the chip select pin</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_Init(Iot.Device.FtCommon.SafeFtHandle,System.UInt32)">
            <summary>
            Initialize the chip as an I2C master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="kbps">ency in kilo Hertz</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_Read(Iot.Device.FtCommon.SafeFtHandle,System.UInt16,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate an I2C read as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="deviceAddress">The device address</param>
            <param name="buffer">The output read buffer</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_Write(Iot.Device.FtCommon.SafeFtHandle,System.UInt16,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate an I2C write as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="deviceAddress">The device address</param>
            <param name="buffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_ReadEx(Iot.Device.FtCommon.SafeFtHandle,System.UInt16,System.Byte,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate an I2C read as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="deviceAddress">The device address to read</param>
            <param name="flag">flag</param>
            <param name="buffer">The output read buffer</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_WriteEx(Iot.Device.FtCommon.SafeFtHandle,System.UInt16,System.Byte,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate an I2C write as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="deviceAddress">The device address to read</param>
            <param name="flag">flag</param>
            <param name="buffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_Reset(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Reset I2C as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CMaster_GetStatus(Iot.Device.FtCommon.SafeFtHandle,System.Byte@)">
            <summary>
            Get the I2C status as a master
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="controllerStatus">Returns the controller status byte</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_Init(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Initialize the chip as an I2C replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_Reset(Iot.Device.FtCommon.SafeFtHandle)">
            <summary>
            Reset the I2C as a replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_GetAddress(Iot.Device.FtCommon.SafeFtHandle,System.Byte@)">
            <summary>
            Get the I2C address as a replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="addr">The I2C device address</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_SetAddress(Iot.Device.FtCommon.SafeFtHandle,System.Byte)">
            <summary>
            Get the I2C address as a replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="addr">The I2C device address</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_GetRxStatus(Iot.Device.FtCommon.SafeFtHandle,System.UInt16@)">
            <summary>
            Get the I2C as a replica RX status
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="pRxSize">the RX size</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_Read(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Operate an I2C read as a replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The output read buffer</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_Write(Iot.Device.FtCommon.SafeFtHandle,System.Byte@,System.UInt16,System.UInt16@)">
            <summary>
            Write on the I2C device as replica
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="buffer">The buffer to write</param>
            <param name="bufferSize">The size of the buffer</param>
            <param name="sizeTransferred">The size of the transfer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_SetClockStretch(Iot.Device.FtCommon.SafeFtHandle,System.Boolean)">
            <summary>
            Set I2C as a replica clock stretch
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="enable">True to enable, false to disable</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_I2CSlave_SetRespWord(Iot.Device.FtCommon.SafeFtHandle,System.Byte)">
            <summary>
            Set I2C as a replica response word
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="responseWord">The response word</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_Init(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPinMode[])">
            <summary>
            Initialize the chip as GPIO
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="gpioDir">Array of pin configuration</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_Read(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPort,Iot.Device.Ft4222.GpioPinValue@)">
            <summary>
            Operate a GPIO read
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="portNum">The pin port</param>
            <param name="value">True if high, false if low</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_Write(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPort,Iot.Device.Ft4222.GpioPinValue)">
            <summary>
            Operate a GPIO write
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="portNum">The pin port</param>
            <param name="bValue">True if high, false if low</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_SetInputTrigger(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPort,Iot.Device.Ft4222.GpioTrigger)">
            <summary>
            Set the GPIO input trigger
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="portNum">The pin port</param>
            <param name="trigger">The trigger type</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_GetTriggerStatus(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPort,System.UInt16@)">
            <summary>
            Get the GPIO trigger status
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="portNum">The pin port</param>
            <param name="queueSize">The queue size</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_ReadTriggerQueue(Iot.Device.FtCommon.SafeFtHandle,Iot.Device.Ft4222.GpioPort,Iot.Device.Ft4222.GpioTrigger@,System.UInt16,System.UInt16@)">
            <summary>
            Read the GPIO Trigger queue
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="portNum">The pin port</param>
            <param name="events">Type of event</param>
            <param name="readSize">The number of events read</param>
            <param name="sizeofRead">The size of the read buffer</param>
            <returns>The status</returns>
        </member>
        <member name="M:Iot.Device.Ft4222.FtFunction.FT4222_GPIO_SetWaveFormMode(Iot.Device.FtCommon.SafeFtHandle,System.Boolean)">
            <summary>
            Set the GPIO in wave form
            </summary>
            <param name="ftHandle">The handle of the open device</param>
            <param name="enable">True to enable, false to disable</param>
            <returns>The status</returns>
        </member>
        <member name="T:Iot.Device.Ft4222.FtVersion">
            <summary>
            Contains the chip and Dll versions
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtVersion.ChipVersion">
            <summary>
            Chip version
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.FtVersion.DllVersion">
            <summary>
            Dll version
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.GpioPinMode">
            <summary>
            GPIO Pin Mode called Direction with FTDI
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPinMode.Output">
            <summary>
            Output
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPinMode.Input">
            <summary>
            Input
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.GpioPinValue">
            <summary>
            Used for the digital pin values
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.GpioPort">
            <summary>
            GPIO numbers called Port with FTDI
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPort.Gpio0">
            <summary>
            GPIO 0
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPort.Gpio1">
            <summary>
            GPIO 1
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPort.Gpio2">
            <summary>
            GPIO 2
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.GpioPort.Gpio3">
            <summary>
            GPIO 3
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.GpioTrigger">
            <summary>
            Triggers for the GPIO events
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.I2cMasterFlag">
            <summary>
            I2C Master Flag
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.I2cMasterFlag.None">
            <summary>
            No specific flag
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.I2cMasterFlag.Start">
            <summary>
            Send start
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.I2cMasterFlag.RepeatedStart">
            <summary>
            Repeated start
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.I2cMasterFlag.Stop">
            <summary>
            Send stop
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.I2cMasterFlag.StartAndStop">
            <summary>
            Start condition followed by a stop condition
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.PinDrivingStrength">
            <summary>
            Intensity for SPI in Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.PinDrivingStrength.Intensity4Ma">
            <summary>
            4 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.PinDrivingStrength.Intensity8Ma">
            <summary>
            8 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.PinDrivingStrength.Intensity12Ma">
            <summary>
            12 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.PinDrivingStrength.Intensity16Ma">
            <summary>
            16 Milli Amperes
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiClock">
            <summary>
            Clock dividers of the system clock for the SPI module
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy1">
            <summary>
            System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy2">
            <summary>
            1/2 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy4">
            <summary>
             1/4 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy8">
            <summary>
            1/8 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy16">
            <summary>
            1/16 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy32">
            <summary>
            1/32 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy64">
            <summary>
            1/64 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy128">
            <summary>
            1/128 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy256">
            <summary>
            1/256 System Clock (ClockRate)
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiClock.DivideBy512">
            <summary>
            1/512 System Clock (ClockRate)
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiClockPhase">
            <summary>
            SPI Clock Phase
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiClockPolarity">
            <summary>
            SPI Clock Polarity
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiDrivingStrength">
            <summary>
            Intensity for SPI in Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiDrivingStrength.Intensity4mA">
            <summary>
            4 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiDrivingStrength.Intensity8mA">
            <summary>
            8 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiDrivingStrength.Intensity12mA">
            <summary>
            12 Milli Amperes
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiDrivingStrength.Intensity16mA">
            <summary>
            16 Milli Amperes
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiOperatingMode">
            <summary>
            SPI Operation mode as single, dual or quad SPI
            </summary>
        </member>
        <member name="T:Iot.Device.Ft4222.SpiReplicaProtocol">
            <summary>
            SPI as replica protocol
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiReplicaProtocol.WithProtocol">
            <summary>
            With Protocol
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiReplicaProtocol.WithoutProtocol">
            <summary>
            Without Protocol
            </summary>
        </member>
        <member name="F:Iot.Device.Ft4222.SpiReplicaProtocol.NeverSendAcknowledge">
            <summary>
            Never send acknowledge
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.GoPiGo">
            <summary>
            A GoPiGo3 class for a GoPiGo3 Dexter Industries robot kit
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.SpiAddress">
            <summary>
            Get the SPI address of GoPiGo3. By default, it is 8
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.MotorGearRatio">
            <summary>
            Set or get a specific gear ratio for the encoder
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.EncoderTicksPerRotation">
            <summary>
            Set or get a specific ticks per rotation for the encoder
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.MotorTicksPerDegree">
            <summary>
            Return the number of ticks per degree
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.GoPiGo.GroveSensor">
            <summary>
            The 2 Grove Sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.GoPiGo3Info">
            <summary>
            The GoPiGo3 information including hardware, firmware, ID and Manufacturer
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.GoPiGo.GoPiGoVoltage">
            <summary>
            Get the real 5V and Battery/VCC voltages
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.#ctor(System.Device.Spi.SpiDevice,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Create a GoPiGo class
            </summary>
            <param name="spiDevice">The SpiDevice</param>
            <param name="spiAddress">The SPI address, by default 8</param>
            <param name="autoDetect">Try to autodetect the board</param>
            <param name="shouldDispose">True to dispose the SpiDevice when disposing the class</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.Dispose">
            <summary>
            Reset everything
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiTransferArray(System.Byte[])">
            <summary>
            Conduct a SPI transaction
            </summary>
            <param name="buffer">A byte array to send.The length of the array will determine how many bytes are transferred.</param>
            <returns>Returns an array of the bytes read.</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiRead32(Iot.Device.GoPiGo3.Models.SpiMessageType)">
            <summary>
            Read a 32 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <returns>Returns the value read</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiRead16(Iot.Device.GoPiGo3.Models.SpiMessageType)">
            <summary>
            Read a 16 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <returns>Returns the value read</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiRead8(Iot.Device.GoPiGo3.Models.SpiMessageType)">
            <summary>
            Read a 8 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <returns>Returns the value read</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiWrite8(Iot.Device.GoPiGo3.Models.SpiMessageType,System.Byte)">
            <summary>
            Send a 8 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <param name="Value">The value to be sent</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiWrite16(Iot.Device.GoPiGo3.Models.SpiMessageType,System.Int16)">
            <summary>
            Send a 16 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <param name="Value">The value to be sent</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiWrite24(Iot.Device.GoPiGo3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 24 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <param name="Value">The value to be sent</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SpiWrite32(Iot.Device.GoPiGo3.Models.SpiMessageType,System.Int32)">
            <summary>
            Send a 32 bit value over SPI
            </summary>
            <param name="MessageType">The SPI message type</param>
            <param name="Value">The value to be sent</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetManufacturer">
            <summary>
            Read the 20 characters of GoPiGo3 manufacturer name
            </summary>
            <returns>Returns the GoPiGo3 manufacturer name string</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetBoard">
            <summary>
            Read the 20 characters of GoPiGo3 board name
            </summary>
            <returns>Returns the GoPiGo3 board name string</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetHardwareVersion">
            <summary>
            Read the hardware version
            </summary>
            <returns>Returns the hardware version as a string</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetIdHex">
            <summary>
            Read the 128 bit GoPiGo3 hardware serial number
            </summary>
            <returns>Returns the serial number as 32 char HEX formatted string</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetId">
            <summary>
            Read the 128 bit GoPiGo3 hardware serial number
            </summary>
            <returns>Returns the serial number as a byte array</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetFirmwareVersion">
            <summary>
            Read the firmware version
            </summary>
            <returns>Returns the firmware version</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetLed(System.Byte,System.Drawing.Color)">
            <summary>
            Set the led color
            </summary>
            <param name="led">The led, either Left, Right, Blinky Left, Blinky Right and Wifi. Note you should only control the wifi one if you are sure to be connected to wifi</param>
            <param name="ledColor">The Color of the <paramref name="led"/></param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetVoltage5V">
            <summary>
            Get the 5v circuit voltage
            </summary>
            <returns>Returns the real 5v circuit voltage</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetVoltageBatteryVcc">
            <summary>
            Get the battery voltage
            </summary>
            <returns>Returns the real battery/Vcc voltage</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetServo(Iot.Device.GoPiGo3.Models.ServoPort,System.Int32)">
            <summary>
            Move the servo motor with a specific pulse in microseconds
            </summary>
            <param name="servo">The servo port Servo1 or Servo2</param>
            <param name="pulseMicroseconds">The pulse in microseconds</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorPower(Iot.Device.GoPiGo3.Models.MotorPort,System.Int32)">
            <summary>
            Set the motor power in percent
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="power">The power from - 100 to 100, or -128 for float</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorPosition(Iot.Device.GoPiGo3.Models.MotorPort,System.Int32)">
            <summary>
            Set the motor target position in degrees
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="positionDegree">The target position in degree</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorPositionKP(Iot.Device.GoPiGo3.Models.MotorPort,System.Byte)">
            <summary>
            Set the motor target position KP constant
            If you set KP higher, the motor will be more responsive to errors in position, at the cost of perhaps overshooting and oscillating.
            KD slows down the motor as it approaches the target, and helps to prevent overshoot.
            In general, if you increase KP, you should also increase KD to keep the motor from overshooting and oscillating.
            See as well https://en.wikipedia.org/wiki/PID_controller
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="kp">The KP constant (default 25)</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorPositionKD(Iot.Device.GoPiGo3.Models.MotorPort,System.Byte)">
            <summary>
            Set the motor target position KD constant
            If you set KP higher, the motor will be more responsive to errors in position, at the cost of perhaps overshooting and oscillating.
            KD slows down the motor as it approaches the target, and helps to prevent overshoot.
            In general, if you increase kp, you should also increase KD to keep the motor from overshooting and oscillating.
            See as well https://en.wikipedia.org/wiki/PID_controller
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="kd">The KD constant (default 70)</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorDps(Iot.Device.GoPiGo3.Models.MotorPort,System.Int32)">
            <summary>
            Set the motor target speed in degrees per second
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="dps">The target speed in degrees per second</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetMotorLimits(Iot.Device.GoPiGo3.Models.MotorPort,System.Byte,System.Int32)">
            <summary>
            Set the motor speed limit
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="powerPercent">The power limit in percent (0 to 100), with 0 being no limit (100)</param>
            <param name="dps">The speed limit in degrees per second, with 0 being no limit</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetMotorStatus(Iot.Device.GoPiGo3.Models.MotorPort)">
            <summary>
            Read a motor status
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft or MotorRight</param>
            <returns>Returns MotorStatus containing the status of the motor</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.OffsetMotorEncoder(Iot.Device.GoPiGo3.Models.MotorPort,System.Int32)">
            <summary>
            Offset a motor encoder
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft and/or MotorRight</param>
            <param name="positionOffset">The encoder offset. Zero the encoder by offsetting it by the current position</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetMotorEncoder(Iot.Device.GoPiGo3.Models.MotorPort)">
            <summary>
            Read a motor encoder in degrees
            </summary>
            <param name="port">The Motor port to use, can be MotorLeft or MotorRight</param>
            <returns>Returns the encoder position in degrees</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetGroveType(Iot.Device.GoPiGo3.Models.GrovePort,Iot.Device.GoPiGo3.Models.GroveSensorType)">
            <summary>
            Set grove type
            </summary>
            <param name="port">The grove port(s). Grove1 and/or Grove2</param>
            <param name="type">The grove device type, refer to GroveSensorType</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetGroveMode(Iot.Device.GoPiGo3.Models.GrovePort,Iot.Device.GoPiGo3.Models.GroveInputOutput)">
            <summary>
            Set grove analog digital pin mode as input or output
            </summary>
            <param name="port">The Grove Pin, can be any combination of Grove1Pin1, Grove1Pin2, Grove2Pin1 and/or Grove2Pin2</param>
            <param name="mode">The Grove pin mode, refere to GroveInputOutput</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetGroveState(Iot.Device.GoPiGo3.Models.GrovePort,System.Boolean)">
            <summary>
            Set grove output pin low or high
            </summary>
            <param name="port">The Grove Pin, can be any combination of Grove1Pin1, Grove1Pin2, Grove2Pin1 and/or Grove2Pin2</param>
            <param name="state">The pin state. false for low or true for high.</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.SetGrovePwmDuty(Iot.Device.GoPiGo3.Models.GrovePort,System.Double)">
            <summary>
            Set grove output pin PWM
            </summary>
            <param name="port">The Grove Pin, can be any combination of Grove1Pin1, Grove1Pin2, Grove2Pin1 and/or Grove2Pin2</param>
            <param name="duty">The PWM duty cycle in percent from 0.0 to 100.0, 1 floating point precision</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetGrovePwmFrequency(Iot.Device.GoPiGo3.Models.GrovePort,System.UInt32)">
            <summary>
            Set grove PWM frequency
            </summary>
            <param name="port">The grove port(s).GROVE_1 and / or GROVE_2.</param>
            <param name="freq">The PWM frequency.Range is 3 through 48000Hz.Default is 24000(24kHz). Limit to 48000, which is the highest frequency supported for 0.1% resolution.</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GroveI2cTransfer(Iot.Device.GoPiGo3.Models.GrovePort,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Conduct an I2C transaction
            </summary>
            <param name="port">The grove port. GROVE_1 or GROVE_2</param>
            <param name="addr">The I2C address of the secondary to be addressed.</param>
            <param name="arrayToSend">An array of bytes to send.</param>
            <param name="inBytes">The number of bytes to read.</param>
            <returns>Returns a byte array with what has been read from the I2C element</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GroveI2cStart(Iot.Device.GoPiGo3.Models.GrovePort,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Start an I2C transaction
            </summary>
            <param name="port">The Grove Port, one at the time Grove1 or Grove2</param>
            <param name="addr">The I2C address of the secondary to be addressed.</param>
            <param name="arrayToSend">An array of bytes to send.</param>
            <param name="inBytes">The number of bytes to read.</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetGroveValue(Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Get a grove port value
            </summary>
            <param name="port">The Grove Port, one at the time Grove1 or Grove2</param>
            <returns>Returns a byte array containing the read data</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetGroveState(Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Get a grove input pin state
            </summary>
            <param name="port">The Grove Pin, one at the time Grove1Pin1, Grove1Pin2, Grove2Pin1 or Grove2Pin2</param>
            <returns>Returns the pin state</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetGroveVoltage(Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Get a grove input pin analog voltage
            </summary>
            <param name="port">The Grove Pin, one at the time Grove1Pin1, Grove1Pin2, Grove2Pin1 or Grove2Pin2</param>
            <returns>Returns the voltage in V</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.GoPiGo.GetGroveAnalog(Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Get a grove input pin 12-bit raw ADC reading
            </summary>
            <param name="port">The Grove Pin, one at the time Grove1Pin1, Grove1Pin2, Grove2Pin1 or Grove2Pin2</param>
            <returns>Returns the analogic read</returns>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GoPiGoInfo">
            <summary>
            Represents GoPiGo information
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Models.GoPiGoInfo.#ctor(System.String,System.String,System.Version,System.Version,System.String)">
            <summary>
            Instantiate a GoPiGoInfo object.
            </summary>
            <param name="manufacturer">Manufacturer information.</param>
            <param name="board">Board information.</param>
            <param name="hardwareVersion">Hardware version.</param>
            <param name="softwareVersion">Firmware version.</param>
            <param name="id">Id of the GoPiGo3.</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoInfo.Manufacturer">
            <summary>
            Manufacturer information
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoInfo.Board">
            <summary>
            Board information
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoInfo.HardwareVersion">
            <summary>
            Hardware version
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoInfo.SoftwareVersion">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoInfo.Id">
            <summary>
            Id of the GoPiGo3
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GoPiGo3Led">
            <summary>
            The different Led embedded in the system
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GoPiGo3Led.LedEyeLeft">
            <summary>LED eye left</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GoPiGo3Led.LedEyeRight">
            <summary>LED eye right</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GoPiGo3Led.LedBlinkerLeft">
            <summary>LED left blinker</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GoPiGo3Led.LedBlinkerRight">
            <summary>LED right blinker</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GoPiGo3Led.LedWifi">
            <summary>
            Used to indicate WiFi status when used with Dexter OS.
            Should not be controlled by the user if using Dexter OS.
            But you still can control it out of this context
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GoPiGoVoltage">
            <summary>
            GoPiGo Voltage
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoVoltage.Voltage5V">
            <summary>
            The exact value of the 5V voltage
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GoPiGoVoltage.VoltageBattery">
            <summary>
            The voltage of the input battery/Vcc
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GroveInputOutput">
            <summary>
            The setup of the Grove element
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputDigital">
            <summary>Digital input</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.OutputDigital">
            <summary>Digital output</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputDigitalPullUp">
            <summary>Digital input with pull up</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputDigitalPullDown">
            <summary>Digital input with pull down</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputAnalog">
            <summary>Analog input</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.OutputPwm">
            <summary>PWM output</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputAnalogPullUp">
            <summary>Analog input with pull up</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveInputOutput.InputAnalogPullDown">
            <summary>Analog input with pull down</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GrovePort">
            <summary>
            The grove port used for analogic and/or digital read/write
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove1Pin1">
            <summary>Grove 1 Pin 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove1Pin2">
            <summary>Grove 1 Pin 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove2Pin1">
            <summary>Grove 2 Pin 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove2Pin2">
            <summary>Grove 2 Pin 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove1">
            <summary>Grove 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Grove2">
            <summary>Grove 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GrovePort.Both">
            <summary>Both Groves</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GroveSensor">
            <summary>
            Represents Grove sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Models.GroveSensor.#ctor(Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Constructor for the Grove sensor part of the main GoPiGo3 class
            </summary>
            <param name="GrovePort">The Grove port, either Grove1 or Grove2</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GroveSensor.Port">
            <summary>
            Grove Port
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GroveSensor.SensorType">
            <summary>
            Grove sensor type
            </summary>
            <value></value>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.GroveSensor.I2cDataLength">
            <summary>I2C data length</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GroveSensorType">
            <summary>
            The type of Grove sensors
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.Custom">
            <summary>Custom</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.InfraredRemote">
            <summary>Infrared remote</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.InfraredEV3Remote">
            <summary>Infrared EV3 remote</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.Ultrasonic">
            <summary>Ultrasonic</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorType.I2c">
            <summary>I2C</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.GroveSensorState">
            <summary>
            The state of the Goove element
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorState.ValidData">
            <summary>Valid data</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorState.NotConfigured">
            <summary>Not configured</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorState.Configuring">
            <summary>Configuring</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorState.NoData">
            <summary>No data</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.GroveSensorState.I2cError">
            <summary>I2C error</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.MotorPort">
            <summary>
            Port used to select the ports for motors
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorPort.MotorLeft">
            <summary>Left motor</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorPort.MotorRight">
            <summary>Right motor</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorPort.Both">
            <summary>Both motors</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.MotorStatusFlags">
            <summary>
            Flags that indicate motor status
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorStatusFlags.AllOk">
            <summary>No problems with motors detected</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorStatusFlags.LowVoltageFloat">
            <summary>The motors are automatically disabled because the battery voltage is too low.</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorStatusFlags.Overloaded">
            <summary>The motors aren't close to the target (applies to position control and dps speed control).</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.MotorSpeed">
            <summary>
            Sets the speed for the motor.
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorSpeed.Stop">
            <summary>Motor is stopped</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorSpeed.Full">
            <summary>Motor is at full speed</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorSpeed.Half">
            <summary>Motor is at half speed</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.MotorSpeed.Float">
            <summary>Motor is floating</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.MotorStatus">
            <summary>
            Get the full status of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.MotorStatus.Flags">
            <summary>
            Status of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.MotorStatus.Speed">
            <summary>
            Speed of the motor from -100 to 100. Anything higher than 100 will float the motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.MotorStatus.Encoder">
            <summary>
            Encoder of the motor, the position of the motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Models.MotorStatus.Dps">
            <summary>
            Degree per second of rotation for the motor
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.ServoPort">
            <summary>
            Select the servo motor port
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.ServoPort.Servo1">
            <summary>Servo 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.ServoPort.Servo2">
            <summary>Servo 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.ServoPort.Both">
            <summary>Both servos</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Models.SpiMessageType">
            <summary>
            The SPI messages sent to GoPiGo3 to get the various data back
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetManufacturer">
            <summary>Get manufacturer</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetName">
            <summary>Get name</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetHardwareVersion">
            <summary>Get hardware version</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetFirmwareVersion">
            <summary>Get firmware version</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetId">
            <summary>Get id</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetLed">
            <summary>Set LED</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetVoltage5V">
            <summary>Get voltage (5V)</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetVoltageVcc">
            <summary>Get voltage (VCC)</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetServo">
            <summary>Set servo</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorPower">
            <summary>Set motor power</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorPosition">
            <summary>Set motor position</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorPositionKp">
            <summary>Set motor position controller's proportional factor</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorPositionKd">
            <summary>Set motor position controller's derivative (change) factor</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorDps">
            <summary>Set motor speed (degrees per second)</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetMotorLimits">
            <summary>Set motor limits</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.OffsetMotorEncoder">
            <summary>Offset motor encoder</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetMotorEncoderLeft">
            <summary>Get left motor encoder</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetMotorEncoderRight">
            <summary>Get right motor encoder</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetMotorStatusLeft">
            <summary>Get right motor status</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetMotorStatusRight">
            <summary>Get left motor status</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetGroveType">
            <summary>Set Grove type</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetGroveMode">
            <summary>Set Grove mode</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetGroveState">
            <summary>Set Grove state</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetGrovePwmDuty">
            <summary>Set Grove PWM duty</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.SetGrovePwmFrequency">
            <summary>Set Grove PWM frequency</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Value">
            <summary>Get Grove 1 value</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Value">
            <summary>Get Grove 2 value</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin1State">
            <summary>Get Grove 1 pin 1 state</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin2State">
            <summary>Get Grove 1 pin 2 state</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin1State">
            <summary>Get Grove 2 pin 1 state</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin2State">
            <summary>Get Grove 2 pin 2 state</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin1Voltage">
            <summary>Get Grove 1 pin 1 voltage</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin2Voltage">
            <summary>Get Grove 1 pin 2 voltage</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin1Voltage">
            <summary>Get Grove 2 pin 1 voltage</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin2Voltage">
            <summary>Get Grove 2 pin 2 voltage</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin1Analog">
            <summary>Get Grove 1 analog pin 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove1Pin2Analog">
            <summary>Get Grove 1 analog pin 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin1Analog">
            <summary>Get Grove 2 analog pin 1</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.GetGrove2Pin2Analog">
            <summary>Get Grove 2 analog pin 2</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.StartGrove1I2c">
            <summary>Start Grove 1 I2C</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Models.SpiMessageType.StartGrove2I2c">
            <summary>Start Grove 2 I2C</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Movements.Polarity">
            <summary>
            Polarity of the motor
            </summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Movements.Polarity.Backward">
            <summary>Backward</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Movements.Polarity.Forward">
            <summary>Forward</summary>
        </member>
        <member name="F:Iot.Device.GoPiGo3.Movements.Polarity.OppositeDirection">
            <summary>Opposite direction</summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Movements.Motor">
            <summary>
            Represents GoPiGo3 motor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.MotorPort)">
            <summary>
            Create a motor
            </summary>
            <param name="brick">GoPiGo3 brick</param>
            <param name="port">Motor port</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.MotorPort,System.Int32)">
            <summary>
            Create a motor
            </summary>
            <param name="brick">GoPiGo3 brick</param>
            <param name="port">Motor port</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.SetSpeed(System.Int32)">
            <summary>
            Set the speed of the motor
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.SetTachoCount(System.Int32)">
            <summary>
            Set Tachometer encoder offset
            Use this to reset or setup a specific position
            </summary>
            <param name="position">New offset, 0 to reset</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.Stop">
            <summary>
            Stop the Motor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.Start">
            <summary>
            Start the motor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.Start(System.Int32)">
            <summary>
            Start with the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.SetPolarity(Iot.Device.GoPiGo3.Movements.Polarity)">
            <summary>
            Change the polatity of the motor
            </summary>
            <param name="polarity">Polarity of the motor, backward, forward or opposite</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.GetTachoCount">
            <summary>
            Gets the tacho count
            </summary>
            <returns>The tacho count. To get the tick per degree, check GoPiGo3.MotorTicksPerDegree property</returns>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.GetSpeed">
            <summary>
            Get the speed
            </summary>
            <returns>speed is between -255 and +255</returns>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Motor.Speed">
            <summary>
            Set or read the speed of the motor
            speed is between -255 and +255
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Motor.Port">
            <summary>
            Motor port
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Motor.PeriodRefresh">
            <summary>
            Period to refresh the notification of property changed in milliseconds
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Motor.UpdateSensor(System.Object)">
            <summary>
            Update the sensor and this will raised an event on the interface
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Motor.TachoCount">
            <summary>
            Tacho count as a property, events are rasied when value is changing
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Movements.Vehicle">
            <summary>
            Represents GoPiGo3 vehicle
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.#ctor(Iot.Device.GoPiGo3.GoPiGo)">
            <summary>
            Create a vehicle with 2 motors, one left and one right
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.Backward(System.Int32)">
            <summary>
            Run backward at the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.Forward(System.Int32)">
            <summary>
            Run forward at the specified speed
            </summary>
            <param name="speed">speed is between -255 and +255</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.TurnLeft(System.Int32,System.Int32)">
            <summary>
            Turn the vehicle left by the specified number of degrees for each motor. So 360 will do 1 motor turn.
            You need to do some math to have the actual vehicle turning fully at 360. It depends of the reduction used.
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="degrees">degrees to turn each motor</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.TurnRight(System.Int32,System.Int32)">
            <summary>
            Turn the vehicle right by the specified number of degrees for each motor. So 360 will do 1 motor turn.
            You need to do some math to have the actual vehicle turning fully at 360. It depends of the reduction used.
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="degrees">degrees to turn each motor</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.TrunLeftTime(System.Int32,System.Int32)">
            <summary>
            Turn the vehicle left for a number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.TrunRightTime(System.Int32,System.Int32)">
            <summary>
            Turn the vehicle right for a number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.Stop">
            <summary>
            Stop the vehicle
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.Backward(System.Int32,System.Int32)">
            <summary>
            Run backward for the specified number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.Forward(System.Int32,System.Int32)">
            <summary>
            Run forward for the specified number of milliseconds
            </summary>
            <param name="speed">speed is between -255 and +255</param>
            <param name="timeout">number of milliseconds to run the motors</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Vehicle.PortLeft">
            <summary>
            Return the MotorPort of the left motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Vehicle.PortRight">
            <summary>
            Return the MotorPort of the right motor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Movements.Vehicle.DirectionOpposite">
            <summary>
            Is the vehicle has inverted direction, then true
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Movements.Vehicle.IsRunning">
            <summary>
            Return true if the vehicle is moving
            </summary>
            <returns>true if vehicle moving</returns>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.AnalogSensor">
            <summary>
            A generic Analog Sensor class
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.SupportedPorts">
            <summary>
            List the supported Grove ports for the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.AnalogSensor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Constructor for the generic Analog Sensor
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.Value">
            <summary>
            Get the value of the sensor from 0 to MaxAdc
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.MaxAdc">
            <summary>
            The maximum ADC value 4095 for GoPiGo3
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.ValueAsPercent">
            <summary>
            Get the read value as a percentage from 0 to 100
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.AnalogSensor.ToString">
            <summary>
            Get the value as a string
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.Port">
            <summary>
            Get the Grove Port
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.AnalogSensor.SensorName">
            <summary>
            Get the sensor name "Analog Sensor"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.Button">
            <summary>
            A Button class
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Button.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Button constructor
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Button.IsPressed">
            <summary>
            True if the button is pressed, flase otherwise
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Button.ToString">
            <summary>
            Get "Pressed" if the button is pressed "Not pressed" if not
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Button.SensorName">
            <summary>
            Get the sensor name "Button"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.Buzzer">
            <summary>
            Buzzeer class to support buzzers, note this class is using PWM to control the buzzer
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Buzzer.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Constructor for the Buzzer class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Buzzer.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort,System.Byte)">
            <summary>
            Creates an instance of the <see cref="T:Iot.Device.GoPiGo3.Sensors.Buzzer"/> class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
            <param name="duty">The PWM duty to use to generate the sound from 0 to 100</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Buzzer.Duty">
            <summary>
            Get/set the PWM duty to use to generate the sound from 0 to 100
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Buzzer.Start">
            <summary>
            Starts the buzzer
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Buzzer.Stop">
            <summary>
            Stop the buzzer
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Buzzer.Value">
            <summary>
            Get/set the frequency in Hz
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Buzzer.ToString">
            <summary>
            Get the frequency in Hertz
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Buzzer.Port">
            <summary>
            Grove port
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Buzzer.SupportedPorts">
            <summary>
            List the supported Grove ports for the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Buzzer.SensorName">
            <summary>
            Get the sensor name "Buzzer"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.DigitalInput">
            <summary>
            DigitalInput class is a generic class to support digital input sensors
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalInput.SupportedPorts">
            <summary>
            List the supported Grove ports for the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.DigitalInput.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates an instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.DigitalInput"/>
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalInput.Value">
            <summary>
            Get the state of the digital pin
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.DigitalInput.ToString">
            <summary>
            Get "High" when reading high, "Low" otherwise
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalInput.SensorName">
            <summary>
            Get the sensor name "Digital Input"
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalInput.Port">
            <summary>
            Grove port
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.DigitalOutput">
            <summary>
            DigitalOutput class to control a digital output
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalOutput.SupportedPorts">
            <summary>
            List the supported Grove ports for the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.DigitalOutput.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Create a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.DigitalOutput"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalOutput.Value">
            <summary>
            Get/set the output. 0 for low, 1 for high. Anything else than 0 will set the high state
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.DigitalOutput.ToString">
            <summary>
            Get "High" when output is set to high, "Low" if set to low state
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalOutput.SensorName">
            <summary>
            Get the sensor name "Digital Output"
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.DigitalOutput.Port">
            <summary>
            Grove port
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.ISensor">
            <summary>
            Interface for a sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.ISensor.Value">
            <summary>
            Property to get the raw value of the sensor as an int
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.ISensor.ToString">
            <summary>
            Property to return the raw value of the sensort as a string
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.ISensor.SensorName">
            <summary>
            Gets the name of the sensor.
            </summary>
            <returns>The sensor name.</returns>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.ISensor.Port">
            <summary>
            Sensor port
            </summary>
            <returns>The sensor port</returns>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.Led">
            <summary>
            LedNormal class to control a normal led on a digital output
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Led.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Constructor of the normal Led class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Led.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort,System.Boolean)">
            <summary>
            Constructor of the normal Led class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
            <param name="inverted">If the led is inverted, off when level if high and off when level is low</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Led.SensorName">
            <summary>
            Get the sensor name "Led"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.LedPwm">
            <summary>
            LedPwm class to control led thru PWM
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.LedPwm.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Constructor for the LedPwm class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.LedPwm.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort,System.Byte)">
            <summary>
            Constructor for the LedPwm class
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
            <param name="duty">The duty cycle for the led, 100 = full bright, 0 = full dark</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.LedPwm.SensorName">
            <summary>
            Get the sensor name "Led PWM"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.LightSensor">
            <summary>
            LightSensor class for analogic luminosity sensors
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.LightSensor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.LightSensor"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.LightSensor.SensorName">
            <summary>
            Get the sensor name "Light Sensor"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.PotentiometerSensor">
            <summary>
            PotentiometerSensor class for analogic potentiometer sensors
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.PotentiometerSensor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.PotentiometerSensor"/>-
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.PotentiometerSensor.ToString">
            <summary>
            Get the value as a percent
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.PotentiometerSensor.SensorName">
            <summary>
            Get the sensor name "Potentiometer Sensor"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.Relay">
            <summary>
            Relay class to support relays
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Relay.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.Relay"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Relay.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.Relay"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
            <param name="inverted">If inverted, the relay is on when output is low and off when output is high</param>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Relay.On">
            <summary>
            Switch on the relay
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Relay.Off">
            <summary>
            Switch off the relay
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Relay.IsInverted">
            <summary>
            If inverted, the relay is on when output is low and off when output is high
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Relay.Value">
            <summary>
            Get/set the state of the relay, 0 for off, 1 for on. Wehn set, anything not 0 will be considered as on
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.Relay.ToString">
            <summary>
            Get "On" when relay if on and "Off" when relay is off
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.Relay.SensorName">
            <summary>
            Get the sensor name "Relay"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.SoundSensor">
            <summary>
            SoundSensor class to support analogic microphone sensors
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.SoundSensor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.SoundSensor"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.SoundSensor.SensorName">
            <summary>
            Get the sensor name "Sound Sensor"
            </summary>
        </member>
        <member name="T:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor">
            <summary>
            UltraSonicSensor class to support ultrasonis sensor types
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.Port">
            <summary>
            Grove port
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.#ctor(Iot.Device.GoPiGo3.GoPiGo,Iot.Device.GoPiGo3.Models.GrovePort)">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor"/>.
            </summary>
            <param name="goPiGo">The GoPiGo3 class</param>
            <param name="port">The Grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.Value">
            <summary>
            Return the raw value of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.ToString">
            <summary>
            Return the raw value  as a string of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.SupportedPorts">
            <summary>
            List the supported Grove ports for the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GoPiGo3.Sensors.UltraSonicSensor.SensorName">
            <summary>
            Get the sensor name "Ultrasonic Sensor"
            </summary>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.NanoPiR2sDriver">
            <summary>
            A GPIO driver for the NanoPi R2S
            </summary>
            <remarks>
            SoC: Rockchip RK3328
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.NanoPiR2sDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.NanoPiR2sDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.OrangePi4Driver">
            <summary>
            A GPIO driver for the Orange Pi 4/4B.
            </summary>
            <remarks>
            SoC: Rockchip RK3399
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.OrangePi4Driver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.OrangePi4Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.OrangePiLite2Driver">
            <summary>
            A GPIO driver for the Orange Pi Lite 2.
            </summary>
            <remarks>
            SoC: Allwinner H6 (sun50iw6p1)
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.OrangePiLite2Driver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.OrangePiLite2Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.OrangePiLiteDriver">
            <summary>
            A GPIO driver for the Orange Pi Lite.
            </summary>
            <remarks>
            SoC: Allwinner H3 (sun8iw7p1)
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.OrangePiLiteDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.OrangePiLiteDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.OrangePiZero2Driver">
            <summary>
            A GPIO driver for the Orange Pi Zero 2.
            </summary>
            <remarks>
            SoC: Allwinner H616 (sun50iw9p1)
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.OrangePiZero2Driver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.OrangePiZero2Driver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.OrangePiZeroDriver">
            <summary>
            A GPIO driver for the Orange Pi Zero.
            </summary>
            <remarks>
            SoC: Allwinner H2+ (sun8iw7p1)
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.OrangePiZeroDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.OrangePiZeroDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.PinState">
            <summary>
            Used to describe the pin status inside the driver.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.PinState.#ctor(System.Device.Gpio.PinMode)">
            <summary>
            Initialize <see cref="T:Iot.Device.Gpio.Drivers.PinState"/>.
            </summary>
            <param name="currentMode">Pin mode.</param>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.PinState.CurrentPinMode">
            <summary>
            Current pin mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.PinState.InUseByInterruptDriver">
            <summary>
            Is the pin used by the interrupt driver.
            </summary>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Rk3328Driver">
            <summary>
            A GPIO driver for Rockchip RK3328
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3328Driver.GpioRegisterAddresses">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3328Driver.GeneralRegisterFiles">
            <summary>
            General Register Files (GRF) address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3328Driver.ClockResetUnit">
            <summary>
            Clock and Reset Unit (CRU) address.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3328Driver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.Rk3328Driver"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3328Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3328Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3328Driver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Rk3399Driver">
            <summary>
            A GPIO driver for Rockchip RK3399
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3399Driver.GpioRegisterAddresses">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3399Driver.PmuGeneralRegisterFiles">
            <summary>
            PMU General Register Files (PMU GRF) address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3399Driver.PmuClockResetUnit">
            <summary>
            PMU Clock and Reset Unit (PMU CRU) address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3399Driver.GeneralRegisterFiles">
            <summary>
            General Register Files (GRF) address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Rk3399Driver.ClockResetUnit">
            <summary>
            Clock and Reset Unit (CRU) address.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3399Driver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.Rk3399Driver"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3399Driver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3399Driver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.Rk3399Driver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.RockchipDriver">
            <summary>
            A generic GPIO driver for Rockchip SoCs.
            </summary>
            <remarks>
            This is a generic GPIO driver for Rockchip SoCs.
            It can even drive the internal pins that are not drawn out.
            Before you operate, you must be clear about what you are doing.
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.RockchipDriver.GpioRegisterAddresses">
            <summary>
            Gpio register addresses.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.RockchipDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.RockchipDriver"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.#ctor(System.UInt32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.RockchipDriver"/>.
            </summary>
            <param name="gpioRegisterAddresses">Gpio register addresses (This can be found in the corresponding SoC datasheet).</param>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.MapPinNumber(System.Int32,System.Char,System.Int32)">
            <summary>
            Map pin number with port name to pin number in the driver's logical numbering scheme.
            </summary>
            <param name="gpioNumber">Number of GPIOs.</param>
            <param name="port">Port name, from 'A' to 'D'.</param>
            <param name="portNumber">Number of pins.</param>
            <returns>Pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockchipDriver.UnmapPinNumber(System.Int32)">
            <summary>
            Unmap pin number in the driver's logical numbering scheme to pin number with port name.
            </summary>
            <param name="pinNumber">Pin number in the driver's logical numbering scheme.</param>
            <returns>Pin number with port name.</returns>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.RockPi4bPlusDriver">
            <summary>
            A GPIO driver for the Rock Pi 4B Plus.
            </summary>
            <remarks>
            SoC: Rockchip RK3399
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.RockPi4bPlusDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.RockPi4bPlusDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Sun50iw2p1Driver">
            <summary>
            A GPIO driver for Allwinner H5.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw2p1Driver.CpuxPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw2p1Driver.CpusPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Sun50iw6p1Driver">
            <summary>
            A GPIO driver for Allwinner H6.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw6p1Driver.CpuxPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw6p1Driver.CpusPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Sun50iw9p1Driver">
            <summary>
            A GPIO driver for Allwinner H616.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw9p1Driver.CpuxPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun50iw9p1Driver.CpusPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.Sun8iw7p1Driver">
            <summary>
            A GPIO driver for Allwinner H2+/H3.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun8iw7p1Driver.CpuxPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.Sun8iw7p1Driver.CpusPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Gpio.Drivers.SunxiDriver">
            <summary>
            A generic GPIO driver for Allwinner SoCs.
            </summary>
            <remarks>
            This is a generic GPIO driver for Allwinner SoCs.
            It can even drive the internal pins that are not drawn out.
            Before you operate, you must be clear about what you are doing.
            </remarks>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.SunxiDriver.CpuxPortBaseAddress">
            <summary>
            CPUX-PORT base address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.SunxiDriver.CpusPortBaseAddress">
            <summary>
            CPUS-PORT base address.
            </summary>
        </member>
        <member name="P:Iot.Device.Gpio.Drivers.SunxiDriver.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.SunxiDriver"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Gpio.Drivers.SunxiDriver"/>.
            </summary>
            <param name="cpuxPortBaseAddress">CPUX-PORT base address (This can be find in the corresponding SoC datasheet).</param>
            <param name="cpusPortBaseAddress">CPUS-PORT base address (This can be find in the corresponding SoC datasheet).</param>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.MapPinNumber(System.Char,System.Int32)">
            <summary>
            Map pin number with port controller name to pin number in the driver's logical numbering scheme.
            </summary>
            <param name="portController">Port controller name, like 'A', 'C'.</param>
            <param name="port">Number of pins.</param>
            <returns>Pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="M:Iot.Device.Gpio.Drivers.SunxiDriver.UnmapPinNumber(System.Int32)">
            <summary>
            Unmap pin number in the driver's logical numbering scheme to pin number with port name.
            </summary>
            <param name="pinNumber">Pin number in the driver's logical numbering scheme.</param>
            <returns>Pin number with port name.</returns>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.GrovePi">
            <summary>
            Create a GrovePi class
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.GrovePi.DefaultI2cAddress">
            <summary>
            The default GrovePi I2C address is 0x04
            Other addresses can be use, see GrovePi documentation
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.GrovePi.MaxAdc">
            <summary>
            The maximum ADC, 10 bit so 1023 on GrovePi
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.GrovePi.GrovePiInfo">
            <summary>
            Contains the GrovePi key information
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            GrovePi constructor
            </summary>
            <param name="i2cDevice">The I2C device. Device address is 0x04</param>
            <param name="shouldDispose">True to dispose the I2C device when disposing GrovePi</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.GetFirmwareVersion">
            <summary>
            Get the firmware version
            </summary>
            <returns>GroovePi firmware version</returns>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.WriteCommand(Iot.Device.GrovePiDevice.Models.GrovePiCommand,Iot.Device.GrovePiDevice.Models.GrovePort,System.Byte,System.Byte)">
            <summary>
            Write a GrovePi command
            </summary>
            <param name="command">The GrovePi command</param>
            <param name="pin">The pin to write the command</param>
            <param name="param1">First parameter</param>
            <param name="param2">Second parameter</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.ReadCommand(Iot.Device.GrovePiDevice.Models.GrovePiCommand,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Read data from GrovePi
            </summary>
            <param name="command">The GrovePi command</param>
            <param name="pin">The pin to read</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.DigitalRead(Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Read a digital pin, equivalent of digitalRead on Arduino
            </summary>
            <param name="pin">The GroovePi pin to read</param>
            <returns>Returns the level either High or Low</returns>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.DigitalWrite(Iot.Device.GrovePiDevice.Models.GrovePort,System.Device.Gpio.PinValue)">
            <summary>
            Write a digital pin, equivalent of digitalWrite on Arduino
            </summary>
            <param name="pin">The GroovePi pin to read</param>
            <param name="pinLevel">High to put the pin high, Low to put the pin low</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.PinMode(Iot.Device.GrovePiDevice.Models.GrovePort,System.Device.Gpio.PinMode)">
            <summary>
            Setup the pin mode, equivalent of pinMod on Arduino
            </summary>
            <param name="pin">The GroovePi pin to setup</param>
            <param name="mode">THe mode to setup Intput or Output</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.AnalogRead(Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Read an analog value on a pin, equivalent of analogRead on Arduino
            </summary>
            <param name="pin">The GroovePi pin to read</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.GrovePi.AnalogWrite(Iot.Device.GrovePiDevice.Models.GrovePort,System.Byte)">
            <summary>
            Write an analog pin (PWM pin), equivalent of analogWrite on Arduino
            </summary>
            <param name="pin">The GroovePi pin to write</param>
            <param name="value">The value to write between 0 and 255</param>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Models.DhtType">
            <summary>
            Type of DHT sensors
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.DhtType.Dht11">
            <summary>DHT11</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.DhtType.Dht22">
            <summary>DHT22</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.DhtType.Dht21">
            <summary>DHT21</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.DhtType.Am2301">
            <summary>AM2301</summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Models.GrovePiCommand">
            <summary>
            GroovePi commands to read, write, setup pins and access special sensors
            Note that those commands are supported in most of the recent firmware with version higher than 1.2.1
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.DigitalRead">
            <summary>
            Digital read a pin, equivalent of digitalRead on Arduino
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.DigitalWrite">
            <summary>
            Digital write a pin, equivalent of digitalWrite on Arduino
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.AnalogRead">
            <summary>
            Analog read a pin, equivalent of analogRead on Arduino
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.AnalogWrite">
            <summary>
            Analog write a pin, equivalent of analogRead on Arduino
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.PinMode">
            <summary>
            Set the Pin moden, equivalent of pinMode on Arduino
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.UltrasonicRead">
            <summary>
            Ultrasonic sensor
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.Version">
            <summary>
            Get the version number
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.DhtTemp">
            <summary>
            DHT22 sensor
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarInitialization">
            <summary>
            Initialize the Led bar
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarOrientation">
            <summary>
            Set orientiation
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarLevel">
            <summary>
            Set level
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarSetOneLed">
            <summary>
            Set an individual led
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarToggleOneLed">
            <summary>
            Toggle an individual led
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LedBarSet">
            <summary>
            Set all leds
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.LetBarGet">
            <summary>
            Get the led status
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitInit">
            <summary>
            Initialize na 4 digit display
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitBrightness">
            <summary>
            Set brightness, not visible until next cmd
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitValue">
            <summary>
            Set numeric value without leading zeros
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitValueZeros">
            <summary>
            Set numeric value with leading zeros
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitIndividualDigit">
            <summary>
            Set individual digit
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitIndividualLeds">
            <summary>
            Set individual leds of a segment
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitScore">
            <summary>
            Set left and right values with colon
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitAnalogRead">
            <summary>
            Analog read for n seconds
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitAllOn">
            <summary>
            Entire display on
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePiCommand.FourDigitAllOff">
            <summary>
            Entire display off
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Models.Info">
            <summary>
            GrovePi info
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Models.Info.#ctor(System.Version)">
            <summary>
            Instantiate Info object.
            </summary>
            <param name="softwareVersion">Firmware version.</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Models.Info.Manufacturer">
            <summary>
            Manufacturer information
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Models.Info.Board">
            <summary>
            Board information
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Models.Info.SoftwareVersion">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Models.GrovePort">
            <summary>
            The supported Digital Grove Ports
            See README.md files for the exact location of each Port
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.AnalogPin0">
            <summary>Analog pin 0 (A0)</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.AnalogPin1">
            <summary>Analog pin (A1)</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.AnalogPin2">
            <summary>Analog pin (A2)</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin2">
            <summary>Digital pin 2</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin3">
            <summary>Digital pin 3</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin4">
            <summary>Digital pin 4</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin5">
            <summary>Digital pin 5</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin6">
            <summary>Digital pin 6</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin7">
            <summary>Digital pin 7</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin8">
            <summary>Digital pin 8</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin14">
            <summary>Analog Pin A0 used as Digital Pin</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin15">
            <summary>Analog Pin A1 used as Digital Pin</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Models.GrovePort.DigitalPin16">
            <summary>This is Analog Pin A2 used as Digital Pin</summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.AnalogSensor">
            <summary>
            AnalogSensor is a generic analog sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.SupportedPorts">
            <summary>
            Only Analogic ports are supported
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.AnalogSensor._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.MaxAdc">
            <summary>
            On GrovePi, ADC is 1023
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            AnalogSensor constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.Value">
            <summary>
            Get the measurement from 0 to MaxAdc
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.ToString">
            <summary>
            Returns the measurement as a string
            </summary>
            <returns>Returns the measurement as a string</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.ValueAsPercent">
            <summary>
            Get the value as a percentage from 0 to 100
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.AnalogSensor.SensorName">
            <summary>
            Get the namme Analog Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.Button">
            <summary>
            Button is a generic digital button class
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Button.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Button constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Button.ToString">
            <summary>
            Returns "Pressed" then button is pressed, "Not pressed" otherwise
            </summary>
            <returns>Returns "Pressed" then button is pressed, "Not pressed" otherwise</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Button.SensorName">
            <summary>
            Get the name Button
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.Buzzer">
            <summary>
            Buzzer is a generic buzzer class
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Buzzer.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Buzzer constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Buzzer.SensorName">
            <summary>
            Get the name Buzzer
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.DhtSensor">
            <summary>
            DhtSensor supports DHT familly sensors
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.SupportedPorts">
            <summary>
            Only Digital ports including the analogic sensors (A0 = D14, A1 = D15, A2 = D16)
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.DhtSensor._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DhtSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort,Iot.Device.GrovePiDevice.Models.DhtType)">
            <summary>
            Initialize the DHT Sensor class
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
            <param name="dhtType">The DHT type</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.DhtType">
            <summary>
            Get the type of DHT sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.Value">
            <summary>
            Get an array of 2 double
            First is the temperature in degree Celsius
            Second is the relative humidity from 0.0 to 100.0
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DhtSensor.Read">
            <summary>
            You need to read the sensorbefore getting the value
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DhtSensor.ToString">
            <summary>
            Returns the temperature and humidity in a formated way
            </summary>
            <returns>Returns the temperature and humidity in a formated way</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.LastTemperatureInFarenheit">
            <summary>
            Get the last temperature measured in Farenheit
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.LastTemperature">
            <summary>
            Get the last temperature measured in Celsius
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.LastRelativeHumidity">
            <summary>
            Get the last measured relative humidy from 0.0 to 100.0
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DhtSensor.SensorName">
            <summary>
            Get the name of the DHT sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.DigitalInput">
            <summary>
            DigitalInput is a generic calss for digital input
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalInput.SupportedPorts">
            <summary>
            Only Digital ports including the analog sensors (A0 = D14, A1 = D15, A2 = D16)
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DigitalInput.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            DigitalInput constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalInput.Value">
            <summary>
            Get the pin level, either high either low
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DigitalInput.ToString">
            <summary>
            Returns the value as a string
            </summary>
            <returns>Returns the value as a string</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalInput.SensorName">
            <summary>
            Get the name Digital Input
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalInput.Port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.DigitalOutput">
            <summary>
            DigitalOutput class is a generic output class
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalOutput.SupportedPorts">
            <summary>
            Only Digital ports including the analogic sensors (A0 = D14, A1 = D15, A2 = D16)
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.DigitalOutput._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DigitalOutput.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            DigitalOutput constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalOutput.Value">
            <summary>
            Get/Set the pin level to either high, either low
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.DigitalOutput.ToString">
            <summary>
            Returns the pin level as a string.
            </summary>
            <returns>Returns the pin level as a string</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.DigitalOutput.SensorName">
            <summary>
            Get the name Digital Output
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor">
            <summary>
            To support the grove Temperature sensor http://wiki.seeed.cc/Grove-Temperature_Sensor_V1.2
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Grove temperature sensor constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor.Temperature">
            <summary>
            Get the temperature in Celsius
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor.TemperatureInFarenheit">
            <summary>
            Get the temperature in Farenheit
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor.ToString">
            <summary>
            Returns the temperature formated in Celsius.
            </summary>
            <returns>Returns the temperature formated in Celsius</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.GroveTemperatureSensor.SensorName">
            <summary>
            Get the name Grove Temperature Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.ISensor`1">
            <summary>
            Interface for a sensor
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.ISensor`1.Value">
            <summary>
            Property to get the raw value of the sensor as an int
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.ISensor`1.ToString">
            <summary>
            Returns the raw value of the sensort as a formated string
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.ISensor`1.SensorName">
            <summary>
            Gets the name of the sensor.
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.ISensor`1.Port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.Led">
            <summary>
            Led class for simple Led
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Led.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Led constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Led.ToString">
            <summary>
            Returns On if the led is on, Off otherwise.
            </summary>
            <returns>Returns On if the led is on, Off otherwise</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Led.SensorName">
            <summary>
            Get the name Led
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.LedBarOrientation">
            <summary>
            The led bar orientation
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.LedBarOrientation.RedToGreen">
            <summary>Red to green</summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.LedBarOrientation.GreenToRed">
            <summary>Green to red</summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.LedBar">
            <summary>
            LedBar class to support grove LedBar http://wiki.seeedstudio.com/Grove-LED_Bar/
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LedBar.SupportedPorts">
            <summary>
            Only Digital ports only but you can't create more than 4 bars as each bar is using 2 Pins
            So you have to have at least 1 Grove Port empty between 2 bars
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.LedBar._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            LedBar constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort,Iot.Device.GrovePiDevice.Sensors.LedBarOrientation)">
            <summary>
            LedBar constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
            <param name="orientation">Orientation, Green to red is default</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LedBar.Orientation">
            <summary>
            Get/Set the Led bar orientation
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LedBar.Value">
            <summary>
            Get/Set the level from 0 (no led on) to 10 (all leds on)
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.SetOneLed(System.Byte,System.Boolean)">
            <summary>
            Set one led
            </summary>
            <param name="led">The led number from 0 to 10</param>
            <param name="status">true for on, false for off</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.SetAllLeds(System.Int32)">
            <summary>
            Set all leds to either on or off by setting 1 as byte for on
            0 for off. lowser bit is led 0
            </summary>
            <param name="leds">Pixel array, 1 bit for each LED</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.GetAllLeds">
            <summary>
            Get the status of all leds
            </summary>
            <returns>Returns all leds status in an int, lower bit is led 0, 1 is on, 0 is off</returns>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.ToggleLeds(System.Byte)">
            <summary>
            Toggle the state of a led
            </summary>
            <param name="led">The led from 0 to 10</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedBar.ToString">
            <summary>
            Returns the Level formatted
            </summary>
            <returns>Returns the LED Level formatted</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LedBar.SensorName">
            <summary>
            Get the name Led Bar
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.LedPwm">
            <summary>
            LedPwm class to add PWM on a Led
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedPwm.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            LedPwm constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LedPwm.ToString">
            <summary>
            Returns the duty cycle as percentage from 0 % to 100 %
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LedPwm.SensorName">
            <summary>
            Get the name Led PWM
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.LightSensor">
            <summary>
            LightSensor class for analogic luminosity sensors
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.LightSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Light sensor constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.LightSensor.SensorName">
            <summary>
            Get the name Light Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.PotentiometerSensor">
            <summary>
            Potentiometer sensor
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PotentiometerSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Potentiometer sensor constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PotentiometerSensor.ToString">
            <summary>
            Returns the value as a percent from 0 % to 100 %
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PotentiometerSensor.SensorName">
            <summary>
            Get the name Potentiometer Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.PwmOutput">
            <summary>
            PwmOutput class to support hardware PWM on PWM hardware enabled pins
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PwmOutput.SupportedPorts">
            <summary>
            Only Digital PWM are supported
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.PwmOutput._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PwmOutput.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            PwmOutput constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PwmOutput.Value">
            <summary>
            For GrovePi, Value is same as Duty
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PwmOutput.Duty">
            <summary>
            Get/set the PWM duty to use to generate the sound from 0 to 100
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PwmOutput.Start">
            <summary>
            Starts the PWM duty
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PwmOutput.Stop">
            <summary>
            Stop the PWM duty
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.PwmOutput.ToString">
            <summary>
            Returns the duty in a formated string
            </summary>
            <returns>Returns the duty in a formated string</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PwmOutput.ValueAsPercent">
            <summary>
            Get the duty cycle as a persentage
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.PwmOutput.SensorName">
            <summary>
            Get the name PWM Output
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.Relay">
            <summary>
            Relay module
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Relay.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            Relay constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Relay.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort,System.Boolean)">
            <summary>
            Relay constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
            <param name="inverted">If inverted, the relay is on when output is low and off when output is high</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Relay.IsOn">
            <summary>
            True when the relay is on
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Relay.On">
            <summary>
            Switch on the relay
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Relay.Off">
            <summary>
            Switch off the relay
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Relay.IsInverted">
            <summary>
            If inverted, the relay is on when output is low and off when output is high
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Relay.Value">
            <summary>
            Get/set the state of the relay, 0 for off, 1 for on. Wehn set, anything not 0 will be considered as on
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.Relay.ToString">
            <summary>
            Get "On" when relay if on and "Off" when relay is off
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.Relay.SensorName">
            <summary>
            Get the name Relay
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.SoundSensor">
            <summary>
            SoundSensor class to support basic Grove microphones
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.SoundSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            SoundSensor constructor.
            </summary>
            <param name="grovePi">The GoPiGo3 class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.SoundSensor.SensorName">
            <summary>
            Get the name Sound Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor">
            <summary>
            UltrasonicSensor class to support ultrasonic Grove sensors
            </summary>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor.SupportedPorts">
            <summary>
            Only Digital ports including the analogic sensors (A0 = D14, A1 = D15, A2 = D16)
            </summary>
        </member>
        <member name="F:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor._port">
            <summary>
            grove sensor port
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor.#ctor(Iot.Device.GrovePiDevice.GrovePi,Iot.Device.GrovePiDevice.Models.GrovePort)">
            <summary>
            UltrasonicSensor constructor
            </summary>
            <param name="grovePi">The GrovePi class</param>
            <param name="port">The grove Port, need to be in the list of SupportedPorts</param>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor.Value">
            <summary>
            Get the distance in centimeter
            if -1, then you have an error
            </summary>
        </member>
        <member name="M:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor.ToString">
            <summary>
            Returns the distance formatted in centimeters.
            </summary>
            <returns>Returns the distance formatted in centimeters</returns>
        </member>
        <member name="P:Iot.Device.GrovePiDevice.Sensors.UltrasonicSensor.SensorName">
            <summary>
            Get the name Ultrasonic Sensor
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.IPointingDevice">
            <summary>
            Interface representing a (virtual) pointing device.
            </summary>
        </member>
        <member name="P:Iot.Device.Gui.IPointingDevice.AbsoluteCoordinates">
            <summary>
            Returns true if this device expects absolute coordinates, false if it requires relative coordinates
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.MoveTo(System.Int32,System.Int32)">
            <summary>
            Move the cursor to the given position
            </summary>
            <param name="x">X position of cursor</param>
            <param name="y">Y position of cursor</param>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.MoveTo(System.Drawing.Point)">
            <summary>
            Move the cursor to the given position
            </summary>
            <param name="point">Absolute position on screen to move cursor to</param>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.MoveBy(System.Int32,System.Int32)">
            <summary>
            Move the cursor by the given amount
            </summary>
            <param name="x">Move by this amount in x</param>
            <param name="y">Move by this amount in y</param>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.Click(Iot.Device.Gui.MouseButton)">
            <summary>
            Click once with the given buttons
            </summary>
            <param name="buttons">Button(s) to press</param>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.GetPosition">
            <summary>
            Returns the current position (always absolute)
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.ButtonDown(Iot.Device.Gui.MouseButton)">
            <summary>
            Press (and start holding) the given buttons
            </summary>
            <param name="buttons">Buttons to press</param>
        </member>
        <member name="M:Iot.Device.Gui.IPointingDevice.ButtonUp(Iot.Device.Gui.MouseButton)">
            <summary>
            Release the given buttons
            </summary>
            <param name="buttons">Buttons to release</param>
        </member>
        <member name="T:Iot.Device.Gui.MouseButton">
            <summary>
            Mouse buttons
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.MouseButton.None">
            <summary>
            No button pressed
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.MouseButton.Left">
            <summary>
            The left button is pressed
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.MouseButton.Right">
            <summary>
            The right mouse button is pressed
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.MouseButton.Middle">
            <summary>
            The middle mouse button is pressed
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.MouseClickSimulatorUInputAbsolute">
            <summary>
            A mouse click simulator that uses /dev/uinput for simulating a touch screen (basically a mouse, but with absolute coordinates)
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputAbsolute.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct an instance of this class
            </summary>
            <param name="width">Width of device</param>
            <param name="height">Height of device</param>
        </member>
        <member name="P:Iot.Device.Gui.MouseClickSimulatorUInputAbsolute.AbsoluteCoordinates">
            <summary>
            Always returns true for this device (this could be easily rewritten to support both, though)
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputAbsolute.MoveTo(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputAbsolute.MoveMouseTo(System.Drawing.Point)">
            <summary>
            Move the mouse to the given position (absolute)
            </summary>
            <param name="pt">Point to move the mouse to</param>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.GetPosition">
            <summary>
            Returns nothing useful
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.Click(Iot.Device.Gui.MouseButton)">
            <summary>
            Clicks the mouse at the given position using a set of buttons
            </summary>
            <param name="buttons">Button to click</param>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.ButtonDown(Iot.Device.Gui.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.ButtonUp(Iot.Device.Gui.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputBase.Dispose">
            <summary>
            Closes the device
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.MouseClickSimulatorUInputRelative">
            <summary>
            A mouse click simulator that uses /dev/uinput for simulating a mouse with relative coordinates
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputRelative.#ctor">
            <summary>
            Construct an instance of this class
            </summary>
        </member>
        <member name="P:Iot.Device.Gui.MouseClickSimulatorUInputRelative.AbsoluteCoordinates">
            <summary>
            Always returns false for this device
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.MouseClickSimulatorUInputRelative.MoveTo(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Gui.ScreenCapture">
            <summary>
            A class that takes screenshots.
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.#ctor">
            <summary>
            Creates a new instance of the ScreenCapture class
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.GetScreenContents(System.Drawing.Rectangle)">
            <summary>
            Gets the contents of a section of the screen
            </summary>
            <returns>An image</returns>
            <exception cref="T:System.NotSupportedException">No image can currently be retrieved (may happen e.g. when the safe desktop is shown or the application has otherwise
            no access to the Gui)</exception>
            <exception cref="T:System.PlatformNotSupportedException">This operation is not supported on the current platform</exception>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.GetScreenContents">
            <summary>
            Gets the contents of the screen
            </summary>
            <returns>An image. Returns null if no image can currently be retrieved (may happen e.g. when the safe desktop is shown)</returns>
            <exception cref="T:System.NotSupportedException">No image can currently be retrieved (may happen e.g. when the safe desktop is shown or the application has otherwise
            no access to the Gui)</exception>
            <exception cref="T:System.PlatformNotSupportedException">This operation is not supported on the current platform</exception>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.ScreenSize">
            <summary>
            Returns the size of the virtual desktop.
            This returns the full size of the virtual desktop, which might span multiple screens
            </summary>
            <returns>A rectangle with the size of all screens</returns>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.Dispose(System.Boolean)">
            <summary>
            Cleans internal structures
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.ScreenCapture.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Gui.VirtualPointingDevice">
            <summary>
            Supports creation of virtual pointing devices for various operating systems
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.VirtualPointingDevice.CreateRelative">
            <summary>
            Create a pointing device that uses relative coordinates (e.g. to simulate a traditional mouse or a joystick)
            </summary>
            <returns>A pointing device</returns>
            <exception cref="T:System.NotImplementedException">This operation is not currently implemented</exception>
            <exception cref="T:System.PlatformNotSupportedException">The operation is not supported on this platform</exception>
        </member>
        <member name="M:Iot.Device.Gui.VirtualPointingDevice.CreateAbsolute(System.Int32,System.Int32)">
            <summary>
            Create a pointing device that uses absolute coordinates (e.g. to simulate a touchscreen)
            </summary>
            <param name="width">Width of the input area (screen size)</param>
            <param name="height">Height of the input area (screen size)</param>
            <returns>A pointing device</returns>
            <remarks>
            To obtain the size of the virtual screen <see cref="M:Iot.Device.Gui.ScreenCapture.ScreenSize"/> can be used.
            </remarks>
            <exception cref="T:System.NotImplementedException">This operation is not currently implemented</exception>
            <exception cref="T:System.PlatformNotSupportedException">The operation is not supported on this platform</exception>
        </member>
        <member name="T:Iot.Device.Gui.WindowsMouseSimulator">
            <summary>
            Simulates a touch device on Windows
            </summary>
        </member>
        <member name="P:Iot.Device.Gui.WindowsMouseSimulator.AbsoluteCoordinates">
            <summary>
            Returns true for this device
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.MoveTo(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.MoveTo(System.Drawing.Point)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.Click(Iot.Device.Gui.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.GetPosition">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.ButtonDown(Iot.Device.Gui.MouseButton)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Gui.WindowsMouseSimulator.ButtonUp(Iot.Device.Gui.MouseButton)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.uinput_setup">
            <summary>
            Structure to set up an input device
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.input_event">
            <summary>
            Structure for an event of an input device
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.input_absinfo">
             <summary>
             struct input_absinfo - used by EVIOCGABS/EVIOCSABS ioctls
            
             Note that input core does not clamp reported values to the
             [minimum, maximum] limits, such task is left to userspace.
            
             The default resolution for main axes (ABS_X, ABS_Y, ABS_Z)
             is reported in units per millimeter (units/mm), resolution
             for rotational axes (ABS_RX, ABS_RY, ABS_RZ) is reported
             in units per radian.
             When INPUT_PROP_ACCELEROMETER is set the resolution changes.
             The main axes (ABS_X, ABS_Y, ABS_Z) are then reported in
             units per g (units/g) and in units per degree per second
             (units/deg/s) for rotational axes (ABS_RX, ABS_RY, ABS_RZ).
             </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.value">
            <summary>
            Latest reported value for the axis
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.minimum">
            <summary>
            Minimum value for the axis
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.maximum">
            <summary>
            Maximum value for the axis
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.fuzz">
            <summary>
            specifies fuzz value that is used to filter noise from
            the event stream.
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.flat">
            <summary>
            values that are within this value will be discarded by
            joydev interface and reported as 0 instead.
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.input_absinfo.resolution">
            <summary>
            specifies resolution for the values reported for the axis.
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.uinput_abs_setup">
            <summary>
            Structure used to set up an absolute pointing device
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.X11">
            <summary>
            Name of the X11 dynamic link library. Install with `sudo apt install libx11-dev` if not present.
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XOpenDisplay(System.Byte*)">
            <summary>
            Opens the display and returns an image pointer
            </summary>
            <param name="displayName">The display name (can be null)</param>
            <returns>The raw image pointer. To get the image data, use <see cref="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)"/>. The raw pointer is required
            in the call to <see cref="M:Iot.Device.Gui.InteropGui.XDestroyImage(System.IntPtr)"/></returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XOpenDisplay(System.String)">
            <summary>
            Opens a named display
            </summary>
            <param name="displayName">Display name, or null for the default display</param>
            <returns>A display handle</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XOpenDisplay">
            <summary>
            Opens a handle to the primary X11 display
            </summary>
            <returns></returns>
            <exception cref="T:System.DllNotFoundException"></exception>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XCloseDisplay(System.IntPtr)">
            <summary>
            Closes a handle to the X11 display adapter
            </summary>
            <param name="display">The display handle</param>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XDefaultRootWindow(System.IntPtr)">
            <summary>
            Gets the X11 root window (usually the desktop)
            </summary>
            <param name="display">The display to use</param>
            <returns>A handle to a window</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XGetWindowAttributes(System.IntPtr,Iot.Device.Gui.InteropGui.Window,Iot.Device.Gui.InteropGui.XWindowAttributes@)">
            <summary>
            Retrieves window attributes
            </summary>
            <param name="display">The display to operate on</param>
            <param name="w">The window handle to use</param>
            <param name="window_attributes_return">Out: A window attribute structure</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.GetWindowDescription(System.IntPtr,Iot.Device.Gui.InteropGui.Window)">
            <summary>
            Returns an user-readable description of a window, for debugging purposes
            </summary>
            <param name="display">The display handle</param>
            <param name="w">The window handle</param>
            <returns>A string containing name and size of the given window</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XGetPixel(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Gets the color of a pixel in an image
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XDestroyImage(System.IntPtr)">
            <summary>
            Free the image.
            </summary>
            <param name="image">Raw image pointer</param>
            <returns>Error code</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XFree(Iot.Device.Gui.InteropGui.XImage)">
            <summary>
            Free an image created by <see cref="M:Iot.Device.Gui.InteropGui.XGetImage(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/>
            </summary>
            <param name="image">The image handle to dispose</param>
            <returns>Result code</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XGetImage(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Gets an image of the current display/window
            </summary>
            <param name="display">Display to operate on</param>
            <param name="w">Window handle</param>
            <param name="x">Left edge of window portion to grab</param>
            <param name="y">Top edge of window portion to grab</param>
            <param name="width">Width of area to grab</param>
            <param name="height">Height of area to grab</param>
            <param name="plane_mask">Mask of image planes to get. Normally <see cref="F:Iot.Device.Gui.InteropGui.AllPlanes"/></param>
            <param name="format">Image format, normally <see cref="F:Iot.Device.Gui.InteropGui.ZPixmap"/></param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XQueryPointer(System.IntPtr,Iot.Device.Gui.InteropGui.Window,Iot.Device.Gui.InteropGui.Window@,Iot.Device.Gui.InteropGui.Window@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.UInt32@)">
            <summary>
            Queries the mouse pointer
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XSendEvent(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Boolean,System.Int32,Iot.Device.Gui.InteropGui.XButtonEvent@)">
            <summary>
            Send an event to the window message queue
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XSendEvent(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Boolean,System.Int32,Iot.Device.Gui.InteropGui.XMotionEvent@)">
            <summary>
            Send an event to the window message queue
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XFlush(System.IntPtr)">
            <summary>
            Flush all commands to the display
            </summary>
            <param name="display">The display handle</param>
            <returns>Error return</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XWindowEvent(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32,Iot.Device.Gui.InteropGui.XButtonEvent@)">
            <summary>
            Queries for button press events in the event handler queue
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XWindowEvent(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32,Iot.Device.Gui.InteropGui.XMotionEvent@)">
            <summary>
            Queries for mouse move events in the event handler queue
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XCreateSimpleWindow(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            A method to create a very simplistic window
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XSelectInput(System.IntPtr,Iot.Device.Gui.InteropGui.Window,System.Int32)">
            <summary>
            Enable handling of certain event types by the given window
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XMapWindow(System.IntPtr,Iot.Device.Gui.InteropGui.Window)">
            <summary>
            Make sure the window is visible
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XWarpPointer(System.IntPtr,Iot.Device.Gui.InteropGui.Window,Iot.Device.Gui.InteropGui.Window,System.Int32,System.Int32,System.UInt32,System.UInt32,System.Int32,System.Int32)">
            <summary>
            Transform mouse positions between windows
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XPeekEvent(System.IntPtr,Iot.Device.Gui.InteropGui.XEvent@)">
            <summary>
            Look at the next event without actually consuming it
            </summary>
            <param name="display">The display to use</param>
            <param name="event_return">The next event in the queue</param>
            <returns>Error return</returns>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XUnmapWindow(System.IntPtr,Iot.Device.Gui.InteropGui.Window)">
            <summary>
            Hide the given window
            </summary>
        </member>
        <member name="M:Iot.Device.Gui.InteropGui.XDestroyWindow(System.IntPtr,Iot.Device.Gui.InteropGui.Window)">
            <summary>
            Destroy a window and clear its resources
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.XWindowAttributes">
            <summary>
            Structure with window attributes
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.XImage">
            <summary>
            Structure representing an image in the X11 world
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.ImageFuncs">
            <summary>
            Image function callbacks
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.Window">
            <summary>
            A handle to an X11 window
            </summary>
        </member>
        <member name="F:Iot.Device.Gui.InteropGui.Window.handle">
            <summary>
            This must be the first and only non-static member of this class!
            </summary>
        </member>
        <member name="T:Iot.Device.Gui.InteropGui.XEvent">
            <summary>
            Union of the above (add more if you need to have other events, such as keyboard)
            </summary>
            <remarks>
            Note that this is an union. All members start at offset 0, and therefore also the different event types include the type field.
            </remarks>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor">
            <summary>
            This class connects to a running instance of OpenHardwareMonitor and reads out all available values.
            This works only if OpenHardwareMonitor (https://openhardwaremonitor.org/) is currently running.
            While the tool needs to be run with elevated permissions, the application using this binding does not.
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.OpenHardwareMonitor.DefaultMonitorInterval">
            <summary>
            This is the monitoring thread interval. All updates will be done in a multiple of this value.
            </summary>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.UnitCreator">
            <summary>
            A delegate that crates an instance of a quantity from a value
            </summary>
            <param name="value">Value to convert</param>
            <returns>A Quantity instance</returns>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.OnNewValue">
            <summary>
            Event that gets invoked when a value is updated
            </summary>
            <param name="sensorToMonitor">Sensor that has an updated value</param>
            <param name="value">New value for the sensor</param>
            <param name="timeSinceUpdate">Time since the last update of this sensor</param>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.#ctor">
            <summary>
            Constructs a new instance of this class.
            The class can be constructed even if no sensors are available or OpenHardwareMonitor is not running (yet).
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The operating system is not Windows.</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.#ctor(Iot.Device.HardwareMonitor.OpenHardwareMonitorTransport,System.String,System.Int32)">
            <summary>
            Constructs a new instance of this class using a specific transport protocol
            The class can be constructed even if no sensors are available or OpenHardwareMonitor is not running (yet).
            </summary>
            <param name="transport">The transport protocol to use. WMI is for OpenHardwareMonitor 0.9 and below, from OpenHardwareMonitor 0.10 and above,
            HTTP is used.</param>
            <param name="host">Optional host name for connection</param>
            <param name="port">Network port</param>
            <exception cref="T:System.PlatformNotSupportedException"></exception>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.UpdateStrategy">
            <summary>
            Selects the sensor update strategy.
            Default is <see cref="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.PerSensor"/> for WMI, <see cref="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.SynchronousAfterTimeout"/> for HTTP.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.UpdateSensors(System.Boolean)">
            <summary>
            Re-reads the sensor tree. Updates all values and the list of sensors.
            You should invalidate all cached <see cref="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor"/> and <see cref="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware"/> instances after using this with <paramref name="refreshSensorList"/>=true
            </summary>
            <paramref name="refreshSensorList">True to also update the list of sensors. False to only update the values. If false, new sensors will not be visible
            (e.g. after inserting a thumb drive)</paramref>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringInterval">
            <summary>
            The minimum monitoring interval.
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.LogicalProcessors">
            <summary>
            Number of logical processors in the system
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.GetSensorList">
            <summary>
            Query the list of all available sensors.
            </summary>
            <returns>A list of <see cref="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor"/> instances. May be empty.</returns>
            <exception cref="T:System.Management.ManagementException">The WMI objects required are not available. Is OpenHardwareMonitor running?</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.GetHardwareComponents">
            <summary>
            Returns a list of hardware components, such as "CPU", "GPU" or "Mainboard"
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.GetSensorList(Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware)">
            <summary>
            Get the list of sensors for a specific piece of hardware
            </summary>
            <param name="forHardware">The module that should be queried</param>
            <returns>A list of sensors</returns>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.TryGetAverageCpuTemperature(UnitsNet.Temperature@)">
            <summary>
            Gets the average CPU temperature (averaged over all CPU sensors / cores)
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.TryGetAverageGpuTemperature(UnitsNet.Temperature@)">
            <summary>
            Gets the average GPU temperature (averaged over all GPU sensors / cores)
            </summary>
            <param name="temperature">The average GPU temperature</param>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.GetCpuLoad">
            <summary>
            Gets the overall CPU Load
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.TryGetAverage``1(Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware,``0@)">
            <summary>
            Tries to calculate the average of a set of sensors.
            </summary>
            <typeparam name="T">Type of value to query (i.e. Load, Power)</typeparam>
            <param name="hardware">The hardware type (i.e. CPU)</param>
            <param name="average">Gets the returned quantity</param>
            <returns>True if at least one matching quantity was found</returns>
            <exception cref="T:System.NotSupportedException">There were multiple sensors found, but they return different units (i.e. CPU temperature is
            reported as Celsius for some cores and Fahrenheit for others)</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.StartMonitoring(Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor,System.TimeSpan,Iot.Device.HardwareMonitor.OpenHardwareMonitor.OnNewValue)">
            <summary>
            Starts monitoring a sensor.
            This will internally start a thread that calls the provided action each time the TimeSpan elapses.
            </summary>
            <param name="sensorToMonitor">The sensor to monitor. The same sensor may be registered multiple times</param>
            <param name="monitoringInterval">The monitoring interval. Will be rounded to the next 0.1s.</param>
            <param name="onNewValue">Action to perform each time</param>
            <returns>An identifier for the monitoring job</returns>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.StopMonitoring(Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringJob)">
            <summary>
            Stops monitoring of the given job.
            </summary>
            <param name="job">Monitoring job</param>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.StopAllMonitoring">
            <summary>
            Stops all monitoring.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.EnableDerivedSensors(UnitsNet.Area,System.TimeSpan)">
            <summary>
            Adds some special derived sensors.
            - For each power sensor, this adds another sensor that integrates power over time and so generated the energy used in W/h or
            more conveniently, Kilowatthours (this is the unit the electricity bill bases on)
            - Gives the heat flux for the primary CPU, using the given CPU die size (or a default value)
            </summary>
            <param name="cpuDieSize">Die size of your CPU, optional. Find your CPU on https://en.wikichip.org/ to find out. Note: This
            value is usually much smaller than the size of the physical CPU.</param>
            <param name="monitoringInterval">Monitoring interval for the derived sensors. Defaults to 500ms.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="monitoringInterval"/> is less than 0.</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.DisableDerivedSensors">
            <summary>
            Remove the derived sensors from the active list.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor">
            <summary>
            Represents a single sensor
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.#ctor(System.Management.ManagementObject,System.String,System.String,System.String,Iot.Device.HardwareMonitor.SensorType)">
            <summary>
            Create a sensor instance from a management object.
            This member is obsolete, use another constructor instead or a derived class.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.#ctor(System.String,System.String,System.String,Iot.Device.HardwareMonitor.SensorType)">
            <summary>
            Creates a sensor instance
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Name">
            <summary>
            Name of the sensor
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Identifier">
            <summary>
            Sensor identifier (device path)
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Parent">
            <summary>
            Sensor parent
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Value">
            <summary>
            Sets or gets the last value of the sensor. To get an updated value, use <see cref="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.TryGetValue(UnitsNet.IQuantity@)"/> instead.
            The setter is intended for implementations of derived sensors only.
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.SensorType">
            <summary>
            Kind of sensor
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Job">
            <summary>
            Job associated with updating this value
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.TryGetValue(UnitsNet.IQuantity@)">
            <summary>
            Attempt to query a value for the sensor
            </summary>
            <param name="value">Returned value</param>
            <returns>True if a value was available</returns>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.UpdateValue(System.Double@)">
            <summary>
            Read the value from the underlying transport. This is expected to be overridden by derived classes, unless they use
            <see cref="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Value"/> to set the content.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.TryGetValue``1(``0@)">
            <summary>
            Attempt to get a value of the provided type
            </summary>
            <typeparam name="T">The type of the quantity to return</typeparam>
            <param name="value">The returned value</param>
            <returns>True if a value of type T could be retrieved</returns>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.ToString">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware">
            <summary>
            Represents a piece of hardware
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Create an instance of this class
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.Name">
            <summary>
            Name of the object
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.Identifier">
            <summary>
            Device path
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.Parent">
            <summary>
            Parent in device path
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.Type">
            <summary>
            Type of resource
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware.ToString">
            <summary>
            Name of this instance
            </summary>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringJob">
            <summary>
            A job that monitors a particular sensor
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringJob.Sensor">
            <summary>
            Sensor this job operates on
            </summary>
        </member>
        <member name="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringJob.Interval">
            <summary>
            Update interval
            </summary>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitorTransport">
            <summary>
            Select the preferred transport protocol for the Hardware monitor
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.OpenHardwareMonitorTransport.Auto">
            <summary>
            Automatically choose a transport
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.OpenHardwareMonitorTransport.Wmi">
            <summary>
            Use the legacy WMI transport
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.OpenHardwareMonitorTransport.Http">
            <summary>
            Use HTTP transport
            </summary>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi">
            <summary>
            This class connects to a running instance of OpenHardwareMonitor and reads out all available values using WMI.
            This works only if OpenHardwareMonitor (https://openhardwaremonitor.org/) is currently running.
            While the tool needs to be run with elevated permissions, the application using this binding does not.
            The connection using WMI has proven to be unreliable (the WMI classes are sometimes just not visible), therefore
            OHM versions greater > 0.10.0 use a rest api instead.
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.#ctor">
            <summary>
            Constructs a new instance of this class.
            The class can be constructed even if no sensors are available or OpenHardwareMonitor is not running (yet).
            </summary>
            <exception cref="T:System.PlatformNotSupportedException">The operating system is not Windows.</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.GetSensorList">
            <summary>
            Query the list of all available sensors.
            </summary>
            <returns>A list of <see cref="T:Iot.Device.HardwareMonitor.OpenHardwareMonitor.Sensor"/> instances. May be empty.</returns>
            <exception cref="T:System.Management.ManagementException">The WMI objects required are not available. Is OpenHardwareMonitor running?</exception>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.GetHardwareComponents">
            <summary>
            Returns a list of hardware components, such as "CPU", "GPU" or "Mainboard"
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.GetSensorList(Iot.Device.HardwareMonitor.OpenHardwareMonitor.Hardware)">
            <summary>
            Get the list of sensors for a specific piece of hardware
            </summary>
            <param name="forHardware">The module that should be queried</param>
            <returns>A list of sensors</returns>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.SensorWmi">
            <summary>
            Represents a single Wmi sensor
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.SensorWmi.#ctor(System.Management.ManagementObject,System.String,System.String,System.String,Iot.Device.HardwareMonitor.SensorType)">
            <summary>
            Creates a sensor instance
            </summary>
        </member>
        <member name="M:Iot.Device.HardwareMonitor.OpenHardwareMonitorWmi.SensorWmi.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.SensorType">
            <summary>
            Designates a sensor type
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Unknown">
            <summary>
            Unknown sensor type
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Voltage">
            <summary>
            The sensor delivers a voltage
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Clock">
            <summary>
            The sensor delivers a clock speed (frequency)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Temperature">
            <summary>
            The sensor delivers a temperature
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Load">
            <summary>
            The sensor delivers the load percentage of a component
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Fan">
            <summary>
            The sensor is a fan
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Flow">
            <summary>
            The sensor measures flow (typically in a water cooling system)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Control">
            <summary>
            The sensor is used to control a device (i.e. fan speed)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Level">
            <summary>
            The sensor measures the usage level (i.e. disk usage)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Power">
            <summary>
            The sensor reports power
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Energy">
            <summary>
            The sensor reports energy used
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.HeatFlux">
            <summary>
            The sensor reports heat flux (thermal heat dissipation)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Current">
            <summary>
            The sensor reports electric current
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Data">
            <summary>
            The sensor delivers a data amount value (i.e free space on a drive)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.Throughput">
            <summary>
            The sensor reports data throughput (Data per Time)
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.TimeSpan">
            <summary>
            The sensor reports a duration
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorType.RawValue">
            <summary>
            The sensor reports an integer
            </summary>
        </member>
        <member name="T:Iot.Device.HardwareMonitor.SensorUpdateStrategy">
            <summary>
            Selects when the sensors get updated values
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.Unspecified">
            <summary>
            The setting has not been set
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.PerSensor">
            <summary>
            Each time a sensor's TryGetValue is called, a new value is selected.
            This is the default (and only supported option) for WMI
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.SynchronousAfterTimeout">
            <summary>
            All sensors are updated synchronously when the value is older than the <see cref="P:Iot.Device.HardwareMonitor.OpenHardwareMonitor.MonitoringInterval"/>.
            </summary>
        </member>
        <member name="F:Iot.Device.HardwareMonitor.SensorUpdateStrategy.SynchronousExplicit">
            <summary>
            All sensors are updated only when <see cref="M:Iot.Device.HardwareMonitor.OpenHardwareMonitor.UpdateSensors(System.Boolean)"/> is explicitly called
            </summary>
        </member>
        <member name="T:Iot.Device.Hcsr04.Hcsr04">
            <summary>
            HC-SR04 - Ultrasonic Ranging Module
            </summary>
        </member>
        <member name="P:Iot.Device.Hcsr04.Hcsr04.Distance">
            <summary>
            Gets the current distance, usual range from 2 cm to 400 cm.
            </summary>
        </member>
        <member name="M:Iot.Device.Hcsr04.Hcsr04.#ctor(System.Device.Gpio.GpioController,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the HC-SCR04 sonar.
            </summary>
            <param name="gpioController">GPIO controller related with the pins</param>
            <param name="triggerPin">Trigger pulse input.</param>
            <param name="echoPin">Trigger pulse output.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Hcsr04.Hcsr04.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinNumberingScheme)">
            <summary>
            Creates a new instance of the HC-SCR04 sonar.
            </summary>
            <param name="triggerPin">Trigger pulse input.</param>
            <param name="echoPin">Trigger pulse output.</param>
            <param name="pinNumberingScheme">Pin Numbering Scheme</param>
        </member>
        <member name="M:Iot.Device.Hcsr04.Hcsr04.GetDistance">
            <summary>
            Gets the current distance, usual range from 2 cm to 400 cm.
            </summary>
        </member>
        <member name="M:Iot.Device.Hcsr04.Hcsr04.TryGetDistance(UnitsNet.Length@)">
            <summary>
            Try to gets the current distance, , usual range from 2 cm to 400 cm
            </summary>
            <param name="result">Length</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Hcsr04.Hcsr04.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Hcsr501.Hcsr501">
            <summary>
            PIR Sensor HC-SR501
            </summary>
        </member>
        <member name="M:Iot.Device.Hcsr501.Hcsr501.#ctor(System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates a new instance of the HC-SCR501.
            </summary>
            <param name="outPin">OUT Pin</param>
            <param name="pinNumberingScheme">Pin Numbering Scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Hcsr501.Hcsr501.IsMotionDetected">
            <summary>
            If a motion is detected, return true.
            </summary>
        </member>
        <member name="M:Iot.Device.Hcsr501.Hcsr501.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Hcsr501.Hcsr501.Hcsr501ValueChangedHandle">
            <summary>
            Delegate used for <see cref="E:Iot.Device.Hcsr501.Hcsr501.Hcsr501ValueChanged"/> event
            </summary>
            <param name="sender">Object firing the event</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Iot.Device.Hcsr501.Hcsr501.Hcsr501ValueChanged">
            <summary>
            Triggering when HC-SR501 value changes
            </summary>
        </member>
        <member name="T:Iot.Device.Hcsr501.Hcsr501ValueChangedEventArgs">
            <summary>
            HC-SR501 Value Changed Event Args
            </summary>
        </member>
        <member name="P:Iot.Device.Hcsr501.Hcsr501ValueChangedEventArgs.PinValue">
            <summary>
            HC-SR501 OUT Pin Value
            </summary>
        </member>
        <member name="M:Iot.Device.Hcsr501.Hcsr501ValueChangedEventArgs.#ctor(System.Device.Gpio.PinValue)">
            <summary>
            Constructs Hcsr501ValueChangedEventArgs instance
            </summary>
            <param name="value">New value of pin</param>
        </member>
        <member name="T:Iot.Device.Hmc5883l.Gain">
            <summary>
            HMC5883L Gain Setting
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain1370">
            <summary>
            1370, recommended sensor field range: ±0.88 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain1090">
            <summary>
            1090, recommended sensor field range: ±1.3 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0820">
            <summary>
            820, recommended sensor field range: ±1.9 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0660">
            <summary>
            660, recommended sensor field range: ±2.5 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0440">
            <summary>
            440, recommended sensor field range: ±4.0 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0390">
            <summary>
            390, recommended sensor field range: ±4.7 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0330">
            <summary>
            330, recommended sensor field range: ±5.6 Ga
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Gain.Gain0230">
            <summary>
            230, recommended sensor field range: ±8.1 Ga
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.MeasurementConfiguration">
            <summary>
            Measurement configuration.
            This enum defines the measurement flow of the device, specifically whether or not to incorporate an applied bias to the sensor into the measurement.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.MeasurementConfiguration.Normal">
            <summary>
            Normal measurement configuration (default).
            In normal measurement configuration the device follows normal measurement flow.
            The positive and negative pins of the resistive load are left floating and high impedance.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.MeasurementConfiguration.PositiveBiasConfiguration">
            <summary>
            Positive bias configuration for X and Y axes, negative bias configuration for Z axis.
            In this configuration, a positive current is forced across the resistive load for X and Y axes, a negative current for Z axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.MeasurementConfiguration.NegativeBias">
            <summary>
            Negative bias configuration for X and Y axes, positive bias configuration for Z axis.
            In this configuration, a negative current is forced across the resistive load for X and Y axes, a positive current for Z axis.
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.MeasuringMode">
            <summary>
            The mode of HMC5883L measuring
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.MeasuringMode.Continuous">
            <summary>
            Continuous Measuring Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.MeasuringMode.Single">
            <summary>
            Single Measuring Mode (Measure only once. In this mode, OutputRate will be invalid.)
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.OutputRate">
            <summary>
            HMC5883L Typical Data Output Rate (Hz)
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate00_75">
            <summary>
            0.75 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate01_5">
            <summary>
            1.5 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate03">
            <summary>
            3 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate07_5">
            <summary>
            7.5 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate15">
            <summary>
            15 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate30">
            <summary>
            30 Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.OutputRate.Rate75">
            <summary>
            75 Hz
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.Register">
            <summary>
            Register of HMC5883L
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.Hmc5883l">
            <summary>
            3-Axis Digital Compass HMC5883L
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Hmc5883l.DefaultI2cAddress">
            <summary>
            HMC5883L Default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Hmc5883l.Hmc5883l.DirectionVector">
            <summary>
            HMC5883L Direction Vector
            </summary>
        </member>
        <member name="P:Iot.Device.Hmc5883l.Hmc5883l.Heading">
            <summary>
            HMC5883L Heading (DEG)
            </summary>
        </member>
        <member name="P:Iot.Device.Hmc5883l.Hmc5883l.DeviceStatus">
            <summary>
            HMC5883L Status
            </summary>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Hmc5883l.Gain,Iot.Device.Hmc5883l.MeasuringMode,Iot.Device.Hmc5883l.OutputRate,Iot.Device.Hmc5883l.SamplesAmount,Iot.Device.Hmc5883l.MeasurementConfiguration)">
            <summary>
            Initialize a new HMC5883L device connected through I2C
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="gain">Gain Setting</param>
            <param name="measuringMode">The Mode of Measuring</param>
            <param name="outputRate">Typical Data Output Rate (Hz)</param>
            <param name="samplesAmount">Number of samples averaged per measurement output</param>
            <param name="measurementConfig">Measurement configuration</param>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.Initialize">
            <summary>
            Initialize the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.ReadDirectionVector">
            <summary>
            Read raw data from HMC5883L
            </summary>
            <returns>Raw Data</returns>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.VectorToHeading(System.Numerics.Vector3)">
            <summary>
            Calculate heading
            </summary>
            <param name="vector">HMC5883L Direction Vector</param>
            <returns>Heading (DEG)</returns>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:Iot.Device.Hmc5883l.Hmc5883l.GetStatus">
            <summary>
            Reads device statuses.
            </summary>
            <returns>Device statuses</returns>
        </member>
        <member name="T:Iot.Device.Hmc5883l.SamplesAmount">
            <summary>
            Number of samples averaged (1 to 8) per measurement output.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.SamplesAmount.One">
            <summary>
            1 (Default) samples per measurement output.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.SamplesAmount.Two">
            <summary>
            2 samples per measurement output.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.SamplesAmount.Four">
            <summary>
            4 samples per measurement output.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.SamplesAmount.Eight">
            <summary>
            8 samples per measurement output.
            </summary>
        </member>
        <member name="T:Iot.Device.Hmc5883l.Status">
            <summary>
            The status of HMC5883L device
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Status.Ready">
            <summary>
            Ready Bit. Set when data is written to all six data registers. Cleared when device initiates a write to the data output
            registers, when in off mode, and after one or more of the data output registers are written to.
            When RDY bit is clear it shall remain cleared for a minimum of a 250 μs.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Status.Lock">
            <summary>
            Data output register lock. This bit is set when some but not all for of the six data output registers have been read.
            When this bit is set, the six data output registers are locked and any new data will not be placed in these register until
            one of four conditions are met: all six have been read or the mode changed, a POR is issued, the mode is changed, the measurement is changed.
            </summary>
        </member>
        <member name="F:Iot.Device.Hmc5883l.Status.RegulatorEnabled">
            <summary>
            Regulator Enabled Bit. This bit is set when the internal voltage regulator is enabled.
            This bit is cleared when the internal regulator is disabled.
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.ClockMode">
            <summary>
            Clock modes
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ClockMode.Secondary">
            <summary>
            Set secondary mode and clock source from external clock, the system clock input from OSC pin and synchronous signal input from SYN pin
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ClockMode.RcPrimary">
            <summary>
            Set primary mode and clock source from on-chip RC oscillator, the system clock output to OSC pin and synchronous signal output to SYN pin (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ClockMode.ExternalClockPrimary">
            <summary>
            Set primary mode and clock source from external clock, the system clock input from OSC pin and synchronous signal output to SYN pin
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.Command">
            <summary>
            Command Summary
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.SystemDisabled">
            <summary>
            Turn off both system oscillator and LED duty cycle generator (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.SystemEnabled">
            <summary>
            Turn on system oscillator
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.LedOff">
            <summary>
            Turn off LED duty cycle generator (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.LedOn">
            <summary>
            Turn on LED duty cycle generator
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.BlinkOff">
            <summary>
            Turn off blinking function (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.BlinkOn">
            <summary>
            Turn on blinking function
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.Secondary">
            <summary>
            Set secondary mode and clock source from external clock, the system clock input from OSC pin and synchronous signal input from SYN pin
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.RcPrimary">
            <summary>
            Set primary mode and clock source from on-chip RC oscillator, the system clock output to OSC pin and synchronous signal output to SYN pin (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.ExternalClockPrimary">
            <summary>
            Set primary mode and clock source from external clock, the system clock input from OSC pin and synchronous signal output to SYN pin
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.NMos8Com">
            <summary>
            N-MOS open drain output and 8 COM option (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.NMos16Com">
            <summary>
            N-MOS open drain output and 16 COM option
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PMos8Com">
            <summary>
            P-MOS open drain output and 8 COM option
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PMos16Com">
            <summary>
            P-MOS open drain output and 16 COM option
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty1">
            <summary>
            PWM 1/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty2">
            <summary>
            PWM 2/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty3">
            <summary>
            PWM 3/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty4">
            <summary>
            PWM 4/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty5">
            <summary>
            PWM 5/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty6">
            <summary>
            PWM 6/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty7">
            <summary>
            PWM 7/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty8">
            <summary>
            PWM 8/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty9">
            <summary>
            PWM 9/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty10">
            <summary>
            PWM 10/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty11">
            <summary>
            PWM 11/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty12">
            <summary>
            PWM 12/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty13">
            <summary>
            PWM 13/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty14">
            <summary>
            PWM 14/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty15">
            <summary>
            PWM 15/16 duty
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Command.PwmDuty16">
            <summary>
            PWM 16/16 duty (default)
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.ComOption">
            <summary>
            Com modes
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ComOption.NMos8Com">
            <summary>
            N-MOS open drain output and 8 COM option (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ComOption.NMos16Com">
            <summary>
            N-MOS open drain output and 16 COM option
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ComOption.PMos8Com">
            <summary>
            P-MOS open drain output and 8 COM option
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.ComOption.PMos16Com">
            <summary>
            P-MOS open drain output and 16 COM option
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.Ht1632">
            <summary>
            HT1632C
            32x8 and 24x16 LED Driver
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.Enabled">
            <summary>
            Set if system oscillator is on. (default is off)
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.LedOn">
            <summary>
            Set if LED duty cycle generator is on (default is off)
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.Blink">
            <summary>
            Set if blinking function is on (default is off)
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.ClockMode">
            <summary>
            Set clock mode (default is RC-Primary)
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.ComOption">
            <summary>
            Set COM option (default is N-MOS open drain output and 8 COM)
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632.PwmDuty">
            <summary>
            Set row PWM duty (1/16 to 16/16, default is 16)
            </summary>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632.#ctor(Iot.Device.Ht1632.Ht1632PinMapping,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            HT1632C 32x8 and 24x16 LED Driver
            </summary>
            <param name="pinMapping">The pin mapping to use by the binding.</param>
            <param name="gpioController">The GPIO Controller used for interrupt handling.</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632.WriteCommand(Iot.Device.Ht1632.Command[])">
            <summary>
            Command Mode
            </summary>
            <param name="commands">Commands to sent</param>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632.WriteData(System.Byte,System.Byte[])">
            <summary>
            WRITE Mode - Successive Address Writing
            </summary>
            <param name="address">Memory Address (MA) - 0b00_A6_A5_A4_A3_A2_A1_A0</param>
            <param name="data">Data (MA, MA+1, ...) - 0b0000_D0_D1_D2_D3</param>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Ht1632.Ht1632ImageSending">
            <summary>
            Extension for sending image
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.Ht1632ImageSending.BrightnessConvertor">
            <summary>
            Method for whether pixel is lit or not.
            </summary>
            <param name="pixel">Input pixel</param>
            <returns>True if lit.</returns>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632ImageSending.ShowImageWith8Com(Iot.Device.Ht1632.Ht1632,Iot.Device.Graphics.BitmapImage,Iot.Device.Ht1632.Ht1632ImageSending.BrightnessConvertor)">
            <summary>
            Show image with 8-Com mode
            </summary>
            <param name="ht1632">HT1632 device</param>
            <param name="image">Image to show. Width at least 8 pixels, height at least 32 pixels </param>
            <param name="brightnessConvertor">Method for whether pixel is lit or not. Use <see cref="M:Iot.Device.Ht1632.Ht1632ImageSending.LinearBrightnessConvertor(System.Drawing.Color)"/> if null.</param>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632ImageSending.ShowImageWith16Com(Iot.Device.Ht1632.Ht1632,Iot.Device.Graphics.BitmapImage,Iot.Device.Ht1632.Ht1632ImageSending.BrightnessConvertor)">
            <summary>
            Show image with 16-Com mode
            </summary>
            <param name="ht1632">HT1632 device</param>
            <param name="image">Image to show. Width at least 16 pixels, height at least 24 pixels </param>
            <param name="brightnessConvertor">Method for whether pixel is lit or not. Use <see cref="M:Iot.Device.Ht1632.Ht1632ImageSending.LinearBrightnessConvertor(System.Drawing.Color)"/> if null.</param>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632ImageSending.LinearBrightnessConvertor(System.Drawing.Color)">
            <summary>
            Lit if average value of RGB is greater than half.
            </summary>
            <param name="pixel">Input pixel</param>
            <returns>True if average value of RGB is greater than half.</returns>
        </member>
        <member name="T:Iot.Device.Ht1632.Ht1632PinMapping">
            <summary>
            Represents pin mapping for the Ht1632 binding
            </summary>
        </member>
        <member name="M:Iot.Device.Ht1632.Ht1632PinMapping.#ctor(System.Int32,System.Int32,System.Int32)">
            <param name="cs">Chip select input with pull-high resistor</param>
            <param name="wr">WRITE clock input with pull-high resistor</param>
            <param name="data">Serial data input or output with pull-high resistor</param>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632PinMapping.ChipSelect">
            <summary>
            Chip select input with pull-high resistor
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632PinMapping.WriteClock">
            <summary>
            WRITE clock input with pull-high resistor
            </summary>
        </member>
        <member name="P:Iot.Device.Ht1632.Ht1632PinMapping.SerialData">
            <summary>
            Serial data input or output with pull-high resistor
            </summary>
        </member>
        <member name="T:Iot.Device.Ht1632.Id">
            <summary>
            Mode ID
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Id.READ">
            <summary>
            READ Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Id.WRITE">
            <summary>
            WRITE Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Id.READ_MODIFY_WRITE">
            <summary>
            READ-MODIFY-WRITE Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ht1632.Id.COMMAND">
            <summary>
            Command Mode
            </summary>
        </member>
        <member name="T:Iot.Device.Hts221.Hts221">
            <summary>
            HTS221 - Capacitive digital sensor for relative humidity and temperature
            </summary>
        </member>
        <member name="M:Iot.Device.Hts221.Hts221.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Hts221 - Temperature and humidity sensor
            </summary>
        </member>
        <member name="P:Iot.Device.Hts221.Hts221.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Hts221.Hts221.Humidity">
            <summary>
            Relative humidity
            </summary>
        </member>
        <member name="M:Iot.Device.Hts221.Hts221.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Hx711.Hx711I2c">
            <summary>
            DFRobot KIT0176: I2C 1kg Weight Sensor Kit
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711I2c.DefaultI2cAddress">
            <summary>
            Default address for I2C, only use when pins A0 and A1 are set to 0.
            Otherwise use GetI2cAddress
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711I2c.DefaultOffset">
            <summary>
            Arbitrarily picked value for empty scale.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.Offset">
            <summary>
            Raw value telling where 0 is.
            It will be set to current weight when Tare function is used.
            Value passed must be a raw reading - use <see cref="M:Iot.Device.Hx711.Hx711I2c.GetRawReading"/>.
            This value does not have specific unit but is linearly correlated to weight reading.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.CalibrationScale">
            <summary>
            Value which scales raw units into grams.
            Weight in grams = (Raw Reading - Offset) / CalibrationScale.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.IgnoreCalibrationButton">
            <summary>
            When set to true, CAL button will not have any effect on the current calibration setting.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.IgnoreResetButton">
            <summary>
            When set to true, RST button will not change Offset (it won't Tare).
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.AutomaticCalibrationWeight">
            <summary>
            Sets the weight (in grams) used for automatic calibration.
            Value is only relevant when CAL button has been pressed.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.AutomaticCalibrationThreshold">
            <summary>
            Sets the minimum weight in grams which will trigger calibration after CAL button is pressed.
            This value should always be less than calibration weight.
            Value is only relevant when CAL button has been pressed.
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.SampleAveraging">
            <summary>
            Gets or sets the number of samples that will be taken and then averaged when performing a <see cref="M:Iot.Device.Hx711.Hx711I2c.GetWeight"/> operation.
            </summary>
            <remarks>
            <para>
            The default value is 20 samples.
            </para>
            <para>
            Larger value gives more accurate <see cref="M:Iot.Device.Hx711.Hx711I2c.GetWeight"/> reading but also increases time it takes for operation to complete.
            </para>
            </remarks>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711I2c.ReadWriteDelay">
            <summary>
            Gets or sets the delay after every read or write operation.
            </summary>
            <remarks>
            <para>
            The default value is 1ms.
            </para>
            <para>
            The delay has impact on the time it takes for a <see cref="M:Iot.Device.Hx711.Hx711I2c.GetWeight"/> operation to complete.
            </para>
            <para>
            Too small delay may cause ocassional or persistent reading errors.
            </para>
            </remarks>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Hx711I2c - DFRobot KIT0176: I2C 1kg Weight Sensor Kit
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.GetI2cAddress(System.Device.Gpio.PinValue,System.Device.Gpio.PinValue)">
            <summary>
            Gets I2C address depending on A0 and A1 pin settings.
            </summary>
            <param name="a0">Value of A0 pin.</param>
            <param name="a1">Value of A1 pin.</param>
            <returns>Address of the device.</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.Tare(System.Boolean)">
            <summary>
            Read current weight and use it as 0. Equivalent to pressing RST button.
            </summary>
            <param name="blinkLed">When set to true will also blink LED next to RST button.</param>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.ResetSensor">
            <summary>
            Re-initializes the sensor and sets arbitrarly chosen calibration values.
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.GetAutomaticCalibrationScale">
            <summary>
            Gets data from sensor with scale which was determined with automatic calibration made when CAL button was pressed.
            This value might differ from actual calibration scale used if no measurements have been made after CAL button was pressed.
            </summary>
            <returns>Calibration scale</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.StartCalibration">
            <summary>
            Equivalent to physically clicking CAL button.
            When CAL button is pressed or this method is called the LED turns orange
            then user needs to wait a bit (1-2 seconds) then place calibration weight.
            Use AutomaticCalibrationWeight to set weight you use for calibration.
            The calibration is finished when placed weight exceeds AutomaticCalibrationThreshold.
            After that orange LED flashes 3 times and turns off.
            It means calibration is successfully finished.
            If flashing doesn't happen and LED turns off it means calibration didn't succeed.
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.GetWeight">
            <summary>
            Gets weight reading. Tare should be called first.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.GetRawReading">
            <summary>
            Gets average raw reading.
            </summary>
            <returns>Raw reading value</returns>
            <remarks>
            <para>
            The <see cref="P:Iot.Device.Hx711.Hx711I2c.SampleAveraging"/> and <see cref="P:Iot.Device.Hx711.Hx711I2c.ReadWriteDelay"/> have direct effect on how long this operation takes to complete.
            </para>
            </remarks>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711I2c.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Hx711.ByteFormat">
            <summary>
            Byte order ("endianness") in an architecture
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.ByteFormat.Lsb">
            <summary>
            Less Significant Bit (aka Little-endian) byte format sequence
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.ByteFormat.Msb">
            <summary>
            Most Significant Bit (aka Big-endian) byte format sequence
            </summary>
        </member>
        <member name="T:Iot.Device.Hx711.Hx711">
            <summary>
            Hx711 - Weight scale Module
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711._offsetFormZero">
            <summary>
            Offset value from 0 at startup
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711.ConversionRatio">
            <summary>
            Conversion ratio between Hx711 units and grams
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711.TareValue">
            <summary>
            Weight set as tare
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.#ctor(System.Int32,System.Int32,Iot.Device.Hx711.Hx711Options,System.Device.Gpio.GpioController,System.Device.Gpio.PinNumberingScheme,System.Boolean)">
            <summary>
            Creates a new instance of the Hx711 module.
            </summary>
            <param name="pinDout">Trigger pulse output. (Digital OUTput)</param>
            <param name="pinPdSck">Trigger pulse input. (Power Down control and Serial Clock input)</param>
            <param name="options">How to use the Hx711 module.</param>
            <param name="gpioController">GPIO controller related with the pins.</param>
            <param name="pinNumberingScheme">Scheme and numeration used by controller.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller.</param>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.SetCalibration(UnitsNet.Mass,System.Int32)">
            <summary>
            Load cells always return different values also based on their range and sensitivity.
            For this reason, a first calibration step with a known weight is required.
            You can repeat it several times to get a more precise value.
            </summary>
            <param name="knowWeight">Known weight currently on load cell and detected by the Hx711.</param>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if know weight have invalid value</exception>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.SetConversionRatio(System.Double)">
            <summary>
            If you already know the reference unit between the Hx711 value and grams, you can set it and skip the calibration.
            </summary>
            <param name="conversionRatio">Conversion ratio between Hx711 units and grams</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if know weight have invalid value</exception>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.GetWeight(System.Int32)">
            <summary>
            Read the weight from the Hx711 through channel A to which the load cell is connected,
            range and precision depend on load cell connected.
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <returns>Return a weigh read from Hx711</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.Tare(System.Int32)">
            <summary>
            Sets tare for channel A for compatibility purposes
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.PowerUp">
            <summary>
            Power up Hx711 and set it ready to work
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.PowerDown">
            <summary>
            Power down Hx711
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.Reset">
            <summary>
            PowerDown and restart component
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Hx711.Hx711.GetNetWeight(System.Int32)">
            <summary>
            Read weight from Hx711
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <returns>Return total weight - tare weight</returns>
        </member>
        <member name="T:Iot.Device.Hx711.Hx711CalibrationNotDoneException">
            <summary>
            Exception thorw if Hx711 miss calibration process
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711CalibrationNotDoneException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Hx711.Hx711CalibrationNotDoneException"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711CalibrationNotDoneException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Hx711.Hx711CalibrationNotDoneException"/> class.
            </summary>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Iot.Device.Hx711.Hx711Mode">
            <summary>
            Hx711 has 3 modes of operation, choose the one based on the fisical connection with load cell.
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711Mode.ChannelAGain128">
            <summary>
            Load cell link in channel A and use gain of 128, default mode
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711Mode.ChannelAGain64">
            <summary>
            Load cell link in channel A and use gain of 64
            </summary>
        </member>
        <member name="F:Iot.Device.Hx711.Hx711Mode.ChannelBGain32">
            <summary>
            Load cell link in channel B and use gain of 32
            </summary>
        </member>
        <member name="T:Iot.Device.Hx711.Hx711Options">
            <summary>
            Hx711 options for all manufacturers
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711Options.Mode">
            <summary>
            Hx711 has 3 modes of operation, choose the one based on the fisical connection with load cell.
            Default value: <code>Mode = Hx711Mode.ChannelAGain128</code>
            </summary>
        </member>
        <member name="P:Iot.Device.Hx711.Hx711Options.UseByteLittleEndian">
            <summary>
            If <code>true</code> bytes read from Hx711 made by Lsb format.
            Some Hx711 manufacturers return bytes in Lsb, but most in Msb.
            Default value: <code>UseByteLittleEndian = false</code>
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Options.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Hx711.Hx711Options"/> class with default values.
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Options.#ctor(Iot.Device.Hx711.Hx711Mode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Hx711.Hx711Options"/> class.
            </summary>
            <param name="mode">Hx711 has 3 modes of operation, choose the one based on the fisical connection with load cell.</param>
            <param name="useByteLittleEndian">If <code>true</code> bytes read from Hx711 made by Lsb format.</param>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.Read(System.Int32,System.Int32)">
            <summary>
            Read a weight value from Hx711, how accurate depends on the number of reading passed
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <param name="offsetFromZero">Offset value from 0</param>
            <returns>Return a weight read</returns>
            <exception cref="T:System.ArgumentException">Throw if number of reads have invalid value</exception>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.CalculateNetValue(System.Int32,System.Int32)">
            <summary>
            Calculate net value
            </summary>
            <param name="value">Gross value read from Hx711</param>
            <param name="offset">Offset value from 0</param>
            <returns>Return net value read</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.CalculateExtraBitByMode(Iot.Device.Hx711.Hx711Mode)">
            <summary>
            Hx711 Channel and gain factor are set by number of bits read
            after 24 data bits.
            </summary>
            <param name="mode">Current Hx711 mode</param>
            <returns>Number of extrabit after 24 bit</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if mode value is invalid.</exception>
            <remarks>Look table "Table 3 Input Channel and Gain Selection" in doc page 4
            https://html.alldatasheet.com/html-pdf/1132222/AVIA/Hx711/457/4/Hx711.html</remarks>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ConvertFromTwosComplement24bit(System.Int32)">
            <summary>
            The output 24 bits of data is in 2's complement format. Convert it to int.
            </summary>
            <param name="inputValue">24 bit in 2' complement format</param>
            <returns>Int converted</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.IsOutputDataReady">
            <summary>
            Check if Hx711 is ready
            </summary>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadAverage(System.Int32)">
            <summary>
            A avarage-based read method, might help when getting random value spikes
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <returns>Return a weight read</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadMedian(System.Int32)">
            <summary>
            A median-based read method, might help when getting random value spikes for unknown or CPU-related reasons
            </summary>
            <param name="numberOfReads">Number of readings to take from which to average, to get a more accurate value.</param>
            <returns>Return a weight read</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadInt">
            <summary>
            Read a weight value from Hx711
            </summary>
            <returns>Return a weight read</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadRawBytes">
            <summary>
            Read one value from Hx711
            </summary>
            <returns>Return bytes read</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadNextByte">
            <summary>
            Read bits and build the byte
            </summary>
            <returns>Byte readed by Hx711</returns>
        </member>
        <member name="M:Iot.Device.Hx711.Hx711Reader.ReadNextBit">
            <summary>
            Read next bit by send a signal to Hx711
            </summary>
            <returns>Return bit read from Hx711</returns>
        </member>
        <member name="T:Iot.Device.Ili934x.Chsc6440">
            <summary>
            Binding for Chipsemi CHSC6540 capacitive touch screen controller
            Used for instance on the M5Tough in conjunction with an ILI9342 display controller.
            Note: The M5Core2, while being very similar to the M5Tough otherwise, has a FT6336U instead.
            The two chips appear to be similar, but the documentation is poor.
            </summary>
        </member>
        <member name="F:Iot.Device.Ili934x.Chsc6440.DefaultI2cAddress">
            <summary>
            The default I2C address of this chip
            </summary>
        </member>
        <member name="E:Iot.Device.Ili934x.Chsc6440.Touched">
            <summary>
            This event is fired when the user "clicks" a position
            Call <see cref="M:Iot.Device.Ili934x.Chsc6440.EnableEvents"/> to use event handling
            </summary>
        </member>
        <member name="E:Iot.Device.Ili934x.Chsc6440.Dragging">
            <summary>
            This event is fired repeatedly when the user drags over the screen
            Call <see cref="M:Iot.Device.Ili934x.Chsc6440.EnableEvents"/> to use event handling.
            </summary>
        </member>
        <member name="E:Iot.Device.Ili934x.Chsc6440.Zooming">
            <summary>
            The event that is fired when the user zooms (using two fingers)
            Call <see cref="M:Iot.Device.Ili934x.Chsc6440.EnableEvents"/> to use event handling.
            The second argument is the list of touch points (always 2 when this function is called), the third and fourth
            argument are the old and the new distance between the points. So if the value decreases, zooming out is intended.
            The values are always &gt; 0
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.#ctor(System.Device.I2c.I2cDevice,System.Drawing.Size,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a controller from the given I2C device
            </summary>
            <param name="device">An I2C device</param>
            <param name="screenSize">Size of the screen. Used to filter out invalid readings</param>"/>
            <param name="interruptPin">The interrupt pin to use, -1 to disable</param>
            <param name="gpioController">The gpio controller the interrupt pin is attached to</param>
            <param name="shouldDispose">True to dispose the gpio controller on close</param>
        </member>
        <member name="P:Iot.Device.Ili934x.Chsc6440.ScreenSize">
            <summary>
            Size of the screen
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.Chsc6440.UpdateInterval">
            <summary>
            Sets the background thread update interval. Low values can impact performance, but increase the responsiveness.
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.Chsc6440.TouchSize">
            <summary>
            The size of the rectangle that is considered a "touch". When the position changes more than this, it is considered a drag.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.IsPressed">
            <summary>
            Returns true if the interrupt pin is set, meaning something is touching the display
            </summary>
            <returns>True if something presses the display, false if not. This queries the interrupt pin if available. Otherwise, an I2C request to the controller is required.</returns>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.GetPrimaryTouchPoint">
            <summary>
            Gets the primary touch point or null if the screen is not being touched
            </summary>
            <returns>A point where the first finger is</returns>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.EnableEvents">
            <summary>
            Enables event callback.
            This starts an internal thread that will fire the <see cref="E:Iot.Device.Ili934x.Chsc6440.Touched"/> and <see cref="E:Iot.Device.Ili934x.Chsc6440.Dragging"/> events
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.Dispose(System.Boolean)">
            <summary>
            Dispose of this instance and close connections
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Chsc6440.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ili934x.DragEventArgs">
            <summary>
            Event arguments for dragging (moving the finger over the screen)
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.DragEventArgs.#ctor(System.Boolean,System.Boolean,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Constructs a new instance of <see cref="T:Iot.Device.Ili934x.DragEventArgs"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.DragEventArgs.IsDragBegin">
            <summary>
            True if the dragging is starting
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.DragEventArgs.IsDragEnd">
            <summary>
            True if the user has stopped dragging (no longer touching the screen)
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.DragEventArgs.LastPoint">
            <summary>
            The previous point
            </summary>
        </member>
        <member name="P:Iot.Device.Ili934x.DragEventArgs.CurrentPoint">
            <summary>
            The current point. When <see cref="P:Iot.Device.Ili934x.DragEventArgs.IsDragEnd"/> is true, this is equal to the last point
            </summary>
        </member>
        <member name="T:Iot.Device.Ili934x.Ili9341">
            <summary>
            The ILI9341 is a QVGA (Quarter VGA) driver integrated circuit that is used to control 240×320 VGA LCD screens.
            </summary>
        </member>
        <member name="F:Iot.Device.Ili934x.Ili9341.DefaultSpiClockFrequency">
            <summary>
            Default frequency for SPI
            </summary>
        </member>
        <member name="F:Iot.Device.Ili934x.Ili9341.DefaultSpiMode">
            <summary>
            Default mode for SPI
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes new instance of ILI9342 device that will communicate using SPI bus.
            </summary>
            <param name="spiDevice">The SPI device used for communication. This Spi device will be displayed along with the ILI9341 device.</param>
            <param name="dataCommandPin">The id of the GPIO pin used to control the DC line (data/command). This pin must be provided.</param>
            <param name="resetPin">The id of the GPIO pin used to control the /RESET line (RST). Can be -1 if not connected</param>
            <param name="backlightPin">The pin for turning the backlight on and off, or -1 if not connected.</param>
            <param name="spiBufferSize">The size of the SPI buffer. If data larger than the buffer is sent then it is split up into multiple transmissions. The default value is 4096.</param>
            <param name="gpioController">The GPIO controller used for communication and controls the the <paramref name="resetPin"/> and the <paramref name="dataCommandPin"/>
            If no Gpio controller is passed in then a default one will be created and disposed when ILI9341 device is disposed.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller when done</param>
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9341.ScreenWidth">
            <summary>
            Width of the screen, in pixels
            </summary>
            <remarks>This is of type int, because all image sizes use int, even though this can never be negative</remarks>
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9341.ScreenHeight">
            <summary>
            Height of the screen, in pixels
            </summary>
            <remarks>This is of type int, because all image sizes use int, even though this can never be negative</remarks>
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9341.NativePixelFormat">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9341.Fps">
            <summary>
            Returns the last FPS value (frames per second).
            The value is unfiltered.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.InitDisplayParameters">
            <summary>
            Configure memory and orientation parameters
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.CanConvertFromPixelFormat(Iot.Device.Graphics.PixelFormat)">
            <summary>
            This device supports standard 32 bit formats as input
            </summary>
            <param name="format">The format to query</param>
            <returns>True if it is supported, false if not</returns>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.FillRect(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fill rectangle to the specified color
            </summary>
            <param name="color">The color to fill the rectangle with.</param>
            <param name="x">The x co-ordinate of the point to start the rectangle at in pixels.</param>
            <param name="y">The y co-ordinate of the point to start the rectangle at in pixels.</param>
            <param name="w">The width of the rectangle in pixels.</param>
            <param name="h">The height of the rectangle in pixels.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.FillRect(System.Drawing.Color,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Fill rectangle to the specified color
            </summary>
            <param name="color">The color to fill the rectangle with.</param>
            <param name="x">The x co-ordinate of the point to start the rectangle at in pixels.</param>
            <param name="y">The y co-ordinate of the point to start the rectangle at in pixels.</param>
            <param name="w">The width of the rectangle in pixels.</param>
            <param name="h">The height of the rectangle in pixels.</param>
            <param name="doRefresh">True to immediately update the screen, false to only update the back buffer</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.ClearScreen(System.Drawing.Color,System.Boolean)">
            <summary>
            Clears the screen to a specific color
            </summary>
            <param name="color">The color to clear the screen to</param>
            <param name="doRefresh">Immediately force an update of the screen. If false, only the backbuffer is cleared.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.ClearScreen(System.Boolean)">
            <summary>
            Clears the screen to black
            </summary>
            <param name="doRefresh">Immediately force an update of the screen. If false, only the backbuffer is cleared.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.ClearScreen">
            <summary>
            Immediately clears the screen to black.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.ResetDisplayAsync">
            <summary>
            Resets the display.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.TurnBacklightOn">
            <summary>
            This command turns the backlight panel off.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.TurnBacklightOff">
            <summary>
            This command turns the backlight panel off.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendCommand(Iot.Device.Ili934x.Ili9341Command,System.Byte[])">
            <summary>
            Send a command to the the display controller along with associated parameters.
            </summary>
            <param name="command">Command to send.</param>
            <param name="commandParameters">parameteters for the command to be sent</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendCommand(Iot.Device.Ili934x.Ili9341Command,System.Span{System.Byte})">
            <summary>
            Send a command to the the display controller along with parameters.
            </summary>
            <param name="command">Command to send.</param>
            <param name="data">Span to send as parameters for the command.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendData(System.Span{System.Byte})">
            <summary>
            Send data to the display controller.
            </summary>
            <param name="data">The data to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendSPI(System.Span{System.Byte},System.Boolean)">
            <summary>
            Write a block of data to the SPI device
            </summary>
            <param name="data">The data to be sent to the SPI device</param>
            <param name="blnIsCommand">A flag indicating that the data is really a command when true or data when false.</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.GetBackBufferCompatibleImage">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.DrawBitmap(Iot.Device.Graphics.BitmapImage,System.Drawing.Point,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Send a bitmap to the Ili9341 display specifying the starting position and destination clipping rectangle.
            </summary>
            <param name="bm">The bitmap to be sent to the display controller note that only Pixel Format Format32bppArgb is supported.</param>
            <param name="sourcePoint">A coordinate point in the source bitmap where copying starts from.</param>
            <param name="destinationRect">A rectangle that defines where in the display the bitmap is written. Note that no scaling is done.</param>
            <param name="update">True to immediately send the new backbuffer to the screen</param>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.DrawBitmap(Iot.Device.Graphics.BitmapImage)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendFrame(System.Boolean)">
            <summary>
            Updates the display with the current screen buffer.
            <param name="forceFull">Forces a full update, otherwise only changed screen contents are updated</param>
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9341.SendBitmapPixelData(System.Span{System.Byte},System.Drawing.Rectangle)">
            <summary>
            Send an array of pixel data to the display.
            </summary>
            <param name="pixelData">The data to be sent to the display.</param>
            <param name="destinationRect">A rectangle that defines where in the display the data is to be written.</param>
            <remarks>This directly sends the data, circumventing the screen buffer</remarks>
        </member>
        <member name="T:Iot.Device.Ili934x.Ili9342">
            <summary>
            Ili9342 QVGA display
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9342.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes new instance of ILI9342 device that will communicate using SPI bus.
            </summary>
            <param name="spiDevice">The SPI device used for communication. This Spi device will be displayed along with the ILI9341 device.</param>
            <param name="dataCommandPin">The id of the GPIO pin used to control the DC line (data/command). This pin must be provided.</param>
            <param name="resetPin">The id of the GPIO pin used to control the /RESET line (RST). Can be -1 if not connected</param>
            <param name="backlightPin">The pin for turning the backlight on and off, or -1 if not connected.</param>
            <param name="spiBufferSize">The size of the SPI buffer. If data larger than the buffer is sent then it is split up into multiple transmissions. The default value is 4096.</param>
            <param name="gpioController">The GPIO controller used for communication and controls the the <paramref name="resetPin"/> and the <paramref name="dataCommandPin"/>
            If no Gpio controller is passed in then a default one will be created and disposed when ILI9341 device is disposed.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller when done</param>
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9342.ScreenHeight">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Ili934x.Ili9342.ScreenWidth">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ili934x.Ili9342.InitDisplayParameters">
            <summary>
            Configure the Ili9342 (it uses a different color format than the 9341 and by default is used in landscape mode)
            </summary>
        </member>
        <member name="T:Iot.Device.Ili934x.Rgb565">
            <summary>
            This is the image format used by the Ili934X internally. It's similar to the (meanwhile otherwise rather obsolete) 16-bit RGB format with
            5 bits for red, 6 bits for green and 5 bits for blue.
            </summary>
        </member>
        <member name="M:Iot.Device.Ili934x.Rgb565.FromRgba32(System.Drawing.Color)">
             <summary>
             Convert a color structure to a byte tuple representing the colour in 565 format.
             </summary>
             <param name="color">The color to be converted.</param>
             <returns>
             This method returns the low byte and the high byte of the 16bit value representing RGB565 or BGR565 value
            
             byte    11111111 00000000
             bit     76543210 76543210
            
             For ColorSequence.RGB (inversed!, the LSB is the top byte)
                     GGGBBBBB RRRRRGGG
                     43210543 21043210
             </returns>
        </member>
        <member name="M:Iot.Device.Ili934x.Rgb565.AlmostEqual(Iot.Device.Ili934x.Rgb565,Iot.Device.Ili934x.Rgb565,System.Int32)">
            <summary>
            Returns true if the two colors are almost equal
            </summary>
            <param name="a">First color</param>
            <param name="b">Second color</param>
            <param name="delta">The allowed delta, in visible bits</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Iot.Device.Adc.Ina219">
             <summary>
             INA219 Bidirectional Current/Power monitor.
            
             The INA219 is a high-side current shunt and power monitor with an I2C interface.
             The INA219 monitors both shunt drop and supply voltage, with programmable conversion
             times and filtering. A programmable calibration value, combined with an internal multiplier,
             enables direct readouts in amperes. An additional multiplying register calculates power in watts.
             <see href="http://www.ti.com/lit/ds/symlink/ina219.pdf"/>
             </summary>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Construct an Ina219 device using an I2cDevice
            </summary>
            <remarks>
            This binding does not dispose the passed in I2cDevice.
            </remarks>
            <param name="i2cDevice">The I2cDevice initialized to communicate with the INA219.</param>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.#ctor(System.Device.I2c.I2cConnectionSettings)">
            <summary>
            Construct an INA219 device using an I2cConnectionSettings.
            </summary>
            <remarks>
            This binding creates an I2cDevice ufor communication with the INA219. The I2cDevice is disposed when then INA219 is disposed.
            </remarks>
            <param name="settings">The I2cConnectionSettings object initialized with the appropriate settings to communicate with the INA219.</param>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.Reset">
            <summary>
            Reset the INA219 to default values;
            </summary>
        </member>
        <member name="P:Iot.Device.Adc.Ina219.OperatingMode">
            <summary>
            Property representing the Operating mode of the INA219
            </summary>
            <remarks>
            This allows the user to selects continuous, triggered, or power-down mode of operation along with which of the shunt and bus voltage measurements are made.
            </remarks>
        </member>
        <member name="P:Iot.Device.Adc.Ina219.BusVoltageRange">
            <summary>
            Property representing the Bus voltage range of the INA219
            </summary>
            <remarks>
            This allows the user to selects eiter a 16V range or a 32V range for the ADC reading the bus voltage.
            In general the lowest range compatible with the application parameters should be selected.
            </remarks>
        </member>
        <member name="P:Iot.Device.Adc.Ina219.PgaSensitivity">
            <summary>
            Property representing the voltage range of the Programable Gain Amplifier used in the INA219 to measure Shunt Voltage.
            </summary>
            <remarks>
            This allows the user to selects a gain for the amplifier reading the shunt voltage before it is applied to the ADC. It can be one of +/-40mV, +/-80mV, +/-160mV or +/-320mV.
            In general the lowest range compatible with the application parameters should be selected.
            </remarks>
        </member>
        <member name="P:Iot.Device.Adc.Ina219.BusAdcResolutionOrSamples">
            <summary>
            Set the Ina219 ADC resolution or samples to be used when reading the Bus voltage.
            </summary>
            <remarks>
            This can either by the number of bits used for the ADC conversion (9-12 bits) or the number of samples at 12 bits to be averaged for the result.
            </remarks>
        </member>
        <member name="P:Iot.Device.Adc.Ina219.ShuntAdcResolutionOrSamples">
            <summary>
            Set the INA219 ADC resolution or samples to be used when reading the Shunt voltage.
            </summary>
            <remarks>
            This can either by the number of bits used for the ADC conversion (9-12 bits) or the number of samples at 12 bits to be averaged for the result.
            </remarks>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.SetCalibration(System.UInt16,System.Single)">
            <summary>
            Set the INA219 calibration value used to scale the Shunt voltage into a Current reading.
            </summary>
            <remarks>
            This method allows the user to manually specify the value written to the INA219 calibration register which determines how the shunt voltage
            reading is scaled into the current register by the INA219. To allow finer control of the scaling the current register does not contain the actual
            current value and the currentLsb is used to specify how much current in Amperes is represented by the least significant bit of the current register.
            This will allow the ReadCurrent method to return the corrent current value and by implication ReadPower to return the correct power value as it is derived froom
            the current value.
            <see cref="M:Iot.Device.Adc.Ina219.ReadPower"/><see cref="M:Iot.Device.Adc.Ina219.ReadCurrent"/><seealso href="http://www.ti.com/lit/ds/symlink/ina219.pdf"/>
            </remarks>
            <param name="calibrationValue">The number of Amperes represented by the LSB of the INA219 current register.</param>
            <param name="currentLsb">The current value in Amperes of the least significan bit of the calibration register. Defaults to unity so that the register can be read directly.</param>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.Dispose">
            <summary>
            Dispose instance
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.ReadShuntVoltage">
            <summary>
            Read the measured shunt voltage.
            </summary>
            <returns>The shunt potential difference</returns>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.ReadBusVoltage">
            <summary>
            Read the measured Bus voltage.
            </summary>
            <returns>The Bus potential (voltage)</returns>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.ReadCurrent">
            <summary>
            Read the calculated current through the INA219.
            </summary>
            <remarks>
            This value is determined by an internal calculation using the calibration register and the read shunt voltage and then scaled.
            </remarks>
            <returns>The calculated current</returns>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.ReadPower">
            <summary>
            Get the calculated power in the circuit being monitored by the INA219.
            </summary>
            <remarks>
            This value is determined by an internal calculation using the calulated current and the read bus voltage and then scaled.
            </remarks>
            <returns>The calculated electric power</returns>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.ReadRegister(Iot.Device.Adc.Ina219Register,System.Int32)">
            <summary>
            Read a register from the INA219 device
            </summary>
            <param name="register">The register to read.</param>
            <param name="delayMicroSeconds">A delay between setting the register to be read and the actual read. Defaults to 0</param>
            <returns>Am unsiged short integer representing the regsiter contents.</returns>
        </member>
        <member name="M:Iot.Device.Adc.Ina219.WriteRegister(Iot.Device.Adc.Ina219Register,System.UInt16)">
            <summary>
            Write a value to an INA219 register.
            </summary>
            <param name="register">The register to be written to.</param>
            <param name="value">The value to be writtent to the register.</param>
        </member>
        <member name="T:Iot.Device.Adc.Ina219OperatingMode">
            <summary>
            An enumeration representing the operating modes available on the INA219 device.
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.PowerDown">
            <summary>Power Down mode</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.ShuntVoltageTriggered">
            <summary>Mode to read the shunt voltage on demand</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.BusVoltageTriggered">
            <summary>Mode to read the bus voltage on demand</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.ShuntAndBusTriggered">
            <summary>Mode to read the shunt and bus voltage on demand</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.AdcOff">
            <summary>Mode to disable the ADC</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.ShuntVoltageContinuous">
            <summary>Mode to read the shunt voltage on continuously</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.BusVoltageContinuous">
            <summary>Mode to read the bus voltage on continuously</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219OperatingMode.ShuntAndBusContinuous">
            <summary>Mode to read the shunt and bus voltage on continuously</summary>
        </member>
        <member name="T:Iot.Device.Adc.Ina219BusVoltageRange">
            <summary>
            An enumeration representing possible bus voltage measurment ranges available on the INA219 device.
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219BusVoltageRange.Range16v">
            <summary>Bus voltage range of 0 - 16V</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219BusVoltageRange.Range32v">
            <summary>Bus voltage range of 0 - 32V</summary>
        </member>
        <member name="T:Iot.Device.Adc.Ina219PgaSensitivity">
            <summary>
            An enumeration representing the shunt Programable Gain Amplifier sensitivities available on the INA219 device.
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219PgaSensitivity.PlusOrMinus40mv">
            <summary>Pga range of +/- 40mV</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219PgaSensitivity.PlusOrMinus80mv">
            <summary>Pga range of +/- 80mV</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219PgaSensitivity.PlusOrMinus160mv">
            <summary>Pga range of +/- 160mV</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219PgaSensitivity.PlusOrMinus320mv">
            <summary>Pga range of +/- 320mV</summary>
        </member>
        <member name="T:Iot.Device.Adc.Ina219AdcResolutionOrSamples">
            <summary>
            An enumeration representing ADC resolution and samples available on the INA219 device for reading the shunt and bus voltages.
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc9Bit">
            <summary>9 bit single Sample</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc10Bit">
            <summary>10 bit single Sample</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc11Bit">
            <summary>11 bit single Sample</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc12Bit">
            <summary>12 bit single Sample</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc2Sample">
            <summary>12 bit 2 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc4Sample">
            <summary>12 bit 4 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc8Sample">
            <summary>12 bit 8 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc16Sample">
            <summary>12 bit 16 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc32Sample">
            <summary>12 bit 32 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc64Sample">
            <summary>12 bit 64 samples averaged</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219AdcResolutionOrSamples.Adc128Sample">
            <summary>12 bit 128 samples averaged</summary>
        </member>
        <member name="T:Iot.Device.Adc.Ina219Register">
            <summary>
            An enumeration representting the registers exposed by the INA219 device via I2c.
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.Configuration">
            <summary>Configuration Register r/w</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.ShuntVoltage">
            <summary>Shunt Voltage Register r</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.BusVoltage">
            <summary>Bus Voltage Register r</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.Power">
            <summary>Power Register r</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.Current">
            <summary>Current Register r</summary>
        </member>
        <member name="F:Iot.Device.Adc.Ina219Register.Calibration">
            <summary>Calibration Register r/w</summary>
        </member>
        <member name="T:Iot.Device.Adc.Ina219ConfigurationFlags">
            <summary>
            An enumeration representing flags and masks using in the configuration register on the INA219 device.
            </summary>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3001">
            <summary>
            MCP3001 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3001.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3008 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3001.Read">
            <summary>
            Reads a 10-bit (0..1023) value from the device
            </summary>
            <returns>10-bit value corresponding to relative voltage level on specified device channel</returns>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3002">
            <summary>
            MCP3002 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3002.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3002 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3004">
            <summary>
            MCP3004 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3004.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3004 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3008">
            <summary>
            MCP3008 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3008.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3008 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3201">
            <summary>
            MCP32001 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3201.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3201 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3201.Read">
            <summary>
            Reads a 12-bit (0..4096) value from the device
            </summary>
            <returns>12-bit value corresponding to relative voltage level on specified device channel</returns>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3202">
            <summary>
            MCP3202 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3202.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3202 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3204">
            <summary>
            MCP3204 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3204.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3204 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3208">
            <summary>
            MCP3208 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3208.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3208 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3301">
            <summary>
            MCP3301 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3301.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3301 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3301.ReadDifferential">
            <summary>
            Reads a 13 bit signed value from the device using differential inputs
            </summary>
            <returns>A 13 bit signed value corresponding to relative voltage level on specified device channels</returns>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3302">
            <summary>
            MCP3302 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3302.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3302 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3304">
            <summary>
            MCP3304 Analog to Digital Converter (ADC)
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3304.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3304 instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="T:Iot.Device.Adc.Mcp33xx">
            <summary>
            MCP33XX family of Analog to Digital Converters
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp33xx.#ctor(System.Device.Spi.SpiDevice,System.Byte,System.Byte)">
            <summary>
            Constructs Mcp33xx instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
            <param name="channelCount">Value representing the number of single ended input channels on the device.</param>
            <param name="adcResolutionBits">The number of bits of resolution for the ADC.</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp33xx.SignExtend(System.Int32,System.Int32)">
            <summary>
            Convert a signed value with a sign bit at a particular location to an int.
            </summary>
            <param name="signedValue">Signed value with a sign bit at a particular location</param>
            <param name="signingBit">Bit number that contains the sign bit</param>
            <returns>A value corresponding to the signed value sign extended into an int</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp33xx.ReadPseudoDifferential(System.Int32,System.Int32)">
            <summary>
            Reads a  value from the device using pseudo-differential inputs
            </summary>
            <param name="valueChannel">Channel which represents the signal (valid values: 0 to channelcount - 1).</param>
            <param name="referenceChannel">Channel which represents the signal ground (valid values: 0 to channelcount - 1).</param>
            <returns>A value corresponding to relative voltage level on specified device channels</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp33xx.ReadDifferential(System.Int32,System.Int32)">
            <summary>
            Reads a 13 bit signed value from the device using differential inputs
            </summary>
            <remarks>
            The value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading).
            If the valueChannel and the referenceChannel are part of the same channel pairing then the ADC converter will internally subtract the two values. If not then the subtraction is
            performed in software which may mean that errors are introduced with rapidly changing signals.
            </remarks>
            <param name="valueChannel">Channel which represents the signal driving the value in a positive direction (valid values: 0 to channelcount - 1).</param>
            <param name="referenceChannel">Channel which represents the signal driving the value in a negative direction (valid values: 0 to channelcount - 1).</param>
            <returns>A 13 bit signed value corresponding to relative voltage level on specified device channels</returns>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3Base">
            <summary>
            MCP family of ADC devices
            </summary>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3Base.InputType">
            <summary>
            InputType: the type of pin connection
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Mcp3Base.InputType.SingleEnded">
            <summary>The value is measured as the voltage on a single pin</summary>
        </member>
        <member name="F:Iot.Device.Adc.Mcp3Base.InputType.Differential">
            <summary>The value is the difference in voltage between two pins with the first pin being the positive one</summary>
        </member>
        <member name="F:Iot.Device.Adc.Mcp3Base.InputType.InvertedDifferential">
            <summary>The value is the difference in voltage between two pins with the second pin being the positive one</summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3Base.#ctor(System.Device.Spi.SpiDevice)">
            <summary>
            Constructs Mcp3Base instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3Base.ReadInternal(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads a value from the device
            </summary>
            <param name="adcRequest">A bit pattern to be sent to the ADC.</param>
            <param name="adcResolutionBits">The number of bits in the returned value</param>
            <param name="delayBits">The number of bits to be delayed between the request and the response being read.</param>
            <returns>A value corresponding to a voltage level on the input pin described by the request.</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3Base.Dispose">
            <summary>
            Disposes Mcp3Base instances
            </summary>
        </member>
        <member name="T:Iot.Device.Adc.Mcp3xxx">
            <summary>
            MCP family of ADC devices
            </summary>
        </member>
        <member name="F:Iot.Device.Adc.Mcp3xxx.ChannelCount">
            <summary>
            the number of single ended input channel on the ADC
            </summary>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.#ctor(System.Device.Spi.SpiDevice,System.Byte,System.Byte)">
            <summary>
            Constructs Mcp3xxx instance
            </summary>
            <param name="spiDevice">Device used for SPI communication</param>
            <param name="channelCount">Value representing the number of single ended input channels available on the device.</param>
            <param name="adcResolutionBits">The number of bits of resolution for the ADC.</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.CheckChannelRange(System.Int32,System.Int32)">
            <summary>
            Checks that the channel is in range of the available channels channels and throws an exception if not.
            </summary>
            <param name="channel">Channel to be checked</param>
            <param name="channelCount">Value representing the number of channels on the device which may vary depending on the configuration.</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.CheckChannelPairing(System.Int32,System.Int32)">
            <summary>
            Checks that the channel is in range of the available input channels and that both channels are part of a valid pairing of input channels.
            </summary>
            <param name="valueChannel">Value channel to be checked</param>
            <param name="referenceChannel">Reference channel to be checked</param>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.ReadPseudoDifferential(System.Int32,System.Int32)">
            <summary>
            Reads a  value from the device using pseudo-differential inputs
            </summary>
            <remarks>
            Like a normal differential input the value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading).
            However the reference signal in a pseudo-differential input is expected to be connected to the signal ground. This is used to reduce the effect of external electrical noise on the on the inputs. If there is noise where
            the noise is likey to impact both the value input and the reference input and the action of subtracting the values helps to cancel it out.
            </remarks>
            <param name="valueChannel">Channel which represents the signal (valid values: 0 to channelcount - 1).</param>
            <param name="referenceChannel">Channel which represents the signal ground (valid values: 0 to channelcount - 1).</param>
            <returns>A value corresponding to relative voltage level on specified device channels</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.ReadDifferential(System.Int32,System.Int32)">
            <summary>
            Reads a value from the device using differential inputs
            </summary>
            <remarks>
            The value that is read respresents the difference between the voltage on the value channel and the voltage on the reference channel (valueChannel Reading - referenceChannel Reading).
            This subtraction is performed in software which may mean that errors are introduced with rapidly changing signals.
            </remarks>
            <param name="valueChannel">Channel which represents the signal driving the value in a positive direction (valid values: 0 to channelcount - 1).</param>
            <param name="referenceChannel">Channel which represents the signal driving the value in a negative direction (valid values: 0 to channelcount - 1).</param>
            <returns>A value corresponding to relative voltage level on specified device channels</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.Read(System.Int32)">
            <summary>
            Reads a value from the device
            </summary>
            <param name="channel">Channel which value should be read from (valid values: 0 to channelcount - 1)</param>
            <returns>A value corresponding to relative voltage level on specified device channel</returns>
        </member>
        <member name="M:Iot.Device.Adc.Mcp3xxx.ReadInternal(System.Int32,Iot.Device.Adc.Mcp3Base.InputType,System.Int32)">
            <summary>
            Reads a value from the device
            </summary>
            <param name="channel">Channel which value should be read from. For diffential inputs this represents a channel pair (valid values: 0 - channelcount - 1 or 0 - channelcount / 2 - 1  with differential inputs)</param>
            <param name="inputType">The type of input channel to read.</param>
            <param name="adcResolutionBits">The number of bits in the returned value</param>
            <returns>A value corresponding to relative voltage level on specified device channel</returns>
        </member>
        <member name="T:Iot.Device.Ip5306.ButtonPress">
            <summary>
            Button press
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPress.Doubleclick">
            <summary>Short press twice</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPress.LongPress">
            <summary>Long press</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ButtonPressed">
            <summary>
            Button status
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPressed.DoubleClicked">
            <summary>Double click</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPressed.LongPressed">
            <summary>Long press</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPressed.ShortPressed">
            <summary>Short press</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ButtonPressed.NotPressed">
            <summary>Not pressed</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ChargingBatteryVoltage">
            <summary>
            Charging battery voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingBatteryVoltage.V4_4">
            <summary>4.4 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingBatteryVoltage.V4_35">
            <summary>4.35 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingBatteryVoltage.V4_3">
            <summary>4.3 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingBatteryVoltage.V4_2">
            <summary>4.2 Volt</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ChargingCutOffCurrent">
            <summary>
            Charging cut off current
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffCurrent.C600mA">
            <summary>600 milli Ampere</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffCurrent.C500mA">
            <summary>500 milli Ampere</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffCurrent.C400mA">
            <summary>400 milli Ampere</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffCurrent.C200mA">
            <summary>200 milli Ampere</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ChargingCutOffVoltage">
            <summary>
            Charging cut off voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffVoltage.V4_2">
            <summary>4.2 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffVoltage.V4_185">
            <summary>4.185 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffVoltage.V4_17">
            <summary>4.17 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingCutOffVoltage.V4_14">
            <summary>4.14 Volt</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ChargingLoopSelection">
            <summary>
            Charging loop selection
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingLoopSelection.Vin">
            <summary>V in</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingLoopSelection.Battery">
            <summary>Battery</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ChargingUnderVoltage">
            <summary>
            Charging under voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_8">
            <summary>4.8 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_75">
            <summary>4.75 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_7">
            <summary>4.7 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_65">
            <summary>4.65 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_6">
            <summary>4.6 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_55">
            <summary>4.55 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_5">
            <summary>4.5 Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ChargingUnderVoltage.V4_45">
            <summary>4.45 Volt</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.ConstantChargingVoltage">
            <summary>
            Constant charging voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ConstantChargingVoltage.Vm42">
            <summary>42 milli Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ConstantChargingVoltage.Vm28">
            <summary>28 milli Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ConstantChargingVoltage.Vm14">
            <summary>14 milli Volt</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.ConstantChargingVoltage.None">
            <summary>No constant charging voltage</summary>
        </member>
        <member name="T:Iot.Device.Ip5306.Ip5306">
            <summary>
            IP5306 - Power management device
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.Ip5306.DefaultI2cAddress">
            <summary>
            Default IP5306 I2C address
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.Ip5306.SecondaryI2cAddress">
            <summary>
            Possible address as well, used in M5Stack
            </summary>
        </member>
        <member name="M:Iot.Device.Ip5306.Ip5306.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates an instance of IP5306
            </summary>
            <param name="i2c">The I2C device.</param>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ButtonOffEnabled">
            <summary>
            Button off enabled.
            False as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.BoostOutputEnabled">
            <summary>
            Boost output enabled.
            True as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.AutoPowerOnEnabled">
            <summary>
            Auto power on enabled.
            True as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargerEnabled">
            <summary>
            Charger enabled.
            true as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.BoostEnabled">
            <summary>
            Boost enabled.
            True as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.LowPowerOffEnabled">
            <summary>
            Low power off enabled.
            True as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.BoostWhenVinUnpluggedEnabled">
            <summary>
            Boost when V in unplugged enabled.
            True as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ShortPressToSwitchBosst">
            <summary>
            Short press to switch boost enabled.
            False as default.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.FlashLightBehavior">
            <summary>
            Flash light behavior.
            Default to double click.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.SwitchOffBoostBehavior">
            <summary>
            Switch off boost behavior.
            Default to long press.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.LightDutyShutdownTime">
            <summary>
            Light duty shutdown time.
            Default to 8 seconds.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingCuttOffVoltage">
            <summary>
            Charging cut off voltage.
            Default to 4.185 Volt.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingCutOffCurrent">
            <summary>
            Charging cut off current.
            Default to 400 mA.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingUnderVoltage">
            <summary>
            Charging under voltage.
            Default to 4.7 Volt.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingBatteryVoltage">
            <summary>
            Charging battery voltage.
            Default to 4.2 Volt.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ConstantChargingVoltage">
            <summary>
            Constant charging voltage.
            Default to 14 milli Volt.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingLoopSelection">
            <summary>
            Charging loop selection.
            Defautl to V in.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.ChargingCurrent">
            <summary>
            Charging current.
            </summary>
            <remarks>Typical valut is between 50 and 3150 milli Ampere. Values are capted to 50 for anything under or 3150 for anything higher.</remarks>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.IsCharging">
            <summary>
            True if the battery is charging.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.IsBatteryFull">
            <summary>
            True if the battery is full.
            </summary>
        </member>
        <member name="P:Iot.Device.Ip5306.Ip5306.IsOutputLoadHigh">
            <summary>
            True if the output is loaded to high.
            </summary>
        </member>
        <member name="M:Iot.Device.Ip5306.Ip5306.GetButtonStatus">
            <summary>
            Gets the button status.
            </summary>
        </member>
        <member name="T:Iot.Device.Ip5306.LightDutyShutdownTime">
            <summary>
            Light duty shutdown time
            </summary>
        </member>
        <member name="F:Iot.Device.Ip5306.LightDutyShutdownTime.S64">
            <summary>64 seconds</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.LightDutyShutdownTime.S16">
            <summary>16 seconds</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.LightDutyShutdownTime.S32">
            <summary>32 seconds</summary>
        </member>
        <member name="F:Iot.Device.Ip5306.LightDutyShutdownTime.S08">
            <summary>8 seconds</summary>
        </member>
        <member name="T:Iot.Device.KeyMatrix.KeyMatrix">
            <summary>
            GPIO key matrix Driver
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrix.OutputPins">
            <summary>
            Get output pins
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrix.InputPins">
            <summary>
            Get input pins
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrix.Values">
            <summary>
            Get all buttons' values
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrix.ScanInterval">
            <summary>
            Get or set interval in milliseconds
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrix.Item(System.Int32)">
            <summary>
            Get buttons' values by output
            </summary>
            <param name="output">Output index</param>
        </member>
        <member name="T:Iot.Device.KeyMatrix.KeyMatrix.KeyEventHandler">
            <summary>
            Fire an event when a key is pressed or released
            </summary>
            <param name="sender">The sender KeyMatrix</param>
            <param name="keyMatrixEvent">The key event</param>
        </member>
        <member name="E:Iot.Device.KeyMatrix.KeyMatrix.KeyEvent">
            <summary>
            The raised event
            </summary>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.TimeSpan,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize key matrix
            </summary>
            <param name="outputPins">Output pins</param>
            <param name="inputPins">Input pins</param>
            <param name="scanInterval">Scanning interval in milliseconds</param>
            <param name="gpioController">GPIO controller</param>
            <param name="shouldDispose">True to dispose the GpioController</param>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32},System.TimeSpan,System.Device.Gpio.PinMode,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize key matrix
            </summary>
            <param name="outputPins">Output pins</param>
            <param name="inputPins">Input pins</param>
            <param name="scanInterval">Scanning interval in milliseconds</param>
            <param name="gpioController">GPIO controller</param>
            <param name="inputPinMode">Mode for input pins - Input / InputPullDown</param>
            <param name="shouldDispose">True to dispose the GpioController</param>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.StartListeningKeyEvent">
            <summary>
            Start listening to key events
            </summary>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.StopListeningKeyEvent">
            <summary>
            Stop listening to key events
            </summary>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.ReadKey">
            <summary>
            Blocks execution until a key event is received
            </summary>
        </member>
        <member name="M:Iot.Device.KeyMatrix.KeyMatrix.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.KeyMatrix.KeyMatrixEvent">
            <summary>
            Keyboard event
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrixEvent.EventType">
            <summary>
            Event type of current button. PinEventTypes.Rising is pressed，PinEventTypes.Falling is released
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrixEvent.Output">
            <summary>
            Current button's output index
            </summary>
        </member>
        <member name="P:Iot.Device.KeyMatrix.KeyMatrixEvent.Input">
            <summary>
            Current button's input index
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings">
            <summary>
            Various acquisition behavior settings
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.EnableReferenceProcess">
            <summary>
            Enables reference process during measurement
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.UseCustomDelay">
            <summary>
            Use custom delay instead of default delay
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.EnableReferenceFilter">
            <summary>
            Enable reference filter, averages 8 reference measurements for increase consistency
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.EnableQuickTermination">
            <summary>
            Enable measurement quick termination
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.AcquisitionSettings.UseDefaultReferenceAcquisition">
            <summary>
            Enable default reference acquisition count (5) instead of reference acquisition
            count set in REF_COUNT_VAL (0x12).
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition">
            <summary>
            Measurement repetition modes
            </summary>
            <remarks>
            The device by default does measurements on-demand, this conserves power usage. However, it can
            be configured to run in a loop or infinite loop on the device itself.  Since there's less overhead,
            it will have more accurate timing and lead to more accurate velocity measurements.
            </remarks>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition.Off">
            <summary>
            Disabled, measurements are done once per acq command.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition.Repeat">
            <summary>
            Measurements are done repetitively n number of times per acq command as
            defined in OUTER_LOOP_COUNT (0x11).
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition.RepeatIndefinitely">
            <summary>
            Measurements are done repetitively forever.
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode">
            <summary>
            Power mode flags
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode.On">
            <summary>
            Turn on the device.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode.DisableReceiverCircuit">
            <summary>
            Disable the receiver circuit.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.PowerMode.Sleep">
            <summary>
            Put the device to sleep.
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.Models.LidarLiteV3.Register">
            <summary>
            All the documented registers for the LidarLiteV3
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus">
            <summary>
            System status flags
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.ProcessError">
            <summary>
            System error detected during measurement
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.Health">
            <summary>
            Health status, indicating reference and receiver bias are operational
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.SecondaryReturn">
            <summary>
             Secondary return detected in correlation record
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.InvalidSignal">
            <summary>
            Peak not detected in correlation record, measurement is invalid.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.SignalOverflow">
            <summary>
            Signal data in correlation record has reached the maximum value before
            overflow. This occurs with a strong received signal strength.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.ReferenceOverflow">
            <summary>
            Reference data in correlation record has reached the maximum value before
            overflow.  This occurs periodically.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.Models.LidarLiteV3.SystemStatus.BusyFlag">
            <summary>
            Device is busy callibrating or taking a measurement.
            </summary>
        </member>
        <member name="T:Iot.Device.DistanceSensor.LidarLiteV3">
            <summary>
            Lidar Lite v3 is a long-range fixed position distance sensor by Garmin.
            </summary>
        </member>
        <member name="F:Iot.Device.DistanceSensor.LidarLiteV3.DefaultI2cAddress">
            <summary>
            Default address for LidarLiteV3
            </summary>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.#ctor(System.Device.I2c.I2cDevice,System.Device.Gpio.GpioController,System.Int32,System.Boolean)">
            <summary>
            Initialize the LidarLiteV3
            </summary>
            <param name="i2cDevice">I2C device</param>
            <param name="gpioController">GPIO controller</param>
            <param name="powerEnablePin">The pin number used to control power to the device</param>
            <param name="shouldDispose">True (the default) if the GPIO controller shall be disposed when disposing this instance.</param>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.PowerOff">
            <summary>
            Power off the device if GPIO controller and power enable pin is provided.
            </summary>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.PowerOn">
            <summary>
            Power on the device if GPIO controller and power enable pin is provided.
            </summary>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.Reset">
            <summary>
            Reset FPGA, all registers return to default values
            </summary>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.MeasureDistance(System.Boolean)">
            <summary>
            Measure distance.
            </summary>
            <remarks>
            Note: Do not call if running while in repetition mode.  It will block until
            repetition finishes (forever if infinite).
            </remarks>
            <param name="withReceiverBiasCorrection">Faster without bias correction, but more prone to errors if condition changes.</param>
            <returns>Distance as a length unit.</returns>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.SetMeasurementRepetitionMode(Iot.Device.DistanceSensor.Models.LidarLiteV3.MeasurementRepetition,System.Int32,System.Int32)">
            <summary>
            Set the repetition mode to enable automatic measurement.
            </summary>
            <param name="measurementRepetition">Repetition mode, either Off, Repeat, or RepeatInfinitely.</param>
            <param name="count">If Repeat, the number of times to repeat the measurement.</param>
            <param name="delay">The delay between each measurements. Note the unit does not directly to hz, a value of 20 maps to about 100 hz.</param>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.SetI2cAddressAndDispose(System.Byte)">
            <summary>
            Set a new I2C address and dispose the device.
            </summary>
            <remarks>
            Note, if the device is powered off or reset, the IC2 address will reset to the default address.
            </remarks>
            <param name="address">new address, valid values are 7-bit values with 0 in the LSB.</param>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.LastDistance">
            <summary>
            Get the last distance measurement.
            </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.DifferenceBetweenLastTwoDistances">
            <summary>
            Get the difference between the current and last measurement resulting
            in a signed (2's complement) 8-bit number.
            Positive is away from the device.
            </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.AcquisitionSettings">
            <summary>
            Get or set the various settings to control the acquistion behavior.
            </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.MaximumAcquisitionCount">
             <summary>
             Get or set the maximum aquisition count limits the number of times
             the device will integrate acquistions to find a correlation
             record peak.
            
             Roughly correlates to: acq rate = 1/count and max
             range = count^(1/4)
             </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.AlgorithmBypassThreshold">
             <summary>
             Get or set the threshold of peak value that bypasses the internal algorithm.
            
             Recommended non-default values are 32 for higher sensitivity
             but higher erronenous measurement and 96 for reduced
             sensitivity and fewer erroneous measurements.
             </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.PowerMode">
            <summary>
            Get or set the power control option.
            </summary>
        </member>
        <member name="P:Iot.Device.DistanceSensor.LidarLiteV3.Status">
            <summary>
            Get the system status
            </summary>
        </member>
        <member name="M:Iot.Device.DistanceSensor.LidarLiteV3.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.LiquidLevel.LiquidLevelSwitch">
            <summary>
            Digital liquid level switch
            </summary>
        </member>
        <member name="M:Iot.Device.LiquidLevel.LiquidLevelSwitch.#ctor(System.Int32,System.Device.Gpio.PinValue,System.Device.Gpio.GpioController,System.Device.Gpio.PinNumberingScheme,System.Boolean)">
            <summary>Creates a new instance of the LiquidLevelSwitch.</summary>
            <param name="dataPin">The data pin</param>
            <param name="liquidPresentPinState">Data pin state representing liquid being present</param>
            <param name="pinNumberingScheme">Use the logical or physical pin layout</param>
            <param name="gpioController">A Gpio Controller if you want to use a specific one</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.LiquidLevel.LiquidLevelSwitch.IsLiquidPresent">
            <summary>
            Determines whether liquid is present.
            </summary>
            <returns><code>true</code> if liquid is present, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:Iot.Device.LiquidLevel.LiquidLevelSwitch.Dispose">
            <summary>
            Dispose Buzzer.
            </summary>
        </member>
        <member name="T:Iot.Device.LiquidLevel.Llc200d3sh">
            <summary>
            Optomax LLC200D3SH digital liquid level switch
            </summary>
        </member>
        <member name="M:Iot.Device.LiquidLevel.Llc200d3sh.#ctor(System.Int32,System.Device.Gpio.GpioController,System.Device.Gpio.PinNumberingScheme,System.Boolean)">
            <summary>Creates a new instance of the Llc200d3sh.</summary>
            <param name="pin">The data pin</param>
            <param name="pinNumberingScheme">Use the logical or physical pin layout</param>
            <param name="gpioController">A Gpio Controller if you want to use a specific one</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Lis3DhAccelerometer.AccelerationScale">
            <summary>
            Acceleration scale
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.AccelerationScale.Scale02G">
            <summary>
            Acceleration 2G
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.AccelerationScale.Scale04G">
            <summary>
            Acceleration 4G
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.AccelerationScale.Scale08G">
            <summary>
            Acceleration 8G
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.AccelerationScale.Scale16G">
            <summary>
            Acceleration 16G
            </summary>
        </member>
        <member name="T:Iot.Device.Lis3DhAccelerometer.DataRate">
            <summary>
            Data rate selection
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.PowerDownMode">
            <summary>
            Power down mode
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate1Hz">
            <summary>
            Data rate 1Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate10Hz">
            <summary>
            Data rate 10Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate25Hz">
            <summary>
            Data rate 25Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate50Hz">
            <summary>
            Data rate 50Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate100Hz">
            <summary>
            Data rate 100Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate200Hz">
            <summary>
            Data rate 200Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.DataRate400Hz">
            <summary>
            Data rate 400Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.LowPowerMode1600Hz">
            <summary>
            Data rate 1.6kHz - this data rate mode is only applicable for LowPowerMode
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.DataRate.HighResolutionNormal1344HzOrLowPowerMode5376Hz">
            <summary>
            Data rate, for HighResolutionMode or NormalMode 1.344kHz, for LowPowerMode 5.376kHz
            </summary>
        </member>
        <member name="T:Iot.Device.Lis3DhAccelerometer.Lis3Dh">
            <summary>
            LIS3DH accelerometer
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.Lis3Dh.DefaultI2cAddress">
            <summary>
            Default I2C address (SDO/SA0 pin low)
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.Lis3Dh.SecondaryI2cAddress">
            <summary>
            Secondary I2C address (SDO/SA0 pin high)
            </summary>
        </member>
        <member name="P:Iot.Device.Lis3DhAccelerometer.Lis3Dh.DataRate">
            <summary>
            Data rate
            </summary>
        </member>
        <member name="P:Iot.Device.Lis3DhAccelerometer.Lis3Dh.OperatingMode">
            <summary>
            Operating mode
            </summary>
        </member>
        <member name="P:Iot.Device.Lis3DhAccelerometer.Lis3Dh.AccelerationScale">
            <summary>
            Acceleration scale
            </summary>
        </member>
        <member name="M:Iot.Device.Lis3DhAccelerometer.Lis3Dh.GetI2cAddress(System.Device.Gpio.PinValue)">
            <summary>
            Gets I2C address depending on SDO/SA0 pin.
            </summary>
            <param name="sdoPinValue">SDO pin value. Pin may be also called SA0</param>
            <returns>I2C address</returns>
        </member>
        <member name="M:Iot.Device.Lis3DhAccelerometer.Lis3Dh.Create(System.Device.I2c.I2cDevice,Iot.Device.Lis3DhAccelerometer.DataRate,Iot.Device.Lis3DhAccelerometer.OperatingMode,Iot.Device.Lis3DhAccelerometer.AccelerationScale)">
            <summary>
            Creates Lis3Dh instance using I2cDevice
            </summary>
            <param name="i2cDevice">I2C device</param>
            <param name="dataRate">Data rate</param>
            <param name="operatingMode">Operating mode</param>
            <param name="accelerationScale">Acceleration scale</param>
            <returns>Lis3Dh instance</returns>
        </member>
        <member name="P:Iot.Device.Lis3DhAccelerometer.Lis3Dh.Acceleration">
            <summary>
            Acceleration measured in gravitational force
            </summary>
        </member>
        <member name="M:Iot.Device.Lis3DhAccelerometer.Lis3Dh.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Lis3DhAccelerometer.Lis3DhI2c.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Lis3DhAccelerometer.OperatingMode">
            <summary>
            Operating mode selection
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.OperatingMode.HighResolutionMode">
            <summary>
            Power down mode
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.OperatingMode.NormalMode">
            <summary>
            Normal mode
            </summary>
        </member>
        <member name="F:Iot.Device.Lis3DhAccelerometer.OperatingMode.LowPowerMode">
            <summary>
            Low power mode
            </summary>
        </member>
        <member name="T:Iot.Device.Lm75.Register">
            <summary>
            LM75 Register
            </summary>
        </member>
        <member name="T:Iot.Device.Lm75.Lm75">
            <summary>
            Digital Temperature Sensor LM75
            </summary>
        </member>
        <member name="F:Iot.Device.Lm75.Lm75.DefaultI2cAddress">
            <summary>
            LM75 I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Lm75.Lm75.Temperature">
            <summary>
            LM75 Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Lm75.Lm75.Disabled">
            <summary>
            Disable LM75
            </summary>
        </member>
        <member name="M:Iot.Device.Lm75.Lm75.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the LM75
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Lm75.Lm75.GetTemperature">
            <summary>
            Read LM75 Temperature (℃)
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.Lm75.Lm75.SetShutdown(System.Boolean)">
            <summary>
            Set LM75 Shutdown
            </summary>
            <param name="isShutdown">Shutdown when value is true.</param>
        </member>
        <member name="M:Iot.Device.Lm75.Lm75.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Lp55231.Control1RegisterFlags">
            <summary>
            Flags related to the REG_CNTRL1 register
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.Control1RegisterFlags.Enabled">
            <summary>
            Enable the Lp55231
            </summary>
        </member>
        <member name="T:Iot.Device.Lp55231.Lp55231">
            <summary>
            Lp55231 9 channel I2C PWM LED controller
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.Lp55231.DefaultI2cAddress">
            <summary>
            Default I2C address of Motor Hat
            </summary>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.RedChannel(System.Byte)">
            <summary>
            Gets the channel of the red element of the specific instance
            </summary>
            <param name="instance">The RGB instance (0-2)</param>
            <returns>The channel number</returns>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.GreenChannel(System.Byte)">
            <summary>
            Gets the channel of the green element of the specific instance
            </summary>
            <param name="instance">The RGB instance (0-2)</param>
            <returns>The channel number</returns>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.BlueChannel(System.Byte)">
            <summary>
            Gets the channel of the blue element of the specific instance
            </summary>
            <param name="instance">The RGB instance (0-2)</param>
            <returns>The channel number</returns>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Lp55231.Lp55231"/> class with the specified <see cref="T:System.Device.I2c.I2cDevice"/>.
            </summary>
            <param name="i2cDevice">The I2C device to use to communicate with the Lp55231.</param>
            <remarks>
            The default i2c address is 0x32.
            </remarks>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Lp55231.Lp55231.Reset">
            <summary>
            Resets the Lp55231
            </summary>
            <remarks>
            You should delay after calling this method
            </remarks>
        </member>
        <member name="P:Iot.Device.Lp55231.Lp55231.Enabled">
            <summary>
            Gets/sets whether the Lp55231 is enabled.
            </summary>
            <remarks>
            Setting this value will stop eny programs currently running.
            </remarks>
        </member>
        <member name="P:Iot.Device.Lp55231.Lp55231.Misc">
            <summary>
            Gets/sets miscellaneous control flags
            </summary>
        </member>
        <member name="P:Iot.Device.Lp55231.Lp55231.Item(System.Byte)">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Color"/> of the LED at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the LED.</param>
            <returns>The current <see cref="T:System.Drawing.Color"/> of the LED.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index must be between 0 and 2.</exception>
        </member>
        <member name="T:Iot.Device.Lp55231.MiscFlags">
            <summary>
            Flags related to the REG_MISC register
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.ClockSourceSelection">
            <summary>
            Use internal clock
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.ExternalClockDetection">
            <summary>
            Use external clock
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.PwmCyclePowersaveEnable">
            <summary>
            Enable PWM cycle power save
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.ChargeModeGainLowBit">
            <summary>
            Charge mode gain low bit
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.ChargeModeGainHighBit">
            <summary>
            Charge mode gain high bit
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.PowersaveModeEnable">
            <summary>
            Enable power save mode
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.MiscFlags.AddressAutoIncrementEnable">
            <summary>
            Enable auto address increment
            </summary>
        </member>
        <member name="T:Iot.Device.Lp55231.Register">
            <summary>
            Registers for the Lp55231 based on this reference: https://www.ti.com/lit/gpn/lp55231
            </summary>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_CNTRL1">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_CNTRL2">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_RATIO_MSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_RATIO_LSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_OUTPUT_ONOFF_MSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_OUTPUT_ONOFF_LSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D1_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D2_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D3_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D4_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D5_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D6_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D7_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D8_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D9_CTRL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D1_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D2_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D3_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D4_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D5_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D6_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D7_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D8_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D9_PWM">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D1_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D2_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D3_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D4_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D5_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D6_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D7_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D8_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_D9_I_CTL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_MISC">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PC1">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PC2">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PC3">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_STATUS_IRQ">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_RESET">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG1_START">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG2_START">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG3_START">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG_PAGE_SEL">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG_MEM_BASE">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_PROG_MEM_END">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG1_MAP_MSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG1_MAP_LSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG2_MAP_MSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG2_MAP_LSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG3_MAP_MSB">
            <summary/>
        </member>
        <member name="F:Iot.Device.Lp55231.Register.REG_ENG3_MAP_LSB">
            <summary/>
        </member>
        <member name="T:Iot.Device.Lps25h.Lps25h">
            <summary>
            LPS25H - Piezoresistive pressure and thermometer sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Lps25h.Lps25h.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Lps25h - Pressure and temperature sensor
            </summary>
        </member>
        <member name="P:Iot.Device.Lps25h.Lps25h.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Lps25h.Lps25h.Pressure">
            <summary>
            Pressure
            </summary>
        </member>
        <member name="M:Iot.Device.Lps25h.Lps25h.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Lsm9Ds1.AccelerationScale">
            <summary>
            Acceleration scale
            </summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AccelerationScale.Scale02G">
            <summary>Acceleration 2G</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AccelerationScale.Scale16G">
            <summary>Acceleration 16G</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AccelerationScale.Scale04G">
            <summary>Acceleration 4G</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AccelerationScale.Scale08G">
            <summary>Acceleration 8G</summary>
        </member>
        <member name="T:Iot.Device.Lsm9Ds1.AngularRateScale">
            <summary>
            Angular rate scale
            </summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AngularRateScale.Scale0245Dps">
            <summary>245 degrees per second (DPS)</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AngularRateScale.Scale0500Dps">
            <summary>500 degrees per second (DPS)</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.AngularRateScale.Scale2000Dps">
            <summary>2000 degrees per second (DPS)</summary>
        </member>
        <member name="T:Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope">
            <summary>
            LSM9DS1 accelerometer and gyroscope
            </summary>
        </member>
        <member name="M:Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Lsm9Ds1.AccelerationScale,Iot.Device.Lsm9Ds1.AngularRateScale)">
            <summary>
            Lsm9Ds1 - Accelerometer and Gyroscope bus
            </summary>
        </member>
        <member name="P:Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.AngularRate">
            <summary>
            Acceleration measured in degrees per second (DPS)
            </summary>
        </member>
        <member name="P:Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.Acceleration">
            <summary>
            Acceleration measured in gravitational force
            </summary>
        </member>
        <member name="M:Iot.Device.Lsm9Ds1.Lsm9Ds1AccelerometerAndGyroscope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer">
            <summary>
            LSM9DS1 magnetometer
            </summary>
        </member>
        <member name="M:Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Lsm9Ds1.MagneticInductionScale)">
            <summary>
            Lsm9Ds1 - Magnetometer bus
            </summary>
        </member>
        <member name="P:Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer.MagneticInduction">
            <summary>
            Magnetic Induction measured in Gauss (G)
            </summary>
        </member>
        <member name="M:Iot.Device.Lsm9Ds1.Lsm9Ds1Magnetometer.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Lsm9Ds1.MagneticInductionScale">
            <summary>
            Magnetic induction scale
            </summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.MagneticInductionScale.Scale04G">
            <summary>4G scale</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.MagneticInductionScale.Scale08G">
            <summary>8G scale</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.MagneticInductionScale.Scale12G">
            <summary>12G scale</summary>
        </member>
        <member name="F:Iot.Device.Lsm9Ds1.MagneticInductionScale.Scale16G">
            <summary>16G scale</summary>
        </member>
        <member name="T:Iot.Device.M5Stack.M5ToughPowerControl">
            <summary>
            High-level abstraction for the AXP192 in an M5Tough enclosure.
            This binding knows the hardware connections from the ESP32 CPU to the AXP192 and the connected hardware and directly offers to toggle named devices (e.g. switch the
            display backlight on and off.
            </summary>
            <remarks>
            This binding is useful together with the Arduino/Firmata binding or the Arduino Compiler.
            </remarks>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.#ctor(Iot.Device.Board.Board)">
            <summary>
            Create an instance of this class
            </summary>
            <param name="board">The board connection (typically an instance of ArduinoBoard)</param>
        </member>
        <member name="P:Iot.Device.M5Stack.M5ToughPowerControl.EnableSpeaker">
            <summary>
            True to enable the speaker, false to mute it.
            </summary>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.Init">
            <summary>
            Configures the AXP hardware to default operational settings.
            Enables the LCD and sets the default charging mode for the optional battery.
            </summary>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.Beep(System.TimeSpan)">
            <summary>
            Beeps using the speaker for the given time, using a fixed frequency
            </summary>
            <param name="duration">The duration of the beep</param>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.SetLcdVoltage(UnitsNet.ElectricPotential)">
            <summary>
            Set LCD backlight voltage. Valid values range from 1.8 - 3.3V. Low values switch off the backlight completely
            </summary>
            <param name="voltage">The voltage to set</param>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.Sleep(System.Boolean)">
            <summary>
            Enter and leave low-power mode.
            The physical power button that is normally used to recover the AXP from sleep mode is not accessible on the M5Tough when the case is closed.
            After setting the AXP to sleep, we send the CPU to sleep as well. It will only wake up on tapping the screen.
            </summary>
            <param name="enterSleep">True to enter sleep, false to recover from sleep.</param>
            <remarks>After recovering from sleep mode, some peripheral devices might need to be restarted (such as the display controller)</remarks>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.GetPowerControlData">
            <summary>
            Gets a data set of current power parameters (power consumption, battery level, etc.)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.Dispose(System.Boolean)">
            <summary>
            Default dispose implementation
            </summary>
            <param name="disposing">True to dispose managed resources, false to dispose only unmanaged resources</param>
        </member>
        <member name="M:Iot.Device.M5Stack.M5ToughPowerControl.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Max31856.Max31856">
            <summary>
            Max31856  - cold-junction compensated thermocouple to digital converter
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Max31856.SpiClockFrequency">
            <summary>
            Spi Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Max31856.SpiDataFlow">
            <summary>
            SPI data flow
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Max31856.SpiModeSetup">
            <summary>
            SPI Mode
            </summary>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.GetTemperature">
            <summary>
            Command to Get Temperature from the device
            </summary>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.GetColdJunctionTemperature">
            <summary>
             Reads the temperature from the Cold-Junction sensor
            </summary>
            <returns>
            Temperature, precision +- 0.7 Celsius range from -20 Celsius to +85 Celsius
            </returns>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.#ctor(System.Device.Spi.SpiDevice,Iot.Device.Max31856.ThermocoupleType)">
            <summary>
            Creates a new instance of the Max31856.
            </summary>
            <param name="spiDevice">The communications channel to a device on a SPI bus</param>
            <param name="thermocoupleType">Thermocouple type. It Defaults to T.</param>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.Initialize">
            <summary>
            Standard initialization routine.
            </summary>
            /// <remarks>
            You can add new write lines if you want to alter the settings of the device. Settings can be found in the Technical Manual
            </remarks>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.ReadCJTemperature">
            <summary>
            Command to Get Temperature from the Device
            </summary>
            <remarks>
            Initializes the device and then reads the data for the cold junction temperature also checks for errors to throw
            </remarks>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.ReadTemperature(System.Byte[]@)">
            <summary>
            Converts the Thermocouple Temperature Reading
            </summary>
            <remarks>
            Takes the spi data as an input and outputs the Thermocouple Temperature Reading
            </remarks>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.ConvertspiOutputDataTempColdJunction(System.Byte[])">
            <summary>
            Converts Cold Junction Temperature Reading
            </summary>
            <remarks>
            Takes the spi data as an input and outputs the Cold Junction Temperature Reading
            </remarks>
            <param name="spiOutputData">Spidata read from the device as 16 bytes</param>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.Write(System.Span{System.Byte})">
            <summary>
            Writes the Data to the Spi Device
            </summary>
            <remarks>
            Takes the data input byte and writes it to the spi device
            </remarks>
            <param name="data">Data to write to the device</param>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.WriteRead(Iot.Device.Max31856.Register,System.Int32)">
            <summary>
            Full Duplex Read of the Data on the Device
            </summary>
            <remarks>
            Writes the read address of the register and outputs a byte list of the length provided
            </remarks>
            /// <param name="register">Register location to write to which starts the device reading</param>
            /// <param name="readbytesize">Number of bytes being read</param>
        </member>
        <member name="M:Iot.Device.Max31856.Max31856.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Max31856.Register">
            <summary>
            Register of Max31856
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.READ_CR0">
            <summary>
            Read Register for CR0
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.READ_CR1">
            <summary>
            Read Register for CR1
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.WRITE_CR0">
            <summary>
            Write Register for CR0
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.WRITE_CR1">
            <summary>
            Write Register for CR1
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.ERROR_OPEN">
            <summary>
            Error code for an open thermocouple line which could be from a broken wire or disconnected device
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.Register.ONESHOT_FAULT_SETTING">
            <summary>
            One shot read on register CR0 with the fault detection enabled
            </summary>
        </member>
        <member name="T:Iot.Device.Max31856.ThermocoupleType">
            <summary>
            Sets the Thermocouple Type
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.B">
            <summary>
            Type B thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.E">
            <summary>
            Type E thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.J">
            <summary>
            Type J thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.K">
            <summary>
            Type K thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.N">
            <summary>
            Type N thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.R">
            <summary>
            Type R thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.S">
            <summary>
            Type S thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Max31856.ThermocoupleType.T">
            <summary>
            Type T thermocouple
            </summary>
        </member>
        <member name="T:Iot.Device.Max31865.ConversionFilterMode">
            <summary>
            Notch frequencies for the noise rejection filter
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.ConversionFilterMode.Filter50Hz">
            <summary>
            Reject 50Hz and its harmonics
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.ConversionFilterMode.Filter60Hz">
            <summary>
            Reject 60Hz and its harmonics
            </summary>
        </member>
        <member name="T:Iot.Device.Max31865.FaultStatus">
            <summary>
            MAX31865 Fault Status
            </summary>
            <param name="OverUnderVoltage">If an overvoltage or undervoltage has occurred.</param>
            <param name="ResistanceTemperatureDetectorLow">Resistance temperature detector is low.</param>
            <param name="ReferenceInLow">Reference in is low.</param>
            <param name="ReferenceInHigh">Reference in is high.</param>
            <param name="LowThreshold">The ADC conversion is less than or equal to the low threshold.</param>
            <param name="HighThreshold">The ADC conversion is greater than or equal to the high threshold.</param>
        </member>
        <member name="M:Iot.Device.Max31865.FaultStatus.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            MAX31865 Fault Status
            </summary>
            <param name="OverUnderVoltage">If an overvoltage or undervoltage has occurred.</param>
            <param name="ResistanceTemperatureDetectorLow">Resistance temperature detector is low.</param>
            <param name="ReferenceInLow">Reference in is low.</param>
            <param name="ReferenceInHigh">Reference in is high.</param>
            <param name="LowThreshold">The ADC conversion is less than or equal to the low threshold.</param>
            <param name="HighThreshold">The ADC conversion is greater than or equal to the high threshold.</param>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.OverUnderVoltage">
            <summary>If an overvoltage or undervoltage has occurred.</summary>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.ResistanceTemperatureDetectorLow">
            <summary>Resistance temperature detector is low.</summary>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.ReferenceInLow">
            <summary>Reference in is low.</summary>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.ReferenceInHigh">
            <summary>Reference in is high.</summary>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.LowThreshold">
            <summary>The ADC conversion is less than or equal to the low threshold.</summary>
        </member>
        <member name="P:Iot.Device.Max31865.FaultStatus.HighThreshold">
            <summary>The ADC conversion is greater than or equal to the high threshold.</summary>
        </member>
        <member name="T:Iot.Device.Max31865.Max31865">
            <summary>
            MAX31865 Resistance Temperature Detector to Digital Converter
            </summary>
            <remarks>
            Documentation https://datasheets.maximintegrated.com/en/ds/MAX31865.pdf
            </remarks>
        </member>
        <member name="F:Iot.Device.Max31865.Max31865.SpiClockFrequency">
            <summary>
            MAX31865 Spi Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.Max31865.SpiMode1">
            <summary>
            MAX31865 SPI Mode 1
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.Max31865.SpiMode3">
            <summary>
            MAX31865 SPI Mode 3
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.Max31865.SpiDataFlow">
            <summary>
            MAX31865 SPI Data Flow
            </summary>
        </member>
        <member name="P:Iot.Device.Max31865.Max31865.Temperature">
            <summary>
            MAX31865 Temperature
            </summary>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.#ctor(System.Device.Spi.SpiDevice,Iot.Device.Max31865.PlatinumResistanceThermometerType,Iot.Device.Max31865.ResistanceTemperatureDetectorWires,UnitsNet.ElectricResistance,Iot.Device.Max31865.ConversionFilterMode,System.Boolean)">
            <summary>
            Creates a new instance of the MAX31865.
            </summary>
            <param name="spiDevice">The communications channel to a device on a SPI bus</param>
            <param name="platinumResistanceThermometerType">The type of Platinum Resistance Thermometer</param>
            <param name="resistanceTemperatureDetectorWires">The number of wires the Platinum Resistance Thermometer has</param>
            <param name="referenceResistor">The reference resistor value in Ohms.</param>
            <param name="filterMode">Noise rejection filter mode</param>
            <param name="shouldDispose">True to dispose the SPI device</param>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Max31865.Max31865.Faults">
            <summary>
            The fault state of the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.Initialize">
            <summary>
            Standard initialization routine.
            </summary>
            <remarks>
            You can add new write lines if you want to alter the settings of the device. Settings can be found in the Technical Manual
            </remarks>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.ClearFaults">
            <summary>
            Clears all the faults
            </summary>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.EnableBias(System.Boolean)">
            <summary>
            Enable/Disable the bias voltage on the resistance temperature detector sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.EnableOneShot(System.Boolean)">
            <summary>
            Enable/Disable the one shot mode on the resistance temperature detector sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.GetTemperature">
            <summary>
            Reads the raw resistance temperature detector value and converts it to a temperature using the Callender Van Dusen temperature conversion of 15 bit ADC resistance ratio data.
            </summary>
            <remarks>
            This math originates from: http://www.analog.com/media/en/technical-documentation/application-notes/AN709_0.pdf
            </remarks>
            <returns>Temperature in degrees celsius</returns>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.GetResistance">
            <summary>
            Read the resistance of the resistance temperature detector.
            </summary>
            <returns>Resistance in Ohms</returns>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.ReadRawRTD">
            <summary>
            Read the raw 16-bit value from the resistance temperature detector reistance registers in one shot mode
            </summary>
            <returns>The raw 16-bit value, NOT temperature</returns>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the Data to the Spi Device
            </summary>
            <remarks>
            Takes the data input byte and writes it to the spi device
            </remarks>
            <param name="data">Data to write to the device</param>
        </member>
        <member name="M:Iot.Device.Max31865.Max31865.WriteRead(Iot.Device.Max31865.Register,System.Span{System.Byte})">
            <summary>
            Full Duplex Read of the Data on the Spi Device
            </summary>
            <remarks>
            Writes the read address of the register and outputs a byte list of the length provided
            </remarks>
            <param name="register">Register location to write to which starts the device reading</param>
            <param name="readBuffer">Number of bytes being read</param>
        </member>
        <member name="T:Iot.Device.Max31865.PlatinumResistanceThermometerType">
            <summary>
            Type of Platinum Thermometer temperature sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.PlatinumResistanceThermometerType.Pt100">
            <summary>
            Platinum Thermometer 100 temperature sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.PlatinumResistanceThermometerType.Pt1000">
            <summary>
            Platinum Thermometer 1000 temperature sensor
            </summary>
        </member>
        <member name="T:Iot.Device.Max31865.Register">
            <summary>
            Register of the MAX31865 RTD-to-Digital Converter
            </summary>
        </member>
        <member name="T:Iot.Device.Max31865.ResistanceTemperatureDetectorWires">
            <summary>
            Number of platinum thermometer sensor wires
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.ResistanceTemperatureDetectorWires.TwoWire">
            <summary>
            Two wire platinum thermometer sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.ResistanceTemperatureDetectorWires.ThreeWire">
            <summary>
            Three wire platinum thermometer sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Max31865.ResistanceTemperatureDetectorWires.FourWire">
            <summary>
            Four wire platinum thermometer sensor
            </summary>
        </member>
        <member name="T:Iot.Device.Max44009.IntegrationTime">
            <summary>
            Measurement Cycle
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time800">
            <summary>
            800ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time400">
            <summary>
            400ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time200">
            <summary>
            200ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time100">
            <summary>
            100ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time050">
            <summary>
            50ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time025">
            <summary>
            25ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time012_5">
            <summary>
            12.5ms
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.IntegrationTime.Time006_25">
            <summary>
            6.25ms
            </summary>
        </member>
        <member name="T:Iot.Device.Max44009.Max44009">
            <summary>
            Ambient Light Sensor MAX44009
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.Max44009.DefaultI2cAddress">
            <summary>
            MAX44009 Default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Max44009.Max44009.Illuminance">
            <summary>
            MAX44009 Illuminance (Lux)
            </summary>
        </member>
        <member name="M:Iot.Device.Max44009.Max44009.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the MAX44009, MAX44009 working mode is default. (Consume lowest power)
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Max44009.Max44009.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Max44009.IntegrationTime)">
            <summary>
            Creates a new instance of the MAX44009, MAX44009 working mode is continuous. (Consume slightly higher power than in the default mode)
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="integrationTime">Measurement Cycle</param>
        </member>
        <member name="M:Iot.Device.Max44009.Max44009.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:Iot.Device.Max44009.Max44009.GetIlluminance">
            <summary>
            Get MAX44009 Illuminance (Lux)
            </summary>
            <returns>Illuminance (Lux)</returns>
        </member>
        <member name="T:Iot.Device.Max44009.WorkingMode">
            <summary>
            MAX44009 Working Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.WorkingMode.Default">
            <summary>
            Measure lux intensity only once every 800ms regardless of integration time.
            </summary>
        </member>
        <member name="F:Iot.Device.Max44009.WorkingMode.Continuous">
            <summary>
            Measure lux intensity continuously.
            If integration time is 6.25ms, readings are taken every 6.25ms. If integration time is 800ms, readings are taken every 800ms.
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.Max7219">
            <summary>
            Max7219 LED matrix driver
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Max7219.SpiClockFrequency">
            <summary>
            MAX7219 Spi Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Max7219.SpiMode">
            <summary>
            MAX7219 SPI Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Max7219.NumDigits">
            <summary>
            Number of digits Register per Module
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Max7219._writeBuffer">
            <summary>
            internal buffer used to write to registers for all devices.
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Max7219._buffer">
            <summary>
            A Buffer that contains the values of the digits registers per device
            </summary>
        </member>
        <member name="P:Iot.Device.Max7219.Max7219.CascadedDevices">
            <summary>
            Number of cascaded devices
            </summary>
            <value></value>
        </member>
        <member name="P:Iot.Device.Max7219.Max7219.Rotation">
            <summary>
            The Rotation to be applied (when modules are assembled rotated way)
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.#ctor(System.Device.Spi.SpiDevice,System.Int32,Iot.Device.Max7219.RotationType)">
            <summary>
            Creates a Max7219 Device given a <see paramref="spiDevice" /> to communicate over and the
            number of devices that are cascaded.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Init">
            <summary>
            Standard initialization routine.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.SetRegister(Iot.Device.Max7219.Register,System.Byte)">
            <summary>
            Sends data to a specific register replicated for all cascaded devices
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Write(System.Span{System.Byte})">
            <summary>
            Write data do the spi device.
            </summary>
            <remarks>
            The size of the data should be 2 * cascaded devices.
            </remarks>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Brightness(System.Int32)">
            <summary>
            Sets the brightness of all cascaded devices to the same intensity level.
            </summary>
            <param name="intensity">intensity level ranging from 0..15. </param>
        </member>
        <member name="P:Iot.Device.Max7219.Max7219.Item(System.Int32,System.Int32)">
            <summary>
            Gets or Sets the value to the digit value for a given device
            and digit position
            </summary>
        </member>
        <member name="P:Iot.Device.Max7219.Max7219.Item(System.Int32)">
            <summary>
            Gets or Sets the value to the digit value for a given absolute index
            </summary>
        </member>
        <member name="P:Iot.Device.Max7219.Max7219.Length">
            <summary>
            Gets the total number of digits (cascaded devices * num digits)
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Flush">
            <summary>
            Writes all the Values to the devices.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.WriteBuffer(System.Byte[0:,0:])">
            <summary>
            Writes a two dimensional buffer containing all the values to the devices.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.WriteBufferWithoutRotation(System.Byte[0:,0:])">
            <summary>
            Writes a two dimensional buffer containing all the values to the devices without roation
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.WriteBufferRotateHalf(System.Byte[0:,0:])">
            <summary>
            Writes a two dimensional buffer containing all the values to the devices
            rotating values by 180 degree.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.WriteBufferRotateRight(System.Byte[0:,0:])">
            <summary>
            Writes a two dimensional buffer containing all the values to the devices
            rotating values to the right.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.WriteBufferRotateLeft(System.Byte[0:,0:])">
            <summary>
            Writes a two dimensional buffer containing all the values to the devices
            rotating values to the left.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.ValidateBuffer(System.Byte[0:,0:])">
            <summary>
            Validates the buffer dimensions.
            </summary>
            <param name="buffer">Buffer to validate</param>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Clear(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Clears the buffer from the given start to end (exclusive) and flushes
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.ClearAll(System.Boolean)">
            <summary>
            Clears the buffer from the given start to end and flushes
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.Max7219.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Max7219.MatrixGraphics">
            <summary>
            Graphical functions for a MAX7219 device
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.#ctor(Iot.Device.Max7219.Max7219,Iot.Device.Max7219.IFont)">
            <summary>
            Constructs MatrixGraphics instance
            </summary>
            <param name="device">Max7219 device</param>
            <param name="font">Font to use for drawing text</param>
        </member>
        <member name="P:Iot.Device.Max7219.MatrixGraphics.Font">
            <summary>
            Font used for drawing text
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.WriteLetter(System.Int32,System.Char,System.Boolean)">
            <summary>
            Writes a char to the given device with the specified font.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.ScrollUp(System.Boolean)">
            <summary>
             Scrolls the underlying buffer (for all cascaded devices) up one pixel
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.ScrollDown(System.Boolean)">
            <summary>
            Scrolls the underlying buffer (for all cascaded devices) down one pixel
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.ScrollLeft(System.Byte,System.Boolean)">
            <summary>
            Scrolls the underlying buffer (for all cascaded devices) to the left
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.ScrollRight(System.Byte,System.Boolean)">
            <summary>
            Scrolls the underlying buffer (for all cascaded devices) to the right
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.MatrixGraphics.ShowMessage(System.String,System.Int32,System.Boolean)">
            <summary>
            Shows a message on the device.
            If it's longer then the total width (or <see paramref="alwaysScroll"/> == true),
            it transitions the text message across the devices from right-to-left.
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.IFont">
             <summary>
             A font contains one list of bytes per character which can be written to the matrix to represent the character.
             </summary>
             <remarks>
             Each character consists of a list of bytes where a single byte represents a column of the display.
             </remarks>
            
             <example>
             This example shows how the 'A' char could by encoded:
             <code>
             var aBytes = new byte[] {
                 0b1111100,
                 0b1111110,
                 0b0010011,
                 0b0010011,
                 0b1111110,
                 0b1111100,
                 0b0000000,
                 0b0000000
             };
             </code>
            
             </example>
        </member>
        <member name="P:Iot.Device.Max7219.IFont.Item(System.Char)">
            <summary>
            Returns a list of bytes for a given character to be written to a matrix.
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.Register">
            <summary>
            Register of the Max7219 Display Driver
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.RotationType">
            <summary>
            Rotation if several displays are rotated in a row.
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.RotationType.None">
            <summary>
            No rotation needed
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.RotationType.Right">
            <summary>
            each device is turned 90 degree to the right
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.RotationType.Half">
            <summary>
            each device is turned by 180 degree
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.RotationType.Left">
            <summary>
            each device is turned 90 degree to the left
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.Fonts">
            <summary>
            Data about Max7219 fonts
            </summary>
        </member>
        <member name="P:Iot.Device.Max7219.Fonts.Default">
            <summary>
            Default Max7219 font
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Fonts.CP437">
            <summary>
            CP437 font data
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Fonts.Sinclair">
            <summary>
            Sinclair font
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Fonts.LCD">
            <summary>
            LCD font
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Fonts.CyrillicUkrainian">
            <summary>
            Cyrillic Ukrainian font
            </summary>
        </member>
        <member name="F:Iot.Device.Max7219.Fonts.Tiny">
            <summary>
            Tiny font
            </summary>
        </member>
        <member name="T:Iot.Device.Max7219.FixedSizeFont">
            <summary>
            Implementation of a <see cref="T:Iot.Device.Max7219.IFont"/> that uses a common array for all characters.
            The number of bytes per character is constant and zero values between the characters are trimmed.
            </summary>
        </member>
        <member name="M:Iot.Device.Max7219.FixedSizeFont.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Constructs FixedSizeFont instance
            </summary>
            <param name="bytesPerCharacter">number of bytes per character</param>
            <param name="data">Font data</param>
            <param name="spaceWidth">Space width</param>
        </member>
        <member name="P:Iot.Device.Max7219.FixedSizeFont.Item(System.Char)">
            <summary>
            Get character information
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.BankStyle">
            <summary>
            The MCP28XXX family has an address mapping concept for accessing registers.
            This provides a way to easily address registers by group or type. This is only
            relevant for 16-bit devices where it has two banks (Port A and B) of 8-bit
            GPIO pins.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.BankStyle.Sequential">
             <summary>
             This mode is used specifically for 16-bit devices where it treats the
             two 8-bit banks as one 16-bit bank.
             </summary>
             <remarks>
             Each of the registers are interleaved so that sending two bytes in a
             row will set the equivalent register for the second bank. This way you
             can set all 16 GPIO pins/settings with one command sequence.
            
             Note that this behavior is also dependent on the default behavior
             of IOCON.SEQOP = 0 (the default) which automatically increments the
             register address as bytes come in.
            
             This is IOCON.BANK = 0 and is the default.
             </remarks>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.BankStyle.Separated">
             <summary>
             This mode keeps the two 8-bit banks registers separate.
             </summary>
             <remarks>
             While this keeps the register addresses for bank A the same as the
             8-bit controllers it requires sending a separate command sequence to
             set all 16-bits as the second bank's register addresses are not
             sequential.
            
             Changing IOCON.SEQOP to 1 (not the default) will cause the
             register address pointer to toggle between Port A and B for the
             given register if in this mode.
            
             This is IOCON.BANK = 1.
             </remarks>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23xxx">
            <summary>
            Base class for Mcp23xxx GPIO expanders
            </summary>
            <summary>
            Base class for Mcp23xxx GPIO expanders
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23xxx.I2cAdapter">
            <summary>
            I2C adapter
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.I2cAdapter.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs I2cAdapter instance
            </summary>
            <param name="device">I2C device</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.I2cAdapter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.I2cAdapter.Read(System.Byte,System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.I2cAdapter.Write(System.Byte,System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter">
            <summary>
            Bus adapter
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter.Read(System.Byte,System.Span{System.Byte})">
            <summary>
            Reads bytes from the device register
            </summary>
            <param name="registerAddress">Register address</param>
            <param name="buffer">Bytes to be read from the register</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter.Write(System.Byte,System.Span{System.Byte})">
            <summary>
            Writes bytes to the device register
            </summary>
            <param name="registerAddress">Register address</param>
            <param name="data">Bytes to be written to the register</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter.Dispose">
            <inheritdoc/>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Mcp23xxx._bus">
            <summary>
            Bus adapter (I2C/SPI) used to communicate with the device
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.#ctor(Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,Iot.Device.Mcp23xxx.BankStyle,System.Boolean)">
            <summary>
            A general purpose parallel I/O expansion for I2C or SPI applications.
            </summary>
            <param name="bus">The bus the device is connected to.</param>
            <param name="reset">The output pin number that is connected to the hardware reset.</param>
            <param name="interruptA">The input pin number that is connected to the interrupt for Port A (INTA).</param>
            <param name="interruptB">The input pin number that is connected to the interrupt for Port B (INTB).</param>
            <param name="gpioController">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="bankStyle">
            The current bank style of the ports. This does not set the bank style- it tells us what the bank style is.
            It is *highly* recommended not to change the bank style from the default as there is no direct way to
            detect what style the chip is in and most apps will fail if the chip is not set to defaults. This setting
            has no impact on 8-bit expanders.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalRead(Iot.Device.Mcp23xxx.Register,System.Span{System.Byte},Iot.Device.Mcp23xxx.Port)">
            <summary>
            Reads a number of bytes from registers.
            </summary>
            <param name="register">The register to read from.</param>
            <param name="buffer">The buffer to read bytes into.</param>
            <param name="port">The I/O port used with the register.</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalWrite(Iot.Device.Mcp23xxx.Register,System.Span{System.Byte},Iot.Device.Mcp23xxx.Port)">
            <summary>
            Writes a number of bytes to registers.
            </summary>
            <param name="register">The register address to write to.</param>
            <param name="data">The data to write to the registers.</param>
            <param name="port">The I/O port used with the registers.</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalReadByte(Iot.Device.Mcp23xxx.Register,Iot.Device.Mcp23xxx.Port)">
            <summary>
            Reads byte from the device register
            </summary>
            <param name="register">Register to read the value from</param>
            <param name="port">Port related with the <paramref name="register"/></param>
            <returns>Byte read from the device register</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalWriteByte(Iot.Device.Mcp23xxx.Register,System.Byte,Iot.Device.Mcp23xxx.Port)">
            <summary>
            Write byte to device register
            </summary>
            <param name="register">Register to write the value to</param>
            <param name="value">Value to be written to the <paramref name="register"/></param>
            <param name="port">Port related with the <paramref name="register"/></param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.ReadByte(Iot.Device.Mcp23xxx.Register)">
            <summary>
            Read a byte from the given register.
            </summary>
            <remarks>
            Reads from the A port registers on 16 bit devices.
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.WriteByte(Iot.Device.Mcp23xxx.Register,System.Byte)">
            <summary>
            Write a byte to the given register.
            </summary>
            <remarks>
            Writes to the A port registers on 16 bit devices.
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalReadUInt16(Iot.Device.Mcp23xxx.Register)">
            <summary>
            Read 16-bit unsigned integer from the device register
            </summary>
            <param name="register">Register to read the value from</param>
            <returns>16-bit unsigned integer read from the device</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalWriteUInt16(Iot.Device.Mcp23xxx.Register,System.UInt16)">
            <summary>
            Writes 16-bit unsigned integer to the device register
            </summary>
            <param name="register">Register to write <paramref name="value"/> to</param>
            <param name="value">16-bit unsigned integer to write to the <paramref name="register"/></param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Disable">
            <summary>
            Disables the device by setting the reset pin low.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Enable">
            <summary>
            Enables the device by setting the reset pin high.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.InternalReadInterrupt(Iot.Device.Mcp23xxx.Port)">
            <summary>
            Reads interrupt value
            </summary>
            <param name="port">Port to read interrupt on</param>
            <returns>Value of interrupt pin</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.ReadInterrupt">
            <summary>
            Returns the value of the interrupt pin if configured.
            </summary>
            <returns>
            Returns the interrupt for port A on 16 bit devices.
            </returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets a mode to a pin.
            </summary>
            <param name="pinNumber">The pin number.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Read(System.Int32)">
            <summary>
            Reads the value of a pin.
            </summary>
            <param name="pinNumber">The pin number.</param>
            <returns>High or low pin value.</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Read(System.Span{System.Device.Gpio.PinValuePair})">
            <summary>
            Reads the value of a set of pins
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.Write(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Writes values to a set of pins
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.GetMappedAddress(Iot.Device.Mcp23xxx.Register,Iot.Device.Mcp23xxx.Port,Iot.Device.Mcp23xxx.BankStyle)">
            <summary>
            Gets the mapped address for a register.
            </summary>
            <param name="register">The register.</param>
            <param name="port">The bank of I/O ports used with the register.</param>
            <param name="bankStyle">The bank style that determines how the register addresses are grouped.</param>
            <returns>The byte address of the register for the given port bank and bank style.</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.EnableInterruptOnChange(System.Int32,System.Device.Gpio.PinEventTypes)">
            <summary>
            Enables interrupts for a specified pin. On 16-Pin devices, Pins 0-7 trigger the INTA pin and Pins 8-15
            trigger the INTB pin. The interrupt signals are configured as active-low.
            </summary>
            <param name="pinNumber">The pin number for which an interrupt shall be triggered</param>
            <param name="eventTypes">Event(s) that should trigger the interrupt on the given pin</param>
            <exception cref="T:System.ArgumentException">EventTypes is not valid (must have at least one event type selected)</exception>
            <remarks>After calling this method, call <see cref="M:Iot.Device.Mcp23xxx.Mcp23xxx.Read(System.Int32)"/> once to make sure the interrupt flag for the given port is cleared</remarks>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.DisableInterruptOnChange(System.Int32)">
            <summary>
            Disables triggering interrupts on a certain pin
            </summary>
            <param name="pinNumber">The pin number</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.CallHandlerOnPin(System.Int32,System.Int32)">
            <summary>
            Calls the event handler for the given pin, if any.
            </summary>
            <param name="pin">Pin to call the event handler on (if any exists)</param>
            <param name="valueFlag">Non-zero if the value is currently high (therefore assuming the pin value was rising), otherwise zero</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <summary>
            Calls an event handler if the given pin changes.
            </summary>
            <param name="pinNumber">Pin number of the MCP23xxx</param>
            <param name="eventTypes">Whether the handler should trigger on rising, falling or both edges</param>
            <param name="callback">The method to call when an interrupt is triggered</param>
            <exception cref="T:System.InvalidOperationException">There's no GPIO controller for the master interrupt configured, or no interrupt lines are configured for the
            required port.</exception>
            <remarks>Only one event handler can be registered per pin. Calling this again with a different handler for the same pin replaces the handler</remarks>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <summary>
            Waits for an event to occur on the given pin.
            </summary>
            <param name="pinNumber">The pin on which to wait</param>
            <param name="eventTypes">The event to wait for (rising, falling or either)</param>
            <param name="cancellationToken">A timeout token</param>
            <returns>The wait result</returns>
            <remarks>This method should only be used on pins that are not otherwise used in event handling, as it clears any
            existing event handlers for the same pin.</remarks>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23xxx.SpiAdapter">
            <summary>
            SPI adapter
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.SpiAdapter.#ctor(System.Device.Spi.SpiDevice,System.Int32)">
            <summary>
            Constructs SpiAdapter instance
            </summary>
            <param name="device">SPI device</param>
            <param name="deviceAddress">device address</param>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.SpiAdapter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.SpiAdapter.Read(System.Byte,System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23xxx.SpiAdapter.Write(System.Byte,System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23018">
            <summary>
            Driver for the Microchip MCP23018 16-Bit I/O Expander with Open-Drain Outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23018.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23018 device.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interruptA">The input pin number that is connected to the interrupt for Port A (INTA), if any.</param>
            <param name="interruptB">The input pin number that is connected to the interrupt for Port B (INTB), if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23017">
            <summary>
            Driver for the Microchip MCP23017 16-Bit I/O Expander with Serial Interface.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23017.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23017 device.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interruptA">The input pin number that is connected to the interrupt for Port A (INTA), if any.</param>
            <param name="interruptB">The input pin number that is connected to the interrupt for Port B (INTB), if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23s18">
            <summary>
            Driver for the Microchip MCP23s18 16-Bit I/O Expander with Open-Drain Outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23s18.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23s18 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="reset">The output pin number that is connected to the hardware reset, if any. If specified the device will start in a disabled state.</param>
            <param name="interruptA">The input pin number that is connected to the interrupt for Port A (INTA), if any.</param>
            <param name="interruptB">The input pin number that is connected to the interrupt for Port B (INTB), if any.</param>
            <param name="controller">The controller for the reset and interrupt pins. If not specified, the default controller will be used.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23s17">
            <summary>
            Driver for the Microchip MCP23S17 16-Bit I/O Expander with Serial Interface.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23s17.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23s17 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="deviceAddress">The device address for the connection on the SPI bus.</param>
            <param name="reset">The output pin number that is connected to the hardware reset, if any. If specified the device will start in a disabled state.</param>
            <param name="interruptA">The input pin number that is connected to the interrupt for Port A (INTA), if any.</param>
            <param name="interruptB">The input pin number that is connected to the interrupt for Port B (INTB), if any.</param>
            <param name="controller">The controller for the reset and interrupt pins. If not specified, the default controller will be used.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23s09">
            <summary>
            Driver for the Microchip MCP23S09 8-Bit I/O Expander with Open-Drain Outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23s09.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes new instance of the Mcp23s09 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interrupt">The input pin number that is connected to the interrupt, if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23s08">
            <summary>
            Driver for the Microchip MCP23S08 8-Bit I/O Expander with Serial Interface.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23s08.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23s08 device.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="deviceAddress">The device address for the connection on the SPI bus.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interrupt">The input pin number that is connected to the interrupt, if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23009">
            <summary>
            Driver for the Microchip MCP23009 8-Bit I/O Expander with Open-Drain Outputs.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23009.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23009 device.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interrupt">The input pin number that is connected to the interrupt, if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23008">
            <summary>
            Driver for the Microchip MCP23008 8-Bit I/O Expander with Serial Interface.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23008.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp23008 device.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="reset">
            The output pin number that is connected to the hardware reset, if any. If specified the device
            will start in a disabled state.
            </param>
            <param name="interrupt">The input pin number that is connected to the interrupt, if any.</param>
            <param name="controller">
            The controller for the reset and interrupt pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23x0x">
            <summary>
            Wraps 8-bit MCP I/O expanders.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x0x.#ctor(Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs Mcp23x0x instance
            </summary>
            <param name="device">I2C device used to communicate with the device</param>
            <param name="reset">Reset pin</param>
            <param name="interrupt">Interrupt pin</param>
            <param name="controller">
            <see cref="T:System.Device.Gpio.GpioController"/> related with
            <paramref name="reset"/> and <paramref name="interrupt"/> pins
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Mcp23xxx.Mcp23x0x.PinCount">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Mcp23x1x">
            <summary>
            Wraps 16-bit MCP I/O expanders.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.#ctor(Iot.Device.Mcp23xxx.Mcp23xxx.BusAdapter,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs Mcp23x1x instance
            </summary>
            <param name="device">I2C device used to communicate with the device</param>
            <param name="reset">Reset pin</param>
            <param name="interruptA">Interrupt A pin</param>
            <param name="interruptB">Interrupt B pin</param>
            <param name="controller">
            <see cref="T:System.Device.Gpio.GpioController"/> related with
            <paramref name="reset"/> <paramref name="interruptA"/> and <paramref name="interruptB"/> pins
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Mcp23xxx.Mcp23x1x.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.ReadByte(Iot.Device.Mcp23xxx.Register,Iot.Device.Mcp23xxx.Port)">
            <summary>
            Read a byte from the given register on the given port.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.WriteByte(Iot.Device.Mcp23xxx.Register,System.Byte,Iot.Device.Mcp23xxx.Port)">
            <summary>
            Write a byte to the given register on the given port.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.ReadUInt16(Iot.Device.Mcp23xxx.Register)">
            <summary>
            Read a ushort from the given register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.WriteUInt16(Iot.Device.Mcp23xxx.Register,System.UInt16)">
            <summary>
            Write a ushort to the given register. Writes the value to both ports.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.ReadInterrupt(Iot.Device.Mcp23xxx.Port)">
            <summary>
            Reads the interrupt pin for the given port if configured.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.ReadPortA">
            <summary>
            Reads all bits of port A in a single operation.
            </summary>
            <returns>In the low byte: A bit field of the value of the first 8 GPIO ports
            (Bit 0: GPIO 0, Bit 1: GPIO 1 etc.). Only the bits of input ports are defined.</returns>
        </member>
        <member name="M:Iot.Device.Mcp23xxx.Mcp23x1x.ReadPortB">
            <summary>
            Reads all bits of port B in a single operation.
            </summary>
            <returns>In the low byte: A bit field of the value of the second 8 GPIO ports
            (Bit 0: GPIO 8, Bit 1: GPIO 9 etc.). Only the bits of input ports are defined.</returns>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Port">
            <summary>
            The I/O port used with registers.
            </summary>
            <remarks>
            16-bit controllers are logically separated into two 8-bit ports. 8-bit
            controllers only have one "port" of GPIO pins so this concept is irrelevant
            in that case.
            </remarks>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Port.PortA">
            <summary>
            The first set of 8 GPIO pins.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Port.PortB">
            <summary>
            The second set of 8 GPIO pins.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp23xxx.Register">
            <summary>
            Mcp23xxx Register
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.IODIR">
            <summary>
            Controls the direction of the data I/O.
            When a bit is set, the corresponding pin becomes an input.
            When a bit is clear, the corresponding pin becomes an output.
            </summary>
            <remarks>
            On reset/power on all bits are set (all pins are input).
            </remarks>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.IPOL">
            <summary>
            Configures the polarity on the corresponding GPIO port bits.
            When a bit is set, the corresponding GPIO register bit will reflect the inverted value on the pin.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.GPINTEN">
            <summary>
            Controls the interrupt-on-change feature for each pin.
            When a bit is set, the corresponding pin is enabled for interrupt-on-change.
            The DEFVAL and INTCON registers must also be configured if any pins are enabled for interrupt-on-change.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.DEFVAL">
            <summary>
            Configures the default comparison value.
            If enabled (via GPINTEN and INTCON) to compare against the DEFVAL register,
            an opposite value on the associated pin will cause an interrupt to occur.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.INTCON">
            <summary>
            Controls how the associated pin value is compared for the interrupt-on-change feature.
            When a bit is set, the corresponding I/O pin is compared against the associated bit in the DEFVAL register.
            When a bit value is clear, the corresponding I/O pin is compared against the previous value.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.IOCON">
            <summary>
            Contains several bits for configuring the device.  See respective datasheet for more details.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.GPPU">
            <summary>
            Controls the pull-up resistors for the port pins.
            When a bit is set and the corresponding pin is configured as an input,
            the corresponding port pin is internally pulled up with a 100 kΩ resistor.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.INTF">
            <summary>
            Reflects the interrupt condition on the port pins of any pin that is enabled for interrupts via the GPINTEN register.
            A 'set' bit indicates that the associated pin caused the interrupt.
            This register is read-only. Writes to this register will be ignored.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.INTCAP">
            <summary>
            The INTCAP register captures the GPIO port value at the time the interrupt occurred.
            The register is read-only and is updated only when an interrupt occurs.
            The register will remain unchanged until the interrupt is cleared via a read of INTCAP or GPIO.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.GPIO">
            <summary>
            Reflects the value on the port. Reading from this register reads the port.
            Writing to this register modifies the Output Latch (OLAT) register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp23xxx.Register.OLAT">
            <summary>
            Provides access to the output latches.
            A read from this register results in a read of the OLAT and not the port itself.
            A write to this register modifies the output latches that modify the pins configured as outputs.
            </summary>
            <remarks>
            On reset/power on all bits are not set (all pins are low).
            </remarks>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.FrequencyAndSpeed">
            <summary>
            Standard Frequency and Speed for CAN bus
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz1000KBps">
            <summary>
            8MHz 1000kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz500KBps">
            <summary>
            8MHz 500kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz250KBps">
            <summary>
            8MHz 250kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz200KBps">
            <summary>
            8MHz 200kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz125KBps">
            <summary>
            8MHz 125kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz100KBps">
            <summary>
            8MHz 100kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz80KBps">
            <summary>
            8MHz 80kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz50KBps">
            <summary>
            8MHz 50kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz40KBps">
            <summary>
            8MHz 40kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz20KBps">
            <summary>
            8MHz 20kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz10KBps">
            <summary>
            8MHz 10kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._8MHz5KBps">
            <summary>
            8MHz 5kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz1000KBps">
            <summary>
            12MHz 1000kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz500KBps">
            <summary>
            12MHz 500kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz250KBps">
            <summary>
            12MHz 250kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz200KBps">
            <summary>
            12MHz 200kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz125KBps">
            <summary>
            12MHz 125kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz100KBps">
            <summary>
            12MHz 100kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz80KBps">
            <summary>
            12MHz 80kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz50KBps">
            <summary>
            12MHz 50kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz40KBps">
            <summary>
            12MHz 40kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._12MHz20KBps">
            <summary>
            12MHz 20kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz1000KBps">
            <summary>
            16MHz 1000kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz500KBps">
            <summary>
            16MHz 500kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz250KBps">
            <summary>
            16MHz 250kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz200KBps">
            <summary>
            16MHz 200kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz125KBps">
            <summary>
            16MHz 125kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz100KBps">
            <summary>
            16MHz 100kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz80KBps">
            <summary>
            16MHz 80kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz50KBps">
            <summary>
            16MHz 50kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz40KBps">
            <summary>
            16MHz 40kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz20KBps">
            <summary>
            16MHz 20kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz10KBps">
            <summary>
            16MHz 10kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._16MHz5KBps">
            <summary>
            16MHz 5kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz1000KBps">
            <summary>
            20MHz 1000kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz500KBps">
            <summary>
            20MHz 500kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz250KBps">
            <summary>
            20MHz 250kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz200KBps">
            <summary>
            20MHz 200kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz125KBps">
            <summary>
            20MHz 125kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz100KBps">
            <summary>
            20MHz 100kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz80KBps">
            <summary>
            20MHz 80kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz50KBps">
            <summary>
            20MHz 50kBPS
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.FrequencyAndSpeed._20MHz40KBps">
            <summary>
            20MHz 40kBPS
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.McpBitrate">
            <summary>
            Bit Timing Configuration Registers
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.McpBitrate.GetBitTimingConfiguration(Iot.Device.Mcp25xxx.FrequencyAndSpeed)">
            <summary>
            Get bit timing configuration for specific CAN Bus frequency and speed
            </summary>
            <param name="frequencyAndSpeed">One of CAN Bus frequency and speed</param>
            <returns>The configuration for registers (CNF1, CNF2, CNF3)</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.InstructionFormat">
            <summary>
            MCP25xxx instruction format
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.Write">
            <summary>
            Writes data to the register beginning at the selected address.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.Read">
            <summary>
            Reads data from the register beginning at the selected address.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.BitModify">
            <summary>
            Allows the user to set or clear individual bits in a particular register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.LoadTxBuffer">
            <summary>
            When loading a transmit buffer, reduces the overhead of a normal WRITE
            command by placing the Address Pointer at one of six locations, as
            indicated by the 3 lower bits.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.RequestToSend">
            <summary>
            Instructs the controller to begin the message transmission sequence for
            any of the transmit buffers.  Buffers are indicated by the 3 lower bits.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.ReadRxBuffer">
            <summary>
            When reading a receive buffer, reduces the overhead of a normal READ
            command by placing the Address Pointer at one of four locations, as
            indicated by the lower 2nd and 3rd bits.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.ReadStatus">
            <summary>
            Quick polling command that reads several Status bits for transmit and
            receive functions.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.RxStatus">
            <summary>
            Quick polling command that indicates a filter match and message type
            (standard, extended and/or remote) of the received message.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.InstructionFormat.Reset">
            <summary>
            Resets the internal registers to the default state, sets Configuration mode.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Mcp25xxx">
            <summary>
            A general purpose driver for the Microchip MCP25 CAN controller device family.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Mcp25xxx.TransmitBufferMaxSize">
            The MCP2515 implements three transmit buffers. Each of these buffers occupies 14 bytes of SRAM
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            A general purpose driver for the Microchip MCP25 CAN controller device family.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="reset">The output pin number that is connected to Reset.</param>
            <param name="tx0rts">The output pin number that is connected to Tx0RTS.</param>
            <param name="tx1rts">The output pin number that is connected to Tx1RTS.</param>
            <param name="tx2rts">The output pin number that is connected to Tx2RTS.</param>
            <param name="interrupt">The input pin number that is connected to INT.</param>
            <param name="rx0bf">The input pin number that is connected to Rx0BF.</param>
            <param name="rx1bf">The input pin number that is connected to Rx1BF.</param>
            <param name="clkout">The input pin number that is connected to CLKOUT.</param>
            <param name="gpioController">
            The GPIO controller for defined external pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.Tx0RtsPin">
            <summary>
            Writes a value to Tx0RTS pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.Tx1RtsPin">
            <summary>
            Writes a value to Tx1RTS pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.Tx2RtsPin">
            <summary>
            Writes a value to Tx2RTS pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.ResetPin">
            <summary>
            Writes a value to Reset pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.InterruptPin">
            <summary>
            Reads the current value of Interrupt pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.Rx0BfPin">
            <summary>
            Reads the current value of Rx0BF pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25xxx.Rx1BfPin">
            <summary>
            Reads the current value of Rx1BF pin.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.Reset">
            <summary>
            Resets the internal registers to the default state and sets Configuration mode.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.EnableRollover">
            <summary>
            If RXB0 contains a valid message and another valid message is received,
            an overflow error will not occur and the new message will be moved into RXB1
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.SetBitrate(Iot.Device.Mcp25xxx.FrequencyAndSpeed)">
            <summary>
            The configuration registers (CNF1, CNF2, CNF3) control the bit timing for the CAN bus interface.
            </summary>
            <param name="frequencyAndSpeed">CAN bus frequency and speed</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.SetMode(Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode)">
            <summary>
            Set mode of operation
            </summary>
            <param name="operationMode">type of operation Mode</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.ReadMessages">
            <summary>
            Read arrived messages
            </summary>
            <returns>List of messages received</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.Read(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Reads data from the register beginning at the selected address.
            </summary>
            <param name="address">The address to read.</param>
            <returns>The value of address read.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.ReadRxBuffer(Iot.Device.Mcp25xxx.RxBufferAddressPointer,System.Int32)">
            <summary>
            When reading a receive buffer, reduces the overhead of a normal READ
            command by placing the Address Pointer at one of four locations for the receive buffer.
            </summary>
            <param name="addressPointer">The Address Pointer to one of four locations for the receive buffer.</param>
            <param name="byteCount">Number of bytes to read.  This must be one or more to read.</param>
            <returns>The value of address read.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.WriteByte(Iot.Device.Mcp25xxx.Register.Address,System.Byte)">
            <summary>
            Writes one byte to the register beginning at the selected address.
            </summary>
            <param name="address">The address to write the data.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.WriteByte(Iot.Device.Mcp25xxx.Register.IRegister)">
            <summary>
            Writes a byte to the selected register address.
            </summary>
            <param name="register">The register to write the data.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.SendMessage(Iot.Device.Mcp25xxx.Models.SendingCanMessage)">
            <summary>
            Send message
            </summary>
            <param name="message">CAN message</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.GetEmptyTxBuffer">
            <summary>
            Get witch buffer empty now
            </summary>
            <returns>Buffer</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.SendMessageFromBuffer(Iot.Device.Mcp25xxx.TransmitBuffer,Iot.Device.Mcp25xxx.Models.SendingCanMessage)">
            <summary>
            Send message from specific buffer
            </summary>
            <param name="transmitBuffer">Buffer</param>
            <param name="message">CAN message</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.GetInstructionsAddress(Iot.Device.Mcp25xxx.TransmitBuffer)">
            <summary>
            Get instructions address from buffer
            </summary>
            <param name="transmitBuffer">Type of transmit buffer</param>
            <returns>Instructions for specific buffer</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.SendFromBuffer(Iot.Device.Mcp25xxx.TransmitBuffer)">
            <summary>
            Command to mcp25xx to send bytes from specific buffer
            </summary>
            <param name="transmitBuffer">Type of transmit buffer</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.IsMessageSend(Iot.Device.Mcp25xxx.TransmitBuffer)">
            <summary>
            Check is buffer empty
            </summary>
            <param name="transmitBuffer">buffer type</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.AbortAllPendingTransmissions">
            <summary>
            Abort send all messages from buffers, buffers will be empty
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.Write(Iot.Device.Mcp25xxx.Register.Address,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data to the register beginning at the selected address.
            </summary>
            <param name="address">The starting address to write data.</param>
            <param name="buffer">The buffer that contains the data to be written.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.LoadTxBuffer(Iot.Device.Mcp25xxx.TxBufferAddressPointer,System.ReadOnlySpan{System.Byte})">
            <summary>
            When loading a transmit buffer, reduces the overhead of a normal WRITE
            command by placing the Address Pointer at one of six locations for transmit buffer.
            </summary>
            <param name="addressPointer">The Address Pointer to one of six locations for the transmit buffer.</param>
            <param name="buffer">The data to load in transmit buffer.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.RequestToSend(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Instructs the controller to begin the message transmission sequence for any of the transmit buffers.
            </summary>
            <param name="txb0">Instructs the controller to begin the message transmission sequence for TxB0.</param>
            <param name="txb1">Instructs the controller to begin the message transmission sequence for TxB1.</param>
            <param name="txb2">Instructs the controller to begin the message transmission sequence for TxB2.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.ReadStatus">
            <summary>
            Quick polling command that reads several Status bits for transmit and receive functions.
            </summary>
            <returns>The response from READ STATUS instruction.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.RxStatus">
            <summary>
            Quick polling command that indicates a filter match and message type
            (standard, extended and/or remote) of the received message.
            </summary>
            <returns>Response from RX STATUS instruction.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.BitModify(Iot.Device.Mcp25xxx.Register.Address,System.Byte,System.Byte)">
            <summary>
            Allows the user to set or clear individual bits in a particular register.
            Not all registers can be bit modified with this command.
            </summary>
            <param name="address">The address to write data.</param>
            <param name="mask">The mask to determine which bits in the register will be allowed to change.
            A '1' will allow a bit to change while a '0' will not.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25xxx.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Mcp2515">
            <summary>
            Driver for the Microchip MCP2515 CAN controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp2515.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp2515 class.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="reset">The output pin number that is connected to Reset.</param>
            <param name="tx0rts">The output pin number that is connected to Tx0RTS.</param>
            <param name="tx1rts">The output pin number that is connected to Tx1RTS.</param>
            <param name="tx2rts">The output pin number that is connected to Tx2RTS.</param>
            <param name="interrupt">The input pin number that is connected to INT.</param>
            <param name="rx0bf">The input pin number that is connected to Rx0BF.</param>
            <param name="rx1bf">The input pin number that is connected to Rx1BF.</param>
            <param name="clkout">The input pin number that is connected to CLKOUT.</param>
            <param name="gpioController">
            The GPIO controller for defined external pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Mcp25625">
            <summary>
            Driver for the Microchip MCP25625 CAN controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Mcp25625.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Mcp25625 class.
            </summary>
            <param name="spiDevice">The SPI device used for communication.</param>
            <param name="reset">The output pin number that is connected to Reset.</param>
            <param name="tx0rts">The output pin number that is connected to Tx0RTS.</param>
            <param name="tx1rts">The output pin number that is connected to Tx1RTS.</param>
            <param name="tx2rts">The output pin number that is connected to Tx2RTS.</param>
            <param name="standby">The output pin number that is connected to STBY.</param>
            <param name="interrupt">The input pin number that is connected to INT.</param>
            <param name="rx0bf">The input pin number that is connected to Rx0BF.</param>
            <param name="rx1bf">The input pin number that is connected to Rx1BF.</param>
            <param name="clkout">The input pin number that is connected to CLKOUT.</param>
            <param name="gpioController">
            The GPIO controller for defined external pins. If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Mcp25625.StandbyPin">
            <summary>
            Writes a value to Standby (STBY) pin.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Models.SendingCanMessage">
            <summary>
            CAN bus message
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Models.SendingCanMessage.Id">
            <summary>
            Four bytes CAN id
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Models.SendingCanMessage.Data">
            <summary>
            CAN data (max 8 bytes)
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Models.SendingCanMessage.CreateStandard(System.Byte[],System.Byte[])">
            <summary>
            Create new standard CAN message
            </summary>
            <param name="shortId">Two bytes id</param>
            <param name="data">message data max 8 bytes</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Models.SendingCanMessage.CreateExtended(System.Byte[],System.Byte[])">
            <summary>
            Create new extended CAN message
            </summary>
            <param name="id">Four bytes id</param>
            <param name="data">message data max 8 bytes</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage">
            <summary>
            CAN bus message
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage.Buffer">
            <summary>
            Buffer received this message
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage.RawData">
            <summary>
            Received CAN message
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage.#ctor(Iot.Device.Mcp25xxx.ReceiveBuffer,System.Byte[])">
            <summary>
            Received CAN message constructor
            </summary>
            <param name="buffer">buffer received this message</param>
            <param name="rawData">data from buffer</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage.GetId">
            <summary>
            CAN message id
            </summary>
            <returns>message id</returns>
            <exception cref="T:System.ArgumentException">Raw data can contain not valid id</exception>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Models.ReceivedCanMessage.GetData">
            <summary>
            CAN message data
            </summary>
            <returns>message data (max 8 bytes)</returns>
            <exception cref="T:System.ArgumentException">Raw data can contain not valid message</exception>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.ReadStatusResponse">
            <summary>
            Response from READ STATUS instruction.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Rx0If">
            <summary>
            RX0IF (CANINTF Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Rx1If">
            <summary>
            RX1IF (CANINTF Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx0Req">
            <summary>
            TXREQ (TXB0CTRL Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx0If">
            <summary>
            TX0IF (CANINTF Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx1Req">
            <summary>
            TXREQ (TXB1CTRL Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx1If">
            <summary>
            TX1IF (CANINTF Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx2Req">
            <summary>
            TXREQ (TXB2CTRL Register).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReadStatusResponse.Tx2If">
            <summary>
            TX2IF (CANINTF Register).
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.ReceiveBuffer">
            <summary>
            Receive buffers
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReceiveBuffer.RxB0">
            <summary>
            Receive buffer 0
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReceiveBuffer.RxB1">
            <summary>
            Receive buffer 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.ReceiveBuffer.None">
            <summary>
            No one transmit buffer
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.RxBufferAddressPointer">
            <summary>
            Address Pointer to one of four locations for the receive buffer.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxBufferAddressPointer.RxB0Sidh">
            <summary>
            Receive Buffer 0 starting at RXB0SIDH (0x61).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxBufferAddressPointer.RxB0D0">
            <summary>
            Receive Buffer 0 starting at RXB0D0 (0x66).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxBufferAddressPointer.RxB1Sidh">
            <summary>
            Receive Buffer 1 starting at RXB1SIDH (0x71).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxBufferAddressPointer.RxB1D0">
            <summary>
            Receive Buffer 1 starting at RXB1D0 (0x77).
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.RxStatusResponse">
            <summary>
            Response from RX STATUS instruction.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.RxStatusResponse.#ctor(Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType,Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType,Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType)">
            <summary>
            Initializes a new instance of the RxStatusResponse class.
            </summary>
            <param name="receivedMessage">
            RXxIF (CANINTF) bits are mapped to bits 7 and 6.</param>
            <param name="messageTypeReceived">
            The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3.</param>
            <param name="filterMatch">Filter match type</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.RxStatusResponse.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the RxStatusResponse class.
            </summary>
            <param name="value">The value that represents the ReceivedMessage, MessageTypeReceived and FilterMatch.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatch">
            <summary>
            Filter match type
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.RxStatusResponse.MessageTypeReceived">
            <summary>
            The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessage">
            <summary>
            RXxIF (CANINTF) bits are mapped to bits 7 and 6.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType">
            <summary>
            RXxIF (CANINTF) bits are mapped to bits 7 and 6.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.NoRxMessage">
            <summary>
            No RX Message.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.MessageInRxB0">
            <summary>
            Message in RXB0.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.MessageInRxB1">
            <summary>
            Message in RXB1.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.ReceivedMessageType.MessagesInBothBuffers">
            <summary>
            Messages in Both Buffers.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType">
            <summary>
            The extended ID bit is mapped to bit 4. The RTR bit is mapped to bit 3.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.StandardDataFrame">
            <summary>
            Standard Data Frame.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.StandardRemoteFrame">
            <summary>
            Standard Remote Frame.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.ExtendedDataFrame">
            <summary>
            Extended Data Frame.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.MessageReceivedType.ExtendedRemoteFrame">
            <summary>
            Extended Remote Frame.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType">
            <summary>
            Filter match type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF0">
            <summary>RxF0</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF1">
            <summary>RxF1</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF2">
            <summary>RxF2</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF3">
            <summary>RxF3</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF4">
            <summary>RxF4</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF5">
            <summary>RxF5</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF0RolloverToRxB1">
            <summary>RxF0RolloverToRxB1</summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.RxStatusResponse.FilterMatchType.RxF1RolloverToRxB1">
            <summary>RxF1RolloverToRxB1</summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.RxStatusResponse.ToByte">
            <summary>
            Converts contents to a byte.
            </summary>
            <returns>The byte that represent the response contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.TransmitBuffer">
            <summary>
            Transmit buffers
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TransmitBuffer.Tx0">
            <summary>
            Transmit buffer 0
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TransmitBuffer.Tx1">
            <summary>
            Transmit buffer 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TransmitBuffer.Tx2">
            <summary>
            Transmit buffer 2
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TransmitBuffer.None">
            <summary>
            No one transmit buffer
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.TxBufferAddressPointer">
            <summary>
            Address Pointer to one of six locations for the transmit buffer.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB0Sidh">
            <summary>
            TX Buffer 0 starting at TXB0SIDH (0x31).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB0D0">
            <summary>
            TX Buffer 0 starting at TXB0D0 (0x36).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB1Sidh">
            <summary>
            TX Buffer 1 starting at TXB1SIDH (0x41).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB1D0">
            <summary>
            TX Buffer 1 starting at TXB1D0 (0x46).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB2Sidh">
            <summary>
            TX Buffer 2 starting at TXB2SIDH (0x51).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.TxBufferAddressPointer.TxB2D0">
            <summary>
            TX Buffer 2 starting at TXB2D0 (0x56).
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0">
            <summary>
            Filter Extended Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxFxEid0 class.
            </summary>
            <param name="rxFilterNumber">Receive Filter Number.  Must be a value of 0 - 5.</param>
            <param name="extendedIdentifier">
            EID[7:0]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received
            message or to Byte 1 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.RxFilterNumber">
            <summary>
            Receive Filter Number.  Must be a value of 0 - 5.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.ExtendedIdentifier">
            <summary>
            EID[7:0]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received
            message or to Byte 1 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.GetRxFilterNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Filter Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Filter Number.</param>
            <returns>The Rx Filter Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid0.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8">
            <summary>
            Filter Extended Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxFxEid8 class.
            </summary>
            <param name="rxFilterNumber">Receive Filter Number. Must be a value of 0 - 5.</param>
            <param name="extendedIdentifier">
            EID[15:]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received
            message or to Byte 0 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.RxFilterNumber">
            <summary>
            Receive Filter Number. Must be a value of 0 - 5.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.ExtendedIdentifier">
            <summary>
            EID[15:]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received
            message or to Byte 0 in received data if corresponding with RXM[1:0] = 00 and EXIDE = 0.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.GetRxFilterNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Filter Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Filter Number.</param>
            <returns>The Rx Filter Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxEid8.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh">
            <summary>
            Filter Standard Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxFxSidh class.
            </summary>
            <param name="rxFilterNumber">
            Receive Filter Number.  Must be a value of 0 - 5.</param>
            <param name="standardIdentifierFilter">
            SID[10:3]: Standard Identifier Filter bits
            These bits hold the filter bits to be applied to bits[10:3] of the Standard Identifier portion of a received message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.RxFilterNumber">
            <summary>
            Receive Filter Number.  Must be a value of 0 - 5.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.StandardIdentifierFilter">
            <summary>
            SID[10:3]: Standard Identifier Filter bits
            These bits hold the filter bits to be applied to bits[10:3] of the Standard Identifier portion of a received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.GetRxFilterNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Filter Number based on the register address.
            </summary>
            <param name="address">The address to up look Rx Filter Number.</param>
            <returns>The Rx Filter Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidh.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl">
            <summary>
            Filter Standard Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.#ctor(System.Byte,System.Byte,System.Boolean,System.Byte)">
            <summary>
            Initializes a new instance of the RxFxSidl class.
            </summary>
            <param name="rxFilterNumber">Receive Filter Number.  Must be a value of 0 - 5.</param>
            <param name="extendedIdentifierFilter">
            EID[17:16]: Extended Identifier Filter bits.
            These bits hold the filter bits to be applied to bits[17:16] of the Extended Identifier portion of a received message.
            </param>
            <param name="extendedIdentifierEnable">
            EXIDE: Extended Identifier Enable bit.
            True = Filter is applied only to extended frames.
            False = Filter is applied only to standard frames.
            </param>
            <param name="standardIdentifierFilter">
            SID[2:0]: Standard Identifier Filter bits.
            These bits hold the filter bits to be applied to bits[2:0] of the Standard Identifier portion of a received message.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxFxSidl class.
            </summary>
            <param name="rxFilterNumber">Receive Filter Number. Must be a value of 0 - 5.</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.RxFilterNumber">
            <summary>
            Receive Filter Number.  Must be a value of 0 - 5.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.ExtendedIdentifierFilter">
            <summary>
            EID[17:16]: Extended Identifier Filter bits.
            These bits hold the filter bits to be applied to bits[17:16] of the Extended Identifier portion of a received message.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.ExtendedIdentifierEnable">
            <summary>
            EXIDE: Extended Identifier Enable bit.
            True = Filter is applied only to extended frames.
            False = Filter is applied only to standard frames.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.StandardIdentifierFilter">
            <summary>
            SID[2:0]:Standard Identifier Filter bits.
            These bits hold the filter bits to be applied to bits[2:0] of the Standard Identifier portion of a received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.GetRxFilterNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Filter Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Filter Number.</param>
            <returns>The Rx Filter Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxFxSidl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0">
            <summary>
            Mask Extended Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxMxEid0 class.
            </summary>
            <param name="rxMaskNumber">Receive Mask Number.  Must be a value of 0 - 1.</param>
            <param name="extendedIdentifierMask">
            EID[7:0]: Extended Identifier Mask bits.
            These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received
            message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 1 in received data.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.RxMaskNumber">
            <summary>
            Receive Mask Number.  Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.ExtendedIdentifierMask">
            <summary>
            EID[7:0]: Extended Identifier Mask bits.
            These bits hold the filter bits to be applied to bits[7:0] of the Extended Identifier portion of a received
            message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 1 in received data.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.GetRxMaskNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Mask Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Mask Number.</param>
            <returns>The Rx Mask Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid0.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8">
            <summary>
            Mask Extended Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxMxEid8 class.
            </summary>
            <param name="rxMaskNumber">Receive Mask Number.  Must be a value of 0 - 1.</param>
            <param name="extendedIdentifier">
            EID[15:8]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received
            message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 0 in received data.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.RxMaskNumber">
            <summary>
            Receive Mask Number.  Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.ExtendedIdentifier">
            <summary>
            EID[15:8]: Extended Identifier bits.
            These bits hold the filter bits to be applied to bits[15:8] of the Extended Identifier portion of a received
            message.If corresponding with RXM[1:0] = 00 and EXIDE = 0, these bits are applied to Byte 0 in received data.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.GetRxMaskNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Mask Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Mask Number.</param>
            <returns>The Rx Mask Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxEid8.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh">
            <summary>
            Mask Standard Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxMxSidh class.
            </summary>
            <param name="rxMaskNumber">Receive Mask Number.  Must be a value of 0 - 1.</param>
            <param name="standardIdentifierMask">
            SID[10:3]: Standard Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[10:3] of the Standard Identifier portion of a received message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.RxMaskNumber">
            <summary>
            Receive Mask Number.  Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.StandardIdentifierMask">
            <summary>
            SID[10:3]: Standard Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[10:3] of the Standard Identifier portion of a received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.GetRxMaskNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Mask Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Mask Number.</param>
            <returns>The Rx Mask Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidh.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl">
            <summary>
            Mask Standard Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxMxSidl class.
            </summary>
            <param name="rxMaskNumber">Receive Mask Number.  Must be a value of 0 - 1.</param>
            <param name="extendedIdentifierMask">
            EID[17:16]: Extended Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[17:16] of the Extended Identifier portion of a received message.
            </param>
            <param name="standardIdentifierMask">
            SID[2:0]: Standard Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[2:0] of the Standard Identifier portion of a received message.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxMxSidl class.
            </summary>
            <param name="rxMaskNumber">Receive Mask Number.  Must be a value of 0 - 1.</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.RxMaskNumber">
            <summary>
            Receive Mask Number.  Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.ExtendedIdentifierMask">
            <summary>
            EID[17:16]: Extended Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[17:16] of the Extended Identifier portion of a received message.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.StandardIdentifierMask">
            <summary>
            SID[2:0]: Standard Identifier Mask bits.
            These bits hold the mask bits to be applied to bits[2:0] of the Standard Identifier portion of a received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.GetRxMaskNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Mask Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Mask Number.</param>
            <returns>The Rx Mask Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.AcceptanceFilter.RxMxSidl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.Address">
            <summary>
            Control Register Summary.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxRtsCtrl">
            <summary>
            TxnRTS Pin Control and Status Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Ctrl">
            <summary>
            Transmit Buffer 0 Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Sidh">
            <summary>
            Transmit Buffer 0 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Sidl">
            <summary>
            Transmit Buffer 0 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Eid8">
            <summary>
            Transmit Buffer 0 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Eid0">
            <summary>
            Transmit Buffer 0 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0Dlc">
            <summary>
            Transmit Buffer 0 Data Length Code Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D0">
            <summary>
            Transmit Buffer 0 Data Byte 0 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D1">
            <summary>
            Transmit Buffer 0 Data Byte 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D2">
            <summary>
            Transmit Buffer 0 Data Byte 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D3">
            <summary>
            Transmit Buffer 0 Data Byte 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D4">
            <summary>
            Transmit Buffer 0 Data Byte 4 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D5">
            <summary>
            Transmit Buffer 0 Data Byte 5 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D6">
            <summary>
            Transmit Buffer 0 Data Byte 6 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB0D7">
            <summary>
            Transmit Buffer 0 Data Byte 7 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Ctrl">
            <summary>
            Transmit Buffer 1 Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Sidh">
            <summary>
            Transmit Buffer 1 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Sidl">
            <summary>
            Transmit Buffer 1 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Eid8">
            <summary>
            Transmit Buffer 1 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Eid0">
            <summary>
            Transmit Buffer 1 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1Dlc">
            <summary>
            Transmit Buffer 1 Data Length Code Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D0">
            <summary>
            Transmit Buffer 1 Data Byte 0 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D1">
            <summary>
            Transmit Buffer 1 Data Byte 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D2">
            <summary>
            Transmit Buffer 1 Data Byte 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D3">
            <summary>
            Transmit Buffer 1 Data Byte 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D4">
            <summary>
            Transmit Buffer 1 Data Byte 4 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D5">
            <summary>
            Transmit Buffer 1 Data Byte 5 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D6">
            <summary>
            Transmit Buffer 1 Data Byte 6 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB1D7">
            <summary>
            Transmit Buffer 1 Data Byte 7 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Ctrl">
            <summary>
            Transmit Buffer 2 Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Sidh">
            <summary>
            Transmit Buffer 2 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Sidl">
            <summary>
            Transmit Buffer 2 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Eid8">
            <summary>
            Transmit Buffer 2 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Eid0">
            <summary>
            Transmit Buffer 2 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2Dlc">
            <summary>
            Transmit Buffer 2 Data Length Code Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D0">
            <summary>
            Transmit Buffer 2 Data Byte 0 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D1">
            <summary>
            Transmit Buffer 2 Data Byte 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D2">
            <summary>
            Transmit Buffer 2 Data Byte 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D3">
            <summary>
            Transmit Buffer 2 Data Byte 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D4">
            <summary>
            Transmit Buffer 2 Data Byte 4 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D5">
            <summary>
            Transmit Buffer 2 Data Byte 5 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D6">
            <summary>
            Transmit Buffer 2 Data Byte 6 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.TxB2D7">
            <summary>
            Transmit Buffer 2 Data Byte 7 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.BfpCtrl">
            <summary>
            RxnBF Pin Control and Status Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Ctrl">
            <summary>
            Receive Buffer 0 Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Sidh">
            <summary>
            Receive Buffer 0 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Sidl">
            <summary>
            Receive Buffer 0 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Eid8">
            <summary>
            Receive Buffer 0 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Eid0">
            <summary>
            Receive Buffer 0 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0Dlc">
            <summary>
            Receive Buffer 0 Data Length Code Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D0">
            <summary>
            Receive Buffer 0 Data Byte 0 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D1">
            <summary>
            Receive Buffer 0 Data Byte 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D2">
            <summary>
            Receive Buffer 0 Data Byte 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D3">
            <summary>
            Receive Buffer 0 Data Byte 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D4">
            <summary>
            Receive Buffer 0 Data Byte 4 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D5">
            <summary>
            Receive Buffer 0 Data Byte 5 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D6">
            <summary>
            Receive Buffer 0 Data Byte 6 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB0D7">
            <summary>
            Receive Buffer 0 Data Byte 7 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Ctrl">
            <summary>
            Receive Buffer 1 Control Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Sidh">
            <summary>
            Receive Buffer 1 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Sidl">
            <summary>
            Receive Buffer 1 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Eid8">
            <summary>
            Receive Buffer 1 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Eid0">
            <summary>
            Receive Buffer 1 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1Dlc">
            <summary>
            Receive Buffer 1 Data Length Code Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D0">
            <summary>
            Receive Buffer 1 Data Byte 0 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D1">
            <summary>
            Receive Buffer 1 Data Byte 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D2">
            <summary>
            Receive Buffer 1 Data Byte 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D3">
            <summary>
            Receive Buffer 1 Data Byte 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D4">
            <summary>
            Receive Buffer 1 Data Byte 4 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D5">
            <summary>
            Receive Buffer 1 Data Byte 5 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D6">
            <summary>
            Receive Buffer 1 Data Byte 6 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxB1D7">
            <summary>
            Receive Buffer 1 Data Byte 7 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF0Sidh">
            <summary>
            Filter 0 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF0Sidl">
            <summary>
            Filter 0 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF0Eid8">
            <summary>
            Filter 0 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF0Eid0">
            <summary>
            Filter 0 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF1Sidh">
            <summary>
            Filter 1 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF1Sidl">
            <summary>
            Filter 1 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF1Eid8">
            <summary>
            Filter 1 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF1Eid0">
            <summary>
            Filter 1 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF2Sidh">
            <summary>
            Filter 2 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF2Sidl">
            <summary>
            Filter 2 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF2Eid8">
            <summary>
            Filter 2 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF2Eid0">
            <summary>
            Filter 2 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF3Sidh">
            <summary>
            Filter 3 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF3Sidl">
            <summary>
            Filter 3 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF3Eid8">
            <summary>
            Filter 3 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF3Eid0">
            <summary>
            Filter 3 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF4Sidh">
            <summary>
            Filter 4 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF4Sidl">
            <summary>
            Filter 4 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF4Eid8">
            <summary>
            Filter 4 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF4Eid0">
            <summary>
            Filter 4 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF5Sidh">
            <summary>
            Filter 5 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF5Sidl">
            <summary>
            Filter 5 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF5Eid8">
            <summary>
            Filter 5 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxF5Eid0">
            <summary>
            Filter 5 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM0Sidh">
            <summary>
            Mask 0 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM0Sidl">
            <summary>
            Mask 0 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM0Eid8">
            <summary>
            Mask 0 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM0Eid0">
            <summary>
            Mask 0 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM1Sidh">
            <summary>
            Mask 1 Standard Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM1Sidl">
            <summary>
            Mask 1 Standard Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM1Eid8">
            <summary>
            Mask 1 Extended Identifier High Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.RxM1Eid0">
            <summary>
            Mask 1 Extended Identifier Low Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Cnf1">
            <summary>
            Configuration 1 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Cnf2">
            <summary>
            Configuration 2 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Cnf3">
            <summary>
            Configuration 3 Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Tec">
            <summary>
            Transmit Error Counter Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Rec">
            <summary>
            Receiver Error Counter Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.Eflg">
            <summary>
            Error Flag Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.CanIntE">
            <summary>
            CAN Interrupt Enable Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.CanIntF">
            <summary>
            CAN Interrupt Flag Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.CanStat">
            <summary>
            CAN Status Register.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.Address.CanCtrl">
            <summary>
            CAN Control Register.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1">
            <summary>
            Configuration 1 Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.#ctor(System.Byte,Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength)">
            <summary>
            Initializes a new instance of the Cnf1 class.
            </summary>
            <param name="baudRatePrescaler">
            BRP[5:0]: Baud Rate Prescaler bits.
            TQ = 2 x (BRP[5:0] + 1)/FOSC.
            </param>
            <param name="synchronizationJumpWidthLength">
            SJW[1:0]: Synchronization Jump Width Length bits.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Cnf1 class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength">
            <summary>
            Synchronization Jump Width Length.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.Tqx1">
            <summary>
            Length = 1 x TQ.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.Tqx2">
            <summary>
            Length = 2 x TQ.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.Tqx3">
            <summary>
            Length = 3 x TQ.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.JumpWidthLength.Tqx4">
            <summary>
            Length = 4 x TQ.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.BaudRatePrescaler">
            <summary>
            BRP[5:0]: Baud Rate Prescaler bits.
            TQ = 2 x (BRP[5:0] + 1)/FOSC.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.SynchronizationJumpWidthLength">
            <summary>
            SJW[1:0]: Synchronization Jump Width Length bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf1.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2">
            <summary>
            Configuration 2 Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.#ctor(System.Byte,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Cnf2 class.
            </summary>
            <param name="propagationSegmentLength">PRSEG[2:0]: Propagation Segment Length bits.</param>
            <param name="ps1Length">PHSEG1[2:0]: PS1 Length bits.</param>
            <param name="samplePointConfiguration">
            SAM: Sample Point Configuration bit.
            True = Bus line is sampled three times at the sample point.
            False = Bus line is sampled once at the sample point.
            </param>
            <param name="ps2BitTimeLength">
            BTLMODE: PS2 Bit Time Length bit.
            True = Length of PS2 is determined by the PHSEG2[2:0] bits of CNF3.
            False = Length of PS2 is the greater of PS1 and IPT(2 TQ).
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Cnf2 class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.PropagationSegmentLength">
            <summary>
            PRSEG[2:0]: Propagation Segment Length bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.Ps1Length">
            <summary>
            PHSEG1[2:0]: PS1 Length bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.SamplePointConfiguration">
            <summary>
            SAM: Sample Point Configuration bit.
            True = Bus line is sampled three times at the sample point.
            False = Bus line is sampled once at the sample point.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.Ps2BitTimeLength">
            <summary>
            BTLMODE: PS2 Bit Time Length bit.
            True = Length of PS2 is determined by the PHSEG2[2:0] bits of CNF3.
            False = Length of PS2 is the greater of PS1 and IPT(2 TQ).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf2.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3">
            <summary>
            Configuration 3 Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.#ctor(System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Cnf3 class.
            </summary>
            <param name="ps2Length">
            PHSEG2[2:0]: PS2 Length bits.
            (PHSEG2[2:0] + 1) x TQ.
            Minimum valid setting for PS2 is 2 TQ.
            </param>
            <param name="wakeUpFilter">
            WAKFIL: Wake-up Filter bit.
            True = Wake-up filter is enabled.
            False = Wake-up filter is disabled.
            </param>
            <param name="startOfFrameSignal">
            SOF: Start-of-Frame Signal bit.
            If CLKEN(CANCTRL[2]) = 1:
            True = CLKOUT pin is enabled for SOF signal.
            False = CLKOUT pin is enabled for clock out function;
            If CLKEN(CANCTRL[2]) = 0:
            Bit is don’t care.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Cnf3 class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.Ps2Length">
            <summary>
            PHSEG2[2:0]: PS2 Length bits.
            (PHSEG2[2:0] + 1) x TQ.
            Minimum valid setting for PS2 is 2 TQ.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.WakeUpFilter">
            <summary>
            WAKFIL: Wake-up Filter bit.
            True = Wake-up filter is enabled.
            False = Wake-up filter is disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.StartOfFrameSignal">
            <summary>
            SOF: Start-of-Frame Signal bit.
            If CLKEN(CANCTRL[2]) = 1:
            True = CLKOUT pin is enabled for SOF signal.
            False = CLKOUT pin is enabled for clock out function;
            If CLKEN(CANCTRL[2]) = 0:
            Bit is don’t care.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.BitTimeConfiguration.Cnf3.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl">
            <summary>
            CAN Control Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.#ctor(Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler,System.Boolean,System.Boolean,System.Boolean,Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode)">
            <summary>
            Initializes a new instance of the CanCtrl class.
            </summary>
            <param name="clkOutPinPrescaler">CLKPRE[1:0]: CLKOUT Pin Prescaler bits.</param>
            <param name="clkOutPinEnable">
            CLKEN: CLKOUT Pin Enable bit.
            True = CLKOUT pin is enabled.
            False = CLKOUT pin is disabled(pin is in a high-impedance state).
            </param>
            <param name="oneShotMode">
            OSM: One-Shot Mode bit.
            True = Enabled: Message will only attempt to transmit one time.
            False = Disabled: Messages will reattempt transmission if required.
            </param>
            <param name="abortAllPendingTransmissions">
            ABAT: Abort All Pending Transmissions bit.
            True = Requests abort of all pending transmit buffers.
            False = Terminates request to abort all transmissions.
            </param>
            <param name="requestOperationMode">REQOP[2:0]: Request Operation mode bits.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the CanCtrl class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler">
            <summary>
            CLKOUT Pin Prescaler.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.ClockDivideBy1">
            <summary>
            FCLKOUT = System Clock/1.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.ClockDivideBy2">
            <summary>
            FCLKOUT = System Clock/2.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.ClockDivideBy4">
            <summary>
            FCLKOUT = System Clock/4.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.PinPrescaler.ClockDivideBy8">
            <summary>
            FCLKOUT = System Clock/8.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.ClkOutPinPrescaler">
            <summary>
            CLKPRE[1:0]: CLKOUT Pin Prescaler bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.ClkOutPinEnable">
            <summary>
            CLKEN: CLKOUT Pin Enable bit.
            True = CLKOUT pin is enabled.
            False = CLKOUT pin is disabled (pin is in a high-impedance state).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.OneShotMode">
            <summary>
            OSM: One-Shot Mode bit.
            True = Enabled: Message will only attempt to transmit one time.
            False = Disabled: Messages will reattempt transmission if required.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.AbortAllPendingTransmissions">
            <summary>
            ABAT: Abort All Pending Transmissions bit.
            True = Requests abort of all pending transmit buffers.
            False = Terminates request to abort all transmissions.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.RequestOperationMode">
            <summary>
            REQOP[2:0]: Request Operation mode bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanCtrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.CanControl.CanStat">
            <summary>
            CAN Status Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.#ctor(Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode,Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode)">
            <summary>
            Initializes a new instance of the CanStat class.
            </summary>
            <param name="interruptFlagCode">ICOD[2:0]: Interrupt Flag Code bits.</param>
            <param name="operationMode">OPMOD[2:0]: Operation Mode bits.</param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the CanStat class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode">
            <summary>
            Interrupt Flag Code.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.No">
            <summary>
            No Interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.Error">
            <summary>
            Error interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.WakeUp">
            <summary>
            Wake-up interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.TxB0">
            <summary>
            TXB0 interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.TxB1">
            <summary>
            TXB1 interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.TxB2">
            <summary>
            TXB2 interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.RxB0">
            <summary>
            RXB0 interrupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.FlagCode.RxB1">
            <summary>
            RXB1 interrupt.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.InterruptFlagCode">
            <summary>
            ICOD[2:0]: Interrupt Flag Code bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.OperationMode">
            <summary>
            OPMOD[2:0]: Operation Mode bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.CanControl.CanStat.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg">
            <summary>
            Error Flag Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Eflg class.
            </summary>
            <param name="errorWarningFlag">
            EWARN: Error Warning Flag bit.
            Sets when TEC or REC is equal to or greater than 96 (TXWAR or RXWAR = 1).
            Resets when both REC and TEC are less than 96.
            </param>
            <param name="receiveErrorWarningFlag">
            RXWAR: Receive Error Warning Flag bit.
            Sets when REC is equal to or greater than 96.
            Resets when REC is less than 96.
            </param>
            <param name="transmitErrorWarningFlag">
            TXWAR: Transmit Error Warning Flag bit.
            Sets when TEC is equal to or greater than 96.
            Resets when TEC is less than 96.
            </param>
            <param name="receiveErrorPassiveFlag">
            RXEP: Receive Error-Passive Flag bit.
            Sets when REC is equal to or greater than 128.
            Resets when REC is less than 128.
            </param>
            <param name="transmitErrorPassiveFlag">
            TXEP: Transmit Error-Passive Flag bit.
            Sets when TEC is equal to or greater than 128.
            Resets when TEC is less than 128.
            </param>
            <param name="busOffErrorFlag">
            TXBO: Bus-Off Error Flag bit.
            Bit sets when TEC reaches 255.
            Resets after a successful bus recovery sequence.
            </param>
            <param name="receiveBuffer0OverflowFlag">
            RX0OVR: Receive Buffer 0 Overflow Flag bit.
            Sets when a valid message is received for RXB0 and the RX0IF bit in the CANINTF register is ‘1’.
            Must be reset by MCU.
            </param>
            <param name="receiveBuffer1OverflowFlag">
            RX1OVR: Receive Buffer 1 Overflow Flag bit.
            Sets when a valid message is received for RXB1 and the RX1IF bit in the CANINTF register is ‘1’.
            Must be reset by MCU.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Eflg class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ErrorWarningFlag">
            <summary>
            EWARN: Error Warning Flag bit.
            Sets when TEC or REC is equal to or greater than 96 (TXWAR or RXWAR = 1).
            Resets when both REC and TEC are less than 96.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ReceiveErrorWarningFlag">
            <summary>
            RXWAR: Receive Error Warning Flag bit.
            Sets when REC is equal to or greater than 96.
            Resets when REC is less than 96.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.TransmitErrorWarningFlag">
            <summary>
            TXWAR: Transmit Error Warning Flag bit.
            Sets when TEC is equal to or greater than 96.
            Resets when TEC is less than 96.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ReceiveErrorPassiveFlag">
            <summary>
            RXEP: Receive Error-Passive Flag bit.
            Sets when REC is equal to or greater than 128.
            Resets when REC is less than 128.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.TransmitErrorPassiveFlag">
            <summary>
            TXEP: Transmit Error-Passive Flag bit.
            Sets when TEC is equal to or greater than 128.
            Resets when TEC is less than 128.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.BusOffErrorFlag">
            <summary>
            TXBO: Bus-Off Error Flag bit.
            Bit sets when TEC reaches 255.
            Resets after a successful bus recovery sequence.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ReceiveBuffer0OverflowFlag">
            <summary>
            RX0OVR: Receive Buffer 0 Overflow Flag bit.
            Sets when a valid message is received for RXB0 and the RX0IF bit in the CANINTF register is ‘1’.
            Must be reset by MCU.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ReceiveBuffer1OverflowFlag">
            <summary>
            RX1OVR: Receive Buffer 1 Overflow Flag bit.
            Sets when a valid message is received for RXB1 and the RX1IF bit in the CANINTF register is ‘1’.
            Must be reset by MCU.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Eflg.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec">
            <summary>
            Receiver Error Counter Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Rec class.
            </summary>
            <param name="receiveErrorCount">REC[7:0]: Receive Error Count bits.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.ReceiveErrorCount">
            <summary>
            REC[7:0]: Receive Error Count bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Rec.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec">
            <summary>
            Transmit Error Counter Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the Tec class.
            </summary>
            <param name="transmitErrorCount">TEC[7:0]: Transmit Error Count bits.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.TransmitErrorCount">
            <summary>
            TEC[7:0]: Transmit Error Count bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.ErrorDetection.Tec.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE">
            <summary>
            CAN Interrupt Enable Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CanIntE class.
            </summary>
            <param name="receiveBuffer0FullInterruptEnable">
            RX0IE: Receive Buffer 0 Full Interrupt Enable bit.
            True = Interrupt when message is received in RXB0.
            False = Disabled.
            </param>
            <param name="receiveBuffer1FullInterruptEnable">
            RX1IE: Receive Buffer 1 Full Interrupt Enable bit.
            True = Interrupt when message is received in RXB1.
            False = Disabled.
            </param>
            <param name="transmitBuffer0EmptyInterruptEnable">
            TX0IE: Transmit Buffer 0 Empty Interrupt Enable bit.
            True = Interrupt on TXB0 becoming empty.
            False = Disabled.
            </param>
            <param name="transmitBuffer1EmptyInterruptEnable">
            TX1IE: Transmit Buffer 1 Empty Interrupt Enable bit.
            True = Interrupt on TXB1 becoming empty.
            False = Disabled.
            </param>
            <param name="transmitBuffer2EmptyInterruptEnable">
            TX2IE: Transmit Buffer 2 Empty Interrupt Enable bit.
            True = Interrupt on TXB2 becoming empty.
            False = Disabled.
            </param>
            <param name="errorInterruptEnable">
            ERRIE: Error Interrupt Enable bit (multiple sources in the EFLG register).
            True = Interrupt on EFLG error condition change.
            False = Disabled.
            </param>
            <param name="wakeUpInterruptEnable">
            WAKIE: Wake-up Interrupt Enable bit.
            True = Interrupt on CAN bus activity.
            False = Disabled.
            </param>
            <param name="messageErrorInterruptEnable">
            MERRE: Message Error Interrupt Enable bit.
            True = Interrupt on error during message reception or transmission.
            False = Disabled.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the CanIntE class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.ReceiveBuffer0FullInterruptEnable">
            <summary>
            RX0IE: Receive Buffer 0 Full Interrupt Enable bit.
            True = Interrupt when message is received in RXB0.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.ReceiveBuffer1FullInterruptEnable">
            <summary>
            RX1IE: Receive Buffer 1 Full Interrupt Enable bit.
            True = Interrupt when message is received in RXB1.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.TransmitBuffer0EmptyInterruptEnable">
            <summary>
            TX0IE: Transmit Buffer 0 Empty Interrupt Enable bit.
            True = Interrupt on TXB0 becoming empty.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.TransmitBuffer1EmptyInterruptEnable">
            <summary>
            TX1IE: Transmit Buffer 1 Empty Interrupt Enable bit.
            True = Interrupt on TXB1 becoming empty.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.TransmitBuffer2EmptyInterruptEnable">
            <summary>
            TX2IE: Transmit Buffer 2 Empty Interrupt Enable bit.
            True = Interrupt on TXB2 becoming empty.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.ErrorInterruptEnable">
            <summary>
            ERRIE: Error Interrupt Enable bit (multiple sources in the EFLG register).
            True = Interrupt on EFLG error condition change.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.WakeUpInterruptEnable">
            <summary>
            WAKIE: Wake-up Interrupt Enable bit.
            True = Interrupt on CAN bus activity.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.MessageErrorInterruptEnable">
            <summary>
            MERRE: Message Error Interrupt Enable bit.
            True = Interrupt on error during message reception or transmission.
            False = Disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntE.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF">
            <summary>
            CAN Interrupt Flag Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the CanIntF class.
            </summary>
            <param name="receiveBuffer0FullInterruptFlag">
            RX0IF: Receive Buffer 0 Full Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="receiveBuffer1FullInterruptFlag">
            RX1IF: Receive Buffer 1 Full Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="transmitBuffer0EmptyInterruptFlag">
            TX0IF: Transmit Buffer 0 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="transmitBuffer1EmptyInterruptFlag">
            TX1IF: Transmit Buffer 1 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="transmitBuffer2EmptyInterruptFlag">
            TX2IF: Transmit Buffer 2 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="errorInterruptFlag">
            ERRIF: Error Interrupt Flag bit (multiple sources in the EFLG register).
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="wakeUpInterruptFlag">
            WAKIF: Wake-up Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
            <param name="messageErrorInterruptFlag">
            MERRF: Message Error Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the CanIntF class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.ReceiveBuffer0FullInterruptFlag">
            <summary>
            RX0IF: Receive Buffer 0 Full Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.ReceiveBuffer1FullInterruptFlag">
            <summary>
            RX1IF: Receive Buffer 1 Full Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.TransmitBuffer0EmptyInterruptFlag">
            <summary>
            TX0IF: Transmit Buffer 0 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.TransmitBuffer1EmptyInterruptFlag">
            <summary>
            TX1IF: Transmit Buffer 1 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.TransmitBuffer2EmptyInterruptFlag">
            <summary>
            TX2IF: Transmit Buffer 2 Empty Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.ErrorInterruptFlag">
            <summary>
            ERRIF: Error Interrupt Flag bit (multiple sources in the EFLG register).
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.WakeUpInterruptFlag">
            <summary>
            WAKIF: Wake-up Interrupt Flag bit.
            True = Interrupt pending(must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.MessageErrorInterruptFlag">
            <summary>
            MERRF: Message Error Interrupt Flag bit.
            True = Interrupt pending (must be cleared by MCU to reset interrupt condition).
            False = No interrupt pending.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.Interrupt.CanIntF.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.IRegister">
            <summary>
            Mcp25xxx register interface
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.IRegister.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.IRegister.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl">
            <summary>
            RxnBF Pin Control and Status Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the BfpCtrl class.
            </summary>
            <param name="rx0bfPinOperationMode">
            B0BFM: Rx0BF Pin Operation mode bit.
            True = Pin is used as an interrupt when a valid message is loaded into RXB0.
            False = Digital Output mode.
            </param>
            <param name="rx1bfPinOperationMode">
            B1BFM: Rx1BF Pin Operation mode bit.
            True = Pin is used as an interrupt when a valid message is loaded into RXB1.
            False = Digital Output mode.
            </param>
            <param name="rx0bfPinFunctionEnable">
            B0BFE: Rx0BF Pin Function Enable bit.
            True = Pin function is enabled, operation mode is determined by the B0BFM bit.
            False = Pin function is disabled, pin goes to the high-impedance state.
            </param>
            <param name="rx1bfPinFunctionEnable">
            B1BFE: Rx1BF Pin Function Enable bit.
            True = Pin function is enabled, operation mode is determined by the B1BFM bit.
            False = Pin function is disabled, pin goes to the high-impedance state.
            </param>
            <param name="rx0bfPinState">
            B0BFS: Rx0BF Pin State bit (Digital Output mode only).
            Reads as '0' when Rx0BF is configured as an interrupt pin.
            </param>
            <param name="rx1bfPinState">
            B1BFS: Rx1BF Pin State bit (Digital Output mode only).
            Reads as '0' when Rx1BF is configured as an interrupt pin.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the BfpCtrl class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx0bfPinOperationMode">
            <summary>
            B0BFM: Rx0BF Pin Operation mode bit.
            True = Pin is used as an interrupt when a valid message is loaded into RXB0.
            False = Digital Output mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx1bfPinOperationMode">
            <summary>
            B1BFM: Rx1BF Pin Operation mode bit.
            True = Pin is used as an interrupt when a valid message is loaded into RXB1.
            False = Digital Output mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx0bfPinFunctionEnable">
            <summary>
            B0BFE: Rx0BF Pin Function Enable bit.
            True = Pin function is enabled, operation mode is determined by the B0BFM bit.
            False = Pin function is disabled, pin goes to the high-impedance state.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx1bfPinFunctionEnable">
            <summary>
            B1BFE: Rx1BF Pin Function Enable bit.
            True = Pin function is enabled, operation mode is determined by the B1BFM bit.
            False = Pin function is disabled, pin goes to the high-impedance state.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx0bfPinState">
            <summary>
            B0BFS: Rx0BF Pin State bit (Digital Output mode only).
            Reads as '0' when Rx0BF is configured as an interrupt pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Rx1bfPinState">
            <summary>
            B1BFS: Rx1BF Pin State bit (Digital Output mode only).
            Reads as '0' when Rx1BF is configured as an interrupt pin.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.BfpCtrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode">
            <summary>
            Receive Buffer Operating mode bits.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.ReceiveAllValidMessages">
            <summary>
            Receives all valid messages using either Standard or Extended Identifiers that meet filter criteria.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.Reserved1">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.Reserved2">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode.TurnsMaskFiltersOff">
            <summary>
            Turns mask/filters off; receives any message.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl">
            <summary>
            Receive Buffer 0 Control Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.#ctor(System.Boolean,System.Boolean,System.Boolean,Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode)">
            <summary>
            Initializes a new instance of the RxB0Ctrl class.
            </summary>
            <param name="filterHit">
            FILHIT0: Indicates which acceptance filter enabled the reception of a message.
            True = Acceptance Filter 1 (RXF1).
            False = Acceptance Filter 0 (RXF0).
            </param>
            <param name="rolloverEnable">
            BUKT: Rollover Enable bit.
            True = RXB0 message will roll over and be written to RXB1 if RXB0 is full.
            False = Rollover is disabled.
            </param>
            <param name="receivedRemoteTransferRequest">
            RXRTR: Received Remote Transfer Request bit.
            True = Remote Transfer Request received.
            False = No Remote Transfer Request received.
            </param>
            <param name="receiveBufferOperatingMode">
            RXM[1:0]: Receive Buffer Operating mode bits.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the RxB0Ctrl class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.FilterHit">
            <summary>
            FILHIT0: Indicates which acceptance filter enabled the reception of a message.
            True = Acceptance Filter 1 (RXF1).
            False = Acceptance Filter 0 (RXF0).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.Bukt1">
            <summary>
            BUKT: Read-Only copy of BUKT bit (used internally by the MCP25625).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.RolloverEnable">
            <summary>
            Rollover Enable bit.
            True = RXB0 message will roll over and be written to RXB1 if RXB0 is full.
            False = Rollover is disabled.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.ReceivedRemoteTransferRequest">
            <summary>
            RXRTR: Received Remote Transfer Request bit.
            True = Remote Transfer Request received.
            False = No Remote Transfer Request received.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.ReceiveBufferOperatingMode">
            <summary>
            RXM[1:0]: Receive Buffer Operating mode bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB0Ctrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl">
            <summary>
            Receive Buffer 1 Control Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.#ctor(Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter,System.Boolean,Iot.Device.Mcp25xxx.Register.MessageReceive.OperatingMode)">
            <summary>
            Initializes a new instance of the RxB1Ctrl class.
            </summary>
            <param name="filterHit">FILHIT[2:0]: Receive Buffer Operating mode bits</param>
            <param name="receivedRemoteTransferRequest">
            RXRTR: Received Remote Transfer Request bit.
            True = Remote Transfer Request received.
            False = No Remote Transfer Request received.
            </param>
            <param name="receiveBufferOperatingMode">
            RXM[1:0]: Receive Buffer Operating mode bits.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the RxB1Ctrl class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter">
            <summary>
            Filter Hit bits.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter0">
            <summary>
            Acceptance Filter 0 (RXF0) (only if the BUKT bit is set in RXB0CTRL).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter1">
            <summary>
            Acceptance Filter 1 (RXF1) (only if the BUKT bit is set in RXB0CTRL).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter2">
            <summary>
            Acceptance Filter 2 (RXF2).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter3">
            <summary>
            Acceptance Filter 3 (RXF3).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter4">
            <summary>
            Acceptance Filter 4 (RXF4).
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Filter.Filter5">
            <summary>
            Acceptance Filter 5 (RXF5).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.FilterHit">
            <summary>
            FILHIT[2:0]: Filter Hit bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.ReceivedRemoteTransferRequest">
            <summary>
            RXRTR: Received Remote Transfer Request bit.
            True = Remote Transfer Request received.
            False = No Remote Transfer Request received.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.ReceiveBufferOperatingMode">
            <summary>
            RXM[1:0]: Receive Buffer Operating mode bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxB1Ctrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc">
            <summary>
            Receive Buffer Data Length Code Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.#ctor(System.Byte,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the RxBxDlc class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="dataLengthCode">
            DLC[3:0]: Data Length Code bits.
            Indicates the number of data bytes that were received. (0 to 8 bytes).
            </param>
            <param name="extendedFrameRemoteTransmissionRequest">
            RTR: Extended Frame Remote Transmission Request bit.
            (valid only when the IDE bit in the RXBxSIDL register is '1').
            True = Extended frame Remote Transmit Request received.
            False = Extended data frame received.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxDlc class.
            </summary>
            <param name="rxBufferNumber">Rx buffer number</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.RxBufferNumber">
            <summary>
            Receive Buffer Number. Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.DataLengthCode">
            <summary>
            DLC[3:0]: Data Length Code bits.
            Indicates the number of data bytes that were received. (0 to 8 bytes).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.ExtendedFrameRemoteTransmissionRequest">
            <summary>
            RTR: Extended Frame Remote Transmission Request bit.
            (valid only when the IDE bit in the RXBxSIDL register is '1').
            True = Extended frame Remote Transmit Request received.
            False = Extended data frame received.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDlc.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn">
            <summary>
            Receive Buffer Data Byte Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxDn class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="index">Index of data.  Must be a value of 0 - 7.</param>
            <param name="receiveBufferDataFieldBytes">RBxD[7:0]: Receive Buffer Data Field Bytes.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.RxBufferNumber">
            <summary>
            Receive Buffer Number.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.Index">
            <summary>
            Index of data.  Must be a value of 0 - 7.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.ReceiveBufferDataFieldBytes">
            <summary>
            RBxD[7:0]: Receive Buffer Data Field Bytes.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxDn.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0">
            <summary>
            Receive Buffer Extended Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxEid0 class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="extendedIdentifier">
            EID[7:0]: Extended Identifier bits.
            These bits hold the Least Significant eight bits of the Extended Identifier for the received message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.RxBufferNumber">
            <summary>
            Receive Buffer Number. Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.ExtendedIdentifier">
            <summary>
            EID[7:0]: Extended Identifier bits.
            These bits hold the Least Significant eight bits of the Extended Identifier for the received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid0.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8">
            <summary>
            Receive Buffer Extended Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxEid8 class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="extendedIdentifier">
            EID[15:8]: Extended Identifier bits.
            These bits hold bits 15 through 8 of the Extended Identifier for the received message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.RxBufferNumber">
            <summary>
            Receive Buffer Number. Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.ExtendedIdentifier">
            <summary>
            EID[15:8]: Extended Identifier bits.
            These bits hold bits 15 through 8 of the Extended Identifier for the received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxEid8.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh">
            <summary>
            Receive Buffer Standard Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxSidh class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="standardIdentifier">
            SID[10:3]: Standard Identifier bits.
            These bits contain the eight Most Significant bits of the Standard Identifier for the received message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.RxBufferNumber">
            <summary>
            Receive Buffer Number. Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.StandardIdentifier">
            <summary>
            SID[10:3]: Standard Identifier bits.
            These bits contain the eight Most Significant bits of the Standard Identifier for the received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to up look Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidh.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl">
            <summary>
            Receive Buffer Standard Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.#ctor(System.Byte,System.Byte,System.Boolean,System.Boolean,System.Byte)">
            <summary>
             Initializes a new instance of the RxBxSidl class.
            </summary>
            <param name="rxBufferNumber">Receive Buffer Number. Must be a value of 0 - 1.</param>
            <param name="extendedIdentifier">
            EID[17:16]: Extended Identifier bits.
            These bits contain the two Most Significant bits of the Extended Identifier for the received message.
            </param>
            <param name="extendedIdentifierFlag">
            IDE: Extended Identifier Flag bit.  This is sometimes referred to as EFF.
            This bit indicates whether the received message was a standard or an extended frame.
            True = Received message was an extended frame.
            False = Received message was a standard frame.
            </param>
            <param name="standardFrameRemoteTransmitRequest">
            SRR: Standard Frame Remote Transmit Request bit (valid only if the IDE bit = 0).
            True = Standard frame Remote Transmit Request received.
            False = Standard data frame received.
            </param>
            <param name="standardIdentifier">
            SID[2:0]: Standard Identifier bits.
            These bits contain the three Least Significant bits of the Standard Identifier for the received message.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the RxBxSidl class.
            </summary>
            <param name="rxBufferNumber">Rx buffer number</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.RxBufferNumber">
            <summary>
            Receive Buffer Number. Must be a value of 0 - 1.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.ExtendedIdentifier">
            <summary>
            EID[17:16]: Extended Identifier bits.
            These bits contain the two Most Significant bits of the Extended Identifier for the received message.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.ExtendedIdentifierFlag">
            <summary>
            IDE: Extended Identifier Flag bit.
            This bit indicates whether the received message was a standard or an extended frame.
            True = Received message was an extended frame.
            False = Received message was a standard frame.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.StandardFrameRemoteTransmitRequest">
            <summary>
            SRR: Standard Frame Remote Transmit Request bit (valid only if the IDE bit = 0).
            True = Standard frame Remote Transmit Request received.
            False = Standard data frame received.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.StandardIdentifier">
            <summary>
            SID[2:0]: Standard Identifier bits.
            These bits contain the three Least Significant bits of the Standard Identifier for the received message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.GetRxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Rx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Rx Buffer Number.</param>
            <returns>The Rx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageReceive.RxBxSidl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl">
            <summary>
            Transmit Buffer Control Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.#ctor(System.Byte,Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TxBxCtrl class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="transmitBufferPriority">TXP[1:0]: Transmit Buffer Priority bits.</param>
            <param name="messageTransmitRequest">
            TXREQ: Message Transmit Request bit.
            True = Buffer is currently pending transmission (MCU sets this bit to request message be transmitted bit is automatically cleared when the message is sent).
            False = Buffer is not currently pending transmission (MCU can clear this bit to request a message abort).
            </param>
            <param name="transmissionErrorDetected">
            TXERR: Transmission Error Detected bit.
            True = A bus error occurred while the message was being transmitted.
            False = No bus error occurred while the message was being transmitted.
            </param>
            <param name="messageLostArbitration">
            MLOA: Message Lost Arbitration bit.
            True = Message lost arbitration while being sent.
            False = Message did not lose arbitration while being sent.
            </param>
            <param name="messageAbortedFlag">
            ABTF: Message Aborted Flag bit.
            True = Message was aborted.
            False = Message completed transmission successfully.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxCtrl class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority">
            <summary>
            Transmit Buffer Priority.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.LowestMessage">
            <summary>
            Lowest message priority.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.LowIntermediateMessage">
            <summary>
            Low intermediate message priority.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.HighIntermediateMessage">
            <summary>
            High intermediate message priority.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.BufferPriority.HighestMessage">
            <summary>
            Highest message priority.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.TxBufferNumber">
            <summary>
            Transmit Buffer Number.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.TransmitBufferPriority">
            <summary>
            TXP[1:0]: Transmit Buffer Priority bits.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.MessageTransmitRequest">
            <summary>
            TXREQ: Message Transmit Request bit.
            True = Buffer is currently pending transmission (MCU sets this bit to request message be transmitted bit is automatically cleared when the message is sent).
            False = Buffer is not currently pending transmission (MCU can clear this bit to request a message abort).
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.TransmissionErrorDetected">
            <summary>
            TXERR: Transmission Error Detected bit.
            True = A bus error occurred while the message was being transmitted.
            False = No bus error occurred while the message was being transmitted.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.MessageLostArbitration">
            <summary>
            MLOA: Message Lost Arbitration bit.
            True = Message lost arbitration while being sent.
            False = Message did not lose arbitration while being sent.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.MessageAbortedFlag">
            <summary>
            ABTF: Message Aborted Flag bit.
            True = Message was aborted.
            False = Message completed transmission successfully.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxCtrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc">
            <summary>
            Transmit Buffer Data Length Code Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.#ctor(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the TxBxDlc class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="dataLengthCode">
            DLC[3:0]: Data Length Code bits.
            Sets the number of data bytes to be transmitted (0 to 8 bytes).
            </param>
            <param name="remoteTransmissionRequest">
            RTR: Remote Transmission Request bit.
            True = Transmitted message will be a Remote Transmit Request.
            False = Transmitted message will be a data frame.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxDlc class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.DataLengthCode">
            <summary>
            DLC[3:0]: Data Length Code bits.
            Sets the number of data bytes to be transmitted (0 to 8 bytes).
            It is possible to set the DLC[3:0] bits to a value greater than eight; however, only eight bytes are transmitted.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.RemoteTransmissionRequest">
            <summary>
            RTR: Remote Transmission Request bit.
            True = Transmitted message will be a Remote Transmit Request.
            False = Transmitted message will be a data frame.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDlc.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn">
            <summary>
            Transmit Buffer Data Byte Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.#ctor(System.Byte,System.Int32,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxDn class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="index">Index of data.  Must be a value of 0 - 7.</param>
            <param name="transmitBufferDataFieldBytes">TXBxDn[7:0]: Transmit Buffer Data Field Bytes.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.Index">
            <summary>
            Index of data.  Must be a value of 0 - 7.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.TransmitBufferDataFieldBytes">
            <summary>
            TXBxDn[7:0]: Transmit Buffer Data Field Bytes.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxDn.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0">
            <summary>
            Transmit Buffer Extended Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxEid0 class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="extendedIdentifier">
            EID[7:0]: Extended Identifier bits.
            These bits hold the Least Significant eight bits of the Extended Identifier for the transmit message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.ExtendedIdentifier">
            <summary>
            EID[7:0]: Extended Identifier bits.
            These bits hold the Least Significant eight bits of the Extended Identifier for the transmit message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid0.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8">
            <summary>
            Transmit Buffer Extended Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxEid8 class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="extendedIdentifier">
            EID[15:8]: Extended Identifier bits.
            These bits hold bits 15 through 8 of the Extended Identifier for the transmit message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.ExtendedIdentifier">
            <summary>
            EID[15:8]: Extended Identifier bits.
            These bits hold bits 15 through 8 of the Extended Identifier for the transmit message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxEid8.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh">
            <summary>
            Transmit Buffer Standard Identifier High Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxSidh class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="standardIdentifier">
            SID[10:3]: Standard Identifier bits.
            These bits contain the eight Most Significant bits of the Standard Identifier for the transmit message.
            </param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.StandardIdentifier">
            <summary>
            SID[10:3]: Standard Identifier bits.
            These bits contain the eight Most Significant bits of the Standard Identifier for the transmit message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidh.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl">
            <summary>
            Transmit Buffer Standard Identifier Low Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.#ctor(System.Byte,System.Byte,System.Boolean,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxSidl class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="extendedIdentifier">
            EID[17:16]: Extended Identifier bits.
            These bits contain the two Most Significant bits of the Extended Identifier for the transmit message.
            </param>
            <param name="extendedIdentifierEnable">
            EXIDE: Extended Identifier Enable bit.
            True = Message will transmit the Extended Identifier.
            False = Message will transmit the Standard Identifier.
            </param>
            <param name="standardIdentifier">
            SID[2:0]: Standard Identifier bits.
            These bits contain the three Least Significant bits of the Standard Identifier for the transmit message.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the TxBxSidl class.
            </summary>
            <param name="txBufferNumber">Transmit Buffer Number.  Must be a value of 0 - 2.</param>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.TxBufferNumber">
            <summary>
            Transmit Buffer Number.  Must be a value of 0 - 2.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.ExtendedIdentifier">
            <summary>
            EID[17:16]: Extended Identifier bits.
            These bits contain the two Most Significant bits of the Extended Identifier for the transmit message.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.ExtendedIdentifierEnable">
            <summary>
            EXIDE: Extended Identifier Enable bit.
            True = Message will transmit the Extended Identifier.
            False = Message will transmit the Standard Identifier.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.StandardIdentifier">
            <summary>
            SID[2:0]: Standard Identifier bits.
            These bits contain the three Least Significant bits of the Standard Identifier for the transmit message.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.GetTxBufferNumber(Iot.Device.Mcp25xxx.Register.Address)">
            <summary>
            Gets the Tx Buffer Number based on the register address.
            </summary>
            <param name="address">The address to look up Tx Buffer Number.</param>
            <returns>The Tx Buffer Number based on the register address.</returns>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxBxSidl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl">
            <summary>
            TxnRTS Pin Control and Status Register.
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the TxRtsCtrl class.
            </summary>
            <param name="tx0RtsPinMode">
            B0RTSM: Tx0RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB0 buffer (on falling edge).
            False = Digital input.
            </param>
            <param name="tx1RtsPinMode">
            B1RTSM: Tx1RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB1 buffer (on falling edge).
            False = Digital input.
            </param>
            <param name="tx2RtsPinMode">
            B2RTSM: Tx2RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB2 buffer (on falling edge).
            False = Digital input.
            </param>
            <param name="tx0RtsPinState">
            B0RTS: Tx0RTS Pin State bit.
            Reads state of Tx0RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </param>
            <param name="tx1RtsPinState">
            B1RTS: Tx1RTX Pin State bit.
            Reads state of Tx1RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </param>
            <param name="tx2RtsPinState">
            B2RTS: Tx2RTS Pin State bit.
            Reads state of Tx2RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </param>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the TxRtsCtrl class.
            </summary>
            <param name="value">The value that represents the register contents.</param>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx0RtsPinMode">
            <summary>
            B0RTSM: Tx0RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB0 buffer (on falling edge).
            False = Digital input.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx1RtsPinMode">
            <summary>
            B1RTSM: Tx1RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB1 buffer (on falling edge).
            False = Digital input.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx2RtsPinMode">
            <summary>
            B2RTSM: Tx2RTS Pin mode bit.
            True = Pin is used to request message transmission of TXB2 buffer (on falling edge).
            False = Digital input.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx0RtsPinState">
            <summary>
            B0RTS: Tx0RTS Pin State bit.
            Reads state of Tx0RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx1RtsPinState">
            <summary>
            B1RTS: Tx1RTX Pin State bit.
            Reads state of Tx1RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Tx2RtsPinState">
            <summary>
            B2RTS: Tx2RTS Pin State bit.
            Reads state of Tx2RTS pin when in Digital Input mode.
            Reads as '0' when pin is in 'Request-to-Send' mode.
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.Address">
            <summary>
            Gets the address of the register.
            </summary>
            <returns>The address of the register.</returns>
        </member>
        <member name="M:Iot.Device.Mcp25xxx.Register.MessageTransmit.TxRtsCtrl.ToByte">
            <summary>
            Converts register contents to a byte.
            </summary>
            <returns>The byte that represent the register contents.</returns>
        </member>
        <member name="T:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode">
            <summary>
            Operation Mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.NormalOperation">
            <summary>
            Device is in the Normal Operation mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.Sleep">
            <summary>
            Device is in Sleep mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.Loopback">
            <summary>
            Device is in Loopback mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.ListenOnly">
            <summary>
            Device is in Listen-Only mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp25xxx.Tests.Register.CanControl.OperationMode.Configuration">
            <summary>
            Device is in Configuration mode.
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp3428.AdcGain">
            <summary>
            Possible gain values of the ADC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcGain.X1">
            <summary>1x gain</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcGain.X2">
            <summary>2x gain</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcGain.X4">
            <summary>4x gain</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcGain.X8">
            <summary>8x gain</summary>
        </member>
        <member name="T:Iot.Device.Mcp3428.AdcMode">
            <summary>
            Possible operation modes of the ADC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcMode.OneShot">
            <summary>One shot mode</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcMode.Continuous">
            <summary>Continuous mode</summary>
        </member>
        <member name="T:Iot.Device.Mcp3428.PinState">
            <summary>
            Possible connection states for the address pins
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.PinState.Low">
            <summary>Low state</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.PinState.High">
            <summary>High state</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.PinState.Floating">
            <summary>Floating state</summary>
        </member>
        <member name="T:Iot.Device.Mcp3428.AdcResolution">
            <summary>
            Possible resolution values of the ADC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcResolution.Bit12">
            <summary>12-bit resolution</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcResolution.Bit14">
            <summary>14-bit resolution</summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.AdcResolution.Bit16">
            <summary>16-bit resolution</summary>
        </member>
        <member name="T:Iot.Device.Mcp3428.ConversionResult">
            <summary>
            Conversion result
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.ConversionResult.#ctor(System.Byte,System.Int16,Iot.Device.Mcp3428.AdcResolution)">
            <summary>
            Constructs ConversionResult instance
            </summary>
            <param name="channel">ADC channel</param>
            <param name="rawData">Raw ADC value</param>
            <param name="resolution">ADC resolution</param>
        </member>
        <member name="P:Iot.Device.Mcp3428.ConversionResult.Channel">
            <summary>
            ID of the measuring channel.
            </summary>
            <value>The channel.</value>
        </member>
        <member name="P:Iot.Device.Mcp3428.ConversionResult.RawValue">
            <summary>
            Raw measurement data. Has to be scaled based on the measurement resolution to get voltage.
            </summary>
            <value>The raw data.</value>
        </member>
        <member name="P:Iot.Device.Mcp3428.ConversionResult.VoltageDivisor">
            <summary>
            Divisor to scale raw data.
            </summary>
            <value>The divisor.</value>
        </member>
        <member name="P:Iot.Device.Mcp3428.ConversionResult.Accuracy">
            <summary>
            Accuracy of the voltage measurement
            </summary>
            <value>The LSB value.</value>
        </member>
        <member name="P:Iot.Device.Mcp3428.ConversionResult.Voltage">
            <summary>
            Gets the voltage.
            </summary>
            <value>The voltage.</value>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Helpers.LSBValue(Iot.Device.Mcp3428.AdcResolution)">
            <summary>
            Gets the voltage value corresponding to the least significant bit based on resolution.
            </summary>
            <param name="res">The resolution.</param>
            <returns>System.Double.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">res - null</exception>
        </member>
        <member name="M:Iot.Device.Mcp3428.Helpers.LsbDivisor(Iot.Device.Mcp3428.AdcResolution)">
            <summary>
            Gets the divisor to scale raw data based on resolution. = 1/LSB
            </summary>
            <param name="res">The resolution.</param>
            <returns>System.UInt16.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">res - null</exception>
        </member>
        <member name="M:Iot.Device.Mcp3428.Helpers.I2CAddressFromPins(Iot.Device.Mcp3428.PinState,Iot.Device.Mcp3428.PinState)">
            <summary>
            Determine device I2C address based on the configuration pin states. Based on documentation TABLE 5-3-
            </summary>
            <param name="adr0">The adr0 pin state</param>
            <param name="adr1">The adr1 pin state</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Iot.Device.Mcp3428.Mcp3426">
            <summary>
            Represents Mcp3426 ADC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp3428.Mcp3426.I2CAddress">
            <summary>
            Default I2C address for the device
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3426.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs Mcp3426 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3426.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Mcp3428.AdcMode,Iot.Device.Mcp3428.AdcResolution,Iot.Device.Mcp3428.AdcGain)">
            <summary>
            Constructs Mcp3426 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
            <param name="mode">ADC operation mode</param>
            <param name="resolution">ADC resolution</param>
            <param name="pgaGain">PGA gain</param>
        </member>
        <member name="T:Iot.Device.Mcp3428.Mcp3427">
            <summary>
            Represents MCP3427 ADC
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3427.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs Mcp3427 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3427.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Mcp3428.AdcMode,Iot.Device.Mcp3428.AdcResolution,Iot.Device.Mcp3428.AdcGain)">
            <summary>
            Constructs Mcp3427 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
            <param name="mode">ADC operation mode</param>
            <param name="resolution">ADC resolution</param>
            <param name="pgaGain">PGA gain</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3427.I2CAddressFromPins(Iot.Device.Mcp3428.PinState,Iot.Device.Mcp3428.PinState)">
            <summary>
            Determine device I2C address based on the configuration pin states.
            </summary>
            <param name="adr0">The adr0 pin state</param>
            <param name="adr1">The adr1 pin state</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Iot.Device.Mcp3428.Mcp3428">
            <summary>
            Represents MCP3428 ADC
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3428.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs Mcp3428 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3428.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Mcp3428.AdcMode,Iot.Device.Mcp3428.AdcResolution,Iot.Device.Mcp3428.AdcGain)">
            <summary>
            Constructs Mcp3428 instance
            </summary>
            <param name="i2CDevice">I2C device used to communicate with the device</param>
            <param name="mode">ADC operation mode</param>
            <param name="resolution">ADC resolution</param>
            <param name="pgaGain">PGA gain</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp3428.I2CAddressFromPins(Iot.Device.Mcp3428.PinState,Iot.Device.Mcp3428.PinState)">
            <summary>
            Determine device I2C address based on the configuration pin states.
            </summary>
            <param name="adr0">The adr0 pin state</param>
            <param name="adr1">The adr1 pin state</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Iot.Device.Mcp3428.Mcp342x">
            <summary>
            Base type for MCP342X ADC
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.#ctor(System.Device.I2c.I2cDevice,System.Int32)">
            <summary>
            Protected constructor to easily generate MCP3426/7 devices whose only difference is channel count and I2C address
            </summary>
            <param name="i2cDevice">The i2 c device.</param>
            <param name="channels">The channels.</param>
            <autogeneratedoc />
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.LastBytes">
            <summary>
            Gets the last transmitted bytes. Debug function
            </summary>
            <value>The last bytes.</value>
            <autogeneratedoc />
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.LastChannel">
            <summary>
            Channel most recently read
            </summary>
            <value>The last channel.</value>
            <autogeneratedoc />
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.Mode">
            <summary>
            ADC mode
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.InputGain">
            <summary>
            Gets or sets the input gain.
            </summary>
            <value>The pga gain.</value>
            <autogeneratedoc />
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.Resolution">
            <summary>
            Gets or sets the bit resolution of the result.
            </summary>
            <value>The resolution.</value>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.ReadChannel(System.Int32)">
            <summary>
            Reads the channel.
            </summary>
            <param name="channel">The channel.</param>
            <returns>System.Double.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.OneShotRead(System.Int32)">
            <summary>
            Initiates One-shot reading and waits for the conversion to finish.
            </summary>
            <param name="channel">The channel.</param>
            <exception cref="T:System.IO.IOException">
            Device is not in One-Shot mode
            or
            ADC Conversion was not ready after {tries}
            </exception>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.WaitForConversion(System.Nullable{System.TimeSpan},System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Waits for conversion to complete
            </summary>
            <param name="waitSpan">Time to wait for conversion before timing out</param>
            <param name="progressCallback">Action to be called to report the progress</param>
            <param name="cancellationToken">Token which can be used to cancel the operation</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.ReadConfigByte(System.Byte)">
            <summary>
            Read (or load) configuration byte
            </summary>
            <param name="config">Configuration to be read</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.ReadValue(System.Int32)">
            <summary>
            Reads value on the specified channel
            </summary>
            <param name="channel">Channel to read the data from</param>
            <returns>Value read from the channel</returns>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.SetConfig(System.Int32,Iot.Device.Mcp3428.AdcMode,Iot.Device.Mcp3428.AdcResolution,Iot.Device.Mcp3428.AdcGain,System.Collections.Generic.IList{System.String})">
            <summary>
            Write configuration register and read back value
            </summary>
            <param name="channel">The channel.</param>
            <param name="mode">The mode.</param>
            <param name="resolution">The resolution.</param>
            <param name="pgaGain">The pga gain.</param>
            <param name="errorList">List to write errors on failure</param>
            <returns><c>true</c> if all values are set correctly, <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">channel</exception>
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.WaitTime">
            <summary>
            Wait period before operation is cancelled
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.ChannelCount">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp3428.Mcp342x.LastConversion">
            <summary>
            Last conversion result
            </summary>
        </member>
        <member name="E:Iot.Device.Mcp3428.Mcp342x.OnConversion">
            <summary>
            Event called when conversion is complete
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.WriteConfig(System.Byte)">
            <summary>
            Writes configuration
            </summary>
            <param name="configByte">Configuration to write</param>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.SetAsyncThreshold(System.Int32)">
            <summary>
            Sets the lower time limit in ms. If the current configuration reads data faster the synchronous API is used.
            This can save some overhead.
            </summary>
            <remarks>
            The default configuration is 20ms. This means that only in 16 bit resolution read waits asynchronously.
            Setting it to 0 or lower disables the function.
            </remarks>
            <param name="thresh">Time limit in ms. Default: 20ms</param>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.OneShotReadAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            One-shot read as an asynchronous operation. Initiates read and waits for it to finish.
            Async API was required as reading in 16bit resolution can take more than 60ms.
            </summary>
            <param name="channel">The channel.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>ValueTask.</returns>
            <exception cref="T:System.IO.IOException">
            Device is not in One-Shot mode
            or
            ADC Conversion was not ready after {tries}
            </exception>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.ReadValueAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Initiates reading value
            </summary>
            <param name="channel">Channel to read data from</param>
            <param name="cancellationToken">Token which can be used to cancel the operation</param>
            <returns>Task which can be used to wait for <see cref="T:Iot.Device.Mcp3428.ConversionResult"/></returns>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.WaitForConversionAsync(System.Nullable{System.TimeSpan},System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Initiates waiting for conversion
            </summary>
            <param name="waitSpan">Time to wait for conversion</param>
            <param name="progressCallback">Callback to be called to report progress</param>
            <param name="cancellationToken">Token which can be used to cancel the operation</param>
            <returns>Task which can be used to wait for opertation to finish</returns>
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.ReadChannelAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads the channel. Async API is mostly useful for greater resolutions and one-shot mode, when conversion time can be significant.
            </summary>
            <param name="channel">The channel.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>ValueTask&lt;System.Double&gt;.</returns>
            <autogeneratedoc />
        </member>
        <member name="M:Iot.Device.Mcp3428.Mcp342x.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp960x.ADCMeasurementResolutionType">
            <summary>
            An enumeration representing the ADC measurement resolution type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ADCMeasurementResolutionType.R18">
            <summary>
            Type 18-bit Resolution
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ADCMeasurementResolutionType.R16">
            <summary>
            Type 16-bit Resolution
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ADCMeasurementResolutionType.R14">
            <summary>
            Type 14-bit Resolution
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ADCMeasurementResolutionType.R12">
            <summary>
            Type 12-bit Resolution
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType">
            <summary>
            An enumeration representing the burst mode temperature samples type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S1">
            <summary>
            Type 1 sample
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S2">
            <summary>
            Type 2 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S4">
            <summary>
            Type 4 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S8">
            <summary>
            Type 8 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S16">
            <summary>
            Type 16 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S32">
            <summary>
            Type 32 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S64">
            <summary>
            Type 64 samples
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.BurstModeTemperatureSamplesType.S128">
            <summary>
            Type 128 samples
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.ColdJunctionResolutionType">
            <summary>
            An enumeration representing the cold junction/ambient sensor resolution type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ColdJunctionResolutionType.N_0_0625">
            <summary>
            Type 0.0625°C
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ColdJunctionResolutionType.N_0_25">
            <summary>
            Type 0.25°C
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.DeviceIDType">
            <summary>
            An enumeration representing the shutdown mode type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DeviceIDType.MCP9600">
            <summary>
            Type device MCP9600/L00/RL00
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DeviceIDType.MCP9601">
            <summary>
            Type device MCP9601/L01/RL01
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.DigitalFilterCoefficientsType">
            <summary>
            An enumeration representing the digitial filter type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N0">
            <summary>
            Type Filter off
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N1">
            <summary>
            Type Filter minimum
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N2">
            <summary>
            Type Filter minimum  + 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N3">
            <summary>
            Type Filter minimum  + 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N4">
            <summary>
            Type Filter Mid
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N5">
            <summary>
            Type Filter Mid + 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N6">
            <summary>
            Type Filter Mid + 2
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.DigitalFilterCoefficientsType.N7">
            <summary>
            Type Filter maximum
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.Mcp960x">
            <summary>
            MCP960X - cold-junction compensated thermocouple to digital converter
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.GetTemperature">
            <summary>
            Returns absolute thermocouple temperature in Celsius
            </summary>
            <remarks>
            Returns the cold-junction compensated and error-corrected thermocouple temperature in degree Celsius
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.GetHotJunctionTemperature">
            <summary>
            Returns the error corrected thermocouple hot junction temperature without the cold junction compensation in Celsius
            </summary>
            <remarks>
            The temperatur is the error corrected thermocouple hot junction temperature without the cold junction compensation
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.GetColdJunctionTemperature">
            <summary>
            Return cold junction / ambient temperature in Celsius
            </summary>
            <remarks>
            The cold junction temperatur equals to the ambient temperature from the device
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.ReadDeviceID(Iot.Device.Mcp960x.DeviceIDType@,System.Byte@,System.Byte@)">
            <summary>
            Return device id, revision major and revision minor
            </summary>
            <param name="deviceID">Returns the I2C device id.</param>
            <param name="revisionMajor">Returns the revision major.</param>
            <param name="revisionMinor">Returns the revision minor.</param>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.ReadStatus(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
             <summary>
             Returns the status of the device
             </summary>
             <param name="burstComplete">Returns the burst mode conversions status flag.</param>
             <param name="thUpdate">Returns the temperature update/conversion complete flag.</param>
             <param name="shortCircuit">MCP9601/L01/RL01 only: Returns the short circuit detection flag.</param>
             <param name="openCircuitOrInputRange">MCP960X/L0X/RL0X: Returns the temperature range detection flag - MCP9601/L01/RL01: Returns the open circuit detection flag.</param>
             <param name="Alert4Status">Returns Alert 4 status bit.</param>
             <param name="Alert3Status">Returns Alert 3 status bit.</param>
             <param name="Alert2Status">Returns Alert 2 status bit.</param>
             <param name="Alert1Status">Returns Alert 1 status bit.</param>
             <remarks>
             burstComplete: Once Burst mode is enabled, this bit is normally set after the first burst is complete. User can clear it and poll the bit periodically until the next burst of temperature conversions is complete
            
             thUpdate: This bit is normally set. User can clear it and poll the bit until the next temperature conversion is complete.
            
             shortCircuit:
               MCP9601/L01/RL01 only:
                 1 = Thermocouple Shorted to VDD or VSS
                 0 = Normal operation
               The VSENSE pin must be connected to the Thermocouple.
            
             openCircuitOrInputRange:
               MCP960X/L0X/RL0X:
                  1 = The ADC input Voltage (EMF) or the temperature data from the TH register exceeds the measurement range for the selected thermocouple type
                  0 = The ADC input Voltage(EMF) or the temperature data from the TH register is within the measurement range for the selected thermocouple type
                  If this bit is set, then the MCP960X/L0X/RL0X input voltage (EMF) to Degree Celsius conversion may be bypassed.
               MCP9601/L01/RL01:
                  Indicates whether the Thermocouple is disconnected from the inputs.The VSENSE pin must be connected to the Thermocouple.
            
               AlertXYZStatus:
                 Alert XYZ status bit
                   1 = TX &gt;  Temperature ALERT&lt;Y&gt;
                   0 = TX &lt;= Temperature ALERT&lt;Y&gt;
                 Where: TX is either TH or TC
             </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Mcp960x.ADCMeasurementResolutionType,Iot.Device.Mcp960x.BurstModeTemperatureSamplesType,Iot.Device.Mcp960x.ColdJunctionResolutionType,Iot.Device.Mcp960x.DigitalFilterCoefficientsType,Iot.Device.Mcp960x.ShutdownModesType,Iot.Device.Mcp960x.ThermocoupleType)">
            <summary>
            Creates a new instance of the MCP960X.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="adcMeasurementResolutionType">ADC Measurement Resolution. It defaults to 18bit.</param>
            <param name="burstModeTemperatureSamplesType">Number of Burst Mode Temperature Samples. It defaults to 1 sample.</param>
            <param name="coldJunctionResolutionType">Cold junction resolution. It defaults to 0.0625°C.</param>
            <param name="digitalFilterCoefficientsType">Digital filter. It defaults to MID filter.</param>
            <param name="shutdownModesType">Shutdown Mode. It defaults to Normal operation.</param>
            <param name="thermocoupleType">Thermocouple type. It defaults to K.</param>
            <remarks>
            alerts are disabled
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.Initialize">
            <summary>
            Standard initialization routine for Sensore Configuration Register, Device Configuration Register and Alert 1,2,3,4 Configuration Register
            </summary>
            <remarks>
            alerts are disabled
            </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.CalcTemperaturFromRegisterData(System.Span{System.Byte},System.Byte)">
             <summary>
             Returns the temperture in Celsius
             </summary>
             <param name="data">byte array of size 2, where UpperByte=data[0] and LowerByte=data[1].</param>
             <param name="valueBitPattern">Bit pattern to filter out the sign bits in the UpperByte.</param>
             <remarks>
             Temperature &gt;= 0°C
                Temp = (UpperByte x 16 + LowerByte/16)
             Temperature &lt;  0°C
                Temp = (UpperByte x 16 + LowerByte/16) – 4096
            
             In case of reading register TH, TDELTA the UpperByte Bit 7 is used as sign bit -> valueBitPattern = 0x7F.
             In case of reading register TC the UpperByte Bit 7-4 is used as sign bit -> valueBitPattern = 0x0F.
            
             So Bit 7 of UpperByte can always be used to determin the sign of the value.
             </remarks>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.WriteRegister(Iot.Device.Mcp960x.Register,System.Byte)">
            <summary>
            Writes the Data to the Spi Device
            </summary>
            <remarks>
            Takes the data input byte and writes it to the spi device
            </remarks>
            <param name="register">Register location to write to which starts the device reading</param>
            <param name="data">Data to write to the device</param>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.WriteRegister(Iot.Device.Mcp960x.Register,System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes the Data to the Spi Device
            </summary>
            <remarks>
            Takes the data input byte array and writes it to the spi device
            </remarks>
            <param name="register">Register location to write to which starts the device reading</param>
            <param name="data">Data to write to the device</param>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.ReadByte(Iot.Device.Mcp960x.Register)">
            <summary>
            Read of the Datas on the Device
            </summary>
            <remarks>
            Writes the read address of the register and returns a byte
            </remarks>
            <param name="register">Register location to write to which starts the device reading</param>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.ReadBytes(Iot.Device.Mcp960x.Register,System.Span{System.Byte})">
            <summary>
            Read of the Datas on the Device
            </summary>
            <remarks>
            Writes the read address of the register and outputs a byte list of the length provided
            </remarks>
            <param name="register">Register location to write to which starts the device reading</param>
            <param name="readBytes">bytes being read</param>
        </member>
        <member name="M:Iot.Device.Mcp960x.Mcp960x.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mcp960x.Register">
            <summary>
            Register of MCP960X
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_TH">
            <summary>
            Read Only Register for Thermocouple Hot-Junction TH
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_TDELTA">
            <summary>
            Read Only Register for Junctions Delta Temperature TDELTA
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_TC">
            <summary>
            Read Only Register for Thermocouple Cold-Junction TC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_ADC_RAW">
            <summary>
            Read Only Register for Raw Data from ADC
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_STATUS">
            <summary>
            Read Write Register for Status
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_CONFIGURATION_SENSOR">
            <summary>
            Read Write Register for Thermocouple Sensor Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_CONFIGURATION_DEVICE">
            <summary>
            Read Write Register for Device Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_ALERT_CONFIGURATION_1">
            <summary>
            Write Register for Alert 1 Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_ALERT_CONFIGURATION_2">
            <summary>
            Write Register for Alert 2 Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_ALERT_CONFIGURATION_3">
            <summary>
            Write Register for Alert 3 Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_WRITE_ALERT_CONFIGURATION_4">
            <summary>
            Write Register for Alert 4 Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_HYSTERESIS_1">
            <summary>
            Write Register for Alert 1 Hysteresis
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_HYSTERESIS_2">
            <summary>
            Write Register for Alert 2 Hysteresis
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_HYSTERESIS_3">
            <summary>
            Write Register for Alert 1 Hysteresis
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_HYSTERESIS_4">
            <summary>
            Write Register for Alert 1 Hysteresis
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_LIMIT_1">
            <summary>
            Write Register for Alert Limit 1
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_LIMIT_2">
            <summary>
            Write Register for Alert Limit 2
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_LIMIT_3">
            <summary>
            Write Register for Alert Limit 3
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.WRITE_ALERT_LIMIT_4">
            <summary>
            Write Register for Alert Limit 4
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.Register.READ_DEVICE_ID">
            <summary>
            Read Only Register for Device ID/Revision for MCP9600/L00/RL00 and MCP9601/L01/RL01
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.ShutdownModesType">
            <summary>
            An enumeration representing the shutdown mode type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ShutdownModesType.Normal">
            <summary>
            Type Normal operation
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ShutdownModesType.Shutdown">
            <summary>
            Type Shutdown mode
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ShutdownModesType.Burst">
            <summary>
            Type Burst mode
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp960x.ThermocoupleType">
            <summary>
            An enumeration representing the thermocouple type
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.K">
            <summary>
            Type K thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.J">
            <summary>
            Type J thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.T">
            <summary>
            Type T thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.N">
            <summary>
            Type N thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.S">
            <summary>
            Type S thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.E">
            <summary>
            Type E thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.B">
            <summary>
            Type B thermocouple
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp960x.ThermocoupleType.R">
            <summary>
            Type R thermocouple
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp9808.Register16">
            <summary>
            MCP9808 Register
            </summary>
        </member>
        <member name="T:Iot.Device.Mcp9808.Mcp9808">
            <summary>
            Microchip's MCP9808 I2C Temp sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Mcp9808.Mcp9808.DefaultI2cAddress">
            <summary>
            MCP9808 I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp9808.Mcp9808.Temperature">
            <summary>
            MCP9808 Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Mcp9808.Mcp9808.Disabled">
            <summary>
            Disable MCP9808
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the MCP9808
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.Init">
            <summary>
            Checks if the device is a MCP9808
            </summary>
            <returns>True if device has been correctly detected</returns>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.GetResolution">
            <summary>
            Return the internal resolution register
            </summary>
            <returns>Resolution setting</returns>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.Wake">
            <summary>
            Wakes-up the device
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.Shutdown">
            <summary>
            Shuts down the device
            </summary>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.GetTemperature">
            <summary>
            Read MCP9808 Temperature (℃)
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.SetShutdown(System.Boolean)">
            <summary>
            Set MCP9808 Shutdown
            </summary>
            <param name="isShutdown">Shutdown when value is true.</param>
        </member>
        <member name="M:Iot.Device.Mcp9808.Mcp9808.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Media.ColorEffect">
            <summary>
            The color effect of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.BW">
            <summary>
            Black and White
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Sepia">
            <summary>
            Sepia
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Negative">
            <summary>
            Negative
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Emboss">
            <summary>
            Emboss
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Sketch">
            <summary>
            Sketch
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.SkyBlue">
            <summary>
            Sky Blue
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.GrassGreen">
            <summary>
            Grass Green
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.SkinWhiten">
            <summary>
            Skin Whiten
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Vivid">
            <summary>
            Vivid
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Aqua">
            <summary>
            Aqua
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.ArtFreeze">
            <summary>
            Art Freeze
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Silhouette">
            <summary>
            Silhouette
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Solarization">
            <summary>
            Solarization
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.Antique">
            <summary>
            Antique
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ColorEffect.SetCbCr">
            <summary>
            Set CbCr
            </summary>
        </member>
        <member name="T:Iot.Device.Media.ExposureType">
            <summary>
            The exposure type of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ExposureType.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ExposureType.Manual">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ExposureType.ShutterPriority">
            <summary>
            Shutter Priority
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ExposureType.PperturePriority">
            <summary>
            Pperture Priority
            </summary>
        </member>
        <member name="T:Iot.Device.Media.VideoPixelFormat">
            <summary>
            The pixel format of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB332">
            <summary>
            RGB332
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB444">
            <summary>
            RGB444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ARGB444">
            <summary>
            ARGB444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XRGB444">
            <summary>
            XRGB444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBA444">
            <summary>
            RGBA444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBX444">
            <summary>
            RGBX444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ABGR444">
            <summary>
            ABGR444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XBGR444">
            <summary>
            XBGR444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRA444">
            <summary>
            BGRA444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRX444">
            <summary>
            BGRX444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB555">
            <summary>
            RGB555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ARGB555">
            <summary>
            ARGB555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XRGB555">
            <summary>
            XRGB555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBA555">
            <summary>
            RGBA555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBX555">
            <summary>
            RGBX555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ABGR555">
            <summary>
            ABGR555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XBGR555">
            <summary>
            XBGR555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRA555">
            <summary>
            BGRA555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRX555">
            <summary>
            BGRX555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB565">
            <summary>
            RGB565
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB555X">
            <summary>
            RGB555X
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ARGB555X">
            <summary>
            ARGB555X
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XRGB555X">
            <summary>
            XRGB555X
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB565X">
            <summary>
            RGB565X
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGR666">
            <summary>
            BGR666
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGR24">
            <summary>
            BGR24
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB24">
            <summary>
            RGB24
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGR32">
            <summary>
            BGR32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ABGR32">
            <summary>
            ABGR32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XBGR32">
            <summary>
            XBGR32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRA32">
            <summary>
            BGRA32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.BGRX32">
            <summary>
            BGRX32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGB32">
            <summary>
            RGB32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBA32">
            <summary>
            RGBA32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RGBX32">
            <summary>
            RGBX32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ARGB32">
            <summary>
            ARGB32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XRGB32">
            <summary>
            XRGB32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.GREY">
            <summary>
            GREY
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y4">
            <summary>
            Y4
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y6">
            <summary>
            Y6
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y10">
            <summary>
            Y10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y12">
            <summary>
            Y12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y16">
            <summary>
            Y16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y16_BE">
            <summary>
            Y16_BE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y10BPACK">
            <summary>
            Y10BPACK
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y10P">
            <summary>
            Y10P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PAL8">
            <summary>
            PAL8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.UV8">
            <summary>
            UV8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUYV">
            <summary>
            YUYV
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YYUV">
            <summary>
            YYUV
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVYU">
            <summary>
            YVYU
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.UYVY">
            <summary>
            UYVY
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VYUY">
            <summary>
            VYUY
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y41P">
            <summary>
            Y41P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV444">
            <summary>
            YUV444
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV555">
            <summary>
            YUV555
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV565">
            <summary>
            YUV565
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV32">
            <summary>
            YUV32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.AYUV32">
            <summary>
            AYUV32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XYUV32">
            <summary>
            XYUV32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VUYA32">
            <summary>
            VUYA32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VUYX32">
            <summary>
            VUYX32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.HI240">
            <summary>
            HI240
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.HM12">
            <summary>
            HM12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.M420">
            <summary>
            M420
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV12">
            <summary>
            NV12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV21">
            <summary>
            NV21
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV16">
            <summary>
            NV16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV61">
            <summary>
            NV61
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV24">
            <summary>
            NV24
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV42">
            <summary>
            NV42
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV12M">
            <summary>
            NV12M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV21M">
            <summary>
            NV21M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV16M">
            <summary>
            NV16M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV61M">
            <summary>
            NV61M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV12MT">
            <summary>
            NV12MT
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.NV12MT_16X16">
            <summary>
            NV12MT_16X16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV410">
            <summary>
            YUV410
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVU410">
            <summary>
            YVU410
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV411P">
            <summary>
            YUV411P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV420">
            <summary>
            YUV420
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVU420">
            <summary>
            YVU420
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV422P">
            <summary>
            YUV422P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV420M">
            <summary>
            YUV420M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVU420M">
            <summary>
            YVU420M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV422M">
            <summary>
            YUV422M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVU422M">
            <summary>
            YVU422M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YUV444M">
            <summary>
            YUV444M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.YVU444M">
            <summary>
            YVU444M
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR8">
            <summary>
            SBGGR8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG8">
            <summary>
            SGBRG8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG8">
            <summary>
            SGRBG8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB8">
            <summary>
            SRGGB8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR10">
            <summary>
            SBGGR10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG10">
            <summary>
            SGBRG10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG10">
            <summary>
            SGRBG10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB10">
            <summary>
            SRGGB10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR10P">
            <summary>
            SBGGR10P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG10P">
            <summary>
            SGBRG10P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG10P">
            <summary>
            SGRBG10P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB10P">
            <summary>
            SRGGB10P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR10ALAW8">
            <summary>
            SBGGR10ALAW8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG10ALAW8">
            <summary>
            SGBRG10ALAW8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG10ALAW8">
            <summary>
            SGRBG10ALAW8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB10ALAW8">
            <summary>
            SRGGB10ALAW8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR10DPCM8">
            <summary>
            SBGGR10DPCM8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG10DPCM8">
            <summary>
            SGBRG10DPCM8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG10DPCM8">
            <summary>
            SGRBG10DPCM8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB10DPCM8">
            <summary>
            SRGGB10DPCM8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR12">
            <summary>
            SBGGR12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG12">
            <summary>
            SGBRG12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG12">
            <summary>
            SGRBG12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB12">
            <summary>
            SRGGB12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR12P">
            <summary>
            SBGGR12P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG12P">
            <summary>
            SGBRG12P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG12P">
            <summary>
            SGRBG12P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB12P">
            <summary>
            SRGGB12P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR14P">
            <summary>
            SBGGR14P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG14P">
            <summary>
            SGBRG14P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG14P">
            <summary>
            SGRBG14P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB14P">
            <summary>
            SRGGB14P
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SBGGR16">
            <summary>
            SBGGR16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGBRG16">
            <summary>
            SGBRG16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SGRBG16">
            <summary>
            SGRBG16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SRGGB16">
            <summary>
            SRGGB16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.HSV24">
            <summary>
            HSV24
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.HSV32">
            <summary>
            HSV32
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MJPEG">
            <summary>
            MJPEG
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.JPEG">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.DV">
            <summary>
            DV
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MPEG">
            <summary>
            MPEG
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.H264">
            <summary>
            H264
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.H264_NO_SC">
            <summary>
            H264_NO_SC
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.H264_MVC">
            <summary>
            H264_MVC
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.H263">
            <summary>
            H263
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MPEG1">
            <summary>
            MPEG1
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MPEG2">
            <summary>
            MPEG2
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MPEG2_SLICE">
            <summary>
            MPEG2_SLICE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MPEG4">
            <summary>
            MPEG4
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.XVID">
            <summary>
            XVID
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VC1_ANNEX_G">
            <summary>
            VC1_ANNEX_G
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VC1_ANNEX_L">
            <summary>
            VC1_ANNEX_L
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VP8">
            <summary>
            VP8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VP9">
            <summary>
            VP9
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.HEVC">
            <summary>
            HEVC
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.FWHT">
            <summary>
            FWHT
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.FWHT_STATELESS">
            <summary>
            FWHT_STATELESS
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CPIA1">
            <summary>
            CPIA1
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.WNVA">
            <summary>
            WNVA
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SN9C10X">
            <summary>
            SN9C10X
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SN9C20X_I420">
            <summary>
            SN9C20X_I420
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PWC1">
            <summary>
            PWC1
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PWC2">
            <summary>
            PWC2
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.ET61X251">
            <summary>
            ET61X251
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SPCA501">
            <summary>
            SPCA501
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SPCA505">
            <summary>
            SPCA505
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SPCA508">
            <summary>
            SPCA508
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SPCA561">
            <summary>
            SPCA561
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PAC207">
            <summary>
            PAC207
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MR97310A">
            <summary>
            MR97310A
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.JL2005BCD">
            <summary>
            JL2005BCD
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SN9C2028">
            <summary>
            SN9C2028
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SQ905C">
            <summary>
            SQ905C
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PJPG">
            <summary>
            PJPG
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.OV511">
            <summary>
            OV511
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.OV518">
            <summary>
            OV518
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.STV0680">
            <summary>
            STV0680
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.TM6000">
            <summary>
            TM6000
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CIT_YYVYUY">
            <summary>
            CIT_YYVYUY
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.KONICA420">
            <summary>
            KONICA420
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.JPGL">
            <summary>
            JPGL
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SE401">
            <summary>
            SE401
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.S5C_UYVY_JPG">
            <summary>
            S5C_UYVY_JPG
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y8I">
            <summary>
            Y8I
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Y12I">
            <summary>
            Y12I
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.Z16">
            <summary>
            Z16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.MT21C">
            <summary>
            MT21C
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.INZI">
            <summary>
            INZI
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.SUNXI_TILED_NV12">
            <summary>
            SUNXI_TILED_NV12
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CNF4">
            <summary>
            CNF4
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.IPU3_SBGGR10">
            <summary>
            IPU3_SBGGR10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.IPU3_SGBRG10">
            <summary>
            IPU3_SGBRG10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.IPU3_SGRBG10">
            <summary>
            IPU3_SGRBG10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.IPU3_SRGGB10">
            <summary>
            IPU3_SRGGB10
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CU8">
            <summary>
            CU8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CU16LE">
            <summary>
            CU16LE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CS8">
            <summary>
            CS8
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.CS14LE">
            <summary>
            CS14LE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.RU12LE">
            <summary>
            RU12LE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PCU16BE">
            <summary>
            PCU16BE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PCU18BE">
            <summary>
            PCU18BE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.PCU20BE">
            <summary>
            PCU20BE
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.DELTA_TD16">
            <summary>
            DELTA_TD16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.DELTA_TD08">
            <summary>
            DELTA_TD08
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.TU16">
            <summary>
            TU16
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.TU08">
            <summary>
            TU08
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VSP1_HGO">
            <summary>
            VSP1_HGO
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.VSP1_HGT">
            <summary>
            VSP1_HGT
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.UVC">
            <summary>
            UVC
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoPixelFormat.D4XX">
            <summary>
            D4XX
            </summary>
        </member>
        <member name="T:Iot.Device.Media.RawPixelFormat">
            <summary>
            videodev2.h Pixel Format Definition
            </summary>
        </member>
        <member name="T:Iot.Device.Media.PowerLineFrequency">
            <summary>
            The power line frequency of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.PowerLineFrequency.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="F:Iot.Device.Media.PowerLineFrequency.Frequency50Hz">
            <summary>
            50Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Media.PowerLineFrequency.Frequency60Hz">
            <summary>
            60Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Media.PowerLineFrequency.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="T:Iot.Device.Media.Resolution">
            <summary>
            The resolution of a video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.Type">
            <summary>
            Resolution's type
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.MinHeight">
            <summary>
            Resolution's minimum height
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.MaxHeight">
            <summary>
            Resolution's maximum height
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.StepHeight">
            <summary>
            Resolution's step for height
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.MinWidth">
            <summary>
            Resolution's minimum width
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.MaxWidth">
            <summary>
            Resolution's maximum width
            </summary>
        </member>
        <member name="P:Iot.Device.Media.Resolution.StepWidth">
            <summary>
            Resolution's step for width
            </summary>
        </member>
        <member name="T:Iot.Device.Media.ResolutionType">
            <summary>
            The resolution type of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ResolutionType.Discrete">
            <summary>
            Discrete
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ResolutionType.Continuous">
            <summary>
            Continuous
            </summary>
        </member>
        <member name="F:Iot.Device.Media.ResolutionType.Stepwise">
            <summary>
            Stepwise
            </summary>
        </member>
        <member name="T:Iot.Device.Media.SceneMode">
            <summary>
            The scene mode of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Backlight">
            <summary>
            Backlight
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.BeachSnow">
            <summary>
            Beach Snow
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.CandleLight">
            <summary>
            Candle Light
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.DawnDusk">
            <summary>
            Dawn Dusk
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.FallColors">
            <summary>
            Fall Colors
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Fireworks">
            <summary>
            Fireworks
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Landscape">
            <summary>
            Landscape
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Night">
            <summary>
            Night
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.PartyIndoor">
            <summary>
            Party Indoor
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Portrait">
            <summary>
            Portrait
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Sports">
            <summary>
            Sports
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Sunset">
            <summary>
            Sunset
            </summary>
        </member>
        <member name="F:Iot.Device.Media.SceneMode.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:Iot.Device.Media.VideoConnectionSettings">
            <summary>
            The connection settings of a video device.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoConnectionSettings.#ctor(System.Int32,System.ValueTuple{System.UInt32,System.UInt32},Iot.Device.Media.VideoPixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Media.VideoConnectionSettings"/> class.
            </summary>
            <param name="busId">The bus ID the video device is connected to.</param>
            <param name="captureSize">The size of video device captured image.</param>
            <param name="pixelFormat">The pixel format of video device captured image.</param>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.BusId">
            <summary>
            The bus ID the video device is connected to.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.CaptureSize">
            <summary>
            The size of video device captured image.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.PixelFormat">
            <summary>
            The pixel format of video device captured image.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.ExposureType">
            <summary>
            The exposure type of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.ExposureTime">
            <summary>
            The exposure time of video device.
            </summary>
            <remarks>
            If ExposureType is set to Auto, the property is invalid.
            Time is a relative variable. Different devices can be set in different ranges.
            </remarks>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Sharpness">
            <summary>
            The sharpness of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Contrast">
            <summary>
            The contrast of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Brightness">
            <summary>
            The brightness of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Saturation">
            <summary>
            The saturation of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Gamma">
            <summary>
            The gamma of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Gain">
            <summary>
            The gain of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.Rotate">
            <summary>
            The rotate of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.WhiteBalanceEffect">
            <summary>
            The white balance effect of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.WhiteBalanceTemperature">
            <summary>
            The white balance temperature of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.ColorEffect">
            <summary>
            The color effect of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.SceneMode">
            <summary>
            The scene mode of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.PowerLineFrequency">
            <summary>
            The power line frequency of video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.HorizontalFlip">
            <summary>
            Whether horizontal flip the captured image.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoConnectionSettings.VerticalFlip">
            <summary>
            Whether vertical flip the captured image.
            </summary>
        </member>
        <member name="T:Iot.Device.Media.VideoDevice">
            <summary>
            The communications channel to a video device.
            </summary>
            <summary>
            The communications channel to a video device.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.YuvToRgb(System.IO.Stream)">
            <summary>
            Convert YUV(YUV444) to RGB format.
            </summary>
            <param name="stream">YUV stream.</param>
            <returns>RGB format colors.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.YuyvToRgb(System.IO.Stream)">
            <summary>
            Convert YUYV(YUV422) to RGB format.
            </summary>
            <param name="stream">YUYV stream.</param>
            <returns>RGB format colors.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Yv12ToRgb(System.IO.Stream,System.ValueTuple{System.UInt32,System.UInt32})">
            <summary>
            Convert YV12(YUV420) to RGB format.
            </summary>
            <param name="stream">YV12 stream.</param>
            <param name="size">Image size in the stream.</param>
            <returns>RGB format colors.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Nv12ToRgb(System.IO.Stream,System.ValueTuple{System.UInt32,System.UInt32})">
            <summary>
            Convert NV12(YUV420) to RGB format.
            </summary>
            <param name="stream">NV12 stream.</param>
            <param name="size">Image size in the stream.</param>
            <returns>RGB format colors.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.RgbToBitmap(System.ValueTuple{System.UInt32,System.UInt32},System.Drawing.Color[],Iot.Device.Graphics.PixelFormat)">
            <summary>
            Convert RGB format to bitmap
            </summary>
            <param name="size">Image size in the RGB data.</param>
            <param name="colors">RGB data.</param>
            <param name="format">Bitmap pixel format</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.YuvToRgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert single YUV pixel to RGB color.
            </summary>
            <param name="y">Y</param>
            <param name="u">U</param>
            <param name="v">V</param>
            <returns>RGB color.</returns>
        </member>
        <member name="T:Iot.Device.Media.VideoDevice.NewImageBufferReadyEvent">
            <summary>
            New image buffer ready event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The new image ready event argument</param>
        </member>
        <member name="E:Iot.Device.Media.VideoDevice.NewImageBufferReady">
            <summary>
            Event for a new image buffer ready
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Create(Iot.Device.Media.VideoConnectionSettings)">
            <summary>
            Create a communications channel to a video device running on Unix.
            </summary>
            <param name="settings">The connection settings of a video device.</param>
            <returns>A communications channel to a video device running on Unix.</returns>
        </member>
        <member name="P:Iot.Device.Media.VideoDevice.DevicePath">
            <summary>
            Path to video resources located on the platform.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDevice.Settings">
            <summary>
            The connection settings of the video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDevice.IsOpen">
            <summary>
            Returns true if the connection to the device is already open.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDevice.IsCapturing">
            <summary>
            Returns true if the device is already capturing.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDevice.ImageBufferPoolingEnabled">
            <summary>
            true if this VideoDevice should pool the image buffers used.
            when set to true the consumer must return the image buffers to the <see cref="T:System.Buffers.ArrayPool`1"/> Shared instance
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Capture(System.String)">
            <summary>
            Capture a picture from the video device.
            </summary>
            <param name="path">Picture save path.</param>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Capture">
            <summary>
            Capture a picture from the video device.
            </summary>
            <returns>Picture byte[].</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.StartCaptureContinuous">
            <summary>
            Start continuous capture
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.CaptureContinuous(System.Threading.CancellationToken)">
            <summary>
            The continuous capture stream
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.StopCaptureContinuous">
            <summary>
            Stop the continuous capture
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.GetVideoDeviceValue(Iot.Device.Media.VideoDeviceValueType)">
            <summary>
            Query controls value from the video device.
            </summary>
            <param name="type">The type of a video device's control.</param>
            <returns>The default and current values of a video device's control.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.GetSupportedPixelFormats">
            <summary>
            Get all the pixel formats supported by the device.
            </summary>
            <returns>Supported pixel formats.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.GetPixelFormatResolutions(Iot.Device.Media.VideoPixelFormat)">
            <summary>
            Get all the resolutions supported by the specified pixel format.
            </summary>
            <param name="format">Pixel format.</param>
            <returns>Supported resolution.</returns>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Media.VideoDevice.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the VideoDevice and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.Media.NewImageBufferReadyEventArgs">
            <summary>
            New image buffer ready event argument
            </summary>
        </member>
        <member name="M:Iot.Device.Media.NewImageBufferReadyEventArgs.#ctor(System.Byte[],System.Int32)">
            <summary>
            Constructor for a new image ready event argument
            </summary>
            <param name="imageBuffer">The image buffer</param>
            <param name="length">The length of the image inside the buffer</param>
        </member>
        <member name="P:Iot.Device.Media.NewImageBufferReadyEventArgs.ImageBuffer">
            <summary>
            Byte array buffer containing the image. The buffer may be larger than the image
            </summary>
        </member>
        <member name="P:Iot.Device.Media.NewImageBufferReadyEventArgs.Length">
            <summary>
            The length of the image inside the buffer
            </summary>
        </member>
        <member name="T:Iot.Device.Media.VideoDeviceValue">
            <summary>
            The default and current values of a video device's control.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.VideoDeviceValue.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiate VideoDeviceValue.
            </summary>
            <param name="name">Control's name.</param>
            <param name="minimum">Minimum value.</param>
            <param name="maximum">Maximum value.</param>
            <param name="step">Value change step.</param>
            <param name="defaultValue">Control's default value.</param>
            <param name="currentValue">Control's current value.</param>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.Name">
            <summary>
            Control's name
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.Minimum">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.Maximum">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.Step">
            <summary>
            Value change step size
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.DefaultValue">
            <summary>
            Control's default value
            </summary>
        </member>
        <member name="P:Iot.Device.Media.VideoDeviceValue.CurrentValue">
            <summary>
            Control's current value
            </summary>
        </member>
        <member name="T:Iot.Device.Media.VideoDeviceValueType">
            <summary>
            The type of a video device's control.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.ExposureType">
            <summary>
            Exposure Type
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.ExposureTime">
            <summary>
            Exposure Time
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Sharpness">
            <summary>
            Sharpness
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Contrast">
            <summary>
            Contrast
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Brightness">
            <summary>
            Brightness
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Saturation">
            <summary>
            Saturation
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Gamma">
            <summary>
            Gamma
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Gain">
            <summary>
            Gain
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.Rotate">
            <summary>
            Rotate
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.HorizontalFlip">
            <summary>
            Horizontal Flip
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.VerticalFlip">
            <summary>
            Vertical Flip
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.PowerLineFrequency">
            <summary>
            Power Line Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.WhiteBalanceTemperature">
            <summary>
            White Balance Temperature
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.ColorEffect">
            <summary>
            Color Effect
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.WhiteBalanceEffect">
            <summary>
            White Balance Effect
            </summary>
        </member>
        <member name="F:Iot.Device.Media.VideoDeviceValueType.SceneMode">
            <summary>
            Scene Mode
            </summary>
        </member>
        <member name="T:Iot.Device.Media.WhiteBalanceEffect">
            <summary>
            The white balance effect of a video device.
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Manual">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Incandescent">
            <summary>
            Incandescent
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Fluorescent">
            <summary>
            Fluorescent
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.FluorescentH">
            <summary>
            FluorescentH
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Horizon">
            <summary>
            Horizon
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Daylight">
            <summary>
            Daylight
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Flash">
            <summary>
            Flash
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Cloudy">
            <summary>
            Cloudy
            </summary>
        </member>
        <member name="F:Iot.Device.Media.WhiteBalanceEffect.Shade">
            <summary>
            Shade
            </summary>
        </member>
        <member name="T:Iot.Device.Media.UnixVideoDevice">
            <summary>
            Represents a communications channel to a video device running on Unix.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixVideoDevice.DevicePath">
            <summary>
            Path to video resources located on the platform.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixVideoDevice.Settings">
            <summary>
            The connection settings of the video device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixVideoDevice.IsOpen">
            <summary>
            Returns true if the connection is already open
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixVideoDevice.IsCapturing">
            <summary>
            Returns true if the device is already capturing.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixVideoDevice.ImageBufferPoolingEnabled">
            <summary>
            true if this VideoDevice should pool the image buffers used.
            when set to true the consumer must return the image buffers to the <see cref="T:System.Buffers.ArrayPool`1"/> Shared instance
            </summary>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.#ctor(Iot.Device.Media.VideoConnectionSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Media.UnixVideoDevice"/> class that will use the specified settings to communicate with the video device.
            </summary>
            <param name="settings">The connection settings of a video device.</param>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.Capture(System.String)">
            <summary>
            Capture a picture from the video device.
            </summary>
            <param name="path">Picture save path.</param>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.Capture">
            <summary>
            Capture a picture from the video device.
            </summary>
            <returns>Picture stream.</returns>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.GetVideoDeviceValue(Iot.Device.Media.VideoDeviceValueType)">
            <summary>
            Query controls value from the video device.
            </summary>
            <param name="type">The type of a video device's control.</param>
            <returns>The default and current values of a video device's control.</returns>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.GetSupportedPixelFormats">
            <summary>
            Get all the pixel formats supported by the device.
            </summary>
            <returns>Supported pixel formats.</returns>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.GetPixelFormatResolutions(Iot.Device.Media.VideoPixelFormat)">
            <summary>
            Get all the resolutions supported by the specified pixel format.
            </summary>
            <param name="format">Pixel format.</param>
            <returns>Supported resolution.</returns>
        </member>
        <member name="M:Iot.Device.Media.UnixVideoDevice.V4l2Struct``1(System.Int32,``0@)">
            <summary>
            Get and set v4l2 struct.
            </summary>
            <typeparam name="T">V4L2 struct</typeparam>
            <param name="request">V4L2 request value</param>
            <param name="struct">The struct need to be read or set</param>
            <returns>The ioctl result</returns>
        </member>
        <member name="T:Iot.Device.Media.SoundConnectionSettings">
            <summary>
            The connection settings of a sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.PlaybackDeviceName">
            <summary>
            The playback device name of the sound device is connected to.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.RecordingDeviceName">
            <summary>
            The recording device name of the sound device is connected to.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.MixerDeviceName">
            <summary>
            The mixer device name of the sound device is connected to.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.RecordingSampleRate">
            <summary>
            The sample rate of recording.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.RecordingChannels">
            <summary>
            The channels of recording.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundConnectionSettings.RecordingBitsPerSample">
            <summary>
            The bits per sample of recording.
            </summary>
        </member>
        <member name="T:Iot.Device.Media.SoundDevice">
            <summary>
            The communications channel to a sound device.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Create(Iot.Device.Media.SoundConnectionSettings)">
            <summary>
            Create a communications channel to a sound device running on Unix.
            </summary>
            <param name="settings">The connection settings of a sound device.</param>
            <returns>A communications channel to a sound device running on Unix.</returns>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Create(Iot.Device.Media.SoundConnectionSettings,System.Boolean)">
            <summary>
            Create a communications channel to a sound device running on Unix.
            </summary>
            <param name="settings">The connection settings of a sound device.</param>
            <param name="unmute">Unmute the device if true</param>
            <returns>A communications channel to a sound device running on Unix.</returns>
            <remarks>Some device do not support to be unmuted, if you try so, it will raise an exception and dispose the device. In this case, you should set the unmute parameter to false</remarks>
        </member>
        <member name="P:Iot.Device.Media.SoundDevice.Settings">
            <summary>
            The connection settings of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundDevice.PlaybackVolume">
            <summary>
            The playback volume of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundDevice.PlaybackMute">
            <summary>
            The playback mute of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundDevice.RecordingVolume">
            <summary>
            The recording volume of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.SoundDevice.RecordingMute">
            <summary>
            The recording mute of the sound device.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Play(System.String)">
            <summary>
            Play WAV file.
            </summary>
            <param name="wavPath">WAV file path.</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Play(System.IO.Stream)">
            <summary>
            Play WAV file.
            </summary>
            <param name="wavStream">WAV stream.</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Record(System.UInt32,System.String)">
            <summary>
            Sound recording.
            </summary>
            <param name="recordTimeSeconds">Recording duration(In seconds).</param>
            <param name="outputFilePath">Recording save path.</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Record(System.UInt32,System.IO.Stream)">
            <summary>
            Sound recording.
            </summary>
            <param name="recordTimeSeconds">Recording duration(In seconds).</param>
            <param name="outputStream">Recording save stream.</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.StartRecording(System.String)">
            <summary>
            Start a continuous recording
            </summary>
            <param name="outputFilePath">The path of the output file</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.StopRecording">
            <summary>
            Stop the continuous recording
            </summary>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.WriteWavHeader(System.IO.Stream,Iot.Device.Media.WavHeader)">
            <summary>
            Write a header in a Stream
            </summary>
            <param name="wavStream">A wave stream</param>
            <param name="header">The header to add</param>
        </member>
        <member name="M:Iot.Device.Media.SoundDevice.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SoundDevice and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.Media.WavHeader">
            <summary>
            Wave header
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.Chunk">
            <summary>
            The wave chunk header
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.Format">
            <summary>
            The format
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.SubChunk1">
            <summary>
            First sub chunk
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.AudioFormat">
            <summary>
            Audio format
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.NumChannels">
            <summary>
            Number of channels
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.SampleRate">
            <summary>
            Sample rate
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.ByteRate">
            <summary>
            Byte rate
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.BlockAlign">
            <summary>
            Block alignment
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.BitsPerSample">
            <summary>
            Bits per sample
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeader.SubChunk2">
            <summary>
            Second sub chunk
            </summary>
        </member>
        <member name="T:Iot.Device.Media.WavHeaderChunk">
            <summary>
            Wave header chunk
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeaderChunk.ChunkId">
            <summary>
            The chunk id of the wave header chunk
            </summary>
        </member>
        <member name="P:Iot.Device.Media.WavHeaderChunk.ChunkSize">
            <summary>
            The size of the wave header chunk
            </summary>
        </member>
        <member name="T:Iot.Device.Media.UnixSoundDevice">
            <summary>
            Represents a communications channel to a sound device running on Unix.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixSoundDevice.Settings">
            <summary>
            The connection settings of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixSoundDevice.PlaybackVolume">
            <summary>
            The playback volume of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixSoundDevice.PlaybackMute">
            <summary>
            The playback mute of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixSoundDevice.RecordingVolume">
            <summary>
            The recording volume of the sound device.
            </summary>
        </member>
        <member name="P:Iot.Device.Media.UnixSoundDevice.RecordingMute">
            <summary>
            The recording mute of the sound device.
            </summary>
        </member>
        <member name="M:Iot.Device.Media.UnixSoundDevice.#ctor(Iot.Device.Media.SoundConnectionSettings,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Media.UnixSoundDevice"/> class that will use the specified settings to communicate with the sound device.
            </summary>
            <param name="settings">The connection settings of a sound device.</param>
            <param name="unmute">Unmute the device if true</param>
            <remarks>Some device do not support to be unmuted, if you try so, it will raise an exception and dispose the device. In this case, you should set the unmute parameter to false</remarks>
        </member>
        <member name="M:Iot.Device.Media.UnixSoundDevice.Play(System.String)">
            <summary>
            Play WAV file.
            </summary>
            <param name="wavPath">WAV file path.</param>
        </member>
        <member name="M:Iot.Device.Media.UnixSoundDevice.Play(System.IO.Stream)">
            <summary>
            Play WAV file.
            </summary>
            <param name="wavStream">WAV stream.</param>
        </member>
        <member name="M:Iot.Device.Media.UnixSoundDevice.Record(System.UInt32,System.String)">
            <summary>
            Sound recording.
            </summary>
            <param name="recordTimeSeconds">Recording duration(In seconds).</param>
            <param name="outputFilePath">Recording save path.</param>
        </member>
        <member name="M:Iot.Device.Media.UnixSoundDevice.Record(System.UInt32,System.IO.Stream)">
            <summary>
            Sound recording.
            </summary>
            <param name="recordTimeSeconds">Recording duration(In seconds).</param>
            <param name="outputStream">Recording save stream.</param>
        </member>
        <member name="T:Iot.Device.Mfrc522.MfRc522">
            <summary>
            MfRc522 module
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfRc522.MaximumSpiClockFrequency">
            <summary>
            The maximum speed for SPI transfer speed
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfRc522.DefaultSpiMode">
            <summary>
            Only SPI Mode supported is Mode0
            </summary>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.MaximumReadSize">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.MaximumWriteSize">
            <inheritdoc/>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfRc522.SupportedProtocols">
            <summary>
            The set of NFC protocols that are supported by this transceiver.
            </summary>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructor for MFRC5222 with SPI interface.
            </summary>
            <param name="spiDevice">A SPI device</param>
            <param name="pinReset">A reset pin for the hardware reset.</param>
            <param name="gpioController">A GpioController for the hardware reset.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructor for MFRC5222 with I2C interface.
            </summary>
            <param name="i2cDevice">An I2C device, note that there is no default address for this device, it can be programmed with pins.</param>
            <param name="pinReset">A reset pin for the hardware reset.</param>
            <param name="gpioController">A GpioController for the hardware reset.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.#ctor(System.String,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructor for MFRC5222 with Serial Port interface.
            </summary>
            <param name="serialPort">A Serial Port name, will construct a SerialPort with default speed of 9600 baud, no parity, 1 bit stop.</param>
            <param name="pinReset">A reset pin for the hardware reset.</param>
            <param name="gpioController">A GpioController for the hardware reset.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.#ctor(System.IO.Ports.SerialPort,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructor for MFRC5222 with Serial Port interface.
            </summary>
            <param name="serialPort">A Serial Port, default speed is 9600 baud, no parity, 1 bit stop.</param>
            <param name="pinReset">A reset pin for the hardware reset.</param>
            <param name="gpioController">A GpioController for the hardware reset.</param>
            <param name="shouldDispose">True to dispose the GpioController.</param>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.Gain">
            <summary>
            Get or Set the gain.
            </summary>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.Version">
            <summary>
            Get the Version.
            </summary>
            <remarks>Only versions 1.0 and  2.0 are valid for authentic MFRC522.
            Some copies may not have a proper version but would just work.</remarks>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.Enabled">
            <summary>
            Switch on or off the antenna.
            </summary>
        </member>
        <member name="P:Iot.Device.Mfrc522.MfRc522.SerialSpeed">
            <summary>
            Set or Get the baud rate for the serial port communication.
            Default is 9600 baud.
            </summary>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.SoftReset">
            <summary>
            Perform a soft reset. The configuration data of the internal buffer
            remains unchanged.All registers are set to the reset values.This command automatically
            terminates when finished.
            </summary>
            <remarks>The SerialSpeedReg register is reset and therefore the serial data rate is set to 9600 baud.</remarks>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.ListenToCardIso14443TypeA(Iot.Device.Rfid.Data106kbpsTypeA@,System.TimeSpan)">
            <summary>
            Listen to any 14443 Type A card.
            </summary>
            <param name="card">A card once detected.</param>
            <param name="timeout">A timeout for pulling the card.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.IsCardPresent(System.Byte[],System.Boolean)">
            <summary>
            Check if a new card is present.
            </summary>
            <param name="atqa">ATQA buffer must be 2 bytes length and will contain the ATQA answer if there is a card.</param>
            <param name="reselect">true if this is reselecting an existing card (e.g., after a halt)</param>
            <returns>true if there is a card, else false.</returns>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.SendAndReceiveData(Iot.Device.Mfrc522.MfrcCommand,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Byte)">
            <summary>
            Sand and Receive Data.
            </summary>
            <param name="command">The MFRC522 command.</param>
            <param name="sendData">The data to send.</param>
            <param name="receiveData">The data to receive. Note that you need to have at least the size of data you expect to receive.</param>
            <param name="numberValidBitsLastByte">The number of bits valid in the last byte, 8 is the default.</param>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.Halt">
            <summary>
            Stop to communicate with a card.
            </summary>
            <returns>True if success.</returns>
            <remarks>It's not because you don't get a positive result the card is not halt.</remarks>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.PrepareForSleep">
            <summary>
            Prepare for sleep, make sure cryptography is off and switch off the antenna.
            </summary>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.MifareAuthenticate(System.ReadOnlySpan{System.Byte},Iot.Device.Card.Mifare.MifareCardCommand,System.Byte,System.ReadOnlySpan{System.Byte})">
            <summary>
            Specific function to authenticate Mifare cards
            </summary>
            <param name="key">A 6 bytes key</param>
            <param name="mifareCommand">MifareCardCommand.AuthenticationA or MifareCardCommand.AuthenticationB</param>
            <param name="blockAddress">The block address to authenticate.</param>
            <param name="cardUid">The 4 bytes UUID of the card.</param>
            <returns>True if success.</returns>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.Transceive(System.Byte,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},Iot.Device.Card.NfcProtocol)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mfrc522.MfRc522.ReselectTarget(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mfrc522.MfrcCommand">
            <summary>
            Command of MFRC522 reader
            </summary>
            <remarks>Most of the time, the only one you need to use is the Transceive command.
            The SendAndReceiveData function is already using some of those commands to allow send and receive scenarios</remarks>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.Idle">
            <summary>
            Idle : no action, cancels current command execution
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.Memory">
            <summary>
            Memory: stores 25 bytes into the internal buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.GenerateRandomId">
            <summary>
            Generate Random Id: generates a 10-byte random ID number
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.CalculateCrc">
            <summary>
            Calculate CRC: activates the CRC coprocessor or performs a self test
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.Transmit">
            <summary>
            Transmit: transmits data from the FIFO buffer
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.NoCommandChange">
            <summary>
            No Command Change: no command change, can be used to modify the
            CommandReg register bits without affecting the command,
            for example, the PowerDown bit
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.Receive">
            <summary>
            Receive: activates the receiver circuits
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.Transceive">
            <summary>
            Transceive: transmits data from FIFO buffer to antenna and automatically
            activates the receiver after transmission
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.MifareAuthenticate">
            <summary>
            Mifare Authenticate: performs the MIFARE standard authentication as a reader
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.MfrcCommand.ResetPhase">
            <summary>
            Reset Phase: soft resets the MFRC522
            </summary>
        </member>
        <member name="T:Iot.Device.Mfrc522.CardCommand">
            <summary>
            Command to send to card
            </summary>
        </member>
        <member name="T:Iot.Device.Mfrc522.Register">
            <summary>
            Address of register moving all by 1 to the lest as
            they are defined like this in the documentation. From documentation, all
            registers' name finishes by Reg, removed from the name for clarity.
            Some of those registers are not used in the current implementation. They can
            be used to enhance it.
            As most implementations are using SPI and it is left by 1 bit to the left, we're doing it
            upfront
            </summary>
        </member>
        <member name="T:Iot.Device.Mfrc522.Status">
            <summary>
            Status for the functions
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Status.Ok">
            <summary>
            All happens perfectly
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Status.Collision">
            <summary>
            A collision has been detected, this allows for example to use
            retry mechanism
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Status.Error">
            <summary>
            An error happened
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Status.Timeout">
            <summary>
            Timeout in reading or writing to the card, it may means the card has been
            removed from the reader or is too far
            </summary>
        </member>
        <member name="T:Iot.Device.Mfrc522.Gain">
            <summary>
            The reception gain for the antenna
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G18dBa">
            <summary>
            Minimum gain 18 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G23dBa">
            <summary>
            23 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G18dBb">
            <summary>
            18 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G23dBb">
            <summary>
            23 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G33dB">
            <summary>
            33 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G38dB">
            <summary>
            38 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G43dB">
            <summary>
            43 db
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.Gain.G48dB">
            <summary>
            48 db
            </summary>
        </member>
        <member name="T:Iot.Device.Mfrc522.SerialSpeed">
            <summary>
            The serial UART speed in baud
            </summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B7200">
            <summary>7200 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B9600">
            <summary>9600 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B14400">
            <summary>14400 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B19200">
            <summary>19200 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B38400">
            <summary>38400 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B57600">
            <summary>57600 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B115200">
            <summary>115200 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B128000">
            <summary>128000 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B230400">
            <summary>230400 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B460800">
            <summary>460800 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B921600">
            <summary>921600 baud</summary>
        </member>
        <member name="F:Iot.Device.Mfrc522.SerialSpeed.B1228800">
            <summary>1228800 baud</summary>
        </member>
        <member name="T:Iot.Device.Mhz19b.AbmState">
            <summary>
            Defines if automatic baseline correction (ABM) is on or off
            For details refer to datasheet, rev. 1.0, pg. 8
            </summary>
        </member>
        <member name="F:Iot.Device.Mhz19b.AbmState.Off">
            <summary>
            ABM off (value acc. to datasheet)
            </summary>
        </member>
        <member name="F:Iot.Device.Mhz19b.AbmState.On">
            <summary>
            ABM on (value acc. to datasheet)
            </summary>
        </member>
        <member name="T:Iot.Device.Mhz19b.DetectionRange">
            <summary>
            Defines the sensor detection range, which is either 2000 or 5000ppm.
            </summary>
        </member>
        <member name="F:Iot.Device.Mhz19b.DetectionRange.Range2000">
            <summary>
            Detection range 2000ppm
            </summary>
        </member>
        <member name="F:Iot.Device.Mhz19b.DetectionRange.Range5000">
            <summary>
            Detection range 5000ppm
            </summary>
        </member>
        <member name="T:Iot.Device.Mhz19b.Mhz19b">
            <summary>
            MH-Z19B CO2 concentration sensor binding
            </summary>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Mhz19b.Mhz19b"/> class using an existing (serial port) stream.
            </summary>
            <param name="stream">Existing stream</param>
            <param name="shouldDispose">If true, the stream gets disposed when disposing the binding</param>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Mhz19b.Mhz19b"/> class and creates a new serial port stream.
            </summary>
            <param name="uartDevice">Path to the UART device / serial port, e.g. /dev/serial0</param>
            <exception cref="T:System.ArgumentException">uartDevice is null or empty</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.GetCo2Reading">
            <summary>
            Gets the current CO2 concentration from the sensor.
            </summary>
            <returns>CO2 volume concentration</returns>
            <exception cref="T:System.IO.IOException">Communication with sensor failed</exception>
            <exception cref="T:System.TimeoutException">A timeout occurred while communicating with the sensor</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.PerformZeroPointCalibration">
            <summary>
            Initiates a zero point calibration.
            </summary>
            <exception cref="T:System.IO.IOException">Communication with sensor failed</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.PerformSpanPointCalibration(UnitsNet.VolumeConcentration)">
            <summary>
            Initiate a span point calibration.
            </summary>
            <param name="span">span value, between 1000[ppm] and 5000[ppm]. The typical value is 2000[ppm].</param>
            <exception cref="T:System.ArgumentException">Thrown when span value is out of range</exception>
            <exception cref="T:System.IO.IOException">Communication with sensor failed</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.SetAutomaticBaselineCorrection(Iot.Device.Mhz19b.AbmState)">
            <summary>
            Switches the autmatic baseline correction on and off.
            </summary>
            <param name="state">State of automatic correction</param>
            <exception cref="T:System.IO.IOException">Communication with sensor failed</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.SetSensorDetectionRange(Iot.Device.Mhz19b.DetectionRange)">
            <summary>
            Set the sensor detection range.
            </summary>
            <param name="detectionRange">Detection range of the sensor</param>
            <exception cref="T:System.IO.IOException">Communication with sensor failed</exception>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.Checksum(System.Byte[])">
            <summary>
            Calculate checksum for requests and responses.
            For details refer to datasheet rev. 1.0, pg. 8.
            </summary>
            <param name="packet">Packet the checksum is calculated for</param>
            <returns>Cheksum</returns>
        </member>
        <member name="M:Iot.Device.Mhz19b.Mhz19b.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:Iot.Device.Mlx90614.Mlx90614">
            <summary>
            Infra Red Thermometer MLX90614
            </summary>
        </member>
        <member name="F:Iot.Device.Mlx90614.Mlx90614.DefaultI2cAddress">
            <summary>
            MLX90614 Default I2C Address
            </summary>
        </member>
        <member name="M:Iot.Device.Mlx90614.Mlx90614.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the MLX90614
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Mlx90614.Mlx90614.ReadAmbientTemperature">
            <summary>
            Read ambient temperature from MLX90614
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.Mlx90614.Mlx90614.ReadObjectTemperature">
            <summary>
            Read surface temperature of object from MLX90614
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.Mlx90614.Mlx90614.ReadTemperature(System.Byte)">
            <summary>
            Read temperature form specified register
            </summary>
            <param name="register">Register</param>
            <returns>Temperature in celsius</returns>
        </member>
        <member name="M:Iot.Device.Mlx90614.Mlx90614.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.MotorHat.AdafruitMotorPinProvider">
            <summary>
            <see cref="T:Iot.Device.MotorHat.MotorPinProvider"/> implementation for AdaFruit/Aliexpress
            </summary>
            <remarks>
            These correspond to motor hat screw terminals M1, M2, M3 and M4.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.AdafruitMotorPinProvider.GetPinsForMotor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.MotorHat.MotorHat">
            <summary>
            Raspberry Pi Motor Hat based on PCA9685 PWM controller
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorHat.I2cAddressBase">
            <summary>
            Default I2C address of Motor Hat
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorHat._pinProvider">
            <summary>
            The <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> to use
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorHat._pca9685">
            <summary>
            Motor Hat is built on top of a PCa9685
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorHat._channelsUsed">
            <summary>
            Holds every channel that is being used by either a DCMotor, Stepper, ServoMotor, or PWM
            </summary>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.#ctor(System.Device.I2c.I2cConnectionSettings,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.MotorHat.MotorHat"/> class with the specified I2C settings and PWM frequency.
            </summary>
            <param name="settings">The I2C settings of the MotorHat.</param>
            <param name="frequency">The frequency in Hz to set the PWM controller.</param>
            <remarks>
            The default i2c address is 0x60, but the HAT can be configured in hardware to any address from 0x60 to 0x7f.
            The PWM hardware used by this HAT is a PCA9685. It has a total possible frequency range of 24 to 1526 Hz.
            Setting the frequency above or below this range will cause PWM hardware to be set at its maximum or minimum setting.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.#ctor(System.Device.I2c.I2cConnectionSettings,System.Double,Iot.Device.MotorHat.IMotorPinProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.MotorHat.MotorHat"/> class with the specified I2C settings and PWM frequency.
            </summary>
            <param name="settings">The I2C settings of the MotorHat.</param>
            <param name="frequency">The frequency in Hz to set the PWM controller.</param>
            <param name="pinProvider">The <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> that provides <see cref="T:Iot.Device.MotorHat.MotorPins"/> for various hats.</param>
            <remarks>
            The default i2c address is 0x60, but the HAT can be configured in hardware to any address from 0x60 to 0x7f.
            The PWM hardware used by this HAT is a PCA9685. It has a total possible frequency range of 24 to 1526 Hz.
            Setting the frequency above or below this range will cause PWM hardware to be set at its maximum or minimum setting.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.MotorHat.MotorHat"/> class with the default I2C address and PWM frequency.
            </summary>
            <param name="frequency">The frequency in Hz to set the PWM controller.</param>
            <param name="selectedAddress">The I2C settings of the MotorHat. 0 by default if jumpers were not changed
            Use the following code to set an address equivalent to the one configured in your device jumpers
            var selectedAddress = 0b000000;  // were bits represents jumpers A5 A4 A3 A2 A1 A0</param>
            <remarks>
            The <see cref="T:Iot.Device.MotorHat.MotorHat"/> will be created with the default I2C address of 0x60 and PWM frequency of 1600 Hz.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.CreateDCMotor(System.Int32)">
            <summary>
            Creates a <see cref="N:Iot.Device.DCMotor"/> object for the specified channel.
            </summary>
            <param name="motorNumber">A motor number from 1 to 4.</param>
            <remarks>
            The motorNumber parameter refers to the motor numbers M1, M2, M3 or M4 printed in the device.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.CreatePwmChannel(System.Int32)">
            <summary>
            Creates a <see cref="T:System.Device.Pwm.PwmChannel"/> from one of the 4 available PWM channels in the MotorHat
            </summary>
            <param name="channelNumber">A valid PWM channel (0, 1, 14 or 15)</param>
            <remarks>
            The channelNumber refers to ont of the available PWM channel numbers available in the Motor Hat (0, 1, 14, 15) printed in the device.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.CreateServoMotor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="N:Iot.Device.ServoMotor"/> from one of the 4 available PWM channels  in the MotorHat
            </summary>
            <param name="channelNumber">A valid PWM channel (0, 1, 14 or 15)</param>
            <param name="maximumAngle">The maximum angle the servo motor can move represented as a value between 0 and 360.</param>
            <param name="minimumPulseWidthMicroseconds">The minimum pulse width, in microseconds, that represent an angle for 0 degrees.</param>
            <param name="maximumPulseWidthMicroseconds">The maxnimum pulse width, in microseconds, that represent an angle for maximum angle.</param>
            <remarks>
            The channelNumber refers to ont of the available PWM channel numbers available in the Motor Hat (0, 1, 14, 15) printed in the device.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorHat.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.MotorHat.IMotorPinProvider">
            <summary>
            Represents a provider for <see cref="T:Iot.Device.MotorHat.MotorPins"/>
            </summary>
        </member>
        <member name="M:Iot.Device.MotorHat.IMotorPinProvider.GetPinsForMotor(System.Int32)">
            <summary>
            Gets the <see cref="T:Iot.Device.MotorHat.MotorPins"/> for motor at the specified <paramref name="index"/>
            </summary>
            <param name="index">The index of the motor to get pins for</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.MotorHat.MotorPinProvider">
            <summary>
            Static class providing known <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> instances
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorPinProvider.AdaFruit">
            <summary>
            <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> for AdaFruit motor hat
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorPinProvider.Aliexpress">
            <summary>
            <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> for Aliexpress motor hat
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorPinProvider.Waveshare">
            <summary>
            <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/> for Waveshare motor hat
            </summary>
        </member>
        <member name="F:Iot.Device.MotorHat.MotorPinProvider.Default">
            <summary>
            Default <see cref="T:Iot.Device.MotorHat.IMotorPinProvider"/>
            </summary>
        </member>
        <member name="T:Iot.Device.MotorHat.MotorPins">
            <summary>
            Represents a Motor PinConfiguration
            </summary>
            <param name="SpeedPin">The pin controlling the speed of the motor</param>
            <param name="In1Pin">The first pin for controlling direction</param>
            <param name="In2Pin">The second pin for controlling direction</param>
            <remarks>
            The PCA9685 PWM controller is used to control the inputs of two dual motor drivers.
            Each motor driver circuit has one speed pin and two IN pins.
            The PWM pin expects a PWM input signal. The two IN pins expect a logic 0 or 1 input signal.
            The variables SpeedPin, In1Pin and In2Pin variables identify which PCA9685 PWM output pins will be used to drive this DCMotor.
            The speed variable identifies which PCA9685 output pin is used to drive the PWM input on the motor driver.
            And the In1Pin and In2Pin are used to specify which PCA9685 output pins are used to drive the xIN1 and xIN2 input pins of the motor driver.
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.MotorPins.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents a Motor PinConfiguration
            </summary>
            <param name="SpeedPin">The pin controlling the speed of the motor</param>
            <param name="In1Pin">The first pin for controlling direction</param>
            <param name="In2Pin">The second pin for controlling direction</param>
            <remarks>
            The PCA9685 PWM controller is used to control the inputs of two dual motor drivers.
            Each motor driver circuit has one speed pin and two IN pins.
            The PWM pin expects a PWM input signal. The two IN pins expect a logic 0 or 1 input signal.
            The variables SpeedPin, In1Pin and In2Pin variables identify which PCA9685 PWM output pins will be used to drive this DCMotor.
            The speed variable identifies which PCA9685 output pin is used to drive the PWM input on the motor driver.
            And the In1Pin and In2Pin are used to specify which PCA9685 output pins are used to drive the xIN1 and xIN2 input pins of the motor driver.
            </remarks>
        </member>
        <member name="P:Iot.Device.MotorHat.MotorPins.SpeedPin">
            <summary>The pin controlling the speed of the motor</summary>
        </member>
        <member name="P:Iot.Device.MotorHat.MotorPins.In1Pin">
            <summary>The first pin for controlling direction</summary>
        </member>
        <member name="P:Iot.Device.MotorHat.MotorPins.In2Pin">
            <summary>The second pin for controlling direction</summary>
        </member>
        <member name="T:Iot.Device.MotorHat.WaveshareMotorPinProvider">
            <summary>
            <see cref="T:Iot.Device.MotorHat.MotorPinProvider"/> implementation for Waveshare
            </summary>
            <remarks>
            These correspond to motor hat screw terminals M1 and M2
            </remarks>
        </member>
        <member name="M:Iot.Device.MotorHat.WaveshareMotorPinProvider.GetPinsForMotor(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Mpr121.Channels">
            <summary>
            Mpr121 channels
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel00">
            <summary>Channel 0</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel01">
            <summary>Channel 1</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel02">
            <summary>Channel 2</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel03">
            <summary>Channel 3</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel04">
            <summary>Channel 4</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel05">
            <summary>Channel 5</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel06">
            <summary>Channel 6</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel07">
            <summary>Channel 7</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel08">
            <summary>Channel 8</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel09">
            <summary>Channel 9</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel10">
            <summary>Channel 10</summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Channels.Channel11">
            <summary>Channel 11</summary>
        </member>
        <member name="T:Iot.Device.Mpr121.ChannelStatusesChangedEventArgs">
            <summary>
            Represents the arguments of event rising when the channel statuses have been changed.
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.ChannelStatusesChangedEventArgs.ChannelStatuses">
            <summary>
            The channel statuses.
            </summary>
        </member>
        <member name="M:Iot.Device.Mpr121.ChannelStatusesChangedEventArgs.#ctor(System.Collections.Generic.IReadOnlyDictionary{Iot.Device.Mpr121.Channels,System.Boolean})">
            <summary>
            Initialize event arguments.
            </summary>
            <param name="channelStatuses">The channel statuses.</param>
        </member>
        <member name="T:Iot.Device.Mpr121.Mpr121">
            <summary>
            Supports MPR121 Proximity Capacitive Touch Sensor Controller.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Mpr121.DefaultI2cAddress">
            <summary>
            MPR121 Default I2C Address.
            </summary>
        </member>
        <member name="E:Iot.Device.Mpr121.Mpr121.ChannelStatusesChanged">
            <summary>
            Notifies about a the channel statuses have been changed.
            Refresh period can be changed by setting PeriodRefresh property.
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121.PeriodRefresh">
            <summary>
            Gets or sets the period in milliseconds to refresh the channels statuses.
            </summary>
            <remark>
            Set value 0 to stop the automatically refreshing. Setting the value greater than 0 will start/update auto-refresh.
            </remark>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.#ctor(System.Device.I2c.I2cDevice,System.Int32,Iot.Device.Mpr121.Mpr121Configuration)">
            <summary>
            Initialize a MPR121 controller.
            </summary>
            <param name="i2cDevice">The i2c device.</param>
            <param name="periodRefresh">The period in milliseconds of refresing the channel statuses.</param>
            <param name="configuration">The controller configuration.</param>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.ReadChannelStatuses">
            <summary>
            Reads the channel statuses of MPR121 controller.
            </summary>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.ReadChannelStatus(Iot.Device.Mpr121.Channels)">
            <summary>
            Reads the channel status of MPR121 controller.
            </summary>
            <param name="channel">The channel to read status.</param>
            <remark>
            Please use ReadChannelStatuses() if you need to read statuses of multiple channels.
            Using this method several times to read status for several channels can affect the performance.
            </remark>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.RefreshChannelStatuses(System.Object)">
            <summary>
            The callback function for timer to refresh channels statuses.
            </summary>
        </member>
        <member name="M:Iot.Device.Mpr121.Mpr121.RefreshChannelStatuses">
            <summary>
            Refresh the channel statuses.
            </summary>
        </member>
        <member name="T:Iot.Device.Mpr121.Mpr121Configuration">
            <summary>
            Configuration for registers listed on datasheet page 8.
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.MaxHalfDeltaRising">
            <summary>
            Determines the largest magnitude of variation to pass through the baseline filter (rising).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.NoiseHalfDeltaRising">
            <summary>
            Determines the incremental change when non-noise drift is detected (rising).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.NoiseCountLimitRising">
            <summary>
            Determines the number of samples consecutively greater than the Max Half Delta value (rising).
            This is necessary to determine that it is not noise.
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.FilterDelayCountLimitRising">
            <summary>
            Determines the operation rate of the filter. A larger count limit means the filter delay is operating more slowly (rising).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.MaxHalfDeltaFalling">
            <summary>
            Determines the largest magnitude of variation to pass through the baseline filter (falling).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.NoiseHalfDeltaFalling">
            <summary>
            Determines the incremental change when non-noise drift is detected (falling).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.NoiseCountLimitFalling">
            <summary>
            Determines the number of samples consecutively greater than the Max Half Delta value (falling).
            This is necessary to determine that it is not noise.
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.FilterDelayCountLimitFalling">
            <summary>
            Determines the operation rate of the filter. A larger count limit means the filter delay is operating more slowly (falling).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.ElectrodeTouchThreshold">
            <summary>
            Electrode touch threshold.
            </summary>
            <remark>
            Threshold settings are dependant on the touch/release signal strength, system sensitivity and noise immunity requirements.
            In a typical touch detection application, threshold is typically in the range 0x04~0x10.
            The touch threshold is several counts larger than the release threshold. This is to provide hysteresis and to prevent noise and jitter.
            </remark>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.ElectrodeReleaseThreshold">
            <summary>
            Electrode release threshold.
            </summary>
            <remark>
            Threshold settings are dependant on the touch/release signal strength, system sensitivity and noise immunity requirements.
            In a typical touch detection application, threshold is typically in the range 0x04~0x10.
            The touch threshold is several counts larger than the release threshold. This is to provide hysteresis and to prevent noise and jitter.
            </remark>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.ChargeDischargeTimeConfiguration">
            <summary>
            Filter/Global Charge Discharge Time Configuration (datasheet page 14).
            </summary>
        </member>
        <member name="P:Iot.Device.Mpr121.Mpr121Configuration.ElectrodeConfiguration">
            <summary>
            Electrode Configuration (datasheet page 15).
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.MHDR">
            <summary>
            MHD Rising.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.NHDR">
            <summary>
            NHD Amount Rising.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.NCLR">
            <summary>
            NCL Rising.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.FDLR">
            <summary>
            FDL Rising.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.MHDF">
            <summary>
            MHD Falling.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.NHDF">
            <summary>
            NHD Amount Falling.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.NCLF">
            <summary>
            NCL Falling.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.FDLF">
            <summary>
            FDL Falling.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E0TTH">
            <summary>
            ELE0 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E0RTH">
            <summary>
            ELE0 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E1TTH">
            <summary>
            ELE1 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E1RTH">
            <summary>
            ELE1 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E2TTH">
            <summary>
            ELE2 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E2RTH">
            <summary>
            ELE2 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E3TTH">
            <summary>
            ELE3 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E3RTH">
            <summary>
            ELE3 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E4TTH">
            <summary>
            ELE4 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E4RTH">
            <summary>
            ELE4 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E5TTH">
            <summary>
            ELE5 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E5RTH">
            <summary>
            ELE5 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E6TTH">
            <summary>
            ELE6 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E6RTH">
            <summary>
            ELE6 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E7TTH">
            <summary>
            ELE7 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E7RTH">
            <summary>
            ELE7 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E8TTH">
            <summary>
            ELE8 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E8RTH">
            <summary>
            ELE8 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E9TTH">
            <summary>
            ELE9 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E9RTH">
            <summary>
            ELE9 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E10TTH">
            <summary>
            ELE10 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E10RTH">
            <summary>
            ELE10 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E11TTH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.E11RTH">
            <summary>
            ELE11 Touch Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.CDTC">
            <summary>
            ELE11 Release Threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpr121.Registers.ELECONF">
            <summary>
            Electrode Configuration.
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.AccelerometerLowPowerMode">
            <summary>
            Averaging filter settings for Low Power Accelerometer mode. (Datasheet page 37)
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerLowPowerMode.Average4Samples">
            <summary>
            Average of 4 samples.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerLowPowerMode.Average8Samples">
            <summary>
            Average of 8 samples.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerLowPowerMode.Average16Samples">
            <summary>
            Average of 16 samples.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerLowPowerMode.Average32Samples">
            <summary>
            Average of 32 samples.
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.AccelerometerScale">
            <summary>
            Accelerometer scale. (Datasheet page 37)
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerScale.Scale2G">
            <summary>
            +- 2G
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerScale.Scale4G">
            <summary>
            +- 4G
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerScale.Scale8G">
            <summary>
            +- 8G
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.AccelerometerScale.Scale16G">
            <summary>
            +- 16G
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.EnabledAxis">
            <summary>
            Axes to enable
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.AccelerometerX">
            <summary>
            Accelerometer X axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.AccelerometerY">
            <summary>
            Accelerometer Y axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.AccelerometerZ">
            <summary>
            Accelerometer Z axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.GyroscopeX">
            <summary>
            Gyroscope X axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.GyroscopeY">
            <summary>
            Gyroscope Y axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.EnabledAxis.GyroscopeZ">
            <summary>
            Gyroscope Z axis.
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.GyroscopeScale">
            <summary>
            Gyroscope scale. (Datasheet page 37)
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.GyroscopeScale.Scale250dps">
            <summary>
            +- 250 dps
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.GyroscopeScale.Scale500dps">
            <summary>
            +- 500 dps
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.GyroscopeScale.Scale1000dps">
            <summary>
            +- 1000 dps
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.GyroscopeScale.Scale2000dps">
            <summary>
            +- 2000 dps
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.InterruptEnable">
            <summary>
            WoM interrupt on axes of accelerometer.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.InterruptEnable.None">
            <summary>
            All axes disabled.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.InterruptEnable.Xaxis">
            <summary>
            Enable X axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.InterruptEnable.Yaxis">
            <summary>
            Enable Y axis.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.InterruptEnable.Zaxis">
            <summary>
            Enable Z axis.
            </summary>
        </member>
        <member name="T:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope">
            <summary>
            Mpu6886 accelerometer and gyroscope
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.DefaultI2cAddress">
            <summary>
            The default I2C address for the MPU6886 sensor. (Datasheet page 49)
            Mind that the address can be configured as well for 0x69 depending upon the value driven on AD0 pin.
            </summary>
        </member>
        <member name="F:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.SecondaryI2cAddress">
            <summary>
            The secondary I2C address for the MPU6886 sensor. (Datasheet page 49)
            </summary>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Mpu6886 - Accelerometer and Gyroscope bus
            </summary>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.GetAccelerometer">
            <summary>
            Reads the current accelerometer values from the registers, and compensates them with the accelerometer resolution.
            </summary>
            <returns>Vector of acceleration</returns>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.GetGyroscope">
            <summary>
            Reads the current gyroscope values from the registers, and compensates them with the gyroscope resolution.
            </summary>
            <returns>Vector of the rotation</returns>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.GetInternalTemperature">
            <summary>
            Reads the register of the on-chip temperature sensor which represents the MPU-6886 die temperature.
            </summary>
            <returns>Temperature in degrees Celcius</returns>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.Calibrate(System.Int32)">
            <summary>
            Calibrate the gyroscope by calculating the offset values and storing them in the GyroscopeOffsetAdjustment registers of the MPU6886.
            </summary>
            <param name="iterations">The number of sample gyroscope values to read</param>
            <returns>The calulated offset vector</returns>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.GyroscopeOffset">
            <summary>
            Gets and sets the gyroscope offset in the GyroscopeOffsetAdjustment registers of the MPU6886.
            Setting the offset can be usefull when a custom callibration calculation is used, instead of the Calibrate function of this class.
            </summary>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.Reset">
            <summary>
            Reset the internal registers and restores the default settings. (Datasheet, page 47)
            </summary>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.Sleep">
            <summary>
            Set the chip to sleep mode. (Datasheet, page 47)
            </summary>
        </member>
        <member name="M:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.WakeUp">
            <summary>
            Disables the sleep mode. (Datasheet, page 47)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.AccelerometerScale">
            <summary>
            Gets and sets the accelerometer full scale. (Datasheet page 37)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.GyroscopeScale">
            <summary>
            Gets and sets the gyroscope full scale. (Datasheet page 37)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.EnabledAxes">
            <summary>
            Sets the enabled axes of the gyroscope and accelerometer. (Datasheet page 47)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.AccelerometerLowPowerMode">
            <summary>
            Gets and sets the averaging filter settings for low power accelerometer mode. (Datasheet page 37)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.SampleRateDivider">
            <summary>
            Divides the internal sample rate (see register CONFIG) to generate the sample rate that
            controls sensor data output rate, FIFO sample rate. (Datasheet page 35)
            </summary>
        </member>
        <member name="P:Iot.Device.Mpu6886.Mpu6886AccelerometerGyroscope.AccelerometerInterruptEnabled">
            <summary>
            The axes on which the interrupt should be enabled.
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.AccelerometerBandwidth">
            <summary>
            Bandwidth used for normal measurement of the accelerometer
            using filter block. This can be further reduced using
            SampleRateDivider with all modes except 1130Hz.
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth1130Hz">
            <summary>
            Bandwidth 1130Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0460Hz">
            <summary>
            Bandwidth 460Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0184Hz">
            <summary>
            Bandwidth 184Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0092Hz">
            <summary>
            Bandwidth 92Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0041Hz">
            <summary>
            Bandwidth 41Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0020Hz">
            <summary>
            Bandwidth 20Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0010Hz">
            <summary>
            Bandwidth 10Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerBandwidth.Bandwidth0005Hz">
            <summary>
            Bandwidth 5Hz
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.AccelerometerLowPowerFrequency">
            <summary>
            Frequency used to measure data for the low power consumption mode
            The chip will wake up to take a sample of accelerometer
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency0Dot24Hz">
            <summary>
            Frequency 0.24Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency0Dot49Hz">
            <summary>
            Frequency 0.49Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency0Dot98Hz">
            <summary>
            Frequency 0.98Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency1Dot95Hz">
            <summary>
            Frequency 1.95Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency3Dot91Hz">
            <summary>
            Frequency 3.91Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency7dot81Hz">
            <summary>
            Frequency 7.81Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency15Dot63Hz">
            <summary>
            Frequency 15.63Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency31Dot25Hz">
            <summary>
            Frequency 31.25Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency62Dot5Hz">
            <summary>
            Frequency 62.5Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency125Hz">
            <summary>
            Frequency 125Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency250Hz">
            <summary>
            Frequency 250Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerLowPowerFrequency.Frequency500Hz">
            <summary>
            Frequency 500Hz
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.AccelerometerRange">
            <summary>
            Range of measurement used by the accelerometer in G
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerRange.Range02G">
            <summary>
            Range 2G
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerRange.Range04G">
            <summary>
            Range 4G
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerRange.Range08G">
            <summary>
            Range 8G
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.AccelerometerRange.Range16G">
            <summary>
            Range 16G
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Ak8963Attached.WriteRegister(System.Device.I2c.I2cDevice,System.Byte,System.Byte)">
            <summary>
            Read a byte
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">The register to read</param>
            <param name="data">A byte to write</param>
        </member>
        <member name="M:Iot.Device.Imu.Ak8963Attached.ReadByte(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            Read a byte array
            </summary>
            <param name="i2cDevice">An I2C device</param>
            <param name="reg">>The register to read</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Iot.Device.Imu.Ak8963Attached.ReadBytes(System.Device.I2c.I2cDevice,System.Byte,System.Span{System.Byte})">
            <summary>
            Write a byte
            </summary>
            <param name="i2cDevice">>An I2C device</param>
            <param name="reg">The register to read</param>
            <param name="readBytes">A span of bytes with the read values</param>
        </member>
        <member name="F:Iot.Device.Imu.ClockSource.Internal20MHz">
            <summary>
            Internal 20MHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.ClockSource.AutoSelect">
            <summary>
            Auto Select
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.ClockSource.StopClock">
            <summary>
            Stop Clock
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.DisableModes">
            <summary>
            Disable modes for the gyroscope and accelerometer axes
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableNone">
            <summary>
            Disable None
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableAccelerometerX">
            <summary>
            Disable Accelerometer X
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableAccelerometerY">
            <summary>
            Disable Accelerometer Y
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableAccelerometerZ">
            <summary>
            Disable Accelerometer Z
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableGyroscopeX">
            <summary>
            Disable Gyroscope X
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableGyroscopeY">
            <summary>
            Disable Gyroscope Y
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.DisableModes.DisableGyroscopeZ">
            <summary>
            Disable Gyroscope Z
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.FifoModes">
            <summary>
            You can select the sensors from which you want data
            FIFO modes used to select the accelerometer, gyroscope axises, temperature and I2C replicas
            You can combine any of those modes.
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.I2CReplica0">
            <summary>
            I2C Replica 0
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.I2CReplica1">
            <summary>
            I2C Replica 1
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.I2CReplica2">
            <summary>
            I2C Replica 2
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.Accelerometer">
            <summary>
            Accelerometer
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.GyroscopeZ">
            <summary>
            Gyroscope Z
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.GyroscopeY">
            <summary>
            Gyroscope Y
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.GyroscopeX">
            <summary>
            Gyroscope X
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.FifoModes.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.GyroscopeBandwidth">
            <summary>
            Gyroscope frequency used for measurement
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0250Hz">
            <summary>
            Bandwidth 250Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0184Hz">
            <summary>
            Bandwidth 184Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0092Hz">
            <summary>
            Bandwidth 92Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0041Hz">
            <summary>
            Bandwidth 41Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0020Hz">
            <summary>
            Bandwidth 20Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0010Hz">
            <summary>
            Bandwidth 10Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth0005Hz">
            <summary>
            Bandwidth 5Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth3600Hz">
            <summary>
            Bandwidth 3600Hz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth3600HzFS32">
            <summary>
            Bandwidth 3600Hz FS 32
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeBandwidth.Bandwidth8800HzFS32">
            <summary>
            Bandwidth 8800Hz FS 32
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.GyroscopeRange">
            <summary>
            Range used for the gyroscope precision measurement
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeRange.Range0250Dps">
            <summary>
            Range 250Dps
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeRange.Range0500Dps">
            <summary>
            Range 500Dps
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeRange.Range1000Dps">
            <summary>
            Range 1000Dps
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.GyroscopeRange.Range2000Dps">
            <summary>
            Range 2000Dps
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.I2cBusFrequency">
            <summary>
            Frequency of the replica I2C bus
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency348kHz">
            <summary>
            Frequency 348kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency333kHz">
            <summary>
            Frequency 333kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency320kHz">
            <summary>
            Frequency 320kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency308kHz">
            <summary>
            Frequency 308kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency296kHz">
            <summary>
            Frequency 296kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency286kHz">
            <summary>
            Frequency 286kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency276kHz">
            <summary>
            Frequency 276kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency267kHz">
            <summary>
            Frequency 267kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency258kHz">
            <summary>
            Frequency 258kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency500kHz">
            <summary>
            Frequency 500kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency471kHz">
            <summary>
            Frequency 471kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency444kHz">
            <summary>
            Frequency 444kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency421kHz">
            <summary>
            Frequency 421kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency400kHz">
            <summary>
            Frequency 400kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency381kHz">
            <summary>
            Frequency 381kHz
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cBusFrequency.Frequency364kHz">
            <summary>
            Frequency 364kHz
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.I2cChannel">
            <summary>
            I2C replica channel
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cChannel.Replica0">
            <summary>
            Replica 0
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cChannel.Replica1">
            <summary>
            Replica 1
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cChannel.Replica2">
            <summary>
            Replica 2
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cChannel.Replica3">
            <summary>
            Replica 3
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.I2cChannel.Replica4">
            <summary>
            Replica 4
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.Mpu6050">
            <summary>
            MPU6050 - gyroscope, accelerometer and temperature sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Mpu6050.DefaultI2cAddress">
            <summary>
            Default address for MPU9250
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Mpu6050.SecondI2cAddress">
            <summary>
            Second address for MPU9250
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize the MPU6050
            </summary>
            <param name="i2cDevice">The I2C device</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Used to create the class for the MPU9250. Initialization is a bit different than for the MPU6050
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.AccelerometerBias">
            <summary>
            Accelerometer bias data
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.AccelerometerRange">
            <summary>
            Get or set the accelerometer range
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.AccelerometerBandwidth">
            <summary>
            Get or set the accelerometer bandwidth
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.AccelerationScale">
            <summary>
            Get the real accelerometer bandwidth. This allows to calculate the real
            degree per second
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.GetAccelerometer">
            <summary>
            Get the accelerometer in G
            </summary>
            <remarks>
            Vector axes are the following:
               +Z   +Y
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
                    +X
            </remarks>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.GetRawAccelerometer">
            <summary>
            Gets the raw accelerometer data
            </summary>
            <returns></returns>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.AccelerometerLowPowerFrequency">
            <summary>
            Set or get the accelerometer low power mode
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.GyroscopeBias">
            <summary>
            Gyroscope bias data
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.GyroscopeRange">
            <summary>
            Get or set the gyroscope range
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.GyroscopeBandwidth">
            <summary>
            Get or set the gyroscope bandwidth
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.GyroscopeScale">
            <summary>
            Get the real gyroscope bandwidth. This allows to calculate the real
            angular rate in degree per second
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.GetGyroscopeReading">
            <summary>
            Get the gyroscope in degrees per seconds
            </summary>
            <remarks>
            Vector axes are the following:
               +Z   +Y
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
                    +X
            </remarks>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.GetRawGyroscope">
            <summary>
            Gets the raw gyroscope data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.GetTemperature">
            <summary>
            Get the temperature
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.SetWakeOnMotion(System.UInt32,Iot.Device.Imu.AccelerometerLowPowerFrequency)">
            <summary>
            Setup the Wake On Motion. This mode generate a rising signal on pin INT
            You can catch it with a normal GPIO and place an interruption on it if supported
            Reading the sensor won't give any value until it wakes up periodically
            Only Accelerator data is available in this mode
            </summary>
            <param name="accelerometerThreshold">Threshold of magnetometer x/y/z axes. LSB = 4mg. Range is 0mg to 1020mg</param>
            <param name="acceleratorLowPower">Frequency used to measure data for the low power consumption mode</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.CheckVersion">
            <summary>
            Return true if the version of MPU6050 is the correct one
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.SampleRateDivider">
            <summary>
            Get or set the sample diver mode
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.DisableModes">
            <summary>
            Get or set the elements to disable.
            It can be any axes of the accelerometer and or the gyroscope
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.FifoCount">
            <summary>
            Get the number of elements to read from the FIFO (First In First Out) buffer
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu6050.FifoModes">
            <summary>
            Get or set the FIFO (First In First Out) modes
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.ReadFifo(System.Span{System.Byte})">
            <summary>
            Read data in the FIFO (First In First Out) buffer, read as many data as the size of readData byte span
            You should read the number of data available in the FifoCount property then
            read them here.
            You will read only data you have selected in FifoModes.
            Data are in the order of the Register from 0x3B to 0x60.
            ACCEL_XOUT_H and ACCEL_XOUT_L
            ACCEL_YOUT_H and ACCEL_YOUT_L
            ACCEL_ZOUT_H and ACCEL_ZOUT_L
            TEMP_OUT_H and TEMP_OUT_L
            GYRO_XOUT_H and GYRO_XOUT_L
            GYRO_YOUT_H and GYRO_YOUT_L
            GYRO_ZOUT_H and GYRO_ZOUT_L
            EXT_SENS_DATA_00 to EXT_SENS_DATA_24
            </summary>
            <param name="readData">Data which will be read</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.CalibrateGyroscopeAccelerometer">
            <summary>
            Perform full calibration the gyroscope and the accelerometer
            It will automatically adjust as well the offset stored in the device
            The result bias will be stored in the AcceloremeterBias and GyroscopeBias
            </summary>
            <returns>Gyroscope and accelerometer bias</returns>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.WriteByteToReplicaDevice(Iot.Device.Imu.I2cChannel,System.Byte,System.Byte,System.Byte)">
            <summary>
            Write data on any of the I2C replica attached to the MPU9250
            </summary>
            <param name="i2cChannel">The replica channel to attached to the I2C device</param>
            <param name="address">The I2C address of the replica I2C element</param>
            <param name="register">The register to write to the replica I2C element</param>
            <param name="data">The byte data to write to the replica I2C element</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.ReadByteFromReplicaDevice(Iot.Device.Imu.I2cChannel,System.Byte,System.Byte,System.Span{System.Byte})">
            <summary>
            Read data from any of the I2C replica attached to the MPU9250
            </summary>
            <param name="i2cChannel">The replica channel to attached to the I2C device</param>
            <param name="address">The I2C address of the replica I2C element</param>
            <param name="register">The register to read from the replica I2C element</param>
            <param name="readBytes">The read data</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6050.Dispose">
            <summary>
            Cleanup everything
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.Mpu6500">
            <summary>
            MPU6500 - gyroscope, accelerometer and temperature sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6500.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initialize the MPU6500
            </summary>
            <param name="i2cDevice">The I2C device</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6500.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Used to create the class for the MPU9250. Initialization is a bit different than for the MPU6500
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6500.CheckVersion">
            <summary>
            Return true if the version of MPU6500 is the correct one
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Imu.Mpu6500.RunGyroscopeAccelerometerSelfTest">
            <summary>
            <![CDATA[
            Run a self test and returns the gyroscope and accelerometer vectores
            a. If factory Self-Test values ST_OTP≠0, compare the current Self-Test response (GXST, GYST, GZST, AXST, AYST and AZST)
            to the factory Self-Test values (ST_OTP) and report Self-Test is passing if all the following criteria are fulfilled:
            Axis    | Pass criteria
            X-gyro  | (GXST / GXST_OTP) > 0.5
            Y-gyro  | (GYST / GYST_OTP) > 0.5
            Z-gyro  | (GZST / GZST_OTP) > 0.5
            X-Accel |  0.5 < (AXST / AXST_OTP) < 1.5
            Y-Accel | 0.5 < (AYST / AYST_OTP) < 1.5
            Z-Accel | 0.5 < (AZST / AZST_OTP) < 1.5
            b. If factory Self-Test values ST_OTP=0, compare the current Self-Test response (GXST, GYST, GZST, AXST, AYST and AZST)
            to the ST absolute limits (ST_AL) and report Self-Test is passing if all the  following criteria are fulfilled.
            Axis   | Pass criteria
            X-gyro | |GXST| ≥ 60dps
            Y-gyro | |GYST| ≥ 60dps
            Z-gyro | |GZST| ≥ 60dps
            X-Accel| 225mgee ≤ |AXST| ≤ 675mgee
            Y-Accel| 225mgee ≤ |AXST| ≤ 675mgee
            Z-Accel| 225mgee ≤ |AXST| ≤ 675mgee
            c. If the Self-Test passes criteria (a) and (b), it’s necessary to check gyro offset values.
            Report passing Self-Test if the following criteria fulfilled.
            Axis   | Pass criteria
            X-gyro | |GXOFFSET| ≤ 20dps
            Y-gyro | |GYOFFSET| ≤ 20dps
            Z-gyro | |GZOFFSET| ≤ 20dps
            ]]>
            </summary>
            <returns>the gyroscope and accelerometer vectors</returns>
        </member>
        <member name="T:Iot.Device.Imu.Mpu9250">
            <summary>
            MPU9250 - gyroscope, accelerometer, temperature and magnetometer (thru an embedded AK8963).
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu9250.MagnometerBias">
            <summary>
            Get the magnetometer bias
            </summary>
            <remarks>
            Vector axes are the following:
               +Z   +Y
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
                    +X
            </remarks>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.CalibrateMagnetometer(System.Int32)">
            <summary>
            Calibrate the magnetometer. Make sure your sensor is as far as possible of magnet.
            Move your sensor in all direction to make sure it will get enough data in all points of space
            Calculate as well the magnetometer bias
            </summary>
            <param name="calibrationCounts">number of points to read during calibration, default is 1000</param>
            <returns>Returns the factory calibration data</returns>
        </member>
        <member name="P:Iot.Device.Imu.Mpu9250.HasDataToRead">
            <summary>
            True if there is a data to read
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.GetMagnetometerVersion">
            <summary>
            Check if the magnetometer version is the correct one (0x48)
            </summary>
            <returns>Returns the Magnetometer version number</returns>
            <remarks>When the wake on motion is on, you can't read the magnetometer, so this function returns 0</remarks>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.ReadMagnetometerWithoutCorrection(System.Boolean)">
            <summary>
            Read the magnetometer without bias correction and can wait for new data to be present
            </summary>
            <remarks>
            Vector axes are the following:
               +Z   +Y
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
                    +X
            </remarks>
            <param name="waitForData">true to wait for new data</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.ReadMagnetometer(System.Boolean)">
            <summary>
            Read the magnetometer with bias correction and can wait for new data to be present
            </summary>
            <remarks>
            Vector axes are the following:
               +Z   +Y
             \  |  /
              \ | /
               \|/
               /|\
              / | \
             /  |  \
                    +X
            </remarks>
            <param name="waitForData">true to wait for new data</param>
            <returns>The data from the magnetometer</returns>
        </member>
        <member name="P:Iot.Device.Imu.Mpu9250.MagnetometerMeasurementMode">
            <summary>
            Select the magnetometer measurement mode
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu9250.MagnetometerOutputBitMode">
            <summary>
            Select the magnetometer output bit rate
            </summary>
        </member>
        <member name="P:Iot.Device.Imu.Mpu9250.MagnetometerAdjustment">
            <summary>
            Get the magnetometer hardware adjustment bias
            </summary>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.#ctor(System.Device.I2c.I2cDevice,System.Boolean,System.Device.I2c.I2cDevice)">
            <summary>
            Initialize the MPU9250
            </summary>
            <param name="i2cDevice">The I2C device</param>
            <param name="shouldDispose">Will automatically dispose the I2C device if true</param>
            <param name="i2CDeviceAk8963">An I2C Device for the AK8963 when exposed and not behind the MPU9250</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.CheckVersion">
            <summary>
            Return true if the version of MPU9250 is the correct one
            </summary>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.SetWakeOnMotion(System.UInt32,Iot.Device.Imu.AccelerometerLowPowerFrequency)">
            <summary>
            Setup the Wake On Motion. This mode generate a rising signal on pin INT
            You can catch it with a normal GPIO and place an interruption on it if supported
            Reading the sensor won't give any value until it wakes up periodically
            Only Accelerator data is available in this mode
            </summary>
            <param name="accelerometerThreshold">Threshold of magnetometer x/y/z axes. LSB = 4mg. Range is 0mg to 1020mg</param>
            <param name="acceleratorLowPower">Frequency used to measure data for the low power consumption mode</param>
        </member>
        <member name="M:Iot.Device.Imu.Mpu9250.Dispose">
            <summary>
            Cleanup everything
            </summary>
        </member>
        <member name="T:Iot.Device.Imu.Register">
            <summary>
            All the documented registers for the MPU99250
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_X_GYRO">
            <summary>
            X Gyroscope Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_Y_GYRO">
            <summary>
            Y Gyroscope Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_Z_GYRO">
            <summary>
            Z Gyroscope Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_X_ACCEL">
            <summary>
            X Accelerometer Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_Y_ACCEL">
            <summary>
            Y Accelerometer Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SELF_TEST_Z_ACCEL">
            <summary>
            Z Accelerometer Self-Test Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.XG_OFFSET_H">
            <summary>
            X Gyroscope High byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.XG_OFFSET_L">
            <summary>
            X Gyroscope Low byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.YG_OFFSET_H">
            <summary>
            Y Gyroscope High byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.YG_OFFSET_L">
            <summary>
            Y Gyroscope Low byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ZG_OFFSET_H">
            <summary>
            Z Gyroscope High byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ZG_OFFSET_L">
            <summary>
            Z Gyroscope Low byte Offset Registers
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SMPLRT_DIV">
            <summary>
            Sample Rate Divider
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.CONFIG">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_CONFIG">
            <summary>
            Gyroscope Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_CONFIG">
            <summary>
            Accelerometer Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_CONFIG_2">
            <summary>
            Accelerometer Configuration 2
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.LP_ACCEL_ODR">
            <summary>
            Low Power Accelerometer ODR Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.WOM_THR">
            <summary>
            Wake-on Motion Threshold
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.FIFO_EN">
            <summary>
            FIFO Enable
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_MST_CTRL">
            <summary>
            I2C Master Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV0_ADDR">
            <summary>
            I2C Replica 0 Control Address
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV0_REG">
            <summary>
            I2C Replica 0 Control Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV0_CTRL">
            <summary>
            I2C Replica 0 Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV1_ADDR">
            <summary>
            I2C Replica 1 Control Address
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV1_REG">
            <summary>
            I2C Replica 1 Control Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV1_CTRL">
            <summary>
            I2C Replica 1 Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV2_ADDR">
            <summary>
            I2C Replica 2 Control Address
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV2_REG">
            <summary>
            I2C Replica 2 Control Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV2_CTRL">
            <summary>
            I2C Replica 2 Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV3_ADDR">
            <summary>
            I2C Replica 3 Control Address
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV3_REG">
            <summary>
            I2C Replica 3 Control Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV3_CTRL">
            <summary>
            I2C Replica 3 Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV4_ADDR">
            <summary>
            I2C Replica 4 Control Address
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV4_REG">
            <summary>
            I2C Replica 4 Control Register
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV4_DO">
            <summary>
            I2C Replica 4 Control Data to Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV4_CTRL">
            <summary>
            I2C Replica 4 Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV4_DI">
            <summary>
            I2C Replica 4 Control Data to Read
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_MST_STATUS">
            <summary>
            I2C Master Status
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.INT_PIN_CFG">
            <summary>
            INT Pin / Bypass Enable Configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.INT_ENABLE">
            <summary>
            Interrupt Enable
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.INT_STATUS">
            <summary>
            Interrupt Status
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_XOUT_H">
            <summary>
            High byte of accelerometer X-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_XOUT_L">
            <summary>
            Low byte of accelerometer X-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_YOUT_H">
            <summary>
            High byte of accelerometer Y-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_YOUT_L">
            <summary>
            Low byte of accelerometer Y-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_ZOUT_H">
            <summary>
            High byte of accelerometer Z-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ACCEL_ZOUT_L">
            <summary>
            Low byte of accelerometer Z-axis data
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.TEMP_OUT_H">
            <summary>
            High byte of the temperature sensor output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.TEMP_OUT_L">
            <summary>
            Low byte of the temperature sensor output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_XOUT_H">
            <summary>
            High byte of the X-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_XOUT_L">
            <summary>
            Low byte of the X-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_YOUT_H">
            <summary>
            High byte of the Y-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_YOUT_L">
            <summary>
            Low byte of the Y-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_ZOUT_H">
            <summary>
            High byte of the Z-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.GYRO_ZOUT_L">
            <summary>
            Low byte of the Z-Axis gyroscope output
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_00">
            <summary>
            External Sensor Data byte 0
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_01">
            <summary>
            External Sensor Data byte 1
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_02">
            <summary>
            External Sensor Data byte 2
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_03">
            <summary>
            External Sensor Data byte 3
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_04">
            <summary>
            External Sensor Data byte 4
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_05">
            <summary>
            External Sensor Data byte 5
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_06">
            <summary>
            External Sensor Data byte 6
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_07">
            <summary>
            External Sensor Data byte 7
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_08">
            <summary>
            External Sensor Data byte 8
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_09">
            <summary>
            External Sensor Data byte 9
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_10">
            <summary>
            External Sensor Data byte 10
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_11">
            <summary>
            External Sensor Data byte 11
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_12">
            <summary>
            External Sensor Data byte 12
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_13">
            <summary>
            External Sensor Data byte 13
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_14">
            <summary>
            External Sensor Data byte 14
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_15">
            <summary>
            External Sensor Data byte 15
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_16">
            <summary>
            External Sensor Data byte 16
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_17">
            <summary>
            External Sensor Data byte 17
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_18">
            <summary>
            External Sensor Data byte 18
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_19">
            <summary>
            External Sensor Data byte 19
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_20">
            <summary>
            External Sensor Data byte 20
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_21">
            <summary>
            External Sensor Data byte 21
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_22">
            <summary>
            External Sensor Data byte 22
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.EXT_SENS_DATA_23">
            <summary>
            External Sensor Data byte 23
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV0_DO">
            <summary>
            I2C Replica 0 Control Data to Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV1_DO">
            <summary>
            I2C Replica 1 Control Data to Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV2_DO">
            <summary>
            I2C Replica 2 Control Data to Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_SLV3_DO">
            <summary>
            I2C Replica 3 Control Data to Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.I2C_MST_DELAY_CTRL">
            <summary>
            I2C Master Delay Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.SIGNAL_PATH_RESET">
            <summary>
            Signal Path Reset
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.MOT_DETECT_CTRL">
            <summary>
            Accelerometer Interrupt Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.USER_CTRL">
            <summary>
            User Control
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.PWR_MGMT_1">
            <summary>
            Power Management 1
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.PWR_MGMT_2">
            <summary>
            Power Management 2
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.FIFO_COUNTH">
            <summary>
            FIFO Count Registers High byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.FIFO_COUNTL">
            <summary>
            FIFO Count Registers Low byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.FIFO_R_W">
            <summary>
            FIFO Read Write
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.WHO_AM_I">
            <summary>
            Who Am I
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.XA_OFFSET_H">
            <summary>
            X-axis Accelerometer Offset Register High byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.XA_OFFSET_L">
            <summary>
            X-axis Accelerometer Offset Register Low byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.YA_OFFSET_H">
            <summary>
            Y-axis Accelerometer Offset Register High byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.YA_OFFSET_L">
            <summary>
            Y-axis Accelerometer Offset Register Low byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ZA_OFFSET_H">
            <summary>
            Z-axis Accelerometer Offset Register High byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.Register.ZA_OFFSET_L">
            <summary>
            Z-axis Accelerometer Offset Register Low byte
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.SelfTestScale.Scale0250">
            <summary>
            Scale 250
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.SelfTestScale.Scale0500">
            <summary>
            Scale 500
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.SelfTestScale.Scale1000">
            <summary>
            Scale 1000
            </summary>
        </member>
        <member name="F:Iot.Device.Imu.SelfTestScale.Scale2000">
            <summary>
            Scale 2000
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.AisManager">
            <summary>
            Interpreter for AIS messages from NMEA-0183 data streams.
            Accepts the encoded AIVDM and AIVDO sentences and converts them to user-understandable ship structures.
            </summary>
            <remarks>
            WARNING: Never rely on an AIS alarm as sole supervision of your surroundings! Many ships do not have AIS or the system may malfunction.
            Keep a lookout by eye and ear at all times!
            </remarks>
        </member>
        <member name="T:Iot.Device.Nmea0183.AisManager.AisMessageHandler">
            <summary>
            Delegate for AIS messages
            </summary>
            <param name="received">True if the message was received from another ship, false if the message is generated internally (e.g. a proximity warning)</param>
            <param name="sourceMmsi">Source MMSI</param>
            <param name="destinationMmsi">Destination MMSI. May be 0 for a broadcast message</param>
            <param name="text">The text of the message.</param>
        </member>
        <member name="T:Iot.Device.Nmea0183.AisManager.AisWarning">
            <summary>
            A delegate for use in the <see cref="E:Iot.Device.Nmea0183.AisManager.OnAisWarning"/> callback
            </summary>
            <param name="id">Message id. To identify the message type (e.g. for suppression)</param>
            <param name="sourceMmsi">The source MMSI. May be 0 in case of a warning by the own infrastructure</param>
            <param name="now">The current time</param>
            <param name="message">The message text</param>
            <param name="source">The source, if any</param>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisManager._cache">
            <summary>
            We keep our own position cache, as we need to calculate CPA and TCPA values.
            The position provider can also be specified externally
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisManager._positionProvider">
            <summary>
            Position provider, to get position data about the own ship
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.AisManager.OnMessage">
            <summary>
            This event fires when a new message (individual or broadcast) is received. Warnings generated by the component will also be fired here (in addition
            to being delivered with <see cref="E:Iot.Device.Nmea0183.AisManager.OnAisWarning"/>.
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.AisManager.OnAisWarning">
            <summary>
            This event is fired when an AIS warning occurs. Requires <see cref="M:Iot.Device.Nmea0183.AisManager.EnableAisAlarms(System.Boolean,Iot.Device.Nmea0183.Ais.TrackEstimationParameters)"/> to be set.
            Arguments are: MMSI of other vessel, current time, textual warning message and the reference to the other target (which includes further details)
            Messages are suppressed for the longer of <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarningRepeatTimeout"/> or the specific vessels <see cref="P:Iot.Device.Nmea0183.Ais.AisTarget.SuppressionTime"/>
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.AisManager.RelativePositionsUpdated">
            <summary>
            This event fires after the ship relative positions have been updated (AIS alarms must be enabled)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.#ctor(System.String,System.UInt32,System.String)">
            <summary>
            Creates an instance of an <see cref="T:Iot.Device.Nmea0183.AisManager"/>
            </summary>
            <param name="interfaceName">Name of the manager, used for message routing</param>
            <param name="ownMmsi">The MMSI of the own ship</param>
            <param name="ownShipName">The name of the own ship</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.#ctor(System.String,System.Boolean,System.UInt32,System.String)">
            <summary>
            Creates an instance of an <see cref="T:Iot.Device.Nmea0183.AisManager"/> using an internal positon provider.
            </summary>
            <param name="interfaceName">Name of the manager, used for message routing</param>
            <param name="throwOnUnknownMessage">True if an exception should be thrown when parsing an unknown message type. This parameter
            is mainly intended for test scenarios where a data stream should be scanned for rare messages</param>
            <param name="ownMmsi">The MMSI of the own ship</param>
            <param name="ownShipName">The name of the own ship</param>
            <remarks>
            For the position update to work, the AisManager must be externally fed with parsed NMEA sentences.
            Raw position sequences are not sufficient.
            </remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.#ctor(System.String,System.Boolean,System.UInt32,System.String,Iot.Device.Nmea0183.PositionProvider)">
            <summary>
            Creates an instance of an <see cref="T:Iot.Device.Nmea0183.AisManager"/>
            </summary>
            <param name="interfaceName">Name of the manager, used for message routing</param>
            <param name="throwOnUnknownMessage">True if an exception should be thrown when parsing an unknown message type. This parameter
            is mainly intended for test scenarios where a data stream should be scanned for rare messages</param>
            <param name="ownMmsi">The MMSI of the own ship</param>
            <param name="ownShipName">The name of the own ship</param>
            <param name="externalPositionProvider">External position provider (e.g. the one from a <see cref="T:Iot.Device.Nmea0183.MessageRouter"/>)</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.OwnMmsi">
            <summary>
            The own MMSI
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.OwnShipName">
            <summary>
            The name of the own ship
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.DimensionToBow">
            <summary>
            Distance from GPS receiver to bow of own ship, see <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToBow"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.DimensionToStern">
            <summary>
            Distance from GPS receiver to stern of own ship, see <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToStern"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.DimensionToPort">
            <summary>
            Distance from GPS receiver to Port of own ship, see <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToPort"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.DimensionToStarboard">
            <summary>
            Distance from GPS receiver to Starboard of own ship, see <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToStarboard"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.AutoSendWarnings">
            <summary>
            True to have the component automatically generate warning broadcast messages (when in collision range, or when seeing something unexpected,
            such as an AIS-Sart target)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.PreferredPositionSource">
            <summary>
            Set to the name of a GNSS source to prefer this for getting the current position.
            Will fall back to all if not successful (and alternatives are available)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.TrackEstimationParameters">
            <summary>
            Set of parameters that control track estimation.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisManager.GeneratedSentencesId">
            <summary>
            Which <see cref="T:Iot.Device.Nmea0183.SentenceId"/> generated AIS messages should get. Meaningful values are <see cref="F:Iot.Device.Nmea0183.Ais.AisParser.VdmId"/> or <see cref="F:Iot.Device.Nmea0183.Ais.AisParser.VdoId"/>.
            Default is "VDO"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.GetOwnShipData(Iot.Device.Nmea0183.Ais.Ship@)">
            <summary>
            Gets the data of the own ship (including position and movement vectors) as a ship structure.
            </summary>
            <param name="ownShip">Receives the data about the own ship</param>
            <returns>True in case of success, false if relevant data is outdated or missing. Returns false if the
            last received position message is older than <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.MaximumPositionAge"/>.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.GetOwnShipData(Iot.Device.Nmea0183.Ais.Ship@,System.DateTimeOffset)">
            <summary>
            Gets the data of the own ship (including position and movement vectors) as a ship structure.
            </summary>
            <param name="ownShip">Receives the data about the own ship</param>
            <param name="currentTime">The current time</param>
            <returns>True in case of success, false if relevant data is outdated or missing. Returns false if the
            last received position message is older than <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.MaximumPositionAge"/>.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.TryGetTarget(System.UInt32,Iot.Device.Nmea0183.Ais.AisTarget@)">
            <summary>
            Tries to retrieve the target with the given MMSI from the database
            </summary>
            <param name="mmsi">MMSI to query</param>
            <param name="target">Returns the given target, if found. The target should be cast to a more concrete type</param>
            <returns>True if the target was found, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.GetTargets">
            <summary>
            Gets the list of active targets
            </summary>
            <returns>An enumeration of all currently tracked targets</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.GetSpecificTargets``1">
            <summary>
            Gets the list of all active targets of the given type
            </summary>
            <typeparam name="T">A type of target, must be a derivative of <see cref="T:Iot.Device.Nmea0183.Ais.AisTarget"/>.</typeparam>
            <returns>An enumeration of all targets of that type</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Processes incomming sequences. Use this method to input an NMEA stream to this component.
            Note that _all_ messages should be forwarded to this method, as AIS target tracking requires the position and speed of our own vessel.
            </summary>
            <param name="source">Message source</param>
            <param name="sentence">The new sentence</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendWarningMessage(System.String,System.UInt32,System.String)">
            <summary>
            Sends a message with the given <paramref name="messageText"/> as an AIS broadcast message
            </summary>
            <param name="messageId">Obsolete message identifier - ignored</param>
            <param name="sourceMmsi">Source MMSI, can be 0 if irrelevant/unknown</param>
            <param name="messageText">The text of the message. Supports only the AIS 6-bit character set.</param>
            <returns>True if the message was sent, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendWarningMessage(Iot.Device.Nmea0183.AisMessageId,System.UInt32,System.String,Iot.Device.Nmea0183.Ais.AisTarget)">
            <summary>
            Sends a message with the given <paramref name="messageText"/> as an AIS broadcast message
            </summary>
            <param name="messageId">Identifies the message. Messages with the same ID are only sent once, until the timeout elapses</param>
            <param name="sourceMmsi">Source MMSI, can be 0 if irrelevant/unknown</param>
            <param name="messageText">The text of the message. Supports only the AIS 6-bit character set.</param>
            <param name="target">The AIS target this warning is about</param>
            <returns>True if the message was sent, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendWarningMessage(Iot.Device.Nmea0183.AisMessageId,System.UInt32,System.String,System.DateTimeOffset,Iot.Device.Nmea0183.Ais.AisTarget)">
            <summary>
            Sends a message with the given <paramref name="messageText"/> as an AIS broadcast message
            </summary>
            <param name="messageId">Identifies the message. Messages with the same ID are only sent once, until the timeout elapses</param>
            <param name="sourceMmsi">Source MMSI, can be 0 if irrelevant/unknown</param>
            <param name="messageText">The text of the message. Supports only the AIS 6-bit character set.</param>
            <param name="now">The current time (to verify the timeout against)</param>
            <param name="target">The AIS target this warning is about. May be null for generic messages</param>
            <returns>True if the message was sent, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendBroadcastMessage(System.UInt32,System.String)">
            <summary>
            Send an AIS broadcast message to the NMEA stream (output!)
            Some NMEA devices (in particular general-purpose displays) may pick up this information
            from the data stream and show the warning to the user.
            </summary>
            <param name="sourceMmsi">The message source, can be 0</param>
            <param name="text">The text. Will be converted to 6-Bit-Ascii (e.g. only capital letters)</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.StopDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.SendShipPositionReport(Iot.Device.Nmea0183.Ais.AisTransceiverClass,Iot.Device.Nmea0183.Ais.Ship)">
            <summary>
            Sends a ship position report for the given ship to the NMEA stream. Useful for testing or simulation.
            </summary>
            <param name="transceiverClass">Transceiver class to simulate</param>
            <param name="ship">The ship whose position data to send</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">An internal inconsistency occurred</exception>
            <exception cref="T:System.NotSupportedException">This message type is not currently supported for encoding</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.DoCleanup(System.DateTimeOffset)">
            <summary>
            Regularly scan our database to check for outdated targets. This is done from
            the parser thread, so we don't need to create a separate thread just for this.
            </summary>
            <param name="currentTime">The time of the last packet</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.GetTarget(System.UInt32)">
            <summary>
            Gets the target with the given MMSI
            </summary>
            <param name="mmsi">The MMSI to search</param>
            <returns>The given target or null if it was not found.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.EnableAisAlarms(System.Boolean,Iot.Device.Nmea0183.Ais.TrackEstimationParameters)">
            <summary>
            Enable automatic generation of AIS alarms.
            This method will start a background thread that regularly evaluates all ships in vicinity for possibly dangerous proximity.
            It uses an estimate of a track for each ship to find the closest point of approach (CPA) and the time to that closest point (TCPA).
            When this is enabled, <see cref="P:Iot.Device.Nmea0183.Ais.AisTarget.RelativePosition"/> will be regularly updated for all targets.
            </summary>
            <param name="enable">True to enable AIS alarms. The alarms will be presented by a message on the outgoing stream and a call to <see cref="E:Iot.Device.Nmea0183.AisManager.OnMessage"/></param>
            <param name="parameters">Parameter set to use for the estimation</param>
            <remarks>Note 1: Since this uses a precise track estimation that includes COG change, the calculation is rather expensive. CPU
            performance should be monitored when in a crowded area. Algorithm improvements that cut CPU usage e.g. for stationary ships are pending.
            Note 2: The algorithm is experimental and should not be relied on.
            Also read the notes at <see cref="T:Iot.Device.Nmea0183.AisManager"/>
            </remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.ClearWarnings">
            <summary>
            Clears the list of suppressed warnings
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.AisAlarmThread">
            <summary>
            This thread calculates CPA and TCPA between vessels and generates corresponding warnings.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisManager.AisAlarmThreadOperation(System.DateTimeOffset)">
            <summary>
            Calculate TCPA and CPA for all vessels in range.
            </summary>
            <param name="time">The current time (provide externally in case we're replaying a recorded log)</param>
        </member>
        <member name="T:Iot.Device.Nmea0183.AisMessageId">
            <summary>
            An identifier for a specific AIS message type
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AisMessageId.#ctor(Iot.Device.Nmea0183.AisWarningType,System.UInt32)">
            <summary>
            An identifier for a specific AIS message type
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.AisWarningType">
            <summary>
            Type of AIS warnings
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.None">
            <summary>
            No wawrning. This is not used.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.NoGnss">
            <summary>
            The Ais Manager is missing GNSS information. Check the input stream and the GNSS antenna
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.ExceptionalTargetSeen">
            <summary>
            An exceptional target was seen (e.g. an AIS man-overboard beacon)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.DangerousVessel">
            <summary>
            Another vessel is dangerously close
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.VesselLost">
            <summary>
            A vessel that is close was lost
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AisWarningType.UserMessage">
            <summary>
            A message from the application layer
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.AutopilotController">
            <summary>
            This class controls an auto pilot, given an input and an output stream.
            Depending on the input, it either refines the sequences to a higher resolution (many navigation programs will e.g. only
            output XTE messages with a cross track error accuracy of 0.1nm, which is useless for precise navigation) or create the
            sequences based on input waypoints.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotController._currentOrigin">
            <summary>
            Last "origin" position. Used if the current route does not specify one.
            Assumed to be the position the user last hit "Goto" on the GPS, without explicitly defining a route.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.#ctor(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.SentenceCache)">
            <summary>
            This class can control an autopilot, given an external input (of mainly WPT and RTE sentences)
            </summary>
            <param name="input">Input stream (GPS device and plotter)</param>
            <param name="output">Output stream (emits rmb, xte, vtg, bwc, bod)</param>
            <param name="cache">Sentence cache, optional</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.Running">
            <summary>
            Returns true if the processing thread is running
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.NmeaSourceName">
            <summary>
            Name of the Source from which to take positions. Null to take any source (but this may cause side effects
            if multiple GPS devices are active, because they deliver slightly different data)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.OperationState">
            <summary>
            Current operating state of the autopilot controller
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.SentenceCache">
            <summary>
            Use for testing purposes only
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.NextWaypoint">
            <summary>
            Returns the next waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AutopilotController.WaypointSwitchDistance">
            <summary>
            When routing ourselves (no RMB message as input), we switch to the next waypoint
            when closer than this distance or over the bisecting angle to the next leg
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.ActivateRoute(Iot.Device.Nmea0183.Route)">
            <summary>
            Activates the given route.
            Note that it is cloned. The <see cref="P:Iot.Device.Nmea0183.Route.NextPoint"/> property is not updated automatically as the route progresses.
            Investigate <see cref="P:Iot.Device.Nmea0183.AutopilotController.NextWaypoint"/> regularly instead.
            </summary>
            <param name="route">The new route</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.DisableActiveRoute">
            <summary>
            Disables a manually activated route.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.Start">
            <summary>
            Starts the processing thread
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.Stop">
            <summary>
            Stops the processing thread.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.CalculateNewStatus(System.Int32,System.DateTimeOffset)">
            <summary>
            Navigation loop.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.AutopilotController.Dispose">
            <summary>
            Stops and disposes the component
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.AutopilotErrorState">
            <summary>
            State of autopilot.
            Not all errors are serious problems, some just mean it is inactive, because it has nothing to do.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.Unknown">
            <summary>
            State is unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.NoRoute">
            <summary>
            The autopilot has no route to follow.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.WaypointsWithoutPosition">
            <summary>
            The current route has no or incomplete waypoints. Normally this resolves itself after a few seconds, when the nav software
            continues transmitting data.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.OperatingAsSlave">
            <summary>
            Operating as slave, RMB input sentence is present, route is known
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.RouteWithDuplicateWaypoints">
            <summary>
            The input route contains duplicate waypoints. This causes confusion and is therefore considered an error.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.RoutePresent">
            <summary>
            A route is present
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.DirectGoto">
            <summary>
            We're just having a target waypoint, but no route
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.InvalidNextWaypoint">
            <summary>
            The next waypoint is invalid.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.AutopilotErrorState.OperatingAsMaster">
            <summary>
            Full self-controlled operation
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.CompassCalibration">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.CompassCalibration.Identification">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.CompassCalibration.CalibrationDataFromCompassReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.CompassCalibration.CalibrationDataToCompassReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.CompassCalibration.RawDataReadings">
            <remarks/>
        </member>
        <member name="T:Iot.Device.Nmea0183.Identification">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.Identification.ShipName">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.Identification.Callsign">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.Identification.MMSI">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.Identification.CalibrationDate">
            <remarks/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Identification.Equals(Iot.Device.Nmea0183.Identification)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Identification.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Identification.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Identification.op_Equality(Iot.Device.Nmea0183.Identification,Iot.Device.Nmea0183.Identification)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Identification.op_Inequality(Iot.Device.Nmea0183.Identification,Iot.Device.Nmea0183.Identification)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.GnssReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.GnssReading.TimeStamp">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.GnssReading.TrackReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.GnssReading.DeltaToPrevious">
            <remarks/>
        </member>
        <member name="T:Iot.Device.Nmea0183.MagneticReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.MagneticReading.TimeStamp">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.MagneticReading.MagneticCompassReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.MagneticReading.DeltaToPrevious">
            <remarks/>
        </member>
        <member name="T:Iot.Device.Nmea0183.RawData">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.RawData.Compass">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.RawData.Track">
            <remarks/>
        </member>
        <member name="T:Iot.Device.Nmea0183.DeviationPoint">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.DeviationPoint.CompassReading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.DeviationPoint.CompassReadingSmooth">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.DeviationPoint.MagneticHeading">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.DeviationPoint.Deviation">
            <remarks/>
        </member>
        <member name="P:Iot.Device.Nmea0183.DeviationPoint.DeviationSmooth">
            <remarks/>
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.ToString">
            <summary>
            Generates a string representation of this object
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.Equals(Iot.Device.Nmea0183.DeviationPoint)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.op_Equality(Iot.Device.Nmea0183.DeviationPoint,Iot.Device.Nmea0183.DeviationPoint)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.DeviationPoint.op_Inequality(Iot.Device.Nmea0183.DeviationPoint,Iot.Device.Nmea0183.DeviationPoint)">
            <summary>
            Inequality operator
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.FilterRule">
            <summary>
            A filter rule for the <see cref="T:Iot.Device.Nmea0183.MessageRouter"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.FilterRule.#ctor(System.String,Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)">
            <summary>
            A standard filter rule. When the filter matches
            </summary>
            <param name="sourceName">Name of the source (Nmea stream name) for which the filter applies or * for all</param>
            <param name="talkerId">TalkerId for which the rule applies or <see cref="P:Iot.Device.Nmea0183.TalkerId.Any"/></param>
            <param name="sentenceId">SentenceId for which the rule applies or <see cref="P:Iot.Device.Nmea0183.SentenceId.Any"/></param>
            <param name="sinks">Where to send the message when the filter matches</param>
            <param name="rawMessagesOnly">The filter matches raw messages only. This is the default, because otherwise known message
            types would be implicitly duplicated on forwarding</param>
            <param name="continueAfterMatch">True to continue processing after a match, false to stop processing this message</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.FilterRule.#ctor(System.String,Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.Collections.Generic.IEnumerable{System.String},System.Func{Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence,Iot.Device.Nmea0183.Sentences.NmeaSentence},System.Boolean,System.Boolean)">
            <summary>
            A standard filter rule. When the filter matches
            </summary>
            <param name="sourceName">Name of the source (Nmea stream name) for which the filter applies or * for all</param>
            <param name="talkerId">TalkerId for which the rule applies or <see cref="P:Iot.Device.Nmea0183.TalkerId.Any"/></param>
            <param name="sentenceId">SentenceId for which the rule applies or <see cref="P:Iot.Device.Nmea0183.SentenceId.Any"/></param>
            <param name="sinks">Where to send the message when the filter matches</param>
            <param name="forwardingAction">When the message is about to be sent, this method is called that can modify the
            message. First arg is the source of the message, second the designated sink.</param>
            <param name="rawMessagesOnly">The filter matches raw messages only. This is the default, because otherwise known message
            types would be implicitly duplicated on forwarding</param>
            <param name="continueAfterMatch">True to continue processing after a match, false to stop processing this message</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.SourceName">
            <summary>
            Name of the source for which this filter shall apply
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.TalkerId">
            <summary>
            TalkerId for which this filter applies
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.SentenceId">
            <summary>
            SentenceId for which this filter applies
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.Sinks">
            <summary>
            Action this filter performs
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.ForwardingAction">
            <summary>
            If non-null, this action can modify the message before it is being sent to the
            indicated sink.
            Note that the input message shall not be modified, clone it if necessary.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.FilterRule.ContinueAfterMatch">
            <summary>
            If this is true, filter testing is continued even after a match.
            If it is false (the default), no further filters are tested after the first match (which typically means
            that a message is only matching one filter)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.FilterRule.SentenceMatch(System.String,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            True if this filter matches the given sentence and source
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.LoggingConfiguration">
            <summary>
            Configuration settings for NMEA logging
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.LoggingConfiguration.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Iot.Device.Nmea0183.LoggingConfiguration"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.LoggingConfiguration.Path">
            <summary>
            Root path of the log file(s)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.LoggingConfiguration.MaxFileSize">
            <summary>
            Creates a new file when this size is reached
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.LoggingConfiguration.SortByDate">
            <summary>
            True to create a sub-folder for each new day
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.LoggingSink">
            <summary>
            This is a sink for writing received NMEA sentences to a log file. The log file
            can be used for later analysis or replay.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.LoggingSink.#ctor(System.String,Iot.Device.Nmea0183.LoggingConfiguration)">
            <summary>
            Creates an instance of this class
            </summary>
            <param name="name">Name of the sink</param>
            <param name="configuration">Logging configuration</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.LoggingSink.Configuration">
            <summary>
            Gets the active logging configuration
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.LoggingSink.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.LoggingSink.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.LoggingSink.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.MagneticDeviationCorrection">
            <summary>
            Corrects the magnetic deviation of an electronic compass.
            This calculates the corrected magnetic heading from the measurement of an actual instrument and vice-versa.
            Neither input nor output of the calculation are true headings! The magnetic heading needs to still be converted to
            a true heading by adding the magnetic declination at the point of observation.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.#ctor">
            <summary>
            Create an instance of this class
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.#ctor(System.String)">
            <summary>
            Creates a magnetic deviation correction from the given XML file
            </summary>
            <param name="fileName">The file name to parse</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.#ctor(System.IO.Stream)">
            <summary>
            Creates a magnetic deviation correction from the given XML stream
            </summary>
            <param name="stream">The stream to parse</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.MagneticDeviationCorrection.Identification">
            <summary>
            Returns the identification of the vessel for which the loaded calibration is valid
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.MagneticDeviationCorrection.SentencesUsed">
            <summary>
            BLahafasel
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.CreateCorrectionTable(System.String)">
            <summary>
            Tries to calculate a correction from the given recorded file.
            The recorded file should contain a data set where the vessel is turning two slow circles, one with the clock and one against the clock,
            in calm conditions and with no current.
            </summary>
            <param name="file">The recorded nmea file (from a logged session)</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.CreateCorrectionTable(System.IO.Stream)">
            <summary>
            Tries to calculate a correction from the given recorded file.
            The recorded file should contain a data set where the vessel is turning two slow circles, one with the clock and one against the clock,
            in calm conditions and with no current.
            </summary>
            <param name="stream">The recorded nmea stream (from a logged session)</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.CreateCorrectionTable(System.String[],System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Tries to calculate a correction from the given recorded files, indicating the timespan where the calibration loops were performed.
            The recorded file should contain a data set where the vessel is turning two slow circles, one with the clock and one against the clock,
            in calm conditions and with no current.
            </summary>
            <param name="fileSet">The recorded nmea files (from a logged session)</param>
            <param name="beginCalibration">The start time of the calibration loops</param>
            <param name="endCalibration">The end time of the calibration loops</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.CreateCorrectionTable(System.IO.Stream[],System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Tries to calculate a correction from the given recorded file strems, indicating the timespan where the calibration loops were performed.
            The recorded file should contain a data set where the vessel is turning two slow circles, one with the clock and one against the clock,
            in calm conditions and with no current.
            </summary>
            <param name="fileSet">The recorded nmea files (from a logged session)</param>
            <param name="beginCalibration">The start time of the calibration loops</param>
            <param name="endCalibration">The end time of the calibration loops</param>
            <returns>A list of observed warnings</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.Save(System.String,System.String,System.String,System.String)">
            <summary>
            Saves the calculated calibration set to a file
            </summary>
            <param name="file">The file name (should be ending in XML)</param>
            <param name="shipName">The name of the vessel</param>
            <param name="callSign">The callsign of the vessel</param>
            <param name="mmsi">The MMSI of the vessel</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.Load(System.String)">
            <summary>
            Loads a previously saved calibration set
            </summary>
            <param name="file">The file from which to load</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.Load(System.IO.Stream)">
            <summary>
            Loads a previously saved calibration set
            </summary>
            <param name="file">The stream from which to load</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.FromMagneticHeading(UnitsNet.Angle)">
            <summary>
            Convert a magnetic heading to a compass reading (to tell the helmsman what he should steer on the compass for the desired magnetic course)
            </summary>
            <param name="magneticHeading">Magnetic heading input</param>
            <returns>The compass reading for the given magnetic heading</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.ToMagneticHeading(UnitsNet.Angle)">
            <summary>
            Convert a compass reading to a magnetic heading.
            </summary>
            <param name="compassReading">Reading of the compass</param>
            <returns>The corrected magnetic heading</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.Equals(Iot.Device.Nmea0183.MagneticDeviationCorrection)">
            <summary>
            Compares two deviation data sets for equality. Minor differences are ignored.
            </summary>
            <param name="other">The other object</param>
            <returns>True on equality, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.MagneticDeviationCorrection.Equals(Iot.Device.Nmea0183.MagneticDeviationCorrection,System.String@)">
            <summary>
            Compares two deviation data sets for equality. Minor differences are ignored.
            </summary>
            <param name="other">The other object</param>
            <param name="firstDifference">A short error message where the error is</param>
            <returns>True on equality, false otherwise</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.MessageRouter">
            <summary>
            Message routing for NMEA messages. See the Readme for an usage example.
            This is used to route messages between different NMEA sources and sinks. Instances of <see cref="T:Iot.Device.Nmea0183.FilterRule"/> can be used
            to describe which messages need to go from where to where.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.MessageRouter.LocalMessageSource">
            <summary>
            The name of the local message source. This field is constant.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.MessageRouter.LoggingSinkName">
            <summary>
            The name of the default logger. This field is constant.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.MessageRouter.AisManager">
            <summary>
            The AIS manager as NMEA target
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.#ctor(Iot.Device.Nmea0183.LoggingConfiguration)">
            <summary>
            Creates a message router, optionally configuring the logging options
            </summary>
            <param name="loggingConfiguration">(Optional) Logging configuration. This can be used to log all incoming messages to a file.</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.MessageRouter.EndPoints">
            <summary>
            The list of routing endpoints
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.AddEndPoint(Iot.Device.Nmea0183.NmeaSinkAndSource)">
            <summary>
            Adds a routing end point
            </summary>
            <param name="parser">The new end point</param>
            <returns>True on success, false if an interface with the same name has already been registered.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.AddFilterRule(Iot.Device.Nmea0183.FilterRule)">
            <summary>
            Adds a filter rule to the end of the rule set
            </summary>
            <param name="rule">The rule to add</param>
            <exception cref="T:System.ArgumentException">The filter rule cannot be added because it is invalid (i.e. an attempt to
            add a rule for an inexistent interface was made)</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.MessageRouter.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaError">
            <summary>
            Errors from the NMEA parser
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.None">
            <summary>
            Parsing was successful
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.MessageToShort">
            <summary>
            A message was shorter than the minimal message size
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.InvalidChecksum">
            <summary>
            The message checksum did not match.
            A missing checksum will not be reported as error
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.MessageToLong">
            <summary>
            The message is to long
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.NoSyncByte">
            <summary>
            There was no sync byte found
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.PortClosed">
            <summary>
            The communication stream is closed, no more data can be written
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.MessageDelayed">
            <summary>
            The message processing was delayed. A possible reason for this is if attempting
            to send to much data over a slow serial link.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.NmeaError.MessageDropped">
            <summary>
            A message was dropped, because a newer message was already in the queue. This indicates an output buffer overrun.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaLogDataReader">
            <summary>
            This source can be used to play back a recorded log file.
            If <see cref="P:Iot.Device.Nmea0183.NmeaLogDataReader.DecodeInRealtime"/> is false (the default), the file will be read as fast as possible. Otherwise messages
            will be generated at the speed of the original data.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Reads a log file and uses it as a source
            </summary>
            <param name="interfaceName">Name of this interface</param>
            <param name="filesToRead">Files to read. Either a | delimited log or a plain text file</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.#ctor(System.String,System.String)">
            <summary>
            Reads a log file and uses it as a source
            </summary>
            <param name="interfaceName">Name of this interface</param>
            <param name="fileToRead">File to read. Either a | delimited log or a plain text file</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.#ctor(System.String,System.IO.Stream)">
            <summary>
            Reads a log file and uses it as a source
            </summary>
            <param name="interfaceName">Name of this interface</param>
            <param name="streamToRead">A file stream to read. Either a | delimited log or a plain text file</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.#ctor(System.String,System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Reads a log file and uses it as a source
            </summary>
            <param name="interfaceName">Name of this interface</param>
            <param name="streamsToRead">A file stream to read. Either a | delimited log or a plain text file</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaLogDataReader.DecodeInRealtime">
            <summary>
            Set to true to replay a message stream in real time. The reader will generate
            messages with the same time difference as they originally had. The timestamp of the
            messages will be updated to the present.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.StopDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaLogDataReader.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.PositionUpdate">
            <summary>
            A delegate for updating the current position
            </summary>
            <param name="position">The new position</param>
            <param name="track">The current true track</param>
            <param name="speed">The current speed over ground</param>
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaParser">
            <summary>
            Parses Nmea Sequences
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaParser.#ctor(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Creates a new instance of the NmeaParser, taking an input and an output stream
            </summary>
            <param name="interfaceName">Friendly name of this interface (used for filtering and eventually logging)</param>
            <param name="dataSource">Data source (may be connected to a serial port, a network interface, or whatever). It is recommended to use a blocking Stream,
            to prevent unnecessary polling</param>
            <param name="dataSink">Optional data sink, to send information. Can be null, and can be identical to the source stream</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaParser.ExclusiveTalkerId">
            <summary>
            Set this to anything other than <see cref="P:Iot.Device.Nmea0183.TalkerId.Any"/> to receive only that specific ID from this parser
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaParser.LastPacketTime">
            <summary>
            Time the last packet was received.
            This is writable to configure the initial value (defaults to current system time)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaParser.SuppressOutdatedMessages">
            <summary>
            True (the default) to suppress forwarding messages when a newer message with the same <see cref="T:Iot.Device.Nmea0183.SentenceId"/> and <see cref="T:Iot.Device.Nmea0183.TalkerId"/>
            is already in the outgoing queue. Only affects messages that have <see cref="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReplacesOlderInstance"/> set to true.
            Set to false to forward all messages.
            </summary>
            <remarks>
            Setting this to false may overflow send queues when more messages should be sent per time than the outgoing interface permits. This will result
            in massive message delivery delays and eventually a low memory situation.
            </remarks>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaParser.SupportLogReading">
            <summary>
            If true, the parser also accepts sentences in a log format (prefixed with a date and separated by |)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaParser.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaParser.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaParser.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaSinkAndSource">
            <summary>
            This abstract class describes an NMEA data source or data sink.
            It can be a connection, a data processor or an output device.
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.NmeaSinkAndSource.OnNewPosition">
            <summary>
            This is fired when a new position is available
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.NmeaSinkAndSource.OnNewTime">
            <summary>
            This is fired when the time is updated
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.NmeaSinkAndSource.OnNewSequence">
            <summary>
            This is fired on every new sentence
            </summary>
        </member>
        <member name="E:Iot.Device.Nmea0183.NmeaSinkAndSource.OnParserError">
            <summary>
            This is fired when a message couldn't be parsed
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.#ctor(System.String)">
            <summary>
            Constructs a message sink
            </summary>
            <param name="interfaceName">Name of the interface (mostly used for logging purposes)</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaSinkAndSource.InterfaceName">
            <summary>
            Name of the interface
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.StartDecode">
            <summary>
            Start receiving messages from this interface.
            An implementation should open streams, connect to sockets or create receiver threads, as appropriate.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Send the message to the device.
            From the implementation side, this is where the input data comes in (e.g. from the message dispatcher)
            </summary>
            <param name="source">Source of message</param>
            <param name="sentence">Sentence to send</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.SendSentence(Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Send the given sentence to the interface.
            </summary>
            <param name="sentence">Sentence to send</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.StopDecode">
            <summary>
            Stops sending or receiving messages from and to this interface.
            Any pending messages are discarded.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.FireOnParserError(System.String,Iot.Device.Nmea0183.NmeaError)">
            <summary>
            Fire an event informing about parser errors
            </summary>
            <param name="message">The message to write</param>
            <param name="error">The kind of error seen</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.Dispose(System.Boolean)">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.Dispose">
            <summary>
            Standard dispose method
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.DispatchSentenceEvents(Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Forwards the given sentence to listeners, as needed. Use the current instance as source.
            </summary>
            <param name="typedSequence">The sentences to process</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.DispatchSentenceEvents(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Forwards the given sentence to listeners, as needed.
            </summary>
            <param name="source">The source from which this event comes (if forwarded)</param>
            <param name="typedSequence">The sentences to process</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaSinkAndSource.SendSentences(System.Collections.Generic.IEnumerable{Iot.Device.Nmea0183.Sentences.NmeaSentence})">
            <summary>
            Sends a list of messages at once
            </summary>
            <param name="sentencesToSend">The list of sentences to send</param>
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaTcpClient">
            <summary>
            A TCP Server bidirectional sink and source. Provides NMEA sentences to each connected client.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpClient.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Creates a server with the given source name bound to the given local IP and port.
            This will not open the server yet. Use <see cref="M:Iot.Device.Nmea0183.NmeaTcpClient.StartDecode"/> to open the network port.
            </summary>
            <param name="name">Source name</param>
            <param name="destination">Remote host to connect to</param>
            <param name="port">The network port to use</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaTcpClient.RetryInterval">
            <summary>
            Time between reconnection attempts. Default 5 seconds.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.NmeaTcpClient.Connected">
            <summary>
            Returns true if this client is connected
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpClient.StartDecode">
            <summary>
            Starts connecting to the server. A failure to connect will not cause an exception. Retries will be handled
            automatically.
            </summary>
            <exception cref="T:System.InvalidOperationException">The method was called twice</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpClient.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Sends the sentence to all our clients.
            If it is needed to make distinctions for what needs to be sent to which client, create
            multiple server instances. This will allow for proper filtering.
            </summary>
            <param name="source">The original source of the message, used i.e. for logging</param>
            <param name="sentence">The sentence to send</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpClient.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaTcpServer">
            <summary>
            A TCP Server bidirectional sink and source. Provides NMEA sentences to each connected client.
            </summary>
            <remarks>
            Using this class in applications targeting .NET core 3.1 or earlier may cause deadlocks when closing the connection.
            It is recommended to target .NET 6.0 or above when using this class.
            </remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpServer.#ctor(System.String)">
            <summary>
            Creates a server with the given source name. The default network port is 10110.
            </summary>
            <param name="name">Source name</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpServer.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Creates a server with the given source name bound to the given local IP and port.
            This will not open the server yet. Use <see cref="M:Iot.Device.Nmea0183.NmeaTcpServer.StartDecode"/> to open the network port.
            </summary>
            <param name="name">Source name</param>
            <param name="bindTo">Network interface to bind to (Use <see cref="F:System.Net.IPAddress.Any"/> to bind to all available interfaces</param>
            <param name="port">The network port to use</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpServer.StartDecode">
            <summary>
            Starts a network server with the settings provided by the constructor.
            </summary>
            <exception cref="T:System.InvalidOperationException">The server was already started</exception>
            <exception cref="T:System.Net.Sockets.SocketException">The network port is already in use</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpServer.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Sends the sentence to all our clients.
            If it is needed to make distinctions for what needs to be sent to which client, create
            multiple server instances. This will allow for proper filtering.
            </summary>
            <param name="source">The original source of the message, used i.e. for logging</param>
            <param name="sentence">The sentence to send</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaTcpServer.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.NmeaUdpServer">
            <summary>
            This server distributes all incoming messages via UDP. The advantage is that clients do not need to
            know the IP of the server, which is useful if DHCP keeps reassigning addresses.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.#ctor(System.String)">
            <summary>
            Create an UDP server with the given name on the default port 10110
            </summary>
            <param name="name">The network source name</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.#ctor(System.String,System.Int32)">
            <summary>
            Create an UDP server with the given name on the given port
            </summary>
            <param name="name">The network source name</param>
            <param name="port">The network port to use. The default is 10110</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Create an UDP server with the given name on the given port, using an alternate outgoing port. The outgoing and incoming
            port may be equal only if the sender and the receiver are not on the same computer.
            </summary>
            <param name="name">The network source name</param>
            <param name="localPort">The port to receive data on</param>
            <param name="remotePort">The network port to send data to (must be different than local port when communicating to a local process)</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.GetLocalIPAddress">
            <summary>
            Get the default IP address to bind to
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Sends the sentence to all our clients.
            If it is needed to make distinctions for what needs to be sent to which client, create
            multiple server instances. This will allow for proper filtering.
            </summary>
            <param name="source">The original source of the message, used i.e. for logging</param>
            <param name="sentence">The sentence to send</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.NmeaUdpServer.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.PositionProvider">
            <summary>
            Provides high-level methods to obtain position and other aggregated data from NMEA sources.
            The class takes the best available data sets to generate the required output.
            A position can for instance be obtained from <see cref="T:Iot.Device.Nmea0183.Sentences.PositionFastUpdate"/>, <see cref="T:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData"/> or
            <see cref="T:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation"/>, depending on whatever the GNSS receiver delivers.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.#ctor(Iot.Device.Nmea0183.NmeaSinkAndSource)">
            <summary>
            Create a position provider from a given data source.
            The data source is monitored for changes.
            </summary>
            <param name="dataSource">The data source to monitor</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.#ctor(Iot.Device.Nmea0183.SentenceCache)">
            <summary>
            Create a position provider using an existing cache.
            The cache must be updated externally.
            </summary>
            <param name="cache">The cache to use</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@)">
            <summary>
            Get the current position from the latest message containing any of the relevant data parts. This does not extrapolate the position
            if the last received message is old
            </summary>
            <param name="position">Current position</param>
            <param name="track">Track (course over ground)</param>
            <param name="sog">Speed over ground</param>
            <param name="heading">Vessel Heading</param>
            <returns>True if a valid position is returned</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@)">
            <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate"></paramref> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
            <param name="position">Current position</param>
            <param name="extrapolate">True to extrapolate the current position using speed and track</param>
            <param name="track">Track (course over ground)</param>
            <param name="sog">Speed over ground</param>
            <param name="heading">Vessel Heading</param>
            <returns>True if a valid position is returned</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.String,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@,System.DateTimeOffset@)">
            <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate"></paramref> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
            <param name="position">Current position</param>
            <param name="source">Only look at this source (otherwise, if multiple sources provide a position, any is used)</param>
            <param name="extrapolate">True to extrapolate the current position using speed and track</param>
            <param name="track">Track (course over ground)</param>
            <param name="sog">Speed over ground</param>
            <param name="heading">Vessel Heading</param>
            <param name="messageTime">Time of the position report that was used</param>
            <returns>True if a valid position is returned</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentPosition(Iot.Device.Common.GeographicPosition@,System.String,System.Boolean,UnitsNet.Angle@,UnitsNet.Speed@,System.Nullable{UnitsNet.Angle}@,System.DateTimeOffset@,System.DateTimeOffset)">
            <summary>
            Get the current position from the latest message containing any of the relevant data parts.
            If <paramref name="extrapolate"></paramref> is true, the speed and direction are used to extrapolate the position (many older
            GNSS receivers only deliver the position at 1Hz or less)
            </summary>
            <param name="position">Current position</param>
            <param name="source">Only look at this source (otherwise, if multiple sources provide a position, any is used)</param>
            <param name="extrapolate">True to extrapolate the current position using speed and track</param>
            <param name="track">Track (course over ground)</param>
            <param name="sog">Speed over ground</param>
            <param name="heading">Vessel Heading</param>
            <param name="messageTime">Time of the position report that was used</param>
            <param name="now">The current time (when working with data in the past, this may be the a time within that data set)</param>
            <returns>True if a valid position is returned</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.TryGetCurrentRoute(System.Collections.Generic.List{Iot.Device.Nmea0183.RoutePoint}@)">
            <summary>
            Returns the current route
            </summary>
            <param name="routeList">The list of points along the route</param>
            <returns>The state of the route received</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.PositionProvider.GetSatellitesInView(System.Int32@)">
            <summary>
            Returns the list of satellites in view
            </summary>
            <param name="totalNumberOfSatellites">Total number of satellites reported.
            This number might be larger than the number of elements in the list, as there might not be enough
            slots to transfer the whole status for all satellites</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.QuerySentence">
            <summary>
            Represents NMEA0183 query sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.QuerySentence.RequesterId">
            <summary>
            The talker ID of the requester
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.QuerySentence.DeviceId">
            <summary>
            The talker id of the device to query
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.QuerySentence.RequestedSentence">
            <summary>
            The name of the sequence to request
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.QuerySentence.FromSentenceString(System.String)">
            <summary>
            Reads NMEA0183 query sentence from provided string
            </summary>
            <param name="sentence">NMEA0183 query sentence</param>
            <returns>QuerySentence instance</returns>
            <remarks><paramref name="sentence"/> does not include new line characters</remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.QuerySentence.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Constructs NMEA0183 query sentence
            </summary>
            <param name="requesterId">Talker identifier of the requester</param>
            <param name="deviceId">Talker identifier of the device</param>
            <param name="requestedSentence">Requested sentence</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.QuerySentence.ToString">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Raw8BitEncoding">
            <summary>
            An encoding that converts 8-Bit data to unicode, by just interpreting the input values as the lower part of a
            char. This works for all ASCII characters as well as if the input and output devices use the same code page.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetMaxByteCount(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.Raw8BitEncoding.GetMaxCharCount(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Nmea0183.Route">
            <summary>
            High-level representation of a route (a list of waypoints)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.#ctor(System.String)">
            <summary>
            Starts with an empty route
            </summary>
            <param name="name">Name of new route</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.#ctor(System.String,System.Collections.Generic.List{Iot.Device.Nmea0183.RoutePoint},Iot.Device.Nmea0183.RoutePoint)">
            <summary>
            Construct a route from a list of points. This gets precedence over an externally defined route.
            </summary>
            <param name="name">Name of route</param>
            <param name="route">The new route</param>
            <param name="nextPoint">The next point on the route that is to be reached (optional, defaults to the first point)</param>
            <exception cref="T:System.ArgumentException">Different semantic errors with the definition of the route.</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.#ctor(System.String,Iot.Device.Common.GeographicPosition[])">
            <summary>
            Creates a route from an ordered set of points
            </summary>
            <param name="name">Name of the new route</param>
            <param name="points">Points of the route (ordered)</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Route.Name">
            <summary>
            Name of the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Route.HasPoints">
            <summary>
            True if the route is not empty
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Route.StartPoint">
            <summary>
            Gets the first point of the route
            </summary>
            <exception cref="T:System.InvalidOperationException">The route is empty</exception>
        </member>
        <member name="P:Iot.Device.Nmea0183.Route.NextPoint">
            <summary>
            The next point on the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Route.Points">
            <summary>
            The points on the route
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.SetNextPoint(Iot.Device.Nmea0183.RoutePoint)">
            <summary>
            Sets the next point on the route (i.e. to skip a missed waypoint)
            </summary>
            <param name="pt">The next point</param>
            <returns>True on success, false otherwise. This returns false if the given position is not part of the route.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.SetNextPoint(Iot.Device.Common.GeographicPosition)">
            <summary>
            Sets the next point on the route (i.e. to skip a missed waypoint)
            </summary>
            <param name="position">Position of next waypoint</param>
            <returns>True on success, false otherwise. This returns false if the given position is not part of the route.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.AddPoint(Iot.Device.Nmea0183.RoutePoint)">
            <summary>
            Adds the given point to the end of the route
            </summary>
            <param name="pt">Point to insert</param>
            <exception cref="T:System.ArgumentException">Duplicate waypoint name, undefined position, etc.</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.CalculateMetaData">
            <summary>
            Calculates distances and directions between the waypoints
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Route.UniqueSorting.Compare(Iot.Device.Nmea0183.RoutePoint,Iot.Device.Nmea0183.RoutePoint)">
            <summary>
            This sorts the route by waypoint names. But we're actually not interested in that, we're only
            trying to make sure the names are unique, so this throws if the comparison returns 0
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.RoutePoint">
            <summary>
            A point along a route. This is used to construct <see cref="T:Iot.Device.Nmea0183.Sentences.RoutePart"/> and <see cref="T:Iot.Device.Nmea0183.Sentences.Waypoint"/> sentences
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.RoutePoint.#ctor(System.String,System.Int32,System.Int32,System.String,Iot.Device.Common.GeographicPosition,System.Nullable{UnitsNet.Angle},System.Nullable{UnitsNet.Length})">
            <summary>
            Creates a new route point.
            </summary>
            <param name="routeName">Name of the route</param>
            <param name="indexInRoute">The index of this point</param>
            <param name="totalPointsInRoute">The total number of points on this route</param>
            <param name="waypointName">The name of this waypoint</param>
            <param name="position">The position of the waypoint</param>
            <param name="bearingToNextWaypoint">The direction to the next waypoint (optional, will be calculated when the route is constructed)</param>
            <param name="distanceToNextWaypoint">The distance to the next waypoint (optional, will be calculated when the route is constructed)</param>
            <remarks>
            Route and point names should use ASCII characters only. Some devices may understand the extended ASCII code page (values > 127),
            but this is rare. Most devices will silently truncate any names longer than 10 chars.
            </remarks>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.RouteName">
            <summary>
            The name of the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.IndexInRoute">
            <summary>
            The index within the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.TotalPointsInRoute">
            <summary>
            The total number of points on the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.WaypointName">
            <summary>
            The name of this point
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.Position">
            <summary>
            The position of this point
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.BearingToNextWaypoint">
            <summary>
            True bearing from this waypoint to the next
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.RoutePoint.DistanceToNextWaypoint">
            <summary>
            The distance to the next waypoint
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.RoutePoint.Equals(Iot.Device.Nmea0183.RoutePoint)">
            <summary>
            Two points are considered equal if the name and the position are equal. The other properties are NMEA-internals and are
            not directly related to the function of the waypoint for the user
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.RoutePoint.Equals(System.Object)">
            <summary>
            Equality comparer
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.RoutePoint.GetHashCode">
            <summary>
            Standard hash function
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.SentenceCache">
            <summary>
            Caches the last sentence(s) of each type for later retrieval.
            This is a helper class for <see cref="T:Iot.Device.Nmea0183.AutopilotController"/> and <see cref="T:Iot.Device.Nmea0183.PositionProvider"/>. Use <see cref="T:Iot.Device.Nmea0183.PositionProvider"/> to query the position from
            the most appropriate messages.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.#ctor(Iot.Device.Nmea0183.NmeaSinkAndSource)">
            <summary>
            Creates an new cache using the given source
            </summary>
            <param name="source">The source to monitor</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.SentenceCache.StoreRawSentences">
            <summary>
            True to (also) store raw sentences. Otherwise only recognized decoded sentences are stored.
            Defaults to false.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.GetLastSentence(Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Gets the last sentence of the given type.
            Does not return sentences that are part of a group (i.e. GSV, RTE)
            </summary>
            <param name="id">Sentence Id to query</param>
            <returns>The last sentence of that type, or null.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.GetLastSentence(System.String,Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Gets the last sentence with the given id from the given talker.
            </summary>
            <param name="source">Source to query</param>
            <param name="id">Id to query</param>
            <returns>The last sentence of that type and source, null if not found</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.TryGetLastSentence``1(Iot.Device.Nmea0183.SentenceId,``0@)">
            <summary>
            Tries to get a sentence of the given type
            </summary>
            <typeparam name="T">The type of the sentence to query</typeparam>
            <param name="id">The sentence id for T</param>
            <param name="sentence">Receives the sentence, if any was found</param>
            <returns>True on success, false if no such message was received</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.GetLastSentence(Iot.Device.Nmea0183.SentenceId,System.TimeSpan)">
            <summary>
            Gets the last sentence of the given type.
            Does not return sentences that are part of a group (i.e. GSV, RTE)
            </summary>
            <param name="id">Sentence Id to query</param>
            <param name="maxAge">Maximum age of the sentence</param>
            <returns>The last sentence of that type, or null if none was received within the given timespan.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.Dispose">
            <summary>
            Clean up everything
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.Add(Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Adds the given sentence to the cache - if manual filling is preferred
            </summary>
            <param name="sentence">Sentence to add</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.TryGetLastDinSentence``1(System.Int32,``0@)">
            <summary>
            Tries to get a DIN sentence type
            </summary>
            <typeparam name="T">The type of the sentence to query</typeparam>
            <param name="hexId">The hexadecimal identifier for this sub-message</param>
            <param name="sentence">Receives the sentence, if any was found</param>
            <returns>True on success, false if no such message was received</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.TryGetTransducerData(System.String,Iot.Device.Nmea0183.Sentences.TransducerDataSet@)">
            <summary>
            Gets the last transducer data set (from an XDR sentence, see <see cref="T:Iot.Device.Nmea0183.Sentences.TransducerMeasurement"/>) if one with the given name exists.
            </summary>
            <param name="name">The name of the data set. Case sensitive</param>
            <param name="data">Returns the value if it exists</param>
            <returns>True if a value with the given name was found, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.TryGetWayPoint(System.String,Iot.Device.Nmea0183.Sentences.Waypoint@)">
            <summary>
            Queries the waypoint with the given name
            </summary>
            <param name="name">The name of the waypoint</param>
            <param name="wp">The return data</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.QueryActiveRouteSentences(System.Collections.Generic.List{Iot.Device.Nmea0183.Sentences.RoutePart}@)">
            <summary>
            Returns the last RTE sentences received, to construct the active route.
            A set of at most 100 elements is returned, with the newest entry first.
            </summary>
            <param name="routeParts">The list of RTE sentences</param>
            <returns>True if a list was found, false if no RTE messages where received</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceCache.QuerySatellitesInView(System.Collections.Generic.List{Iot.Device.Nmea0183.Sentences.SatellitesInView}@)">
            <summary>
            Returns a list of recently received <see cref="T:Iot.Device.Nmea0183.Sentences.SatellitesInView"/> (GSV) messages.
            </summary>
            <param name="sats">The result</param>
            <returns>True if the list was non-empty</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.SentenceId">
            <summary>
            Represents a NMEA0183 sentence identifier.
            The standard has only 3-character sentence identifiers, but some receivers use proprietary messages with 2-6 letters, too.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.SentenceId.Any">
            <summary>
            A filter placeholder
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.SentenceId.Id">
            <summary>
            The sentence Id, typically a 3-letter code
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.ToString">
            <summary>
            Returns the three-letter sentence ID
            </summary>
            <returns>The three-letter sentence ID</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            Constructs NMEA0183 sentence identifier from three letters
            </summary>
            <param name="id1">first character identifying the sentence</param>
            <param name="id2">second character identifying the sentence</param>
            <param name="id3">third character identifying the sentence</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.#ctor(System.String)">
            <summary>
            Constructs NMEA sentence identifier from string.
            </summary>
            <param name="identifier">Sentence identifier, i.e. GGA</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.Equals(System.Object)">
            <summary>
            Equality member
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.GetHashCode">
            <summary>
            Hash function
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.Equals(Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Equality member
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.op_Equality(Iot.Device.Nmea0183.SentenceId,Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SentenceId.op_Inequality(Iot.Device.Nmea0183.SentenceId,Iot.Device.Nmea0183.SentenceId)">
            <summary>
            Unequality operator
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.SystemClockSynchronizer">
            <summary>
            Synchronizes the system clock to the NMEA data stream
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SystemClockSynchronizer.#ctor">
            <summary>
            Creates an instance of this class
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.SystemClockSynchronizer.RequiredAccuracy">
            <summary>
            The time delta that triggers a resync. Setting this to a low value may cause permantent clock updates
            if messages are delayed.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.SystemClockSynchronizer.StartDecode">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.SystemClockSynchronizer.SendSentence(Iot.Device.Nmea0183.NmeaSinkAndSource,Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.SystemClockSynchronizer.StopDecode">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.TalkerId">
            <summary>
            Represents 2 character NMEA0183 talker identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Id1">
            <summary>
            The first letter of the talker id
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Id2">
            <summary>
            The second letter of the talker id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.ToString">
            <summary>
            The talker ID
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.#ctor(System.Char,System.Char)">
            <summary>
            Constructs NMEA0183 talker identifier
            </summary>
            <param name="id1">first character identifying the talker</param>
            <param name="id2">second character identifying the talker</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.Equals(System.Object)">
            <summary>
            Equality member
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.GetHashCode">
            <summary>
            Hashcode function
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.Equals(Iot.Device.Nmea0183.TalkerId)">
            <summary>
            Equality member
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.op_Equality(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.TalkerId)">
            <summary>
            Equality operator
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerId.op_Inequality(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.TalkerId)">
            <summary>
            Unequality operator
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.AutopilotGeneral">
            <summary>
            Autopilot - General
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.AutopilotMagnetic">
            <summary>
            Autopilot - Magnetic
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsDigitalSelectiveCalling">
            <summary>
            Communications – Digital Selective Calling (DSC)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsReceiverOrBeaconReceiver">
            <summary>
            Communications – Receiver / Beacon Receiver
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsSatellite">
            <summary>
            Communications – Satellite
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsRadioTelephoneMfHf">
            <summary>
            Communications – Radio-Telephone (MF/HF)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsRadioTelephoneVhf">
            <summary>
            Communications – Radio-Telephone (VHF)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.CommunicationsScanningReceiver">
            <summary>
            Communications – Scanning Receiver
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.DirectionFinder">
            <summary>
            Direction Finder
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.ElectronicChartDisplayAndInformationSystem">
            <summary>
            Electronic Chart Display and Information System (ECDIS)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.EmergencyPositionIndicatingBeacon">
            <summary>
            Emergency Position Indicating Beacon (EPIRB)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.EngineRoomMonitoringSystems">
            <summary>
            Engine Room Monitoring Systems
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.GlobalPositioningSystem">
            <summary>
            Global Positioning System (GPS)
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.GlobalNavigationSatelliteSystem">
            <summary>
            Global Navigation Satellite System (GNSS)
            </summary>
            <returns>TalkerId instance</returns>
            <remarks>This identifier can be used when sentence is produced from multiple satellite systems.</remarks>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.HeadingMagneticCompass">
            <summary>
            Heading – Magnetic Compass
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.HeadingNorthSeekingGyro">
            <summary>
            Heading – North Seeking Gyro
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.HeadingNonNorthSeekingGyro">
            <summary>
            Heading – Non North Seeking Gyro
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.IntegratedInstrumentation">
            <summary>
            Integrated Instrumentation
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.IntegratedNavigation">
            <summary>
            Integrated Navigation
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.LoranC">
            <summary>
            Loran C
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.RadarAndOrArpa">
            <summary>
            RADAR and/or ARPA
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.SounderDepth">
            <summary>
            Sounder, Depth
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.ElectronicPositioningSystem">
            <summary>
            Electronic Positioning System, other/general
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.SounderScanning">
            <summary>
            Sounder, Scanning
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.TurnRateIndicator">
            <summary>
            Turn Rate Indicator
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.VelocitySensorDoppler">
            <summary>
            Velocity Sensor, Doppler, other/general
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.VelocitySensorSpeedLogWaterMagnetic">
            <summary>
            Velocity Sensor, Speed Log, Water, Magnetic
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.VelocitySensorSpeedLogWaterMechanical">
            <summary>
            Velocity Sensor, Speed Log, Water, Mechanical
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.WeatherInstruments">
            <summary>
            Weather Instruments
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Transducer">
            <summary>
            Transducer
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.TimekeeperAtomicClock">
            <summary>
            Timekeeper – Atomic Clock
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.TimekeeperChronometer">
            <summary>
            Timekeeper – Chronometer
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.TimekeeperQuartz">
            <summary>
            Timekeeper – Quartz
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.TimekeeperRadioUpdateWwvOrWwvh">
            <summary>
            Timekeeper – Radio Update, WWV or WWVH
            </summary>
            <returns>TalkerId instance</returns>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Ais">
            <summary>
            AIS receiver - the only two known messages that are supported with this talker are AIVDM and AIVDO,
            They use a ! as sentence start character and are always using "AI" as prefix, regardless of the actual source.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Proprietary">
            <summary>
            Proprietary message, mostly for PCDIN sequences.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerId.Any">
            <summary>
            Filter placeholder for any talker id
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.TalkerSentence">
            <summary>
            Represents NMEA0183 talker sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerSentence.TalkerId">
            <summary>
            NMEA0183 talker identifier (identifier of the sender)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerSentence.Id">
            <summary>
            NMEA0183 sentence identifier
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.TalkerSentence.Fields">
            <summary>
            Fields of the NMEA0183 sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructs NMEA0183 talker identifier
            </summary>
            <param name="talkerId">NMEA0183 talker identifier of the device sending the sentence</param>
            <param name="sentenceId">NMEA0183 sentence identifier</param>
            <param name="fields">fields related to the sentence</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.#ctor(Iot.Device.Nmea0183.Sentences.NmeaSentence)">
            <summary>
            Constructs a message from a typed sentence
            </summary>
            <param name="sentence">Sentence to send. It must be valid</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.FromSentenceString(System.String,Iot.Device.Nmea0183.NmeaError@)">
            <summary>
            Reads NMEA0183 talker sentence from provided string
            </summary>
            <param name="sentence">NMEA0183 talker sentence</param>
            <param name="errorCode">Returns an error code, if the parsing failed</param>
            <returns>TalkerSentence instance, or null in case of an error</returns>
            <remarks><paramref name="sentence"/> does not include new line characters</remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.FromSentenceString(System.String,Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.NmeaError@)">
            <summary>
            Reads NMEA0183 talker sentence from provided string
            </summary>
            <param name="sentence">NMEA0183 talker sentence</param>
            <param name="expectedTalkerId">If this is not TalkerId.Any, only messages with this talker id are parsed,
            all others are ignored. This reduces workload if a source acts as repeater, but the repeated messages are not needed.</param>
            <param name="errorCode">Returns an error code, if the parsing failed</param>
            <returns>TalkerSentence instance, or null in case of an error</returns>
            <remarks><paramref name="sentence"/> does not include new line characters</remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.RegisterSentence(Iot.Device.Nmea0183.SentenceId,System.Func{Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset,Iot.Device.Nmea0183.Sentences.NmeaSentence})">
            <summary>
            Registers sentence identifier as known. Registered sentences are used by <see cref="M:Iot.Device.Nmea0183.TalkerSentence.TryGetTypedValue(System.DateTimeOffset@)"/>.
            </summary>
            <param name="id">NMEA0183 sentence identifier</param>
            <param name="producer">Function which produces typed object given <see cref="T:Iot.Device.Nmea0183.TalkerSentence"/>.</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.CalculateChecksum(System.String)">
            <summary>
            Calculates the NMEA checksum from a sentence (that includes everything except the checksum)
            </summary>
            <param name="messageWithoutChecksum">The message, including the leading $ letter</param>
            <returns>The checksum as a byte</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.TryGetTypedValue(System.DateTimeOffset@)">
            <summary>
            Compares sentence identifier with all known identifiers.
            If found returns typed object corresponding to the identifier.
            If not found returns a raw sentence instead. Also returns a raw sentence on a parser error (e.g. invalid date/time field)
            </summary>
            <param name="lastMessageTime">The date/time the last packet was seen. Used to time-tag packets that do not provide
            their own time or only a time but not a date</param>
            <returns>Object corresponding to the identifier</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.TalkerSentence.GetAsRawSentence(System.DateTimeOffset@)">
            <summary>
            Returns this sentence without parsing its contents
            </summary>
            <returns>A raw sentence</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint">
            <summary>
            BWC message: Contains direction to the next waypoint, calculated on the great circle
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.Id">
            <summary>
            The id of this message is "BWC"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Create a new instance
            </summary>
            <param name="sentence">Sentence to decompose</param>
            <param name="time">Current time</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Internal ctor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.#ctor(System.DateTimeOffset,System.String,Iot.Device.Common.GeographicPosition,UnitsNet.Length,UnitsNet.Angle,UnitsNet.Angle)">
            <summary>
            Create a new sentence
            </summary>
            <param name="dateTime">Current time</param>
            <param name="nextWayPointName">Name of next waypoint</param>
            <param name="nextWayPoint">Position of next waypoint</param>
            <param name="distanceToWayPoint">Distance to next waypoint</param>
            <param name="bearingTrueToWayPoint">Bearing to next waypoint, in degrees true</param>
            <param name="bearingMagneticToWayPoint">Bearing to next waypoint, in degrees magnetic</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.NextWayPointName">
            <summary>
            Name of next waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.NextWayPoint">
            <summary>
            Position of next waypoint (the waypoint we're heading to)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.DistanceToWayPoint">
            <summary>
            Distance to next waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.BearingTrueToWayPoint">
            <summary>
            True bearing to waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.BearingMagneticToWayPoint">
            <summary>
            Magnetic bearing to the waypoint
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingAndDistanceToWayPoint.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination">
            <summary>
            BOD sentence: Bearing origin to destination (between two waypoints, typically on the active leg)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.#ctor(UnitsNet.Angle,UnitsNet.Angle,System.String,System.String)">
            <summary>
            Constructs a new BOD sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.BearingTrue">
            <summary>
            Bearing, origin do destination, degrees true
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.OriginName">
            <summary>
            Name of origin
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.BearingMagnetic">
            <summary>
            Bearing, origin to destination, degrees true
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.DestinationName">
            <summary>
            Name of destination
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.BearingOriginToDestination.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.CrossTrackError">
            <summary>
            XTE sentence: Cross track error (one of the most important messages used to control autopilot)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.CrossTrackError.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.CrossTrackError.#ctor(UnitsNet.Length)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.CrossTrackError.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.CrossTrackError.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.CrossTrackError.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.CrossTrackError.Distance">
            <summary>
            Cross track distance. Positive if to the right of the track (meaning one shall steer left or to port)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.CrossTrackError.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.CrossTrackError.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.DepthBelowSurface">
            <summary>
            DBS sentence: Depth below surface (sent by depth transducer if configured properly)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.#ctor(UnitsNet.Length)">
            <summary>
            Constructs a new DBS sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.Depth">
            <summary>
            Cross track distance, meters
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.DepthBelowSurface.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.EngineData">
            <summary>
            A helper DTO to transfer engine data in one blob
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineData.#ctor(System.Int32,Iot.Device.Nmea0183.Sentences.EngineStatus,System.Int32,UnitsNet.RotationalSpeed,UnitsNet.Ratio,System.TimeSpan,System.Nullable{UnitsNet.Temperature})">
            <summary>
            Constructs an instance containing all relevant data
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineData.FromMessages(Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast,Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail)">
            <summary>
            Constructs an <see cref="T:Iot.Device.Nmea0183.Sentences.EngineData"/> instance from the two relevant messages
            </summary>
            <param name="fast">The fast-updating engine message</param>
            <param name="detail">The slow updating engine message</param>
            <returns>An <see cref="T:Iot.Device.Nmea0183.Sentences.EngineData"/> instance</returns>
            <exception cref="T:System.InvalidOperationException">The two messages are not from the same engine.</exception>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.MessageTimeStamp">
            <summary>
            The NMEA2000 bus timestamp (not really relevant, I think)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.Status">
            <summary>
            Any error flags
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.EngineNo">
            <summary>
            The number of the engine. 0 = Single / Starboard, 1 = Port, 2 = Center
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.Revolutions">
            <summary>
            Current running speed of the engine
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.Pitch">
            <summary>
            Propeller pitch
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.OperatingTime">
            <summary>
            Total engine run time
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineData.EngineTemperature">
            <summary>
            Engine temperature
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.EngineRevolutions">
            <summary>
            Engine revolutions (RPM) sentence.
            Note: This is superseeded by NMEA2000 commands, which provide a lot more details for engine parameters
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.#ctor(Iot.Device.Nmea0183.Sentences.RotationSource,UnitsNet.RotationalSpeed,System.Int32,UnitsNet.Ratio)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.Sentences.RotationSource,UnitsNet.RotationalSpeed,System.Int32,UnitsNet.Ratio)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Internal constructor from NMEA string
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.RotationalSpeed">
            <summary>
            Cross track distance, meters
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.RotationSource">
            <summary>
            Revolution counter source
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.EngineNumber">
            <summary>
            Number of engine
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.EngineRevolutions.PropellerPitch">
            <summary>
            Pitch of propeller. Negative if running astern.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.EngineRevolutions.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.EngineStatus">
            <summary>
            Engine error status bits. If this is 0, the engine is running fine, anything else indicates
            a possible problem that should be addressed as soon as possible.
            </summary>
            <remarks>
            The meaning of some of these flags is derived from its name and may not be accurate for all types of engines.
            Older engines do not have all the sensors required and may never return some of the errors.
            It is unclear what status an engine reports when it's off. If the electronics is directly coupled to
            the engine it will probably not send any messages at all in that state.
            </remarks>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.None">
            <summary>
            No status bit set = all is well
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.CheckEngine">
            <summary>
            Engine should be checked, or engine is performing self test.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.OverTemperature">
            <summary>
            Engine is too hot
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.LowOilPressure">
            <summary>
            Engine lubrication oil pressure is low
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.LowOilLevel">
            <summary>
            Not enough lubrication oil
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.LowFuelPressure">
            <summary>
            Low fuel pressure
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.LowSystemVoltage">
            <summary>
            Low battery voltage
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.LowCoolantLevel">
            <summary>
            Not enough coolant water in the coolant loop
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.WaterFlow">
            <summary>
            Low external cooling water flow. Check inlet valves.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.WaterInFuel">
            <summary>
            There's water in the fuel.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.ChargeIndicator">
            <summary>
            The alternator is not charging. This is expected to be on when the engine main switch
            is enabled but the engine is not (yet) running. If it is on when the engine is running,
            the alternator is probably broken.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.PreheatIndicator">
            <summary>
            The engine is pre-heating. One should wait until this signal goes off before attempting
            to start the engine.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.HighBoostPressure">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.RevLimitExceeded">
            <summary>
            The engine is running above it's designated safe RPM limit.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.EgrSystem">
            <summary>
            EGR System failure?
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.ThrottlePositionSensor">
            <summary>
            The throttle position sensor is broken
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.EngineEmergencyStopMode">
            <summary>
            The engine entered emergency stop mode
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.WarningLevel1">
            <summary>
            This is a level 1 warning
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.WarningLevel2">
            <summary>
            This is a level 2 warning
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.PowerReduction">
            <summary>
            The engine power is reduced
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.MaintenanceNeeded">
            <summary>
            Engine maintenance is needed
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.EngineCommError">
            <summary>
            There was an error communicating with the engine controls
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.SecondaryThrottle">
            <summary>
            ???
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.NeutralStartProtect">
            <summary>
            The engine cannot be started because the gear is not in "neutral" position. Set gear and throttle
            to neutral and try again.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.EngineStatus.EngineShuttingDown">
            <summary>
            The engine is shutting down.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.FluidData">
            <summary>
            Represents the level of a fluid in a particular tank
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.FluidData.#ctor(Iot.Device.Nmea0183.Sentences.FluidType,UnitsNet.Ratio,UnitsNet.Volume,System.Int32,System.Boolean)">
            <summary>
            Constructs a new instance of this class.
            </summary>
            <param name="type">The type of fluid</param>
            <param name="level">The level of the fluid (0-100%)</param>
            <param name="volume">The total volume of the tank</param>
            <param name="tankNumber">The number of the tank (if multiple tanks for the same type of fluid are present)</param>
            <param name="highLevelIsGood">True if it is "good" to have a full tank (e.g. water, diesel), false if it is better to have
            an empty tank (e.g. wastewater)</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.FluidData.Type">
            <summary>
            Type of fluid in the tank
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.FluidData.Level">
            <summary>
            Tank level
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.FluidData.Volume">
            <summary>
            Total volume of the tank
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.FluidData.TankNumber">
            <summary>
            Number of the tank, useful if several tanks for the same type of fluid exist
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.FluidData.HighLevelIsGood">
            <summary>
            True if it is "good" to have a full tank (e.g. water, diesel), false if it is better to have
            an empty tank (e.g. wastewater)
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.FluidType">
            <summary>
            The type of fluid represented by this message
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.Fuel">
            <summary>
            The tank contains fuel. Normally, this will be diesel fuel (gas oil), as this is the
            most used fuel type for boats. See also <seealso cref="F:Iot.Device.Nmea0183.Sentences.FluidType.FuelGasoline"/>
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.Water">
            <summary>
            The tank contains fresh water
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.GrayWater">
            <summary>
            The tanks contains waste water, e.g. from sinks or showers.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.LiveWell">
            <summary>
            The tank is a live well (e.g. for caught fish)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.Oil">
            <summary>
            The tank contains lubrication oil.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.BlackWater">
            <summary>
            The tank contains black water (toilet waste)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.FuelGasoline">
            <summary>
            The tank contains gasoline.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.Error">
            <summary>
            Indicates an error condition
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.FluidType.Unavailable">
            <summary>
            The tank is unavailable
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData">
            <summary>
            Represents GlobalPositioningSystemFixData (GGA) NMEA0183 sentence. This message is typically
            preferred over RMC if it is available.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.Id">
            <summary>
            The GGA sentence identifer
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.Status">
            <summary>
            GPS quality. The position is valid when this does not return <see cref="F:Iot.Device.Nmea0183.Sentences.GpsQuality.NoFix"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.LatitudeDegrees">
            <summary>
            Latitude in degrees. Positive value means north, negative means south.
            </summary>
            <value>Value of latitude in degrees or null when value is not provided</value>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.LongitudeDegrees">
            <summary>
            Longitude in degrees. Positive value means east, negative means west.
            </summary>
            <value>Value of longitude in degrees or null when value is not provided</value>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.Undulation">
            <summary>
            Undulation value reported. This is the difference between the geodetic and the elipsoid height at the current location and
            usually provided by the GNSS receiver trough a build-in adjustment table.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.GeoidAltitude">
            <summary>
            Altitude over the geoid. This is commonly called "altitude above sea level" and corrects for the change in
            gravitational pull on different places of the globe.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.EllipsoidAltitude">
            <summary>
            Altitude above the WGS84 ellipsoid. This is following a calculation model of the earth, which is used by the satellite systems
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.NumberOfSatellites">
            <summary>
            Number of satellites in view. A maximum of 12 is reported by this message.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.Hdop">
            <summary>
            Horizontal dilution of precision. A number representing the quality of the GPS fix. Lower is better.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Manually decode the given sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Construct a new sentence from the given fields. This is used by the parser
            </summary>
            <param name="talkerId">Talker id to use</param>
            <param name="fields">The list of fields</param>
            <param name="time">The current time</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.#ctor(System.DateTimeOffset,Iot.Device.Nmea0183.Sentences.GpsQuality,Iot.Device.Common.GeographicPosition,System.Nullable{System.Double},System.Double,System.Int32)">
            <summary>
            Construct a message with the given values
            </summary>
            <param name="dateTime">The current time</param>
            <param name="status">The GNSS status</param>
            <param name="position">The position</param>
            <param name="geoidAltitude">Geoid altitude</param>
            <param name="hdop">HDOP</param>
            <param name="numberOfSatellites">The number of satellites visible</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.GlobalPositioningSystemFixData.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.GpsQuality">
            <summary>
            GPS Quality indicator (from GGA message)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.NoFix">
            <summary>
            No GPS fix available. This is an error situation.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.Fix">
            <summary>
            A position is available
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.DifferentialFix">
            <summary>
            A differential GPS solution is available
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.PpsFix">
            <summary>
            An improved fix is available
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.RealTimeKinematic">
            <summary>
            Delivered by some receivers only
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.FloatRtk">
            <summary>
            Delivered by some receivers only
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.Estimated">
            <summary>
            There's no GPS signal available, but the position is extrapolated using other sensors
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.Manual">
            <summary>
            The position was manually entered (i.e for a DSC capable marine VHF)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.GpsQuality.Simulated">
            <summary>
            The position is simulated
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination">
            <summary>
            HDG Sentence (Heading, declination, variation)
            Usually measured using an electronic compass. Can be used instead of HDM or HDT (the variation is also included
            in message RMC)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.#ctor(UnitsNet.Angle,System.Nullable{UnitsNet.Angle},System.Nullable{UnitsNet.Angle})">
            <summary>
            Constructs a new HDG sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Magnetic heading message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.HeadingTrue">
            <summary>
            Angle of the wind
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.HeadingMagnetic">
            <summary>
            Magnetic heading (derived from true heading and declination)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.Deviation">
            <summary>
            Deviation at current location. Usually unknown (empty). Not sure what this field means. The deviation is a property
            of the actual compass and the current orientation, not the location.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.Declination">
            <summary>
            Magnetic declination (sometimes also called variation) at current location. Usually derived from the NOAA magnetic field model by one
            of the attached devices.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingAndDeclination.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.HeadingMagnetic">
            <summary>
            HDT Sentence: Heading magnetic.
            Usually measured using an electronic compass. See also <see cref="T:Iot.Device.Nmea0183.Sentences.HeadingTrue"/>.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.#ctor(System.Double)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Magnetic heading message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.Angle">
            <summary>
            Angle to report
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingMagnetic.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.HeadingTrue">
            <summary>
            HDT Sentence: Heading true.
            This is either a calculated message by using the HDM message and a magnetic variation model, or directly measured using a gyrocompass.
            But since these are very expensive and power-hungry, they are only available in big ships or aircraft.
            Note that the direction reported by the GNS sequence <see cref="T:Iot.Device.Nmea0183.Sentences.TrackMadeGood">GPVTG</see> is the track over ground, which is generally
            not equal to the heading.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingTrue.Id">
            <summary>
            This sentence ID "HDT"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingTrue.#ctor(System.Double)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingTrue.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingTrue.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingTrue.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.HeadingTrue.Angle">
            <summary>
            Angle to report (0: North, 90 East, etc.)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingTrue.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.HeadingTrue.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite">
            <summary>
            Provides meteorological information.
            This class does not parse or send the wind information, which is also part of this message. Use <see cref="T:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle"/> (MWV sentence)
            instead.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.#ctor(System.Nullable{UnitsNet.Pressure},System.Nullable{UnitsNet.Temperature},System.Nullable{UnitsNet.Temperature},System.Nullable{UnitsNet.RelativeHumidity},System.Nullable{UnitsNet.Temperature})">
            <summary>
            Constructs a new MDA sentence
            </summary>
            <param name="pressure">Barometric pressure</param>
            <param name="airTemperature">Temperature of air</param>
            <param name="waterTemperature">Water temperature</param>
            <param name="relativeHumidity">Relative humidity, percent</param>
            <param name="dewPoint">Dew point</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.BarometricPressure">
            <summary>
            Barometric pressure (corrected for station altitude)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.AirTemperature">
            <summary>
            Air temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.WaterTemperature">
            <summary>
            Water temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.RelativeHumidity">
            <summary>
            Relative humidity
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.DewPoint">
            <summary>
            Dew point
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.MeteorologicalComposite.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.NavigationStatus">
            <summary>
            Navigation status, for use in <see cref="T:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation"/>
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.NavigationStatus.Valid">
            <summary>
            Valid is represented with an "A"
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.NavigationStatus.NavigationReceiverWarning">
            <summary>
            A warning is represented by a "V"
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.NmeaSentence">
            <summary>
            Base class for Nmea Sentences.
            All sentences can be constructed using three different approaches:
            - A constructor taking a talker sentence and a time is used for automatic message construction by the parser or for manual decoding
            - A constructor taking the talker id and a field list is used as helper function for the parser.
            - A constructor taking individual values for the data is used to construct new messages to be sent out.
            If sending out messages, you might want to use the third constructor, it is usually the one with most arguments and not taking a talker sentence, as this
            is added automatically from the static field <see cref="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.OwnTalkerId"/>.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.NmeaSentence.DefaultTalkerId">
            <summary>
            The default talker id of ourselves (applied when we send out messages)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.NmeaSentence.gregorianCalendar">
            <summary>
            The julian calendar (the one that most of the world uses)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.OwnTalkerId">
            <summary>
            Our own talker ID (default when we send messages ourselves)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.DateTimeOffset)">
            <summary>
            Constructs an instance of this abstract class
            </summary>
            <param name="talker">The talker (sender) of this message</param>
            <param name="id">Sentence Id</param>
            <param name="time">Date/Time this message was valid (derived from last time message)</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.TalkerId">
            <summary>
            The talker (sender) of this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.SentenceId">
            <summary>
            The sentence Id of this packet
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.DateTime">
            <summary>
            The time tag on this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.Valid">
            <summary>
            True if the contents of this message are valid / understood
            This is false if the message type could be decoded, but the contents seem invalid or there's no useful data
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.Age">
            <summary>
            Age of this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReplacesOlderInstance">
            <summary>
            True if an instance of this message type can be discarded if a newer instance of the same message type
            is available. Used to prevent buffer overflow on outgoing streams.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.AgeTo(System.DateTimeOffset)">
            <summary>
            The relative age of this sentence against a time stamp.
            Useful when analyzing recorded data, where "now" should also be a time in the past.
            </summary>
            <param name="now">Time to compare against</param>
            <returns>The time difference</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ParseDateTime(System.String,System.String)">
            <summary>
            Parses a date and a time field or any possible combinations of those
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ParseDateTime(System.DateTimeOffset,System.String)">
            <summary>
            Parses a date and a time field or any possible combinations of those
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReadString(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Decodes the next field into a string
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReadChar(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Decodes the next field into a char
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReadValue(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Decodes the next field into a double
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ReadInt(System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Decodes the next field into an int
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToNmeaParameterList">
            <summary>
            Translates the properties of this instance into an NMEA message body,
            without <see cref="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.TalkerId"/>, <see cref="P:Iot.Device.Nmea0183.Sentences.NmeaSentence.SentenceId"/> and checksum.
            </summary>
            <returns>The NMEA sentence string for this message</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToReadableContent">
            <summary>
            Gets an user-readable string about this message
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToNmeaMessage">
            <summary>
            Translates the properties of this instance into an NMEA message
            </summary>
            <returns>A complete NMEA message</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToString">
            <summary>
            Generates a readable instance of this string.
            Not overridable, use <see cref="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToReadableContent"/> to override.
            (this is to prevent confusion with <see cref="M:Iot.Device.Nmea0183.Sentences.NmeaSentence.ToNmeaMessage"/>.)
            Do not use this method to create an NMEA sentence.
            </summary>
            <returns>An user-readable string representation of this message</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.PositionFastUpdate">
            <summary>
            GLL message: Current position, fast update. Contains a subset of the GGA message, but is intended to be transmitted more often.
            Message size was important when NMEA was first designed, since it uses only 4800 Baud by default
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.Id">
            <summary>
            The sentence ID GLL
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.Status">
            <summary>
            GPS Status
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.LatitudeDegrees">
            <summary>
            Latitude in degrees. Positive value means north, negative means south.
            </summary>
            <value>Value of latitude in degrees or null when value is not provided</value>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.LongitudeDegrees">
            <summary>
            Longitude in degrees. Positive value means east, negative means west.
            </summary>
            <value>Value of longitude in degrees or null when value is not provided</value>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
            <param name="sentence">A sentence to deconstruct</param>
            <param name="time">The current time</param>
            <exception cref="T:System.ArgumentException">This is not the correct sentence type</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.#ctor(System.DateTimeOffset,Iot.Device.Common.GeographicPosition)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.PositionFastUpdate.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.ProprietaryMessage">
            <summary>
            Proprietary message used to pass NMEA2000 messages over NMEA0183, only supported
            by some converters and for some messages, for instance engine parameters.
            The messages are usually not fully documented, but the SeaSmart (v1.6.0) protocol
            specification may help (and some trying around)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.Matches(Iot.Device.Nmea0183.TalkerSentence)">
            <summary>
            Checks this message has the correct talker id
            </summary>
            <param name="sentence">The sentence to check</param>
            <returns>True if this input sentence matches this message type (but be careful that this message
            type needs further division by arguments)</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.#ctor">
            <summary>
            Creates a default message of this type
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.DateTimeOffset)">
            <summary>
            Used to create a message while decoding, see base class implementation
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.Identifier">
            <summary>
            The hex identifier of this message type (first field of a PCDIN message)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.ProprietaryMessage.ReadFromHexString(System.String,System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Decodes a value from a longer hex string (PRDIN messages contain one blob of stringly-typed hex numbers)
            </summary>
            <param name="input">Input string</param>
            <param name="start">Start offset of required number</param>
            <param name="length">Length of required number. Must be 2, 4 or 8</param>
            <param name="inverseEndianess">True to inverse the endianess of the number (reverse the partial string)</param>
            <param name="value">The output value</param>
            <returns>True on success, false otherwise</returns>
            <exception cref="T:System.ArgumentException">Length is not 2, 4 or 8</exception>
            <remarks>
            Other erroneous inputs don't throw an exception but return false, e.g. string shorter than expected or
            value is not a hex number. This is to prevent an exception in case of a malformed message.
            </remarks>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.RawSentence">
            <summary>
            This sentence type is used either if no better matching type is known or as placeholder for whole messages.
            This allows forwarding of messages even if we don't need/understand them.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RawSentence.#ctor(Iot.Device.Nmea0183.TalkerId,Iot.Device.Nmea0183.SentenceId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Creates an unknown sentence from a split of parameters
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RawSentence.ReplacesOlderInstance">
            <summary>
            This is false for this message type
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RawSentence.ToNmeaParameterList">
            <summary>
            Returns the formatted payload
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RawSentence.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation">
            <summary>
            Represents RMC NMEA0183 sentence (Recommended Minimum Navigation Information)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.Id">
            <summary>
            The sentence id "RMC"
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.Status">
            <summary>
            The navigation status of the message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.Position">
            <summary>
            The position
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.SpeedOverGround">
            <summary>
            Speed over ground
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.TrackMadeGoodInDegreesTrue">
            <summary>
            The track over ground
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.MagneticVariationInDegrees">
            <summary>
            The (estimated) magnetic variation at the current location
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.Status2">
            <summary>
            Extended status. Not usually required.
            </summary>
            <remarks>
            http://www.tronico.fi/OH6NT/docs/NMEA0183.pdf
            doesn't mention this field but all other sentences have this
            and at least NEO-M8 sends it
            possibly each status is related with some part of the message
            but this unofficial spec does not clarify it
            </remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.#ctor(System.DateTimeOffset,System.Nullable{Iot.Device.Nmea0183.Sentences.NavigationStatus},Iot.Device.Common.GeographicPosition,UnitsNet.Speed,UnitsNet.Angle,System.Nullable{UnitsNet.Angle})">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavigationInformation.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination">
            <summary>
            RMB sentence: Recommended minimum navigation information (current leg).
            This sentence is the bare minimum a navigation system should send to the autopilot.
            Normally, you would also send at least BWC, XTE and MWV
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.Id">
            <summary>
            The sentence id "RMB"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.#ctor(System.DateTimeOffset,UnitsNet.Length,System.String,System.String,Iot.Device.Common.GeographicPosition,UnitsNet.Length,UnitsNet.Angle,UnitsNet.Speed,System.Boolean)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.CrossTrackError">
            <summary>
            Cross track error. Positive: we are to the right of the desired route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.PreviousWayPointName">
            <summary>
            Name of previous waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.NextWayPointName">
            <summary>
            Name of next waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.NextWayPoint">
            <summary>
            Position of next waypoint (the waypoint we're heading to)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.DistanceToWayPoint">
            <summary>
            Distance to next waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.BearingToWayPoint">
            <summary>
            True bearing to waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.ApproachSpeed">
            <summary>
            Speed of approach to the waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.Arrived">
            <summary>
            True: Within arrival circle of waypoint
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RecommendedMinimumNavToDestination.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.RotationSource">
            <summary>
            Source for the engine revolution data
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.RotationSource.Unknown">
            <summary>
            The source is unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.RotationSource.Engine">
            <summary>
            Engine revolutions
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.RotationSource.Shaft">
            <summary>
            Shaft revolutions
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.RoutePart">
            <summary>
            RTE sentence: Identifiers of waypoints of current route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RoutePart.#ctor(System.String,System.Int32,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a new RTE sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.ReplacesOlderInstance">
            <summary>
            False, since multiple messages belong to a packet
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RoutePart.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RoutePart.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.RouteName">
            <summary>
            Name of the route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.Sequence">
            <summary>
            Number of the sequence (which part of the route this is). The total number of sequences in the route is
            specified by <see cref="P:Iot.Device.Nmea0183.Sentences.RoutePart.TotalSequences"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.TotalSequences">
            <summary>
            Total sequences in this route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.RoutePart.WaypointNames">
            <summary>
            List of waypoint names in this sequence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RoutePart.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.RoutePart.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.SatelliteInfo">
            <summary>
            Information about a satellite, part of a satellite constellation
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatelliteInfo.#ctor(System.String)">
            <summary>
            Construct an instance using a satellite ID
            </summary>
            <param name="id">Id of the satellite</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatelliteInfo.Id">
            <summary>
            ID of the satellite
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatelliteInfo.Azimuth">
            <summary>
            Azimuth where the satellite is. This gives the true direction to the satellite from the current position
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatelliteInfo.Elevation">
            <summary>
            Elevation of the satellite. This gives the elevation of the satellite (values close to 0 mean the satellite
            is near the horizon, values close to 90 mean it is right above the observer)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatelliteInfo.Snr">
            <summary>
            Signal to noise ratio of this satellite. A large value is better.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.SatellitesInView">
            <summary>
            GSV message: Satellites that are currently in view.
            The message is sent multiple times with a different sequence ID.
            The original NMEA-0183 definition allows at most 12 satellites (in 3 messages) to
            be transmitted, but newer receivers may send more.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatellitesInView.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{Iot.Device.Nmea0183.Sentences.SatelliteInfo})">
            <summary>
            Constructs a new GSV sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.ReplacesOlderInstance">
            <summary>
            False, since multiple messages belong to a packet
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatellitesInView.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatellitesInView.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.Sequence">
            <summary>
            Number of the sequence (which part of the route this is). The total number of sequences in the route is
            specified by <see cref="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.TotalSequences"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.TotalSequences">
            <summary>
            Total sequences in this route
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.TotalSatellites">
            <summary>
            Total number of satellites
            Does not need to match the number of satellites described in this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SatellitesInView.Satellites">
            <summary>
            The list of satellites described in this message
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatellitesInView.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SatellitesInView.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail">
            <summary>
            An extended engine data message, using a PCDIN sequence (supported by some NMEA0183 to NMEA2000 bridges)
            PCDIN message 01F201 Engine status data (temperatures, oil pressure, operating time)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.HexId">
            <summary>
            Hexadecimal identifier for this message
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.#ctor(Iot.Device.Nmea0183.Sentences.EngineStatus,System.TimeSpan,UnitsNet.Temperature,System.Int32)">
            <summary>
            Constructs a new sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.#ctor(Iot.Device.Nmea0183.Sentences.EngineData)">
            <summary>
            Constructs a new sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Create a message object from a sentence
            </summary>
            <param name="sentence">The sentence</param>
            <param name="time">The current time</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Creates a message object from a decoded sentence
            </summary>
            <param name="talkerId">The source talker id</param>
            <param name="fields">The parameters</param>
            <param name="time">The current time</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.Identifier">
            <summary>
            The NMEA2000 Sentence identifier for this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.MessageTimeStamp">
            <summary>
            The timestamp for the NMEA 2000 message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.Status">
            <summary>
            Engine status: True for running, false for not running/error.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.OperatingTime">
            <summary>
            Total engine operating time (typically displayed in hours)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.Temperature">
            <summary>
            Engine temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.EngineNumber">
            <summary>
            Number of the engine
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.ReplacesOlderInstance">
            <summary>
            Returns false for this message (because PCDIN messages are identified based on their inner message)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineDetail.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast">
            <summary>
            An extended engine data message, using a PCDIN sequence (supported by some NMEA0183 to NMEA2000 bridges)
            This message mostly provides the RPM value and can be sent with a high frequency.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.HexId">
            <summary>
            Hexadecimal identifier for this message
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.#ctor(UnitsNet.RotationalSpeed,System.Int32,UnitsNet.Ratio)">
            <summary>
            Constructs a new sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.#ctor(Iot.Device.Nmea0183.Sentences.EngineData)">
            <summary>
            Constructs a new sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Create a message object from a sentence
            </summary>
            <param name="sentence">The sentence</param>
            <param name="time">The current time</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Creates a message object from a decoded sentence
            </summary>
            <param name="talkerId">The source talker id</param>
            <param name="fields">The parameters</param>
            <param name="time">The current time</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.Identifier">
            <summary>
            The NMEA2000 Sentence identifier for this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.MessageTimeStamp">
            <summary>
            The timestamp for the NMEA 2000 message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.RotationalSpeed">
            <summary>
            Engine revolutions per time, typically RPM (revolutions per minute) is used
            as unit for engine speed.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.EngineNumber">
            <summary>
            Number of the engine.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.PropellerPitch">
            <summary>
            Pitch of the propeller. Propellers with changeable pitch are very rare for pleasure boats, with the exception of folding propellers
            for sailboats, but these fold only when the engine is not in use and there's no sensor to detect the state.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.ReplacesOlderInstance">
            <summary>
            Returns false for this message, as PCDIN messages can mean different things
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartEngineFast.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel">
            <summary>
            SeaSmart message for fluid levels of a tank (Wrapped NMEA2000 message)
            For format, see also https://github.com/ttlappalainen/NMEA2000
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.HexId">
            <summary>
            Hexadecimal identifier for this message
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.#ctor(Iot.Device.Nmea0183.Sentences.FluidData)">
            <summary>
            Constructs a new sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Create a message object from a sentence
            </summary>
            <param name="sentence">The sentence</param>
            <param name="time">The current time</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Creates a message object from a decoded sentence
            </summary>
            <param name="talkerId">The source talker id</param>
            <param name="fields">The parameters</param>
            <param name="time">The current time</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.Identifier">
            <summary>
            The NMEA2000 Sentence identifier for this message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.MessageTimeStamp">
            <summary>
            The timestamp for the NMEA 2000 message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.Level">
            <summary>
            Tank level in percent (100% = Full, 0% = empty)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.TankNumber">
            <summary>
            Instance number of the tank
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.Type">
            <summary>
            The type of fluid in the tank
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.TankVolume">
            <summary>
            The volume of the tank if full.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.ReplacesOlderInstance">
            <summary>
            Returns false for this message (because PCDIN messages are identified based on their inner message)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.SeaSmartFluidLevel.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.TimeDate">
            <summary>
            Represents one date and time message (GPZDA)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TimeDate.Id">
            <summary>
            Sentence ID of this message ZDA.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TimeDate.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TimeDate.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TimeDate.#ctor(System.DateTimeOffset)">
            <summary>
            See <see cref="T:Iot.Device.Nmea0183.Sentences.NmeaSentence"/> for constructor usage
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TimeDate.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TimeDate.ReverseDateFormat">
            <summary>
            True if the date format is using a reverse schema. GNSS receivers don't agree on whether the date is to be sent as
            day-month-year or year-month-day. Luckily, the year is always sent as 4-digit number, so that decoding is unambiguous.
            This field is used to reconstruct the same order for sending the message out.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TimeDate.LocalTimeOffset">
            <summary>
            Time offset of the local time from UTC:
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TimeDate.ToNmeaParameterList">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TimeDate.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.TrackMadeGood">
            <summary>
            VTG Sentence: Speed and course
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.Id">
            <summary>
            This sentence Id "VTG"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TrackMadeGood.#ctor(UnitsNet.Angle,System.Nullable{UnitsNet.Angle},UnitsNet.Speed)">
            <summary>
            Constructs a new VTG sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TrackMadeGood.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TrackMadeGood.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Creates a VTG sentence from decoded fields
            </summary>
            <param name="talkerId">Talker Id</param>
            <param name="fields">List of fields</param>
            <param name="time">Time this message was valid</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.CourseOverGroundTrue">
            <summary>
            Course over ground, degrees true
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.CourseOverGroundMagnetic">
            <summary>
            Course over ground, degrees magnetic.
            Note: Usually derived from <see cref="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.CourseOverGroundTrue"/>, the current position and a magnetic variation model.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TrackMadeGood.Speed">
            <summary>
            Speed over ground
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TrackMadeGood.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TrackMadeGood.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.TransducerDataSet">
            <summary>
            A single data set from an XDR sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.#ctor">
            <summary>
            Creates an empty instance
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.#ctor(System.String,System.Double,System.String,System.String)">
            <summary>
            Creates an instance filled with data.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerDataSet.Unit">
            <summary>
            The unit of the measurement
            Known values:
            - B (bar)
            - P (Pascal, Percentage)
            - D (degrees)
            - G (Acceleration, g-Force)
            - C (degrees Celsius)
            - M (Mass, Liters)
            - V (Voltage)
            - A (Ampere)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerDataSet.Value">
            <summary>
            The value of the measurement
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerDataSet.DataType">
            <summary>
            The data type of the measurement
            Known values:
            - A (Angle)
            - P (atmospheric Pressure)
            - C (Temperature)
            - H (Humidity)
            - V (Volume)
            - U (Voltage)
            - I (Current)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerDataSet.DataName">
             <summary>
             Name of the data set
             Known values (may differ by equipment vendor):
             - ENV_WATER_T
             - ENV_OUTAIR_T, TempAir
             - ENV_ATMOS_P, barometer
             - ENV_INSIDE_H
             - PTCH, PITCH
             - ROLL
             - YAW
             - ENGT - Engine temperature
             - FUEL
             - FRESHWATER
             - WASTEWATER
             - BLACKWATER
             - LIVEWELL
             - OIL
             - BATVOLT, BATCURR
            
             The above values may be followed by a #y, where y is the instance number (i.e. the tank number)
             </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.ToString">
            <summary>
            Content formatted as NMEA message part
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.ToReadableContent">
            <summary>
            Content as readable text
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.AsAngle">
            <summary>
            Returns the value of the current instance as angle.
            </summary>
            <returns>An angle, null if this instance is not an angle</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerDataSet.AsTemperature">
            <summary>
            Returns the value of the current instance as temperature.
            </summary>
            <returns>A temperature, null if this instance is not a temperature</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.TransducerMeasurement">
            <summary>
            Reading of a sensor, not covered by other sentences.
            This can include environmental values (temperature, pressure), tank levels, etc.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.#ctor(System.String,System.String,System.Double,System.String)">
            <summary>
            Constructs a new basic XDR sentence with a single data set.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.#ctor(System.Collections.Generic.IEnumerable{Iot.Device.Nmea0183.Sentences.TransducerDataSet})">
            <summary>
            Constructs a new basic XDR sentence with a list of data sets
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Decodes an XDR sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Decodes an XDR sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.ReplacesOlderInstance">
            <summary>
            False, because XDR sentences can contain a variety of elements
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.DataSets">
            <summary>
            Return the data sets of this message.
            The returned list is a read-only copy of the data sets and cannot be modified.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.FromRollAndPitch(UnitsNet.Angle,UnitsNet.Angle,UnitsNet.Angle)">
            <summary>
            Creates a sentence from roll and pitch angles
            </summary>
            <param name="roll">Roll angle (positive right or left wing up)</param>
            <param name="pitch">Pitch angle (positive nose up)</param>
            <param name="yaw">Yaw angle (heading)</param>
            <returns>A measurement sequence ready to send</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.TransducerMeasurement.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle">
            <summary>
            VHW sentence: Speed trough water and heading
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.#ctor(UnitsNet.Angle,UnitsNet.Angle,UnitsNet.Speed)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.HeadingTrue">
            <summary>
            True heading
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.HeadingMagnetic">
            <summary>
            Magnetic heading
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.Speed">
            <summary>
            Speed trough water
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WaterSpeedAndAngle.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.Waypoint">
            <summary>
            WPT sentence: Identifies a single waypoint (may be sent multiple times with different names)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.Waypoint.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.Waypoint.#ctor(Iot.Device.Common.GeographicPosition,System.String)">
            <summary>
            Constructs a new WPT sentence
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.Waypoint.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.Waypoint.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.Waypoint.ReplacesOlderInstance">
            <summary>
            Multiple instances sent in sequence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.Waypoint.Position">
            <summary>
            Position of waypoint
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.Waypoint.Name">
            <summary>
            Name of waypoint
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.Waypoint.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.Waypoint.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth">
            <summary>
            The MWD sequence gives the wind direction and speed in true directions. That means the direction is given in
            degrees from true north and the speed is the true wind speed. Calculating the input data for this sentence
            requires heading or, as a backup, COG. However, with COG, the data is unreliable when the ship is moored.
            See <see cref="T:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle"/> for relative wind directions (as measured by the wind instrument)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.#ctor(System.Nullable{UnitsNet.Angle},System.Nullable{UnitsNet.Angle},System.Nullable{UnitsNet.Speed})">
            <summary>
            Constructs a new MDA sentence
            </summary>
            <param name="trueWindDirection">Wind direction relative to true north</param>
            <param name="magneticWindDirection">Wind direction relative to magnetic north</param>
            <param name="windSpeed">Wind speed</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Decode a message
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.ReplacesOlderInstance">
            <summary>
            This is true for this message type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.TrueWindDirection">
            <summary>
            Wind direction, in degrees true, from north.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.MagneticWindDirection">
            <summary>
            Wind direction, in degrees magnetic, from north
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.WindSpeed">
            <summary>
            Wind Speed, true
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle">
            <summary>
            MWV sentence: Wind speed and wind angle (true or apparent)
            Note that the wind angle is always given relative to the ship's bow, so to get the wind direction
            in cardinal direction, the heading is required (or with some error, COG can be used).
            See <see cref="T:Iot.Device.Nmea0183.Sentences.WindDirectionWithRespectToNorth"/> for geographic wind direction.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.Id">
            <summary>
            This sentence's id
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.#ctor(UnitsNet.Angle,UnitsNet.Speed,System.Boolean)">
            <summary>
            Constructs a new MWV sentence
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.ReplacesOlderInstance">
            <summary>
            Sent twice: With true and with apparent wind
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.#ctor(Iot.Device.Nmea0183.TalkerSentence,System.DateTimeOffset)">
            <summary>
            Internal constructor
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.#ctor(Iot.Device.Nmea0183.TalkerId,System.Collections.Generic.IEnumerable{System.String},System.DateTimeOffset)">
            <summary>
            Date and time message (ZDA). This should not normally need the last time as argument, because it defines it.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.Angle">
            <summary>
            Angle of the wind
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.Speed">
            <summary>
            Wind speed
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.Relative">
            <summary>
            True if the values are relative, false if they are absolute
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.SpeedUnit">
            <summary>
            Unit of speed: "M" for m/s, "N" for knots.
            The same message is sometimes sent with both units, so we might want to keep the difference.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.ToNmeaParameterList">
            <summary>
            Presents this message as output
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Sentences.WindSpeedAndAngle.ToReadableContent">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AidToNavigation">
            <summary>
            An Aid-To-Navigation or AtoN target.
            There are two kinds of AtoN targets:
            - Physical targets. These are Buoys or lighthouses that are equipped with AIS transmitters so they can be easier located.
            - Virtual targets. The transmitter is located somewhere else, reporting a buoy in open water. No real buoy needs to be there.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AidToNavigation.#ctor(System.UInt32)">
            <summary>
            Create an AtoN target
            </summary>
            <param name="mmsi">The MMSI</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.DimensionToBow">
            <summary>
            Dimension of the target from the transmitter to its bow. Since most AtoN targets are navigational marks, this is usually not set.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.DimensionToStern">
            <summary>
            Dimension of the target from the transmitter to its stern. Since most AtoN targets are navigational marks, this is usually not set.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.DimensionToPort">
            <summary>
            Dimension of the target from the transmitter to its port side. Since most AtoN targets are navigational marks, this is usually not set.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.DimensionToStarboard">
            <summary>
            Dimension of the target from the transmitter to its starboard side. Since most AtoN targets are navigational marks, this is usually not set.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.Length">
            <summary>
            The length of the object
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.Beam">
            <summary>
            The beam of the object
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.OffPosition">
            <summary>
            True if the beacon is off position. Can only happen for real AtoN targets.
            If this is true, caution is advised, because the beacon is floating in a wrong
            position, endangering ships, and it's missing where it should be.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.Virtual">
            <summary>
            True if this is a virtual aid-to-navigation target. There's typically no
            visible buoy at the given position, and the signal is sent from a remote base station.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AidToNavigation.NavigationalAidType">
            <summary>
            The type of navigational aid this target indicates.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisMessageType">
            <summary>
            The type of an AIS message (encoded in the message header)
            Do not change the enum values, these are required to decode the messages!
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisParser">
            <summary>
            This is the low-level AIS message decoder.
            It converts the AIVDM/AIVDO messages into an instance of a subclass of <see cref="T:Iot.Device.Nmea0183.Ais.AisMessage"/>
            </summary>
            <remarks>
            The class is internal, as users are highly recommended to use the high-level abstraction provided by <see cref="T:Iot.Device.Nmea0183.AisManager"/> instead.
            </remarks>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisParser.GeneratedSentencesId">
            <summary>
            Which <see cref="T:Iot.Device.Nmea0183.SentenceId"/> generated AIS messages should get. Meaningful values are <see cref="F:Iot.Device.Nmea0183.Ais.AisParser.VdmId"/> or <see cref="F:Iot.Device.Nmea0183.Ais.AisParser.VdoId"/>.
            Default is "VDO"
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisParser.Parse(System.String)">
            <summary>
            Decode an AIS sentence from a raw NMEA0183 string, with data verification.
            </summary>
            <param name="sentence">The sentence to decode</param>
            <returns>An AIS message or null if the message is valid, but unrecognized</returns>
            <exception cref="T:System.ArgumentNullException">Sentence is null</exception>
            <exception cref="T:System.FormatException">The message could not be parsed</exception>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisSafetyState">
            <summary>
            Defines how safe a given target is in relation to typically our own vessel.
            Safe here means that there's little risk of a collision within the defined safety bounds (e.g. the ship is more than 5 minutes away)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisSafetyState.Unknown">
            <summary>
            It's not known whether this ship comes close
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisSafetyState.Safe">
            <summary>
            The ship is moving away from us or it is very far away
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisSafetyState.Dangerous">
            <summary>
            There's an imminent risk of collision with this ship
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisSafetyState.Lost">
            <summary>
            The other target is lost, meaning there was no recent position update from that ship.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisSafetyState.FarAway">
            <summary>
            The other target is so far away or the relative speed is so low, that (T)CPA calculations wouldn't be meaningful.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisTarget">
            <summary>
            Abstract base class for all types of AIS targets
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTarget.#ctor(System.UInt32)">
            <summary>
            Constructs a new AIS target.
            </summary>
            <param name="mmsi">MMSI of the new target</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.Mmsi">
            <summary>
            The MMSI (maritime service identification number) of this target. This is the key element in all messages to identify
            who sent a message.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.LastSeen">
            <summary>
            The time when we received the last message from this target. When this is an estimated instance, this gives
            the time of the current estimate.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.IsEstimate">
            <summary>
            Returns true if this instance contains estimates (e.g. over a future position of a vessel)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.Name">
            <summary>
            The name of the target. This is nullable, to be able to differentiate between targets whose name
            was not yet received (e.g. no <see cref="T:Iot.Device.Nmea0183.AisSentences.PositionReportClassAMessage"/> was seen) and targets that actually send an empty name.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.Position">
            <summary>
            The last known position of the target
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.SuppressionTime">
            <summary>
            Warnings regarding this target are suppressed until this time elapses.
            Helpful if a specific target is close but well observed and warnings about this target are annoying and disturb from other possible dangers.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.AisTarget.RelativePosition">
            <summary>
            The relative position and collision information with respect to our ship (e.g. distance, CPA, TCPA)
            Only valid if calculated by enabling <see cref="M:Iot.Device.Nmea0183.AisManager.EnableAisAlarms(System.Boolean,Iot.Device.Nmea0183.Ais.TrackEstimationParameters)"/>.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTarget.ToString">
            <summary>
            Creates a string representation of this target
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTarget.NameOrMssi">
            <summary>
            Returns the name of the ship if available, the MMSI or some other identification otherwise
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTarget.FormatMmsi">
            <summary>
            Returns the MMSI in user-readable format (always 9 digits).
            The first three non-zero digits are the country code of the target (for a ship, that defines the flag it flies)
            </summary>
            <returns>The MMSI as string</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTarget.IdentifyMmsiType">
            <summary>
            Tries to identify the type of target from the MMSI.
            Some MMSI numbers are reserved for special targets. This method decodes that.
            </summary>
            <returns>The <see cref="T:Iot.Device.Nmea0183.Ais.MmsiType"/> of this target.</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisTargetExtensions">
            <summary>
            Extension methods on AIS targets
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.DistanceTo(Iot.Device.Nmea0183.Ais.AisTarget,Iot.Device.Nmea0183.Ais.AisTarget)">
            <summary>
            Calculates the distance to another target
            </summary>
            <param name="self">First target</param>
            <param name="other">Other target</param>
            <returns>The distance between the two targets, based on their last known position</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.Age(Iot.Device.Nmea0183.Ais.AisTarget,System.DateTimeOffset)">
            <summary>
            Returns the age of this target, relative to the indicated time.
            </summary>
            <param name="self">The target under investigation</param>
            <param name="toTime">The time to compare to (often <see cref="P:System.DateTimeOffset.UtcNow"/>)</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.RelativePositionTo(Iot.Device.Nmea0183.Ais.Ship,Iot.Device.Nmea0183.Ais.AisTarget,System.DateTimeOffset,Iot.Device.Nmea0183.Ais.TrackEstimationParameters)">
            <summary>
            Calculates the relative position data set to another vessel.
            </summary>
            <param name="self">Our own vessel</param>
            <param name="other">The other ship or target (can also be a stationary target, such as an <see cref="T:Iot.Device.Nmea0183.Ais.AidToNavigation"/> instance)</param>
            <param name="now">The time at which the comparison occurs. Typically now, but it is also possible to estimate the dangers at another time. When playing
            back old data, this must correspond to the playback time</param>
            <param name="parameters">The parameters used for the calculation</param>
            <returns>An instance of <see cref="T:Iot.Device.Nmea0183.Ais.ShipRelativePosition"/> with all possible fields filled out.</returns>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.RelativePositionsTo(Iot.Device.Nmea0183.Ais.Ship,System.Collections.Generic.IEnumerable{Iot.Device.Nmea0183.Ais.AisTarget},System.DateTimeOffset,Iot.Device.Nmea0183.Ais.TrackEstimationParameters)">
            <summary>
            Calculates the relative positions and the collision vectors from one ship to a group of targets.
            The algorithm used is inspired by https://core.ac.uk/download/74237799.pdf
            </summary>
            <param name="self">The own ship</param>
            <param name="others">The list of visible AIS targets</param>
            <param name="now">The current time (or the time the data is valid for)</param>
            <param name="parameters">Parameters controlling the accuracy and speed of the calculation</param>
            <returns>A list of relative positions between our ship and the targets. Targets without a valid position are skipped.</returns>
            <exception cref="T:System.ArgumentException">Our ship has no valid position</exception>
            <exception cref="T:System.IO.InvalidDataException">An internal error occurred</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.EstimatePosition(Iot.Device.Nmea0183.Ais.MovingTarget,System.TimeSpan,System.TimeSpan)">
            <summary>
            Estimates where a ship will be after some time.
            </summary>
            <param name="ship">The ship to extrapolate</param>
            <param name="extrapolationTime">How much time shall pass. Very large values are probably useless, because the ship might start a turn.</param>
            <param name="stepSize">The extrapolation step size. Smaller values will lead to better estimation, but are computationally expensive</param>
            <returns>A <see cref="T:Iot.Device.Nmea0183.Ais.Ship"/> instance with the estimated position and course</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Stepsize is not positive</exception>
            <remarks>The reference time is the position/time the last report was received from this ship. To be able to compare two ships, the
            times still need to be aligned. Use the overload <see cref="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.EstimatePosition(Iot.Device.Nmea0183.Ais.MovingTarget,System.DateTimeOffset,System.TimeSpan)"/> if you
            want to estimate the ship position at a certain position in time.</remarks>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.EstimatePosition(Iot.Device.Nmea0183.Ais.MovingTarget,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Estimates where a ship will at a certain time.
            </summary>
            <param name="ship">The ship to extrapolate</param>
            <param name="time">The time at which the position shall be estimated. The estimate is better the closer this time is to the last position
            of the ship.</param>
            <param name="stepSize">The extrapolation step size. Smaller values will lead to better estimation, but are computationally expensive</param>
            <returns>A <see cref="T:Iot.Device.Nmea0183.Ais.Ship"/> instance with the estimated position and course</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Stepsize is not positive</exception>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.AisTargetExtensions.GetEstimatedTrack(Iot.Device.Nmea0183.Ais.MovingTarget,System.DateTimeOffset,System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Calculate a track estimation for a ship
            </summary>
            <param name="ship">The ship to move</param>
            <param name="startTime">The time at which the track should start (may be in the past)</param>
            <param name="endTime">The time at which the track should end</param>
            <param name="stepSize">The step size of the returned track</param>
            <returns>A list of targets (for each estimated position from <paramref name="startTime"/> to <paramref name="endTime"/>).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Stepsize is to small or negative</exception>
            <exception cref="T:System.ArgumentException">Start time is after end time</exception>
            <remarks>The calculation of this track may be expensive, when the timespan between start and end is large or stepSize is small. Or when the
            timespan is far from the time the ship was last seen.</remarks>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.AisTransceiverClass">
            <summary>
            The type of AIS transceiver used by a vessel.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisTransceiverClass.Unknown">
            <summary>
            The type is unknown (neither A nor B, e.g. an AtoN target)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisTransceiverClass.A">
            <summary>
            Transceiver class A, large ships and professional traffic
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.AisTransceiverClass.B">
            <summary>
            Transceiver class B, used mostly by pleasure craft and yachts.
            Class B transceivers do not send voyage related information, but are cheaper to buy.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.BaseStation">
            <summary>
            A base station target.
            These targets identify the position of a base-station antenna, and therefore are the only AIS targets
            that typically reside on land. Such a target in range typically means that channel 16 is supervised and that traffic is controlled.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.BaseStation.BaseStationName">
            <summary>
             Base stations have no name in their data (just the country identifier)
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.BaseStation.#ctor(System.UInt32)">
            <summary>
            construct a base station instance.
            </summary>
            <param name="mmsi">The MMSI of the base station. Shall start with 00</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.BaseStation.ToString">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.GnssPositionStatus">
            <summary>
            Status of the GNSS receiver of this target
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.GnssPositionStatus.CurrentGnssPosition">
            <summary>
            GNSS valid
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.GnssPositionStatus.NotGnssPosition">
            <summary>
            GNSS position not valid
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.ManeuverIndicator">
            <summary>
            Used to indicate that a vessel is performing special maneuvers
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ManeuverIndicator.NotAvailable">
            <summary>
            Not set (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ManeuverIndicator.NoSpecialManeuver">
            <summary>
            Not doing anything special
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ManeuverIndicator.SpecialManeuver">
            <summary>
            Carrying out a special maneuver
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.MmsiType">
             <summary>
             Returned when trying to identify the type of MMSI. A normal 9-digit MMSI is a ship, one that starts
             with a 0 is a special group code, one starting with 00 is a base station. See <see cref="M:Iot.Device.Nmea0183.Ais.AisTarget.IdentifyMmsiType"/> for details.
             </summary>
             <remarks>
             Any system that uses AIS-Sart, MOB or Epirb type is only activated in case of an emergency. When receiving any message from such
             a transmitter an alert should be generated and the nearest MRCC should be contacted immediately. Somebody might be in imminent danger!
            
             Some of these types are rarely or only in very limited areas used.
             </remarks>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Unknown">
            <summary>
            The MMSI uses a reserved range.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Ship">
            <summary>
            This is the default
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Group">
            <summary>
            A group of ships (e.g. all SAR vessels in range)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.BaseStation">
            <summary>
            A base station uses this ID, e.g DSC broadcast messages from rescue coordination centers (M)RCC
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.SarAircraft">
            <summary>
            A SAR aircraft/helicopter
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.AtoN">
            <summary>
            Aid-to-navigation AIS transponder. These typically are boys sending out AIS messages, so they can be found in fog.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Auxiliary">
            <summary>
            The vessel is an auxiliary vessel of another.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.AisSart">
            <summary>
            This is an AIS-SART transponder.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Mob">
            <summary>
            An (increasingly popular) AIS-MOB device was activated.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.Epirb">
            <summary>
            Similar to the above: An Epirb with Ais was activated.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.MmsiType.DiversRadio">
            <summary>
            Handheld radio of a diver
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.MovingTarget">
            <summary>
            Base class for moving targets
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.MovingTarget.#ctor(System.UInt32)">
            <summary>
            A moving target
            </summary>
            <param name="mmsi">The MMSI</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.MovingTarget.RateOfTurn">
            <summary>
            The rate of turn of the vessel. May be null, because particularly smaller vessels do not have the sensor for this.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.MovingTarget.CourseOverGround">
            <summary>
            Course over ground, GNSS derived
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.MovingTarget.SpeedOverGround">
            <summary>
            Speed over ground, GNSS derived
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.MovingTarget.TrueHeading">
            <summary>
            Heading relative to true north. May be null, because not all vessels are equipped with the necessary heading sensor.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.NavigationalAidType">
            <summary>
            Type of navigational aid for AtoN targets.
            Aid types 1-19 are for fixed targets, 20-31 for floating targets (buoys)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.NotSpecified">
            <summary>
            Unknown type. This should not be used
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.ReferencePoint">
            <summary>
            A navigation point
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.Racon">
            <summary>
            A Racon. That is a target that has a very good radar response
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.FixedStructureOffShore">
            <summary>
            A fixed off-shore structure (oil platform, wind farm, etc)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.Spare">
            <summary>
            Spare value
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.LightWithoutSectors">
            <summary>
            A lighthouse without sectors
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.LightWithSectors">
            <summary>
            A lighthouse with sectors
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.LeadingLightFront">
            <summary>
            A leasing light, front
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.LeadingLigthRear">
            <summary>
            A leading light, rear
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconCardinalN">
            <summary>
            Cardinal north beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconCardinalE">
            <summary>
            Cardinal east beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconCardinalS">
            <summary>
            Cardinal south beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconCardinalW">
            <summary>
            Cardinal west beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconPortHand">
            <summary>
            A port-hand beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconStarboardHand">
            <summary>
            A starboard-hand beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconPreferredChannelPortHand">
            <summary>
            A port-hand beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconPreferredChannelStarboardHand">
            <summary>
            A starboard-hand beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconIsolatedDanger">
            <summary>
            An isolated-danger beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconSafeWater">
            <summary>
            Safe water/approach beacon
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.BeaconSpecialMark">
            <summary>
            Special beacon (yellow)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.CardinalMarkN">
            <summary>
            North cardinal mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.CardinalMarkE">
            <summary>
            East cardinal mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.CardinalMarkS">
            <summary>
            South cardinal mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.CardinalMarkW">
            <summary>
            West cardinal mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.PortHandMark">
            <summary>
            Port hand mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.StarboardHandMark">
            <summary>
            Starboard hand mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.PreferredChannelPortHand">
            <summary>
            Port hand channel mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.PreferredChannelStarboardHand">
            <summary>
            Starboard hand channel mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.IsolatedDanger">
            <summary>
            Isolated danger mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.SafeWater">
            <summary>
            Safe water/approach mark
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.SpecialMark">
            <summary>
            Special mark (yellow)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationalAidType.LightVessel">
            <summary>
            A light ship
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.NavigationStatus">
            <summary>
            The navigation status defines what the ship is currently doing. This information is relevant for the determination of the relevant rules
            for the collision avoidance regulations (COLREGS)
            Only class A type transceivers provide this field
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.UnderWayUsingEngine">
            <summary>
            A ship using its engine. These have the lowest priority.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.AtAnchor">
            <summary>
            The ship is at anchor
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.NotUnderCommand">
            <summary>
            The ship is not under command. This is used by ships that have lost their propulsion or have a steering problem.
            Ships showing this state must be avoided
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.RestrictedManeuverability">
            <summary>
            The ship has restricted maneuverability. The ship may be performing underwater operations or may otherwise not be free to stay clear.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ConstrainedByHerDraught">
            <summary>
            The ship is constrained by her draught. Used by large ships in narrow channels.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.Moored">
            <summary>
            The ship is moored in port.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.Aground">
            <summary>
            The ship is aground. Not good.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.EngagedInFishing">
            <summary>
            The ship is fishing. These ships have precedence and are restricted in maneuverability. Avoid sailing right behind such a ship,
            as it may be dragging nets.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.UnderWaySailing">
            <summary>
            This is a sailing vessel that is currently sailing. Has precedence over ships under engine. This status is relatively rare, since
            there are not so many sailing vessels with class A transceivers.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ReservedForFutureAmendmentOfNavigationalStatusForHsc">
            <summary>
            Reserved, may be used for high speed craft
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ReservedForFutureAmendmentOfNavigationalStatusForWig">
            <summary>
            Reserved, may be used for wing-in-ground aircraft
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ReservedForFutureUse1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ReservedForFutureUse2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.ReservedForFutureUse3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.AisSartIsActive">
            <summary>
            Ais Sart target. Seing a target of this type most likely means there's a man overboard!
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.NavigationStatus.NotDefined">
            <summary>
            Not set
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.Payload">
            <summary>
            Represents the payload part of an AIS message, in form of a bit-string (a string containing only the values "0" or "1")
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Payload.Length">
            <summary>
            The length of the payload. This is given in bits!
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Payload.WriteInt(System.Int32,System.Int32)">
            <summary>
            Writes out an integer
            </summary>
            <param name="value">The value to write</param>
            <param name="length">The minimum number of digits</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Payload.WriteUnsignedDouble(System.Double,System.Int32)">
            <summary>
            Writes out the whole part of a double number
            </summary>
            <param name="value">The value to write</param>
            <param name="length">The minimum number of digits to write</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Payload.WriteDouble(System.Double,System.Int32)">
            <summary>
            Writes the value as base-two integer. Used to write latitude/longitude values
            </summary>
            <param name="value">The value to write</param>
            <param name="length">The length of the field</param>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Payload.WriteString(System.String,System.Int32,System.Boolean)">
            <summary>
            Writes the given string as 6-bit encoded ascii to the payload
            </summary>
            <param name="data">The string to write. Only a subset of the ascii characters is allowed, other letters will be replaced</param>
            <param name="length">The maximum length to write, in bits. Must be a multiple of 6</param>
            <param name="padToLength">True to pad the payload to the given length, false otherwise</param>
            <returns>The number of bits written</returns>
            <exception cref="T:System.ArgumentException">The length is not a multiple of 6</exception>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.PositionAccuracy">
            <summary>
            Position accuracy of the GNSS position. With today's GNSS receivers, anything other than High is strange.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionAccuracy.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionAccuracy.High">
            <summary>
            High
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.PositionFixType">
            <summary>
            Type of position fix
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Undefined1">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Gps">
            <summary>
            GPS
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Glonass">
            <summary>
            Glonass
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.CombinedGpsAndGlonass">
            <summary>
            GPS and Glonass
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.LoranC">
            <summary>
            LoranC (Not in use any more)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Chayka">
            <summary>
            Chayka, russian navigation system similar to Loran-C
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.IntegratedNavigationSystem">
            <summary>
            Integrated navigation system, taking many sensors into account
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Surveyed">
            <summary>
            The position was surveyed (for a fixed target)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Galileo">
            <summary>
            Galileo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.PositionFixType.Undefined2">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.Raim">
            <summary>
            The RAIM flag indicates whether Receiver Autonomous Integrity Monitoring is being used
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.Raim.NotInUse">
            <summary>
            Raim is not in use (default)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.Raim.InUse">
            <summary>
            Raim is in use
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.SarAircraft">
            <summary>
            This target is a SAR aircraft.
            These are typically very fast moving targets (100 knots or more)
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.SarAircraft.SarAircraftName">
            <summary>
            Unfortunately, the sar message does not include a "name" field.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.SarAircraft.#ctor(System.UInt32)">
            <summary>
            Create a new SAR aircraft target
            </summary>
            <param name="mmsi">MMSI</param>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.Ship">
            <summary>
            A ship. This is the default AIS target type.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Ship.#ctor(System.UInt32)">
            <summary>
            Create a ship.
            </summary>
            <param name="mmsi">The MMSI</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.CallSign">
            <summary>
            The call sign. A sequence of up to 7 letters or numbers, without blanks. Empty if unknown
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.ShipType">
            <summary>
            The ship type
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToBow">
            <summary>
            The distance from the GNSS antenna to the bow.
            </summary>
            <remarks>Since a ship can be several 100 meters long, it is important to know the position of the GNSS antenna used for AIS
            relative to its hull. Note that the information in these properties is often not correct.</remarks>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToStern">
            <summary>
            The distance from the GNSS antenna to the stern. See remarks under <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToBow"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToPort">
            <summary>
            The distance from the GNSS antenna to the port side. See remarks under <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToBow"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToStarboard">
            <summary>
            The distance from the GNSS antenna to the starboard side. See remarks under <see cref="P:Iot.Device.Nmea0183.Ais.Ship.DimensionToBow"/>
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.TransceiverClass">
            <summary>
            The transceiver type this target uses.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.Length">
            <summary>
            The length of the vessel
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.Beam">
            <summary>
            The beam of the vessel
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.EstimatedTimeOfArrival">
            <summary>
            Estimated time of arrival at the destination. Ships without a designated destinations or with recurring destinations often use a dummy value, such as January 1st, midnight
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.Destination">
            <summary>
            A text for the destination, often abbreviated.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.Draught">
            <summary>
            The current draught of the vessel. For large cargo vessels, this may be very variable.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.ImoNumber">
            <summary>
            The IMO number of the ship
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.Ship.NavigationStatus">
            <summary>
            Navigation status, see there
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.Ship.ToString">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.ShipRelativePosition">
            <summary>
            Contains comparative position information between two ships, such as distance, bearing or estimated time to closest encounter.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.ShipRelativePosition.#ctor(Iot.Device.Nmea0183.Ais.AisTarget,Iot.Device.Nmea0183.Ais.AisTarget,UnitsNet.Length,UnitsNet.Angle,Iot.Device.Nmea0183.Ais.AisSafetyState,System.DateTimeOffset)">
            <summary>
            Relative position instance
            </summary>
            <param name="from">Source vessel</param>
            <param name="to">Target vessel</param>
            <param name="distance">Current distance between these vessels</param>
            <param name="bearing">Bearing from first vessel to second</param>
            <param name="state">Safety state between these vessels</param>
            <param name="calculationTime">Time this record was calculated</param>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.From">
            <summary>
            Ship from which this relative position is seen (typically the own ship, but of course it's also possible to
            calculate possible collision vectors between arbitrary ships)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.To">
            <summary>
            Ship to which this relative position is calculated
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.Distance">
            <summary>
            The current distance between the ships
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.Bearing">
            <summary>
            The bearing between the sips (Compass direction from <see cref="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.From"/> to <see cref="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.To"/>)
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.RelativeDirection">
            <summary>
            Direction in which the other ship is seen from <see cref="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.From"/> when looking to the bow. A negative value means the other
            ship is on the port bow, a positive value on the starboard bow. Only available if the source ship has a valid heading.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.ClosestPointOfApproach">
            <summary>
            Distance at closest point of approach
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.TimeOfClosestPointOfApproach">
            <summary>
            Time at which the closest point will be reached
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.SafetyState">
            <summary>
            Safety state
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.ShipRelativePosition.CalculationTime">
            <summary>
            The time this record was calculated.
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.ShipRelativePosition.TimeToClosestPointOfApproach(System.DateTimeOffset)">
            <summary>
            Calculate the time of closes approach with a given "now"
            </summary>
            <param name="now">This is the current time</param>
            <returns>Time from now to TCPA</returns>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.ShipType">
            <summary>
            The type of a ship.
            This identifies the static type of a ship. It gives a rough estimate of how the ship looks like and what it's typically used for.
            This is conceptually a flag-type listing. The least significant digit (in base-10 notation) gives information about any
            dangerous cargo carried. This does not apply for the range 30-39.
            Dangerous cargo is anything that would hurt the environment if it were spoiled.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.NotAvailable">
            <summary>
            The ship type has not been specified
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGround">
            <summary>
            Wing-in-ground aircraft. Very rare
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundHazardousCategoryA">
            <summary>
            Wing-in-ground aircraft, carrying hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundHazardousCategoryB">
            <summary>
            Wing-in-ground aircraft, carrying hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundHazardousCategoryC">
            <summary>
            Wing-in-ground aircraft, carrying hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundHazardousCategoryD">
            <summary>
            Wing-in-ground aircraft, carrying hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.WingInGroundReserved5">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Fishing">
            <summary>
            This is a fishing vessel. A vessel equipped with a category A transceiver should also set the <see cref="T:Iot.Device.Nmea0183.Ais.NavigationStatus"/> to
            <see cref="F:Iot.Device.Nmea0183.Ais.NavigationStatus.EngagedInFishing"/> when actually fishing.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Tow">
            <summary>
            This is a tow
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TowLarge">
            <summary>
            This is a tow, whose length exceeds 200m or breadth exceeds 25m. The change between Tow/Tug and TowLarge is the only dynamic change of
            the ship type that is common.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Dredger">
            <summary>
            This vessel performs dredging or other underwater operations
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.DivingOps">
            <summary>
            This vessel typically engages in diving operations
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.MilitaryOps">
            <summary>
            This is a military vessel. Note that military vessels may have strange MMSI codes or otherwise confusing information.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Sailing">
            <summary>
            This is a sailing vessel. Used for both sailing yachts as well as large sailboats. Vessels equipped with a class A transceiver should use
            <see cref="F:Iot.Device.Nmea0183.Ais.NavigationStatus.UnderWaySailing"/> when they're actually underway using their sails. Some sailing yachts also use <see cref="F:Iot.Device.Nmea0183.Ais.ShipType.PleasureCraft"/>
            as ship type instead.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PleasureCraft">
            <summary>
            A pleasure boat. May be both a power boat or a sailboat. These vessels usually have only a class B transceiver.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Reserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraft">
            <summary>
            A high-speed vessel. Mostly used for high-speed passenger ferries.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftHazardousCategoryA">
            <summary>
            A high-speed vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftHazardousCategoryB">
            <summary>
            A high-speed vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftHazardousCategoryC">
            <summary>
            A high-speed vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftHazardousCategoryD">
            <summary>
            A high-speed vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.HighSpeedCraftNoAdditionalInformation">
            <summary>
            A high-speed vessel, but no additional info given
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PilotVessel">
            <summary>
            A pilot vessel. These (typically small) vessels distribute pilots to large ships near a pilot boarding point.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.SearchAndRescueVessel">
            <summary>
            A search-and-rescue vessel. These vessels are tasked in emergencies to recover people from sinking ships or to tow someone to safety.
            Very helpful if one is close if you are in need!
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Tug">
            <summary>
            A tug. May be pushing/pulling a platform
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PortTender">
            <summary>
            A port tender.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.AntiPollutionEquipment">
            <summary>
            An anti-pollution vessel. Used to collect garbage from the sea or to collect spilled oil.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.LawEnforcement">
            <summary>
            A law enforcement vessel. Police or border patrol.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.SpareLocalVessel1">
            <summary>
            Spare
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.SpareLocalVessel2">
            <summary>
            Spare
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.MedicalTransport">
            <summary>
            A medical transport vessel
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.NonCombatantShip">
            <summary>
            Ship not engaged in a war. Rare.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Passenger">
            <summary>
            A passenger vessel.
            Can be anything from a small passenger ferry to a large cruise ship.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerHazardousCategoryA">
            <summary>
            A passenger vessel carrying dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerHazardousCategoryB">
            <summary>
            A passenger vessel carrying dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerHazardousCategoryC">
            <summary>
            A passenger vessel carrying dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerHazardousCategoryD">
            <summary>
            A passenger vessel carrying dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.PassengerNoAdditionalInformation">
            <summary>
            A passenger vessel with no further information
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Cargo">
            <summary>
            All types of cargo vessels. Can be any size.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoHazardousCategoryA">
            <summary>
            A cargo vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoHazardousCategoryB">
            <summary>
            A cargo vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoHazardousCategoryC">
            <summary>
            A cargo vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoHazardousCategoryD">
            <summary>
            A cargo vessel with dangerous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.CargoNoAdditionalInformation">
            <summary>
            A cargo vessel, no additional information
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.Tanker">
            <summary>
            A tanker. A cargo ship that caries oil or other fluids, sometimes also gas.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerHazardousCategoryA">
            <summary>
            A tanker with hazardous cargo. Most tankers do carry at least some hazardous cargo.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerHazardousCategoryB">
            <summary>
            A tanker with hazardous cargo. Most tankers do carry at least some hazardous cargo.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerHazardousCategoryC">
            <summary>
            A tanker with hazardous cargo. Most tankers do carry at least some hazardous cargo.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerHazardousCategoryD">
            <summary>
            A tanker with hazardous cargo. Most tankers do carry at least some hazardous cargo.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.TankerNoAdditionalInformation">
            <summary>
            A tanker without additional information
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherType">
            <summary>
            A special type of ship not matching any of the previous categories
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeHazardousCategoryA">
            <summary>
            Other type, hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeHazardousCategoryB">
            <summary>
            Other type, hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeHazardousCategoryC">
            <summary>
            Other type, hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeHazardousCategoryD">
            <summary>
            Other type, hazardous cargo
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeReserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeReserved2">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeReserved3">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeReserved4">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.ShipType.OtherTypeNoAdditionalInformation">
            <summary>
            Other type, no additional information
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.SixBitAsciiEncoding">
            <summary>
            Converts an input character string to six-bit ascii, as used in AIS string fields.
            Only supports uppercase letters, numbers and a few symbols.
            </summary>
        </member>
        <member name="F:Iot.Device.Nmea0183.Ais.SixBitAsciiEncoding._decodingDictionary">
            <summary>
            From 6-bit to unicode
            </summary>
        </member>
        <member name="M:Iot.Device.Nmea0183.Ais.SixBitAsciiEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode chars to bytes.
            This will return 8-bit bytes, which will later typically be compressed to 6 bit.
            The method always returns <paramref name="charCount"/> bytes.
            </summary>
        </member>
        <member name="T:Iot.Device.Nmea0183.Ais.TrackEstimationParameters">
            <summary>
            Configurable parameters that define the behavior of the AIS Manager: Movement estimation, Warning distances, etc.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.StartTimeOffset">
            <summary>
            How much time to calculate backwards. Default: 20 minutes
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.NormalStepSize">
            <summary>
            Default step size. Default: 10 seconds
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.EndTimeOffset">
            <summary>
            How much to calculate ahead. Default: 1 hour
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarnIfGnssMissing">
            <summary>
            True to issue a warning if no position data for the own ship is available. Default: true
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.AisSafetyCheckInterval">
            <summary>
            Time span between AIS safety checks. Default: 5 seconds
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarningDistance">
            <summary>
            Minimum CPA distance to issue a warning. Default: 1 nm.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarningTime">
            <summary>
            Minimum TCPA to issue a warning (when <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarningDistance"/> is also reached). Default: 10 minutes
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.TargetLostTimeout">
            <summary>
            Maximum age of the position record for a given ship to consider it valid.
            If this is set to a high value, there's a risk of calculating TCPA/CPA based on outdated data. Default: 5 minutes
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.MaximumPositionAge">
            <summary>
            Maximum age of our own position to consider it valid. Default: 20 seconds.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.VesselLostWarningRange">
            <summary>
            Warn if a vessel is lost within this range. Default: 1 nm
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.VesselLostMinSpeed">
            <summary>
            Even if a vessel is lost within <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.VesselLostWarningRange"/>, do not warn if
            the last known speed was less than this. This prevents a lot of warnings from
            people switching off their AIS while moored. Set to null to disable. Default: 0.5 knots
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.DeleteTargetAfterTimeout">
            <summary>
            If a target has not been updated for this time, it is deleted from the list of valid targets.
            Additionally, client software should consider targets as lost whose <see cref="P:Iot.Device.Nmea0183.Ais.AisTarget.LastSeen"/> value is older than 5 minutes or so.
            A value of 0 or less means infinite. Default: 20 minutes.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.WarningRepeatTimeout">
            <summary>
            Time between repeats of the same warning. If this is set to a short value, the same proximity warning will be shown very often,
            which is typically annoying. Default: 10 minutes.
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.CleanupLatency">
            <summary>
            Controls how often lost targets are removed completely from the target list. The timespan after which a target is considered lost
            is controlled via <see cref="P:Iot.Device.Nmea0183.Ais.TrackEstimationParameters.TargetLostTimeout"/>. Default: 25 minutes
            </summary>
        </member>
        <member name="P:Iot.Device.Nmea0183.AisSentences.BinaryBroadcastMessage.Data">
            <summary>
            Binary payload, as string of "0" and "1"
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.Command">
            <summary>
            nRF24L01 Command
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_R_REGISTER">
            <summary>
            Read Register Command
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_W_REGISTER">
            <summary>
            Write Register Command
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_R_RX_PAYLOAD">
            <summary>
            Read RX Payload
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_W_TX_PAYLOAD">
            <summary>
            Write TX Payload
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_FLUSH_TX">
            <summary>
            Flush TX FIFO
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_FLUSH_RX">
            <summary>
            Flush RX FIFO
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_REUSE_TX_PL">
            <summary>
            Reuse Last Transmitted Payload
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Command.NRF_NOP">
            <summary>
            No Operation
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.DataRate">
            <summary>
            nRF24L01 Send Data Rate
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.DataRate.Rate1Mbps">
            <summary>
            1Mbps
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.DataRate.Rate2Mbps">
            <summary>
            2Mbps
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.DataReceivedEventArgs">
            <summary>
            nRF24L01 Data Received Event Args
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.DataReceivedEventArgs.Data">
            <summary>
            nRF24L01 Received Data
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.DataReceivedEventArgs.#ctor(System.Byte[])">
            <summary>
            Constructs DataReceivedEventArgs instance
            </summary>
            <param name="data">Data received</param>
        </member>
        <member name="T:Iot.Device.Nrf24l01.Nrf24l01">
            <summary>
            Single chip 2.4 GHz Transceiver nRF24L01
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.PacketSize">
            <summary>
            nRF24L01 Receive Packet Size
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Address">
            <summary>
            nRF24L01 Send Address
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Channel">
            <summary>
            nRF24L01 Working Channel
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.OutputPower">
            <summary>
            nRF24L01 Output Power
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.DataRate">
            <summary>
            nRF24L01 Send Rate
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.PowerMode">
            <summary>
            nRF24L01 Power Mode
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.WorkingMode">
            <summary>
            nRF24L01 Working Mode
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe0">
            <summary>
            nRF24L01 Pipe 0
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe1">
            <summary>
            nRF24L01 Pipe 1
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe2">
            <summary>
            nRF24L01 Pipe 2
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe3">
            <summary>
            nRF24L01 Pipe 3
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe4">
            <summary>
            nRF24L01 Pipe 4
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01.Pipe5">
            <summary>
            nRF24L01 Pipe 5
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Nrf24l01.SpiClockFrequency">
            <summary>
            NRF24L01 SPI Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.Nrf24l01.SpiMode">
            <summary>
            NRF24L01 SPI Mode
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Byte,System.Byte,Iot.Device.Nrf24l01.OutputPower,Iot.Device.Nrf24l01.DataRate,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Creates a new instance of the nRF24L01.
            </summary>
            <param name="sensor">The communications channel to a device on a SPI bus</param>
            <param name="ce">CE Pin</param>
            <param name="irq">IRQ Pin</param>
            <param name="packetSize">Receive Packet Size</param>
            <param name="channel">Working Channel</param>
            <param name="outputPower">Output Power</param>
            <param name="dataRate">Send Data Rate</param>
            <param name="pinNumberingScheme">Pin Numbering Scheme</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.Send(System.Byte[])">
            <summary>
            Send
            </summary>
            <param name="data">Send Data</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.Receive(System.Byte)">
            <summary>
            Receive
            </summary>
            <param name="length">Packet Size</param>
            <returns>Data</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.Nrf24l01.DataReceivedHandle">
            <summary>
            Delegate representing event that data was received
            </summary>
            <param name="sender">Object sending the event</param>
            <param name="e">Arguments for the event</param>
        </member>
        <member name="E:Iot.Device.Nrf24l01.Nrf24l01.DataReceived">
            <summary>
            Triggering when data was received
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.Initialize(System.Device.Gpio.PinNumberingScheme,Iot.Device.Nrf24l01.OutputPower,Iot.Device.Nrf24l01.DataRate,System.Byte,System.Device.Gpio.GpioController)">
            <summary>
            Initialize
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.InitializePipe">
            <summary>
            Initialize nRF24L01 Pipe
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetRxPayload(System.Byte)">
            <summary>
            Set nRF24L01 Receive Packet Size (All Pipe)
            </summary>
            <param name="payload">Size, from 0 to 32</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetRxPayload(System.Byte,System.Byte)">
            <summary>
            Set nRF24L01 Receive Packet Size
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <param name="payload">Size, from 0 to 32</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadRxPayload(System.Byte)">
            <summary>
            Read nRF24L01 Receive Packet Size
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <returns>Size</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetAutoAck(System.Boolean)">
            <summary>
            Set nRF24L01 Auto Acknowledgment (All Pipe)
            </summary>
            <param name="isAutoAck">Is Enable</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetAutoAck(System.Byte,System.Boolean)">
            <summary>
            Set nRF24L01 Auto Acknowledgment
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <param name="isAutoAck">Is Enable</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadAutoAck(System.Byte)">
            <summary>
            Read nRF24L01 Auto Acknowledgment
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <returns>Is Enable</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetRxPipe(System.Boolean)">
            <summary>
            Set nRF24L01 Receive Pipe (All Pipe)
            </summary>
            <param name="isEnable">Is Enable Receive</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetRxPipe(System.Byte,System.Boolean)">
            <summary>
            Set nRF24L01 Receive Pipe is Enable
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <param name="isEnable">Is Enable the Pipe Receive</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadRxPipe(System.Byte)">
            <summary>
            Read nRF24L01 Receive Pipe is Enable
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <returns>Is Enable the Pipe Receive</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetPowerMode(Iot.Device.Nrf24l01.PowerMode)">
            <summary>
            Set nRF24L01 Power Mode
            </summary>
            <param name="mode">Power Mode</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadPowerMode">
            <summary>
            Read nRF24L01 Power Mode
            </summary>
            <returns>Power Mode</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetWorkingMode(Iot.Device.Nrf24l01.WorkingMode)">
            <summary>
            Set nRF24L01 Working Mode
            </summary>
            <param name="mode">Working Mode</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadWorkwingMode">
            <summary>
            Read nRF24L01 Working Mode
            </summary>
            <returns>Working Mode</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetOutputPower(Iot.Device.Nrf24l01.OutputPower)">
            <summary>
            Set nRF24L01 Output Power
            </summary>
            <param name="power">Output Power</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadOutputPower">
            <summary>
            Read nRF24L01 Output Power
            </summary>
            <returns>Output Power</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetDataRate(Iot.Device.Nrf24l01.DataRate)">
            <summary>
            Set nRF24L01 Send Rate
            </summary>
            <param name="rate">Send Rate</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadDataRate">
            <summary>
            Read nRF24L01 Send Rate
            </summary>
            <returns>Send Rate</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetRxAddress(System.Byte,System.ReadOnlySpan{System.Byte})">
            <summary>
            Set nRF24L01 Receive Address
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <param name="address">Address, if (pipe > 1) then (address.Length = 1), else if (pipe = 1 || pipe = 0) then (address.Length ≤ 5)</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadRxAddress(System.Byte)">
            <summary>
            Read nRF24L01 Receive Address
            </summary>
            <param name="pipe">Pipe, form 0 to 5</param>
            <returns>Address</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetTxAddress(System.ReadOnlySpan{System.Byte})">
            <summary>
            Set nRF24L01 Send Address
            </summary>
            <param name="address">Address, address.Length = 5</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadTxAddress">
            <summary>
            Read nRF24L01 Send Address
            </summary>
            <returns>Address</returns>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.SetChannel(System.Byte)">
            <summary>
            Set Working Channel
            </summary>
            <param name="channel">From 0 to 127</param>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01.ReadChannel">
            <summary>
            Read Working Channel
            </summary>
            <returns>Channel</returns>
        </member>
        <member name="T:Iot.Device.Nrf24l01.Nrf24l01Pipe">
            <summary>
            nRF24L01 Receive Pipe
            </summary>
        </member>
        <member name="M:Iot.Device.Nrf24l01.Nrf24l01Pipe.#ctor(Iot.Device.Nrf24l01.Nrf24l01,System.Byte)">
            <summary>
            Creates a new instance of the Nrf24l01Pipe
            </summary>
            <param name="nrf">nRF24L01</param>
            <param name="pipeID">Pipe ID</param>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01Pipe.Address">
            <summary>
            Receive Pipe Address
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01Pipe.AutoAck">
            <summary>
            Auto Acknowledgment
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01Pipe.Payload">
            <summary>
            Receive Pipe Payload
            </summary>
        </member>
        <member name="P:Iot.Device.Nrf24l01.Nrf24l01Pipe.Enable">
            <summary>
            Enable Pipe
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.OutputPower">
            <summary>
            nRF24l01 Output Power
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.OutputPower.N18dBm">
            <summary>
            -18dBm
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.OutputPower.N12dBm">
            <summary>
            -12dBm
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.OutputPower.N06dBm">
            <summary>
            -6dBm
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.OutputPower.N00dBm">
            <summary>
            0dBm
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.PowerMode">
            <summary>
            nRF24L01 Power Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.PowerMode.UP">
            <summary>
            nRF24L01 On
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.PowerMode.DOWN">
            <summary>
            nRF24L01 Off
            </summary>
        </member>
        <member name="T:Iot.Device.Nrf24l01.WorkingMode">
            <summary>
            nRF24L01 Working Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.WorkingMode.Receive">
            <summary>
            Receive Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Nrf24l01.WorkingMode.Transmit">
            <summary>
            Transmit Mode
            </summary>
        </member>
        <member name="T:Iot.Device.OneWire.DeviceFamily">
            <summary>
            Different device families supported by the driver.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Any">
            <summary>
            Special device family used when enumerating all devices on a bus.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Ds18s20">
            <summary>
            Family id of a DS18S20 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Ds18b20">
            <summary>
            Family id of a DS18B20 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Max31820">
            <summary>
            Family id of a MAX31820 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Ds1825">
            <summary>
            Family id of a DS1825 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Max31826">
            <summary>
            Family id of a MAX31826 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Max31850">
            <summary>
            Family id of a MAX31850 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Ds28ea00">
            <summary>
            Family id of a DS28EA00 temperature sensor.
            </summary>
        </member>
        <member name="F:Iot.Device.OneWire.DeviceFamily.Thermometer">
            <summary>
            Special family id used to enumerate all temperature sensors.
            </summary>
        </member>
        <member name="T:Iot.Device.OneWire.OneWireBus">
            <summary>
            Represents a 1-wire bus.
            </summary>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireBus.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.OneWire.OneWireBus"/> class
            </summary>
            <param name="busId">The platform id of the 1-wire bus.</param>
        </member>
        <member name="P:Iot.Device.OneWire.OneWireBus.BusId">
            <summary>
            The 1-wire device id.
            </summary>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireBus.EnumerateBusIds">
            <summary>
            Enumerate names of all 1-wire busses in the system.
            </summary>
            <returns>A list of discovered bus ids.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireBus.EnumerateDeviceIds(Iot.Device.OneWire.DeviceFamily)">
            <summary>
            Enumerates all devices currently detected on this bus. Platform can update device list
            periodically. To manually trigger an update call <see cref="M:Iot.Device.OneWire.OneWireBus.ScanForDeviceChanges(System.Int32,System.Int32)" />.
            </summary>
            <param name="family">Family id used to filter enumerated devices.</param>
            <returns>A list of discovered devices.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireBus.ScanForDeviceChangesAsync(System.Int32,System.Int32)">
            <summary>
            Start a new scan for device changes on the bus.
            </summary>
            <param name="numDevices">Max number of devices to scan for before finishing. Use -1 for platform default.</param>
            <param name="numScans">Number of scans to do to find numDevices devices. Use -1 for platform default.</param>
            <returns>Task representing the async work.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireBus.ScanForDeviceChanges(System.Int32,System.Int32)">
            <summary>
            Start a new scan for device changes on the bus.
            </summary>
            <param name="numDevices">Max number of devices to scan for before finishing. Use -1 for platform default.</param>
            <param name="numScans">Number of scans to do to find numDevices devices. Use -1 for platform default.</param>
        </member>
        <member name="T:Iot.Device.OneWire.OneWireDevice">
            <summary>
            Represents a 1-wire device.
            </summary>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireDevice.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.OneWire.OneWireDevice"/> class.
            </summary>
            <param name="busId">The 1-wire bus the device is found on.</param>
            <param name="devId">The id of the device.</param>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireDevice.EnumerateDeviceIds(Iot.Device.OneWire.DeviceFamily)">
            <summary>
            Enumerate all devices found on 1-wire busses in this system.
            </summary>
            <param name="family">Family id used to filter devices.</param>
            <returns>A list of devices found.</returns>
        </member>
        <member name="P:Iot.Device.OneWire.OneWireDevice.BusId">
            <summary>
            The bus where this device is attached.
            </summary>
        </member>
        <member name="P:Iot.Device.OneWire.OneWireDevice.DeviceId">
            <summary>
            The 1-wire id of this device.
            </summary>
        </member>
        <member name="P:Iot.Device.OneWire.OneWireDevice.Family">
            <summary>
            The device family id of this device.
            </summary>
        </member>
        <member name="T:Iot.Device.OneWire.OneWireThermometerDevice">
            <summary>
            Represents a 1-wire thermometer device.
            </summary>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.OneWire.OneWireThermometerDevice"/> class.
            </summary>
            <param name="busId">The 1-wire bus the device is found on.</param>
            <param name="devId">The id of the device.</param>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.IsCompatible(Iot.Device.OneWire.DeviceFamily)">
            <summary>
            Check if family is compatible with this type of devices.
            </summary>
            <param name="family">The family to check.</param>
            <returns>Returns true if device is compatible.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.IsCompatible(System.String,System.String)">
            <summary>
            Check if device is compatible with this family of devices.
            </summary>
            <param name="busId">The 1-wire bus the device is found on.</param>
            <param name="devId">The id of the device.</param>
            <returns>Returns true if device is compatible.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.EnumerateDevices">
            <summary>
            Enumerate all devices in system of type thermometer.
            </summary>
            <returns>A list of thermometer devices.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.ReadTemperatureAsync">
            <summary>
            Reads the current temperature of the device.
            Expect this function to be slow (about one second).
            </summary>
            <returns>The read temperature value.</returns>
        </member>
        <member name="M:Iot.Device.OneWire.OneWireThermometerDevice.ReadTemperature">
            <summary>
            Reads the current temperature of the device.
            Expect this function to be slow (about one second).
            </summary>
            <returns>The read temperature value.</returns>
        </member>
        <member name="T:Iot.Device.Pca95x4.Pca95x4">
            <summary>
            A general purpose parallel I/O expansion for I2C applications.
            </summary>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.#ctor(System.Device.I2c.I2cDevice,System.Nullable{System.Int32},System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes new instance of Pca95x4.
            A general purpose parallel I/O expansion for I2C applications.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="interrupt">The input pin number that is connected to the interrupt (INT).</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with operations on pins</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.Read(Iot.Device.Pca95x4.Register)">
            <summary>
            Reads a byte from a register.
            </summary>
            <param name="register">The register to read.</param>
            <returns>The data read from the register.</returns>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.ReadBit(Iot.Device.Pca95x4.Register,System.Int32)">
            <summary>
            Reads a bit from a register.
            </summary>
            <param name="register">The register to read.</param>
            <param name="bitNumber">The register bit number to read.</param>
            <returns>The value of the register bit read.</returns>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.ReadInterrupt">
            <summary>
            Reads the pin value of the interrupt (INT).
            </summary>
            <returns>The pin value of the interrupt (INT).</returns>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.Write(Iot.Device.Pca95x4.Register,System.Byte)">
            <summary>
            Writes a byte to a register.
            </summary>
            <param name="register">The register to write.</param>
            <param name="data">The data to write to the register.</param>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.WriteBit(Iot.Device.Pca95x4.Register,System.Int32,System.Boolean)">
            <summary>
            Writes to a register bit.
            </summary>
            <param name="register">The register to write.</param>
            <param name="bitNumber">The register bit number to write.</param>
            <param name="bit">The value to write to register bit.</param>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.InvertInputRegisterPolarity(System.Boolean)">
            <summary>
            Inverts Input Register polarity.
            </summary>
            <param name="invert">Determines if Inputer Register polarity is inverted.</param>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.InvertInputRegisterBitPolarity(System.Int32,System.Boolean)">
            <summary>
            Inverts Input Register bit polarity.
            </summary>
            <param name="bitNumber">The Input Register bit number to invert.</param>
            <param name="invert">Determines if the Input Register bit polarity is inverted.</param>
        </member>
        <member name="M:Iot.Device.Pca95x4.Pca95x4.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Pca95x4.Register">
            <summary>
            PCA95X4 register
            </summary>
        </member>
        <member name="F:Iot.Device.Pca95x4.Register.InputPort">
            <summary>
            This register is a read-only port. It reflects the incoming logic levels of the pins,
            regardless of whether the pin is defined as an input or an output by Register 3.
            Writes to this register have no effect.
            </summary>
        </member>
        <member name="F:Iot.Device.Pca95x4.Register.OutputPort">
            <summary>
            This register reflects the outgoing logic levels of the pins defined as outputs by Register 3.
            Bit values in this register have no effect on pins defined as inputs. Reads from this register
            return the value that is in the flip-flop controlling the output selection, not the actual pin value.
            </summary>
        </member>
        <member name="F:Iot.Device.Pca95x4.Register.PolarityInversion">
            <summary>
            This register allows the user to invert the polarity of the Input Port register data.
            If a bit in this register is set (written with ‘1’), the corresponding Input Port data is inverted.
            If a bit in this register is cleared (written with a '0'), the Input Port data polarity is retained.
            </summary>
        </member>
        <member name="F:Iot.Device.Pca95x4.Register.Configuration">
            <summary>
            This register configures the directions of the I/O pins. If a bit in this register is set,
            the corresponding port pin is enabled as an input with high-impedance output driver.
            If a bit in this register is cleared, the corresponding port pin is enabled as an output.
            At reset, the I/Os are configured as inputs with a weak pull-up to VDD.
            </summary>
        </member>
        <member name="T:Iot.Device.Pwm.Mode1">
            <summary>
            Values for Mode1 register
            </summary>
        </member>
        <member name="T:Iot.Device.Pwm.Mode2">
            <summary>
            Values for Mode2 register
            </summary>
        </member>
        <member name="T:Iot.Device.Pwm.Pca9685">
            <summary>
            PCA9685 PWM LED/servo controller
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Pca9685.I2cAddressBase">
            <summary>
            I2C address base. Equal to actual address when all selectable address bits are equal to 0.
            </summary>
        </member>
        <member name="P:Iot.Device.Pwm.Pca9685.ClockFrequency">
            <summary>
            Get clock frequency (Hz). Only set if you are using external clock.
            </summary>
        </member>
        <member name="P:Iot.Device.Pwm.Pca9685.PwmFrequency">
            <summary>
            Set PWM frequency or get effective value.
            </summary>
            <remarks>
            Value of the effective frequency may be different than desired frequency.
            Read the property in order to get the actual value
            </remarks>
        </member>
        <member name="P:Iot.Device.Pwm.Pca9685.Prescale">
            <summary>
            Set PWM frequency using prescale value or get the value.
            </summary>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.#ctor(System.Device.I2c.I2cDevice,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructs Pca9685 instance
            </summary>
            <param name="i2cDevice">The I2C device to be used</param>
            <param name="pwmFrequency">Initial PWM frequency on all channels</param>
            <param name="dutyCycleAllChannels">Duty cycle set on all channels after constructing</param>
            <param name="usingExternalClock">
            When true specifies that external clock is used.
            Use <see cref="P:Iot.Device.Pwm.Pca9685.ClockFrequency"/> to set frequency of an external clock
            </param>
            <remarks>
            Default value for <paramref name="pwmFrequency"/> and <paramref name="dutyCycleAllChannels"/>
            is -1 which means to not change value already set on the device.
            </remarks>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.SetDutyCycle(System.Int32,System.Double)">
            <summary>
            Sets duty cycle on specified channel.
            </summary>
            <param name="channel">Selected channel</param>
            <param name="dutyCycle">Value to set duty cycle to</param>
            <remarks>Throws <see cref="T:System.InvalidOperationException"/> if specified channel is created with <see cref="M:Iot.Device.Pwm.Pca9685.CreatePwmChannel(System.Int32)"/></remarks>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.GetDutyCycle(System.Int32)">
            <summary>
            Gets duty cycle on specified channel
            </summary>
            <param name="channel">selected channel</param>
            <returns>Value of duty cycle in 0.0 - 1.0 range</returns>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.SetDutyCycleAllChannels(System.Double)">
            <summary>
            Sets duty cycles on all channels
            </summary>
            <param name="dutyCycle">Duty cycle value (0.0 - 1.0)</param>
            <remarks>Throws <see cref="T:System.InvalidOperationException"/> if any of the channels is created with <see cref="M:Iot.Device.Pwm.Pca9685.CreatePwmChannel(System.Int32)"/></remarks>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685.CreatePwmChannel(System.Int32)">
            <summary>
            Creates PwmChannel instance from selected channel
            </summary>
            <param name="channel">Channel number (0-15)</param>
            <returns>PwmChannel instance</returns>
            <remarks>Channel is already started when constructed.</remarks>
        </member>
        <member name="M:Iot.Device.Pwm.Pca9685PwmChannel.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="F:Iot.Device.Pwm.Register.MODE1">
            <summary>
            Mode register 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.MODE2">
            <summary>
            Mode register 2
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.SUBADR1">
            <summary>
            I2C-bus subaddress 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.SUBADR2">
            <summary>
            I2C-bus subaddress 2
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.SUBADR3">
            <summary>
            I2C-bus subaddress 3
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.ALLCALLADR">
            <summary>
            LED All Call I2C-bus address
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.LED0_ON_L">
            <summary>
            LED0 output and brightness control byte 0
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.LED0_ON_H">
            <summary>
            LED0 output and brightness control byte 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.LED0_OFF_L">
            <summary>
            LED0 output and brightness control byte 2
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.LED0_OFF_H">
            <summary>
            LED0 output and brightness control byte 3
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.ALL_LED_ON_L">
            <summary>
            load all the LEDn_ON registers, byte 0
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.ALL_LED_ON_H">
            <summary>
            load all the LEDn_ON registers, byte 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.ALL_LED_OFF_L">
            <summary>
            load all the LEDn_OFF registers, byte 0
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.ALL_LED_OFF_H">
            <summary>
            load all the LEDn_OFF registers, byte 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pwm.Register.PRESCALE">
            <summary>
            prescaler for PWM output frequency
            </summary>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pca8574">
            <summary>
            Remote 8-bit I/O expander for I2C-bus with interrupt.
            </summary>
            <remarks>
            Fast mode I2C variant of the Pcf8574.
            </remarks>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pca8574.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Pca8574 device.
            </summary>
            <param name="device">The I2C device.</param>
            <param name="interrupt">The interrupt pin number, if present.</param>
            <param name="gpioController">
            The GPIO controller for the <paramref name="interrupt"/>.
            If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pca8575">
            <summary>
            Remote 16-bit I/O expander for I2C-bus with interrupt.
            </summary>
            <remarks>
            Fast mode I2C variant of the Pcf8575.
            </remarks>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pca8575.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Pca8575 device.
            </summary>
            <param name="device">The I2C device.</param>
            <param name="interrupt">The interrupt pin number, if present.</param>
            <param name="gpioController">
            The GPIO controller for the <paramref name="interrupt"/>.
            If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pcf8574">
            <summary>
            Remote 8-bit I/O expander for I2C-bus with interrupt.
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcf8574.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes a new instance of the Pca8574 device.
            </summary>
            <param name="device">The I2C device.</param>
            <param name="interrupt">The interrupt pin number, if present.</param>
            <param name="gpioController">
            The GPIO controller for the <paramref name="interrupt"/>.
            If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pcf8575">
            <summary>
            Remote 16-bit I/O expander for I2C-bus with interrupt.
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcf8575.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            /// Initializes a new instance of the Pcf8575 device.
            </summary>
            <param name="device">The I2C device.</param>
            <param name="interrupt">The interrupt pin number, if present.</param>
            <param name="gpioController">
            The GPIO controller for the <paramref name="interrupt"/>.
            If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pcx8574">
            <summary>
            Base class for 8 bit I/O expanders.
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx8574.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs Pcx8574 instance
            </summary>
            <param name="device">I2C device</param>
            <param name="interrupt">Interrupt pin</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with <paramref name="interrupt"/> pin</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Pcx857x.Pcx8574.PinCount">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pcx8575">
            <summary>
            Base class for 16 bit I/O expanders.
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx8575.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructs Pcx8575 instance
            </summary>
            <param name="device">I2C device</param>
            <param name="interrupt">Interrupt pin</param>
            <param name="gpioController"><see cref="T:System.Device.Gpio.GpioController"/> related with <paramref name="interrupt"/> pin</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Pcx857x.Pcx8575.PinCount">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx8575.WriteUInt16(System.UInt16)">
            <summary>
            Writes 16-bit unsigned integer to the device
            </summary>
            <param name="value">16-bit unsigned value to be written</param>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx8575.ReadUInt16">
            <summary>
            Reads 16-bit unsigned integer from the device
            </summary>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Pcx857x.Pcx857x">
            <summary>
            Base class for PCx857x GPIO expanders
            </summary>
        </member>
        <member name="P:Iot.Device.Pcx857x.Pcx857x.Device">
            <summary>
            I2C device used for communication with the device
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Remote I/O expander for I2C-bus with interrupt.
            </summary>
            <param name="device">The I2C device.</param>
            <param name="interrupt">The interrupt pin number, if present.</param>
            <param name="gpioController">
            The GPIO controller for the <paramref name="interrupt"/>.
            If not specified, the default controller will be used.
            </param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.ReadByte">
            <summary>
            Reads byte from the device
            </summary>
            <returns>Byte read from the device</returns>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.WriteByte(System.Byte)">
            <summary>
            Writes byte to the device
            </summary>
            <param name="value">Byte to be written to the device</param>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.InternalReadUInt16">
            <summary>
            Reads 16-bit unsigned integer from the device
            </summary>
            <returns>16-bit unsigned integer read from the device</returns>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.InternalWriteUInt16(System.UInt16)">
            <summary>
            Writes 16-bit unsigned integer to the device
            </summary>
            <param name="value">16-vit unsigned integer to be written to the device</param>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.ClosePin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.OpenPin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Read(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Read(System.Span{System.Device.Gpio.PinValuePair})">
            <summary>
            Reads multiple pins from the device
            </summary>
            <param name="pinValues">Pins and values to be read</param>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Write(System.Int32,System.Device.Gpio.PinValue)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.Write(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Writes a value to a set of pins.
            </summary>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.GetPinMode(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pcx857x.Pcx857x.WaitForEventAsync(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.PiJuice">
            <summary>
            Create a PiJuice class
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.PiJuice.DefaultI2cAddress">
            <summary>
            The default PiJuice I2C address is 0x14
            Other addresses can be uses, see PiJuice documentation
            </summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuice.PiJuiceInfo">
            <summary>
            Contains the PiJuice key information
            </summary>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>Creates a new instance of the PiJuice.</summary>
            <param name="i2cDevice">The I2C device. Device address is 0x14</param>
            <param name="shouldDispose">True to dispose the I2C device</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.GetFirmwareVersion">
            <summary>
            Get the firmware version
            </summary>
            <returns>PiJuice firmware version</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.SetDefaultConfiguration">
            <summary>
            (https://github.com/PiSupply/PiJuice/blob/02c129c3aa884934c368936c9363df90690148a8/Software/Source/pijuice.py#L1531)
            </summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuice.IdEepromWriteProtect">
            <summary>
            The write protection of the EEPROM
            </summary>
            <value>Whether the EEPROM is write protected</value>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuice.IdEepromAddress">
            <summary>
            The physical I2C address of the EEPROM
            </summary>
            <value>The I2C Address of the EEPROM</value>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.WriteCommand(Iot.Device.PiJuiceDevice.Models.PiJuiceCommand,System.ReadOnlySpan{System.Byte})">
            <summary>
            Write a PiJuice command
            </summary>
            <param name="command">The PiJuice command</param>
            <param name="data">The data to write</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.WriteCommandVerify(Iot.Device.PiJuiceDevice.Models.PiJuiceCommand,System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
            Write a PiJuice command and verify
            </summary>
            <param name="command">The PiJuice command</param>
            <param name="data">The data to write</param>
            <param name="delay">The delay before reading the data</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.ReadCommand(Iot.Device.PiJuiceDevice.Models.PiJuiceCommand,System.Byte)">
            <summary>
            Read data from PiJuice
            </summary>
            <param name="command">The PiJuice command</param>
            <param name="length">The length of the data to be read</param>
            <returns>Returns an array of the bytes read</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuice.GetCheckSum(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>Gets the check sum.</summary>
            <param name="data">The data.</param>
            <param name="checkLastByte">Whether the last byte in the data is included in the checksum</param>
            <returns>Checksum</returns>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.PiJuiceConfig">
            <summary>
            PiJuiceConfig class to support status of the PiJuice
            </summary>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.#ctor(Iot.Device.PiJuiceDevice.PiJuice)">
            <summary>
            PiJuiceConfig constructor
            </summary>
            <param name="piJuice">The PiJuice class</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetBatteryProfile">
            <summary>
            Get battery profile
            </summary>
            <returns>Battery profile</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetCustomBatteryProfile(Iot.Device.PiJuiceDevice.Models.BatteryProfile)">
            <summary>
            Set a custom battery profile
            </summary>
            <param name="batteryProfile">Custom battery profile</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetBatteryExtProfile">
            <summary>
            Get Battery extended profile
            </summary>
            <returns>Battery extended profile</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetCustomBatteryExtProfile(Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile)">
            <summary>
            Set custom battery extended profile
            </summary>
            <param name="batteryProfile">Custom battery extended profile</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetBatteryProfileStatus">
            <summary>
            Get battery profile status
            </summary>
            <returns>Battery profile status</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetBatteryTemperatureSenseConfig">
            <summary>
            Get how the battery temperature is taken
            </summary>
            <returns>Battery temperature sensor configuration</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetBatteryTemperatureSenseConfig(Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense)">
            <summary>
            Set how the battery temperature is taken
            </summary>
            <param name="batteryTemperatureSense">Determine how the battery temperature is taken</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetRelativeStateOfChangeEstimation">
            <summary>
            Get battery relative state-of-health estimation type
            </summary>
            <returns>Battery relative state-of-health estimation type</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetRelativeStateOfChangeEstimation(Iot.Device.PiJuiceDevice.Models.RelativeStateOfChangeEstimationType)">
            <summary>
            Set battery relative state-of-health estimation type
            </summary>
            <param name="estimationType">Battery relative state-of-health estimation type</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetChargingConfig">
            <summary>
            Get current battery charging state
            </summary>
            <returns>Battery charging configuration</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetChargingConfig(Iot.Device.PiJuiceDevice.Models.ChargingConfig)">
            <summary>
            Set current battery charging state
            </summary>
            <param name="config">Battery charging configuration</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetPowerInputs">
            <summary>
            Get power inputs
            </summary>
            <returns>Power inputs</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetPowerInputs(Iot.Device.PiJuiceDevice.Models.PowerInput)">
            <summary>
            Set power inputs
            </summary>
            <param name="powerInput">Power inputs</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetLedConfiguration(Iot.Device.PiJuiceDevice.Models.Led)">
            <summary>
            Get the configuration for the specific Led
            </summary>
            <param name="led">Led to get configuration for</param>
            <returns>Led Configuration</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetLedConfiguration(Iot.Device.PiJuiceDevice.Models.LedConfig)">
            <summary>
            Set the configuration for the specific Led
            </summary>
            <param name="ledConfig">Led configuration</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetPowerRegulatorMode">
            <summary>
            Get power regulator mode
            </summary>
            <returns>Power regulator mode</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetPowerRegulatorMode(Iot.Device.PiJuiceDevice.Models.PowerRegulatorMode)">
            <summary>
            Set power regulator mode
            </summary>
            <param name="powerMode">Power regulator mode</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.GetRunPinConfig">
            <summary>
            Get run pin configuration
            </summary>
            <returns>Run pin configuration</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SetRunPinConfig(Iot.Device.PiJuiceDevice.Models.RunPin)">
            <summary>
            Set run pin configuration
            </summary>
            <param name="runPin">Run pin configuration</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceConfig.SelectBatteryProfiles">
            <summary>
            Selects which preset battery profiles to use based on the PiJuice firmware version
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.PiJuicePower">
            <summary>
            PiJuicePower class to support status of the PiJuice
            </summary>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuicePower.#ctor(Iot.Device.PiJuiceDevice.PiJuice)">
            <summary>
            PiJuicePower constructor
            </summary>
            <param name="piJuice">The PiJuice class</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuicePower.PowerOff">
            <summary>
            The delay before the PiJuice removes power to the GPIO pins
            </summary>
            <value>The delay in seconds</value>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuicePower.WakeUpOnCharge">
            <summary>
            The current state of the Wakeup on charge
            </summary>
            <returns>Current state of the wake up on charge function</returns>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuicePower.WatchdogTimer">
            <summary>
            The current watchdog timer time after which it will power cycle if it does not receive a heartbeat signal
            </summary>
            <value>Time in minutes after which PiJuice will power cycle if it does not receive a heartbeat signal </value>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.PiJuicePower.SystemPowerSwitch">
            <summary>
            The current state of system switch
            </summary>
            <returns>Current state of system switch</returns>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.PiJuiceStatus">
            <summary>
            PiJuiceStatus class to support status of the PiJuice
            </summary>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.#ctor(Iot.Device.PiJuiceDevice.PiJuice)">
            <summary>
            PiJuiceStatus constructor
            </summary>
            <param name="piJuice">The PiJuice class</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetStatus">
            <summary>
            Get basic PiJuice status information
            </summary>
            <returns>PiJuice status</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetFaultStatus">
            <summary>
            Get current fault status of PiJuice
            </summary>
            <returns>PiJuice fault status</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetButtonEvents">
            <summary>
            Gets event generated by PiJuice buttons presses
            </summary>
            <returns>List of button event types</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.ClearButtonEvent(Iot.Device.PiJuiceDevice.Models.ButtonSwitch)">
            <summary>
            Clears generated button event
            </summary>
            <param name="button">Button to clear button event for</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetChargeLevel">
            <summary>
            Get battery charge level between 0 and 100 percent
            </summary>
            <returns>Battery charge level percentage</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetBatteryTemperature">
            <summary>
            Get battery temperature
            </summary>
            <returns>Battery temperature in celsius</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetBatteryVoltage">
            <summary>
            Get battery voltage
            </summary>
            <returns>Battery voltage in millivolts</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetBatteryCurrent">
            <summary>
            Get battery current
            </summary>
            <returns>Battery current in milliamps</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetIOVoltage">
            <summary>
            Get supplied voltage
            </summary>
            <returns>Voltage supplied from the GPIO power output from the PiJuice or when charging, voltage supplied in millivolts</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetIOCurrent">
            <summary>
            Get supplied current in milliamps
            </summary>
            <returns>Current supplied from the GPIO power output from the PiJuice or when charging, current supplied in milliamps</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetLedState(Iot.Device.PiJuiceDevice.Models.Led)">
            <summary>
            Get the color for a specific Led
            </summary>
            <param name="led">Led to get color for</param>
            <returns>Color of Led</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.SetLedState(Iot.Device.PiJuiceDevice.Models.Led,System.Drawing.Color)">
            <summary>
            Set the color for a specific Led
            </summary>
            <param name="led">Led to which color is to be applied</param>
            <param name="color">Color for the Led</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.GetLedBlink(Iot.Device.PiJuiceDevice.Models.Led)">
            <summary>
            Get blinking pattern for a specific Led
            </summary>
            <param name="led">Led to get blinking pattern for</param>
            <returns>Led blinking pattern</returns>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.PiJuiceStatus.SetLedBlink(Iot.Device.PiJuiceDevice.Models.LedBlink)">
            <summary>
            Set blinking pattern for a specific Led
            </summary>
            <param name="ledBlink">Led blinking pattern</param>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault">
            <summary>
            Battery charging temperature fault
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault.Suspended">
            <summary>
            Charging is suspended
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault.Cool">
            <summary>
            Cool
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault.Warm">
            <summary>
            Warm
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryChemistry">
            <summary>
            Type of Battery Chemistry
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChemistry.Lipo">
            <summary>
            LIPO
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChemistry.LiFePO4">
            <summary>
            LiFePO4
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryChemistry.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile">
            <summary>
            Battery extended profile
            </summary>
            <param name="BatteryChemistry">Battery chemistry.</param>
            <param name="OpenCircuitVoltage10Percent">Open Circuit Voltage at 10% charge as millivolts.</param>
            <param name="OpenCircuitVoltage50Percent">Open Circuit Voltage at 50% charge as millivolts.</param>
            <param name="OpenCircuitVoltage90Percent">Open Circuit Voltage at 90% charge as millivolts.</param>
            <param name="InternalResistance10Percent">Internal battery resistance at 10% charge as milliohm.</param>
            <param name="InternalResistance50Percent">Internal battery resistance at 50% charge as milliohm.</param>
            <param name="InternalResistance90Percent">Internal battery resistance at 90% charge as milliohm.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.#ctor(Iot.Device.PiJuiceDevice.Models.BatteryChemistry,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,UnitsNet.ElectricResistance,UnitsNet.ElectricResistance,UnitsNet.ElectricResistance)">
            <summary>
            Battery extended profile
            </summary>
            <param name="BatteryChemistry">Battery chemistry.</param>
            <param name="OpenCircuitVoltage10Percent">Open Circuit Voltage at 10% charge as millivolts.</param>
            <param name="OpenCircuitVoltage50Percent">Open Circuit Voltage at 50% charge as millivolts.</param>
            <param name="OpenCircuitVoltage90Percent">Open Circuit Voltage at 90% charge as millivolts.</param>
            <param name="InternalResistance10Percent">Internal battery resistance at 10% charge as milliohm.</param>
            <param name="InternalResistance50Percent">Internal battery resistance at 50% charge as milliohm.</param>
            <param name="InternalResistance90Percent">Internal battery resistance at 90% charge as milliohm.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.BatteryChemistry">
            <summary>Battery chemistry.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.OpenCircuitVoltage10Percent">
            <summary>Open Circuit Voltage at 10% charge as millivolts.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.OpenCircuitVoltage50Percent">
            <summary>Open Circuit Voltage at 50% charge as millivolts.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.OpenCircuitVoltage90Percent">
            <summary>Open Circuit Voltage at 90% charge as millivolts.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.InternalResistance10Percent">
            <summary>Internal battery resistance at 10% charge as milliohm.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.InternalResistance50Percent">
            <summary>Internal battery resistance at 50% charge as milliohm.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryExtendedProfile.InternalResistance90Percent">
            <summary>Internal battery resistance at 90% charge as milliohm.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryOrigin">
            <summary>
            Battery origin
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryOrigin.Predefined">
            <summary>
            Predefined battery origin
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryOrigin.Custom">
            <summary>
            Custom battery origin
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryProfile">
            <summary>
            Battery profile
            </summary>
            <param name="Capacity">Charge capacity of battery.</param>
            <param name="ChargeCurrent">[550mA – 2500mA] Constant current that PiJuice battery is charged in current regulation phase of charging process as milliamps.</param>
            <param name="TerminationCurrent">[50mA – 400mA] When charging current drops below termination current threshold in voltage regulation phase charging process terminates as milliamps.</param>
            <param name="RegulationVoltage">[3500mV – 4440mV] Voltage to which voltage over battery is regulated in voltage regulation phase of charging process as millivolts.</param>
            <param name="CutOffVoltage">[0mV – 5100mV] Minimum voltage at which battery is fully discharged as millivolts.</param>
            <param name="TemperatureCold">Temperature threshold according to JEITA standard below which charging is suspended as celsius.</param>
            <param name="TemperatureCool">Temperature threshold according to JEITA standard below which charge current is reduced to half of programmed charge current. This threshold should be set above cold temperature as celsius.</param>
            <param name="TemperatureWarm">Temperature threshold according to JEITA standard above which the battery regulation voltage is reduced by 140mV from the programmed regulation voltage. This threshold should be set above cool temperature as celsius.</param>
            <param name="TemperatureHot">Temperature threshold according to JEITA standard above which charging is suspended. This threshold should be set above warm temperature as celsius.</param>
            <param name="NegativeTemperatureCoefficientB">Thermistor B constant of NTC temperature sensor if it is integrated with battery.</param>
            <param name="NegativeTemperatureCoefficientResistance">Nominal thermistor resistance at 25°C of NTC temperature sensor if it is integrated with battery as ohm.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.BatteryProfile.#ctor(UnitsNet.ElectricCharge,UnitsNet.ElectricCurrent,UnitsNet.ElectricCurrent,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,UnitsNet.Temperature,UnitsNet.Temperature,UnitsNet.Temperature,UnitsNet.Temperature,System.Int32,UnitsNet.ElectricResistance)">
            <summary>
            Battery profile
            </summary>
            <param name="Capacity">Charge capacity of battery.</param>
            <param name="ChargeCurrent">[550mA – 2500mA] Constant current that PiJuice battery is charged in current regulation phase of charging process as milliamps.</param>
            <param name="TerminationCurrent">[50mA – 400mA] When charging current drops below termination current threshold in voltage regulation phase charging process terminates as milliamps.</param>
            <param name="RegulationVoltage">[3500mV – 4440mV] Voltage to which voltage over battery is regulated in voltage regulation phase of charging process as millivolts.</param>
            <param name="CutOffVoltage">[0mV – 5100mV] Minimum voltage at which battery is fully discharged as millivolts.</param>
            <param name="TemperatureCold">Temperature threshold according to JEITA standard below which charging is suspended as celsius.</param>
            <param name="TemperatureCool">Temperature threshold according to JEITA standard below which charge current is reduced to half of programmed charge current. This threshold should be set above cold temperature as celsius.</param>
            <param name="TemperatureWarm">Temperature threshold according to JEITA standard above which the battery regulation voltage is reduced by 140mV from the programmed regulation voltage. This threshold should be set above cool temperature as celsius.</param>
            <param name="TemperatureHot">Temperature threshold according to JEITA standard above which charging is suspended. This threshold should be set above warm temperature as celsius.</param>
            <param name="NegativeTemperatureCoefficientB">Thermistor B constant of NTC temperature sensor if it is integrated with battery.</param>
            <param name="NegativeTemperatureCoefficientResistance">Nominal thermistor resistance at 25°C of NTC temperature sensor if it is integrated with battery as ohm.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.Capacity">
            <summary>Charge capacity of battery.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.ChargeCurrent">
            <summary>[550mA – 2500mA] Constant current that PiJuice battery is charged in current regulation phase of charging process as milliamps.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.TerminationCurrent">
            <summary>[50mA – 400mA] When charging current drops below termination current threshold in voltage regulation phase charging process terminates as milliamps.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.RegulationVoltage">
            <summary>[3500mV – 4440mV] Voltage to which voltage over battery is regulated in voltage regulation phase of charging process as millivolts.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.CutOffVoltage">
            <summary>[0mV – 5100mV] Minimum voltage at which battery is fully discharged as millivolts.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.TemperatureCold">
            <summary>Temperature threshold according to JEITA standard below which charging is suspended as celsius.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.TemperatureCool">
            <summary>Temperature threshold according to JEITA standard below which charge current is reduced to half of programmed charge current. This threshold should be set above cold temperature as celsius.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.TemperatureWarm">
            <summary>Temperature threshold according to JEITA standard above which the battery regulation voltage is reduced by 140mV from the programmed regulation voltage. This threshold should be set above cool temperature as celsius.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.TemperatureHot">
            <summary>Temperature threshold according to JEITA standard above which charging is suspended. This threshold should be set above warm temperature as celsius.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.NegativeTemperatureCoefficientB">
            <summary>Thermistor B constant of NTC temperature sensor if it is integrated with battery.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfile.NegativeTemperatureCoefficientResistance">
            <summary>Nominal thermistor resistance at 25°C of NTC temperature sensor if it is integrated with battery as ohm.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryProfileSource">
            <summary>
            Battery profile source
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryProfileSource.Host">
            <summary>
            Host
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryProfileSource.DualInlinePackageSwitch">
            <summary>
            PiJuice DIP Switch
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryProfileSource.Resistor">
            <summary>
            Resistor
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus">
            <summary>
            Battery profile status
            </summary>
            <param name ="BatteryProfile">Current battery profile</param>
            <param name ="BatteryProfileSource">The source for the battery profile</param>
            <param name ="BatteryProfileValid">Whether the current battery profile is valid</param>
            <param name ="BatteryOrigin">The type of battery profile</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus.#ctor(System.String,Iot.Device.PiJuiceDevice.Models.BatteryProfileSource,System.Boolean,Iot.Device.PiJuiceDevice.Models.BatteryOrigin)">
            <summary>
            Battery profile status
            </summary>
            <param name ="BatteryProfile">Current battery profile</param>
            <param name ="BatteryProfileSource">The source for the battery profile</param>
            <param name ="BatteryProfileValid">Whether the current battery profile is valid</param>
            <param name ="BatteryOrigin">The type of battery profile</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus.BatteryProfile">
            <summary>Current battery profile</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus.BatteryProfileSource">
            <summary>The source for the battery profile</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus.BatteryProfileValid">
            <summary>Whether the current battery profile is valid</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.BatteryProfileStatus.BatteryOrigin">
            <summary>The type of battery profile</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryState">
            <summary>
            Battery state
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryState.Normal">
            <summary>
            Battery is present but not charging
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryState.ChargingFromIn">
            <summary>
            Battery is charging from PiJuice USB power connector
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryState.ChargingFrom5VoltInput">
            <summary>
            Battery is charging from GPIO pin (Will occur if powered through Raspberry Pi power connector)
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryState.NotPresent">
            <summary>
            Battery is not detected or not installed
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense">
            <summary>
            Determine how the battery temperature is taken
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense.NotUsed">
            <summary>
            No temperature sensor will be used
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense.NegativeTemperatureCoefficient">
            <summary>
            Use batteries built-in NTC as per battery NTC terminal
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense.OnBoard">
            <summary>
            Use temperature sensor on MCU
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.BatteryTemperatureSense.AutoDetect">
            <summary>
            Let the PiJuice software determine which method to use
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.ButtonSwitch">
            <summary>
            User configurable buttons
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonSwitch.Switch1">
            <summary>
            ButtonSwitch 1, Power button by default
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonSwitch.Switch2">
            <summary>
            ButtonSwitch 2, User button by default
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonSwitch.Switch3">
            <summary>
            ButtonSwitch 3, user button by default
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.ButtonEventType">
            <summary>
            Button event types
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.NoEvent">
            <summary>
            No button event assigned
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.Click">
            <summary>
            Triggered immediately after button is pressed
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.Up">
            <summary>
            Triggered immediately after button is released
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.ClickCustomPeriod">
            <summary>
            Triggered if button is released in time less than configurable timeout after button press
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.DoubleClickCustomPeriod">
            <summary>
            Triggered if button is double pressed in time less than configurable timeout
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.LongClickCustomFirstPeriod">
            <summary>
            Triggered if button is hold pressed hold for configurable time period 1
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.LongClickCustomSecondPeriod">
            <summary>
            Triggered if button is hold pressed hold for configurable time period 2
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.ButtonEventType.Unknown">
            <summary>
            Unknown button event
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.ChargingConfig">
            <summary>
            Charging configuration
            </summary>
            <param name="Enabled">Whether charging is enabled.</param>
            <param name="NonVolatile">Whether the charging configuration is stored in the non-volatile EEPROM.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.ChargingConfig.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Charging configuration
            </summary>
            <param name="Enabled">Whether charging is enabled.</param>
            <param name="NonVolatile">Whether the charging configuration is stored in the non-volatile EEPROM.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.ChargingConfig.Enabled">
            <summary>Whether charging is enabled.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.ChargingConfig.NonVolatile">
            <summary>Whether the charging configuration is stored in the non-volatile EEPROM.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.FaultStatus">
            <summary>
            PiJuice Fault Status
            </summary>
            <param name="ButtonPowerOff">If there was power off triggered by button press.</param>
            <param name="ForcedPowerOff">If there was forced power off caused by loss of energy (battery voltage approached cut-off threshold).</param>
            <param name="ForcedSystemPowerOff">If there was forced system switch turn off caused by loss of energy.</param>
            <param name="WatchdogReset">If watchdog reset happened.</param>
            <param name="BatteryProfileInvalid">Determines if the battery profile is invalid.</param>
            <param name="BatteryChargingTemperatureFault">Battery charging temperature fault.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.FaultStatus.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Iot.Device.PiJuiceDevice.Models.BatteryChargingTemperatureFault)">
            <summary>
            PiJuice Fault Status
            </summary>
            <param name="ButtonPowerOff">If there was power off triggered by button press.</param>
            <param name="ForcedPowerOff">If there was forced power off caused by loss of energy (battery voltage approached cut-off threshold).</param>
            <param name="ForcedSystemPowerOff">If there was forced system switch turn off caused by loss of energy.</param>
            <param name="WatchdogReset">If watchdog reset happened.</param>
            <param name="BatteryProfileInvalid">Determines if the battery profile is invalid.</param>
            <param name="BatteryChargingTemperatureFault">Battery charging temperature fault.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.ButtonPowerOff">
            <summary>If there was power off triggered by button press.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.ForcedPowerOff">
            <summary>If there was forced power off caused by loss of energy (battery voltage approached cut-off threshold).</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.ForcedSystemPowerOff">
            <summary>If there was forced system switch turn off caused by loss of energy.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.WatchdogReset">
            <summary>If watchdog reset happened.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.BatteryProfileInvalid">
            <summary>Determines if the battery profile is invalid.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.FaultStatus.BatteryChargingTemperatureFault">
            <summary>Battery charging temperature fault.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.IdEepromAddress">
            <summary>
            EEPROM I2C Address
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.IdEepromAddress.First">
            <summary>
            Default EEPROM I2C Address 0x52
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.IdEepromAddress.Second">
            <summary>
            EEPROM I2C Address 0x50
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.Led">
            <summary>
            Led designator
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.Led.Led1">
            <summary>
            Led 1
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.Led.Led2">
            <summary>
            Led 2
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.LedBlink">
            <summary>
            Led blink pattern
            </summary>
            <param name="Led">Led designator.</param>
            <param name="BlinkIndefinite">Blink indefinite.</param>
            <param name="Count">Number of blinks between [1 - 254].</param>
            <param name="ColorFirstPeriod">Color for first period of blink.</param>
            <param name="FirstPeriod">Duration of first blink period in milliseconds between [10 – 2550].</param>
            <param name="ColorSecondPeriod">Color for second period of blink.</param>
            <param name="SecondPeriod">Duration of second blink period in milliseconds between [10 – 2550].</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.LedBlink.#ctor(Iot.Device.PiJuiceDevice.Models.Led,System.Boolean,System.Byte,System.Drawing.Color,System.TimeSpan,System.Drawing.Color,System.TimeSpan)">
            <summary>
            Led blink pattern
            </summary>
            <param name="Led">Led designator.</param>
            <param name="BlinkIndefinite">Blink indefinite.</param>
            <param name="Count">Number of blinks between [1 - 254].</param>
            <param name="ColorFirstPeriod">Color for first period of blink.</param>
            <param name="FirstPeriod">Duration of first blink period in milliseconds between [10 – 2550].</param>
            <param name="ColorSecondPeriod">Color for second period of blink.</param>
            <param name="SecondPeriod">Duration of second blink period in milliseconds between [10 – 2550].</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.Led">
            <summary>Led designator.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.BlinkIndefinite">
            <summary>Blink indefinite.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.Count">
            <summary>Number of blinks between [1 - 254].</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.ColorFirstPeriod">
            <summary>Color for first period of blink.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.FirstPeriod">
            <summary>Duration of first blink period in milliseconds between [10 – 2550].</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.ColorSecondPeriod">
            <summary>Color for second period of blink.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedBlink.SecondPeriod">
            <summary>Duration of second blink period in milliseconds between [10 – 2550].</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.LedConfig">
            <summary>
            Led configuration
            </summary>
            <param name="Led">Led designator</param>
            <param name="LedFunction">Led function type</param>
            <param name="Color">Color for Led.
            If LedFunction is ChargeStatus
            Red - parameter defines color component level of red below 15%
            Green - parameter defines color component charge level over 50%
            Blue - parameter defines color component for charging(blink) and fully charged states(constant)
            Red Led and Green Led will show the charge status between 15% - 50%
            </param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.LedConfig.#ctor(Iot.Device.PiJuiceDevice.Models.Led,Iot.Device.PiJuiceDevice.Models.LedFunction,System.Drawing.Color)">
            <summary>
            Led configuration
            </summary>
            <param name="Led">Led designator</param>
            <param name="LedFunction">Led function type</param>
            <param name="Color">Color for Led.
            If LedFunction is ChargeStatus
            Red - parameter defines color component level of red below 15%
            Green - parameter defines color component charge level over 50%
            Blue - parameter defines color component for charging(blink) and fully charged states(constant)
            Red Led and Green Led will show the charge status between 15% - 50%
            </param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedConfig.Led">
            <summary>Led designator</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedConfig.LedFunction">
            <summary>Led function type</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.LedConfig.Color">
            <summary>Color for Led.
            If LedFunction is ChargeStatus
            Red - parameter defines color component level of red below 15%
            Green - parameter defines color component charge level over 50%
            Blue - parameter defines color component for charging(blink) and fully charged states(constant)
            Red Led and Green Led will show the charge status between 15% - 50%
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.LedFunction">
            <summary>
            Led function type
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.LedFunction.NotUsed">
            <summary>
            Led is not configured
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.LedFunction.ChargeStatus">
            <summary>
            Led is configured to signal current charge level of battery
            For level less than or equal too 15% red with configurable brightness
            For level greater than 15% and level less than or equal to 50% mix of red and green with configurable brightness
            For level greater than 50% green with configurable brightness.
            When battery is charging blinking blue with configurable brightness is added to current charge level color. For full buttery state blue component is steady on
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.LedFunction.UserDefined">
            <summary>
            Led is configured as user Led
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand">
            <summary>
            PiJuice commands to read, write, setup pins and access special sensors
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.ChargingConfig">
            <summary>
            Charging configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryProfileStatus">
            <summary>
            Battery Profile Status
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryProfile">
            <summary>
            Battery Profile
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryExtendedProfile">
            <summary>
            Battery extended profile
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryTemperatureSensorConfig">
            <summary>
            Battery temperature sensor configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.PowerInputsConfig">
            <summary>
            Power inputs configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.FirmwareVersion">
            <summary>
            Get the firmware version number
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.Status">
            <summary>
            PiJuice status information
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.ChargeLevel">
            <summary>
            Battery charge level
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.FaultEvent">
            <summary>
            PiJuice fault events
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.ButtonEvent">
            <summary>
            ButtonSwitch event types
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryTemperature">
            <summary>
            Battery temperature
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryVoltage">
            <summary>
            Battery Voltage
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.BatteryCurrent">
            <summary>
            Battery current
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.IOVoltage">
            <summary>
            Supplied voltage
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.IOCurrent">
            <summary>
            Supplied current
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.RunPinConfig">
            <summary>
            Run pin configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.PowerRegulatorConfig">
            <summary>
            Power regulator configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.WatchdogActiviation">
            <summary>
            PiJuice watchdog
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.PowerOff">
            <summary>
            Removes power from the PiJuice to the GPIO pins
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.WakeUpOnCharge">
            <summary>
            Wake up Pi when battery reaches a certian percentage charge level
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.SystemPowerSwitch">
            <summary>
            Provide external power
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.LedState">
            <summary>
            Led States
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.LedBlink">
            <summary>
            Led blink pattern
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.LedConfig">
            <summary>
            Led configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.ButtonConfig">
            <summary>
            ButtonSwitch configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.IdEepromWriteProtect">
            <summary>
            EEPROM write protection
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.IdEepromAddress">
            <summary>
            EEPROM I2C address
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PiJuiceCommand.ResetToDefault">
            <summary>
            Reset PiJuice to default
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PiJuiceInfo">
            <summary>
            PiJuice info
            </summary>
            <param name="FirmwareVersion">Firmware version</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.PiJuiceInfo.#ctor(System.Version)">
            <summary>
            PiJuice info
            </summary>
            <param name="FirmwareVersion">Firmware version</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PiJuiceInfo.FirmwareVersion">
            <summary>Firmware version</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PiJuiceInfo.Manufacturer">
            <summary>
            Manufacturer information
            </summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PiJuiceInfo.Board">
            <summary>
            Board information
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PowerInput">
            <summary>
            PiJuice power input
            </summary>
            <param name="Precedence">Selects what power input will have precedence for charging and supplying VSYS output when both are present, PiJuice USB Micro Input, GPIO 5V Input. 5V_GPIO selected by default.</param>
            <param name="GpioIn">Enables/disables powering PiJuice from 5V GPIO Input. Enabled by default.</param>
            <param name="NoBatteryTurnOn">If enabled PiJuice will automatically power on 5V rail and trigger wake up as soon as power appears at USB Micro Input and there is no battery. Disabled by default.</param>
            <param name="UsbMicroCurrentLimit">Maximum current that PiJuice can take from USB Micro connected power source. 2.5A selected by default</param>
            <param name="UsbMicroDynamicPowerManagement">Minimum voltage at USB Micro power input for Dynamic Power Management Loop. 4.2V set by default.</param>
            <param name="NonVolatile">Whether the power input configuration is stored in the non-volatile EEPROM.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.PowerInput.#ctor(Iot.Device.PiJuiceDevice.Models.PowerInputType,System.Boolean,System.Boolean,UnitsNet.ElectricCurrent,UnitsNet.ElectricPotential,System.Boolean)">
            <summary>
            PiJuice power input
            </summary>
            <param name="Precedence">Selects what power input will have precedence for charging and supplying VSYS output when both are present, PiJuice USB Micro Input, GPIO 5V Input. 5V_GPIO selected by default.</param>
            <param name="GpioIn">Enables/disables powering PiJuice from 5V GPIO Input. Enabled by default.</param>
            <param name="NoBatteryTurnOn">If enabled PiJuice will automatically power on 5V rail and trigger wake up as soon as power appears at USB Micro Input and there is no battery. Disabled by default.</param>
            <param name="UsbMicroCurrentLimit">Maximum current that PiJuice can take from USB Micro connected power source. 2.5A selected by default</param>
            <param name="UsbMicroDynamicPowerManagement">Minimum voltage at USB Micro power input for Dynamic Power Management Loop. 4.2V set by default.</param>
            <param name="NonVolatile">Whether the power input configuration is stored in the non-volatile EEPROM.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.Precedence">
            <summary>Selects what power input will have precedence for charging and supplying VSYS output when both are present, PiJuice USB Micro Input, GPIO 5V Input. 5V_GPIO selected by default.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.GpioIn">
            <summary>Enables/disables powering PiJuice from 5V GPIO Input. Enabled by default.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.NoBatteryTurnOn">
            <summary>If enabled PiJuice will automatically power on 5V rail and trigger wake up as soon as power appears at USB Micro Input and there is no battery. Disabled by default.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.UsbMicroCurrentLimit">
            <summary>Maximum current that PiJuice can take from USB Micro connected power source. 2.5A selected by default</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.UsbMicroDynamicPowerManagement">
            <summary>Minimum voltage at USB Micro power input for Dynamic Power Management Loop. 4.2V set by default.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.PowerInput.NonVolatile">
            <summary>Whether the power input configuration is stored in the non-volatile EEPROM.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PowerInputType">
            <summary>
            Power input type for charging and supplying VSYS output
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInputType.UsbMicro">
            <summary>
            USB micro input
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInputType.Gpio5Volt">
            <summary>
            GPIO 5V
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PowerInState">
            <summary>
            Power input state
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInState.NotPresent">
            <summary>
            No power supply connected
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInState.Bad">
            <summary>
            Find an alternative power supply with a higher rating
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInState.Weak">
            <summary>
            Power supply cannot charge the PiJuice and provide power to the Raspberry Pi
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerInState.Present">
            <summary>
            Power is good
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.PowerRegulatorMode">
            <summary>
            5V Power regulator supplies 5V power Rail with up to 2.5A of continuous current
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerRegulatorMode.PowerSourceDetection">
            <summary>
            This mode switches between DCDC switching mode and LDO mode with most of time in DCDC switching mode. This is mode has high efficiency but increased voltage ripple
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerRegulatorMode.LowDropout">
            <summary>
            This mode regulates 5V Rail voltage to 4.79V. In this mode output voltage has lowest output ripple
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.PowerRegulatorMode.DirectCurrentDirectCurrent">
            <summary>
            This mode 5V Rail voltage is regulated to 5V with 2.5% tolerance, typically 5.07V at mid-loaded conditions. This is the most efficient operation mode
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.RelativeStateOfChangeEstimationType">
            <summary>
            Battery relative state-of-health
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.RelativeStateOfChangeEstimationType.AutoDetect">
            <summary>
            Let the PiJuice software determine the relative state of change estimation
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.RelativeStateOfChangeEstimationType.DirectByMcu">
            <summary>
            MCU used for relative state of change estimation
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.RunPin">
            <summary>
            Run pin configuration
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.RunPin.NotInstalled">
            <summary>
            Run Pin not installed
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.RunPin.Installed">
            <summary>
            Run pin installed
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.Status">
            <summary>
            PiJuice Status
            </summary>
            <param name="IsFault">True if there faults or fault events waiting to be read, otherwise False.</param>
            <param name="IsButton">True if there are button events, otherwise False.</param>
            <param name="Battery">Current battery status.</param>
            <param name="PowerInput">Current USB Micro power input status.</param>
            <param name="PowerInput5VoltInput">Current 5V GPIO power input status.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.Status.#ctor(System.Boolean,System.Boolean,Iot.Device.PiJuiceDevice.Models.BatteryState,Iot.Device.PiJuiceDevice.Models.PowerInState,Iot.Device.PiJuiceDevice.Models.PowerInState)">
            <summary>
            PiJuice Status
            </summary>
            <param name="IsFault">True if there faults or fault events waiting to be read, otherwise False.</param>
            <param name="IsButton">True if there are button events, otherwise False.</param>
            <param name="Battery">Current battery status.</param>
            <param name="PowerInput">Current USB Micro power input status.</param>
            <param name="PowerInput5VoltInput">Current 5V GPIO power input status.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.Status.IsFault">
            <summary>True if there faults or fault events waiting to be read, otherwise False.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.Status.IsButton">
            <summary>True if there are button events, otherwise False.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.Status.Battery">
            <summary>Current battery status.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.Status.PowerInput">
            <summary>Current USB Micro power input status.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.Status.PowerInput5VoltInput">
            <summary>Current 5V GPIO power input status.</summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.SystemPowerSwitch">
            <summary>
            VSYS on J3 to provide power to external devices
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.SystemPowerSwitch.Off">
            <summary>
            VSYS pin is off
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.SystemPowerSwitch.Power500mA">
            <summary>
            VSYS pin provides up to 500 milliampere of power
            </summary>
        </member>
        <member name="F:Iot.Device.PiJuiceDevice.Models.SystemPowerSwitch.Power2100mA">
            <summary>
            VSYS pin provides up to 2100 milliampere of power
            </summary>
        </member>
        <member name="T:Iot.Device.PiJuiceDevice.Models.WakeUpOnCharge">
            <summary>
            Wake up on charge configuration
            </summary>
            <param name="Disabled">Is the wake up on charge disabled.</param>
            <param name="WakeUpPercentage">Battery charge level percentage between [0 - 100] used to wake up the Raspberry Pi.</param>
        </member>
        <member name="M:Iot.Device.PiJuiceDevice.Models.WakeUpOnCharge.#ctor(System.Boolean,UnitsNet.Ratio)">
            <summary>
            Wake up on charge configuration
            </summary>
            <param name="Disabled">Is the wake up on charge disabled.</param>
            <param name="WakeUpPercentage">Battery charge level percentage between [0 - 100] used to wake up the Raspberry Pi.</param>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.WakeUpOnCharge.Disabled">
            <summary>Is the wake up on charge disabled.</summary>
        </member>
        <member name="P:Iot.Device.PiJuiceDevice.Models.WakeUpOnCharge.WakeUpPercentage">
            <summary>Battery charge level percentage between [0 - 100] used to wake up the Raspberry Pi.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_REGISTER">
            <summary>Write one 32bit register value</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_REGISTER_OR_MASK">
            <summary>Sets one 32bit register value using a 32 bit OR mask</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_REGISTER_AND_MASK">
            <summary>Sets one 32bit register value using a 32 bit AND mask</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_REGISTER_MULTIPLE">
            <summary>Processes an array of register addresses in random order and
            performs the defined action on these addresses.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.READ_REGISTER">
            <summary>Reads one 32bit register value</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.READ_REGISTER_MULTIPLE">
            <summary>Reads from an array of max.18 register addresses in random
            order</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_EEPROM">
            <summary>Processes an array of EEPROM addresses in random order and
            writes the value to these addresses</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.READ_EEPROM">
            <summary>Processes an array of EEPROM addresses from a start address
            and reads the values from these addresses</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.WRITE_TX_DATA">
            <summary>This instruction is used to write data into the transmission buffer</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.SEND_DATA">
            <summary>This instruction is used to write data into the transmission buffer,
            the START_SEND bit is automatically set.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.READ_DATA">
            <summary>This instruction is used to read data from reception buffer, after
            successful reception.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.SWITCH_MODE">
            <summary>This instruction is used to switch the mode. It is only possible to
            switch from NormalMode to standby, LPCD or Autocoll.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.MIFARE_AUTHENTICATE">
            <summary>This instruction is used to perform a MIFARE Classic
            Authentication on an activated card.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.EPC_INVENTORY">
            <summary>This instruction is used to perform an inventory of ISO18000-3M3 tags.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.EPC_RESUME_INVENTORY">
            <summary>This instruction is used to resume the inventory algorithm in case it is paused.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.EPC_RETRIEVE_INVENTORY_RESULT_SIZE">
            <summary>This instruction is used to retrieve the size of the inventory result.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.EPC_RETRIEVE_INVENTORY_RESULT">
            <summary>This instruction is used to retrieve the result of a preceding
            EPC_INVENTORY or EPC_RESUME_INVENTORY instruction.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.LOAD_RF_CONFIG">
            <summary>This instruction is used to load the RF configuration from
            EEPROM into the configuration registers.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.UPDATE_RF_CONFIG">
            <summary>This instruction is used to update the RF configuration within
            EEPROM.</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.RETRIEVE_RF_CONFIG_SIZE">
            <summary>This instruction is used to retrieve the number of registers for a
            selected RF configuration</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.RETRIEVE_RF_CONFIG">
            <summary>This instruction is used to read out an RF configuration. The
            register address-value-pairs are available in the response</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.RF_ON">
            <summary>This instruction switch on the RF Field</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.RF_OFF">
            <summary>This instruction switch off the RF Field</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.CONFIGURE_TESTBUS_DIGITAL">
            <summary>Enables the Digital test bus</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Command.CONFIGURE_TESTBUS_ANALOG">
            <summary>Enables the Analog test bus</summary>
        </member>
        <member name="T:Iot.Device.Pn5180.EepromAddress">
            <summary>
            All EEPROM addresses, please refer to the documentation
            for more information.
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DieIdentifier">
            <summary>DieIdentifier</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.ProductVersion">
            <summary></summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.FirmwareVersion">
            <summary>FirmwareVersion</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.EepromVersion">
            <summary>EepromVersion</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.IDLE_IRQ_AFTER_BOOT">
            <summary>IDLE_IRQ_AFTER_BOOT</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.TESTBUS_ENABLE">
            <summary>TESTBUS_ENABLE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.XTAL_BOOT_TIME">
            <summary>XTAL_BOOT_TIME</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.IRQ_PIN_CONFIG">
            <summary>IRQ_PIN_CONFIG</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.MISO_PULLUP_ENABLE">
            <summary>MISO_PULLUP_ENABLE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PLL_DEFAULT_SETTING">
            <summary>PLL_DEFAULT_SETTING</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PLL_DEFAULT_SETTING_ALM">
            <summary>PLL_DEFAULT_SETTING_ALM</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PLL_LOCK_SETTING">
            <summary>PLL_LOCK_SETTING</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.CLOCK_CONFIG">
            <summary>CLOCK_CONFIG</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.MFC_AUTH_TIMEOUT">
            <summary>MFC_AUTH_TIMEOUT</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_REFERENCE_VALUE">
            <summary>LPCD_REFERENCE_VALUE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_FIELD_ON_TIME">
            <summary>LPCD_FIELD_ON_TIME</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_THRESHOLD">
            <summary>LPCD_THRESHOLD</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_REFVAL_GPO_CONTROL">
            <summary>LPCD_REFVAL_GPO_CONTROL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_GPO_TOGGLE_BEFORE_FIELD_ON">
            <summary>LPCD_GPO_TOGGLE_BEFORE_FIELD_ON</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.LPCD_GPO_TOGGLE_AFTER_FIELD_OFF">
            <summary>LPCD_GPO_TOGGLE_AFTER_FIELD_OFF</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.NFCLD_SENSITIVITY_VAL">
            <summary>NFCLD_SENSITIVITY_VAL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.FIELD_ON_CP_SETTLE_TIME">
            <summary>FIELD_ON_CP_SETTLE_TIME</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.RF_DEBOUNCE_TIMEOUT">
            <summary>RF_DEBOUNCE_TIMEOUT</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.SENS_RES">
            <summary>SENS_RES</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.NFCID1">
            <summary>NFCID1</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.SEL_RES">
            <summary>SEL_RES</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.FELICA_POLLING_RESPONSE">
            <summary>FELICA_POLLING_RESPONSE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.RandomUID_enable">
            <summary>RandomUID_enable</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.RANDOM_UID_ENABLE">
            <summary>RANDOM_UID_ENABLE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_CONTROL">
            <summary>DPC_CONTROL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_TIME">
            <summary>DPC_TIME</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_XI">
            <summary>DPC_XI</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.AGC_CONTROL">
            <summary>AGC_CONTROL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_THRSH_HIGH">
            <summary>DPC_THRSH_HIGH</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_THRSH_LOW">
            <summary>DPC_THRSH_LOW</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_DEBUG">
            <summary>DPC_DEBUG</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_AGC_SHIFT_VALUE">
            <summary>DPC_AGC_SHIFT_VALUE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_AGC_GEAR_LUT_SIZE">
            <summary>DPC_AGC_GEAR_LUT_SIZE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_AGC_GEAR_LUT">
            <summary>DPC_AGC_GEAR_LUT</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_GUARD_FAST_MODE">
            <summary>DPC_GUARD_FAST_MODE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_GUARD_SOF_DETECTED">
            <summary>DPC_GUARD_SOF_DETECTED</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DPC_GUARD_FIELD_ON">
            <summary>DPC_GUARD_FIELD_ON</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PCD_AWC_DRC_LUT_SIZE">
            <summary>PCD_AWC_DRC_LUT_SIZE</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PCD_AWC_DRC_LUT">
            <summary>PCD_AWC_DRC_LUT</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.Misc_Config">
            <summary>Misc_Config</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_A_848">
            <summary>DigiDelay_A_848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_B_848">
            <summary>DigiDelay_B_848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_F_424">
            <summary>DigiDelay_F_424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_15693">
            <summary>DigiDelay_15693</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_18000_2_848">
            <summary>DigiDelay_18000_2_848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.DigiDelay_18000_4_848">
            <summary>DigiDelay_18000_4_848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.TestbusMode">
            <summary>TestbusMode</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.TbSelect">
            <summary>TbSelect</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.MapTb1_to_Tb0">
            <summary>MapTb1_to_Tb0</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.NumPadSignalMaps">
            <summary>NumPadSignalMaps</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.PadSignalMap">
            <summary>PadSignalMap</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.TbDac1">
            <summary>TbDac1</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.EepromAddress.TbDac2">
            <summary>TbDac2</summary>
        </member>
        <member name="T:Iot.Device.Pn5180.Pn5180">
            <summary>
            A PN5180 class offering RFID and NFC functionalities. Implement the CardTransceiver class to
            allow Mifare, Credit Card support
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Pn5180.RadioFrequencyConfigurationSize">
            <summary>
            A radio Frequency configuration element size is 5 bytes
            Byte 1 = Register Address
            next 4 bytes = data of the register
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Pn5180.MaximumSpiClockFrequency">
            <summary>
            PN532 SPI Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.Pn5180.DefaultSpiMode">
            <summary>
            Only SPI Mode supported is Mode0
            </summary>
        </member>
        <member name="P:Iot.Device.Pn5180.Pn5180.MaximumReadSize">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Pn5180.Pn5180.MaximumWriteSize">
            <inheritdoc/>
        </member>
        <member name="F:Iot.Device.Pn5180.Pn5180.SupportedProtocols">
            <summary>
            The set of NFC protocols that are supported by this transceiver.
            </summary>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Create a PN5180 RFID/NFC reader
            </summary>
            <param name="spiDevice">The SPI device</param>
            <param name="pinBusy">The pin for the busy line</param>
            <param name="pinNss">The pin for the SPI select line. This has to be handle differently than thru the normal process as PN5180 has a specific way of working</param>
            <param name="gpioController">A GPIO controller, null will use a default one</param>
            <param name="shouldDispose">Dispose the SPI and the GPIO controller at the end if true</param>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetVersions">
            <summary>
            Get the Product, Firmware and EEPROM versions of the PN5180
            </summary>
            <returns>A tuple with the Product, Firmware and EEPROM versions</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetIdentifier(System.Span{System.Byte})">
            <summary>
            Get the PN5180 identifier, this is a 16 byte long
            </summary>
            <param name="outputIdentifier">A 16 byte buffer</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReadAllEeprom(System.Span{System.Byte})">
            <summary>
            Read the full EEPROM
            </summary>
            <param name="eeprom">At 255 bytes buffer</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.WriteAllEeprom(System.Span{System.Byte})">
            <summary>
            Write all the EEPROM
            </summary>
            <param name="eeprom">A 255 bytes buffer</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReadEeprom(Iot.Device.Pn5180.EepromAddress,System.Span{System.Byte})">
            <summary>
            Read a specific part of the EEPROM
            </summary>
            <param name="address">The EEPROM address</param>
            <param name="eeprom">A span of byte to read the EEPROM</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.WriteEeprom(Iot.Device.Pn5180.EepromAddress,System.Span{System.Byte})">
            <summary>
            Write the EEPROM at a specific address
            </summary>
            <param name="address">The EEPROM address</param>
            <param name="eeprom">A span of byte to write the EEPROM</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.SendDataToCard(System.Span{System.Byte},System.Int32)">
            <summary>
            Send data to a card.
            </summary>
            <param name="toSend">The span of byte to send</param>
            <param name="numberValidBitsLastByte">The number of bits valid in the last byte, 8 is the default.
            If validBits == 3 then it's equivalent to apply a mask of 0b000_0111 to get the correct valid bits</param>
            <returns>True if success</returns>
            <remarks>Using this function you'll have to manage yourself the possible low level communication protocol.
            This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings,
            detect a card, select it and then send data</remarks>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReadDataFromCard(System.Span{System.Byte})">
            <summary>
            Read data from a card.
            </summary>
            <param name="toRead">The span of byte to read</param>
            <returns>True if success</returns>
            <remarks>Using this function you'll have to manage yourself the possible low level communication protocol.
            This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings,
            detect a card, select it and then send data</remarks>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReadDataFromCard(System.Span{System.Byte},System.Int32)">
            <summary>
            Read data from a card.
            </summary>
            <param name="toRead">>The span of byte to read</param>
            <param name="expectedToRead">The expected number of bytes to read</param>
            <returns>True if success. Will return false if the number of bytes to read is not the same as the expected number to read</returns>
            <remarks>Using this function you'll have to manage yourself the possible low level communication protocol.
            This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings,
            detect a card, select it and then send data</remarks>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReadDataFromCard(System.Span{System.Byte},System.Int32@)">
            <summary>
            Read all the data from the card
            </summary>
            <param name="toRead">>The span of byte to read</param>
            <param name="bytesRead">number of bytes read</param>
            <returns>A byte array with all the read elements, null if nothing can be read</returns>
            <remarks>Using this function you'll have to manage yourself the possible low level communication protocol.
            This function write directly to the card all the bytes. Please make sure you'll first load specific radio frequence settings,
            detect a card, select it and then send data</remarks>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetNumberOfBytesReceivedAndValidBits">
            <summary>
            Get the number of bytes to read and the valid number of bits in the last byte
            If the full byte is valid then the value of the valid bit is 0
            </summary>
            <returns>A tuple whit the number of bytes to read and the number of valid bits in the last byte. If all bits are valid, then the value of valid bits is 0</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.Transceive(System.Byte,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},Iot.Device.Card.NfcProtocol)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ReselectTarget(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.MifareAuthenticate(System.ReadOnlySpan{System.Byte},Iot.Device.Card.Mifare.MifareCardCommand,System.Byte,System.ReadOnlySpan{System.Byte})">
            <summary>
            Specific function to authenticate Mifare cards
            </summary>
            <param name="key">A 6 bytes key</param>
            <param name="mifareCommand">MifareCardCommand.AuthenticationA or MifareCardCommand.AuthenticationB</param>
            <param name="blockAddress">The block address to authenticate</param>
            <param name="cardUid">The 4 bytes UUID of the card</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.LoadRadioFrequencyConfiguration(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration,Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration)">
            <summary>
            Load a specific radio frequency configuration
            </summary>
            <param name="transmitter">The transmitter configuration</param>
            <param name="receiver">The receiver configuration</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetRadioFrequencyConfigSize(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration)">
            <summary>
            Get the size of the configuration of a specific transmitter configuration
            </summary>
            <param name="transmitter">The transmitter configuration</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetRadioFrequencyConfigSize(Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration)">
            <summary>
            Get the size of the configuration of a specific receiver configuration
            </summary>
            <param name="receiver">The receiver configuration</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.RetrieveRadioFrequencyConfiguration(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration,System.Span{System.Byte})">
            <summary>
            Retrieve the radio frequency configuration
            </summary>
            <param name="transmitter">The transmitter configuration</param>
            <param name="configuration">A span of bytes for the configuration. Should be a multiple of 5 with the size of <see ref="GetRadioFrequenceConfigSize"/></param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.RetrieveRadioFrequencyConfiguration(Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration,System.Span{System.Byte})">
            <summary>
            Retrieve the radio frequency configuration
            </summary>
            <param name="receiver">The receiver configuration</param>
            <param name="configuration">A span of bytes for the configuration. Should be a multiple of 5 with the size of <see ref="GetRadioFrequenceConfigSize"/></param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.UpdateRadioFrequencyConfiguration(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration,System.Span{System.Byte})">
            <summary>
            Update the radio frequency configuration
            </summary>
            <param name="transmitter">The transmitter configuration</param>
            <param name="configuration">A span of bytes for the configuration. Should be a multiple of 5 with the size of <see ref="GetRadioFrequenceConfigSize"/></param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.UpdateRadioFrequencyConfiguration(Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration,System.Span{System.Byte})">
            <summary>
            Update the radio frequency configuration
            </summary>
            <param name="receiver">The receiver configuration</param>
            <param name="configuration">A span of bytes for the configuration. Should be a multiple of 5 with the size of <see ref="GetRadioFrequenceConfigSize"/></param>
            <returns>True if success</returns>
        </member>
        <member name="P:Iot.Device.Pn5180.Pn5180.RadioFrequencyCollision">
            <summary>
            True to disable the Radio Frequency collision avoidance according to ISO/IEC 18092
            False to use Active Communication mode according to ISO/IEC 18092
            </summary>
        </member>
        <member name="P:Iot.Device.Pn5180.Pn5180.RadioFrequencyField">
            <summary>
            Get or set the radio frequency field. True for on, false for off
            </summary>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.GetRadioFrequencyStatus">
            <summary>
            Get the radio frenquency status
            </summary>
            <returns>The radio frequence status</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.IsRadioFrequencyFieldExternal">
            <summary>
            Is the external field activated?
            </summary>
            <returns>True if active, false if not</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ListenToCardIso14443TypeA(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration,Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration,Iot.Device.Rfid.Data106kbpsTypeA@,System.Int32)">
            <summary>
            Listen to any 14443 Type A card
            </summary>
            <param name="transmitter">The transmitter configuration, should be compatible with type A card</param>
            <param name="receiver">The receiver configuration, should be compatible with type A card</param>
            <param name="card">The type A card once detected</param>
            <param name="timeoutPollingMilliseconds">The time to poll the card in milliseconds. Card detection will stop once the detection time will be over</param>
            <returns>True if a 14443 Type A card has been detected</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.ListenToCardIso14443TypeB(Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration,Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration,Iot.Device.Rfid.Data106kbpsTypeB@,System.Int32)">
            <summary>
            Listen to any 14443 Type B card
            </summary>
            <param name="transmitter">The transmitter configuration, should be compatible with type B card</param>
            <param name="receiver">The receiver configuration, should be compatible with type A card</param>
            <param name="card">The type B card once detected</param>
            <param name="timeoutPollingMilliseconds">The time to poll the card in milliseconds. Card detection will stop once the detection time will be over</param>
            <returns>True if a 14443 Type B card has been detected</returns>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.DeselectCardTypeB(Iot.Device.Rfid.Data106kbpsTypeB)">
            <summary>
            Deselect a 14443 Type B card
            </summary>
            <param name="card">The card to deselect</param>
            <returns>True if success</returns>
        </member>
        <member name="P:Iot.Device.Pn5180.Pn5180.CrcReceptionTransfer">
            <summary>
            Set on of off the CRC calculation for the Transfer and Reception
            Switch off is needed for anticollision operation on type A cards. Otherwise normal state is on
            </summary>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.CalculateCrcB(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Provide a calculation of CRC for Type B cards
            </summary>
            <param name="buffer">The buffer to process</param>
            <param name="crc">The CRC, Must be a 2 bytes buffer</param>
        </member>
        <member name="M:Iot.Device.Pn5180.Pn5180.CalculateCrcA(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Provide a calculation of CRC for Type A cards
            </summary>
            <param name="buffer">The buffer to process</param>
            <param name="crc">The CRC, Must be a 2 bytes buffer</param>
        </member>
        <member name="T:Iot.Device.Pn5180.RadioFrequencyCollision">
            <summary>
            The radio frequence collision
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyCollision.Normal">
            <summary>
            Normal mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyCollision.DisableCollision">
            <summary>
             disable collision avoidance according to ISO/IEC 18092
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyCollision.UseActiveCommunication">
            <summary>
             Use Active Communication mode according to ISO/IEC 18092
            </summary>
        </member>
        <member name="T:Iot.Device.Pn5180.RadioFrequencyStatus">
            <summary>
            The radio frequency status
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.Idle">
            <summary>Idle</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.WaitTransmit">
            <summary>Wait Transmit</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.Transmitting">
            <summary>Transmitting</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.WaitReceive">
            <summary>Wait Receive</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.WaitForData">
            <summary>Wait For Data</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.Receiving">
            <summary>Receiving</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.LoopBack">
            <summary>LoopBack</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.RadioFrequencyStatus.Error">
            <summary>Error</summary>
        </member>
        <member name="T:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration">
            <summary>
            Receiver radio frequency configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106">
            <summary>Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_212">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_424">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_848">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443B_106">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443B_212">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443B_424">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443B_848">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.FeliCa_Nfc_PI_212_212">
            <summary>Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.FeliCa_Nfc_PI_212_424">
            <summary>Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Nfc_Active_Initiator_106">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Nfc_Active_Initiator_212">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Nfc_Active_Initiator_424">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso15693_26">
            <summary>Protocol: ISO 15693 Speed (kbit/s): 26</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso15693_53">
            <summary>Protocol: ISO 15693 Speed (kbit/s): 53</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso18003M3_Manch_424_4_106">
            <summary>Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso18003M3_Manch_424_2_212">
            <summary>Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso18003M3_Manch_848_4_212">
            <summary>Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso18003M3_Manch_848_2_424">
            <summary>Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_PICC_106">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_PICC_212">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_PICC_424">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_PICC_848">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Nfc_PassiveTarget_212">
            <summary>Protocol: NFC Passive Target Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Nfc_PassiveTarget_424">
            <summary>Protocol: NFC Passive Target Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_Active_106">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_Active_212">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.Iso14443A_Active_424">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.GTM_ALL">
            <summary>Protocol: GTM Speed (kbit/s): ALL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.ReceiverRadioFrequencyConfiguration.NoChange">
            <summary>No cahnge</summary>
        </member>
        <member name="T:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration">
            <summary>
            Transmitter radio frequency configuration
            </summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_Nfc_PI_106_106">
            <summary>Protocol: ISO 14443-A / NFC PI-106 Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_212">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_424">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_848">
            <summary>Protocol: ISO 14443-A Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443B_106">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443B_212">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443B_424">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443B_848">
            <summary>Protocol: ISO 14443-B Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.FeliCa_Nfc_PI_212_212">
            <summary>Protocol: FeliCa / NFC PI 212 Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.FeliCa_Nfc_PI_424_424">
            <summary>Protocol: FeliCa / NFC PI 424 Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_Active_Initiator_106">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_Active_Initiator_212">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_Active_Initiator_424">
            <summary>Protocol: NFC-Active Initiator Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso15693_ASK100_26">
            <summary>Protocol: ISO 15693 ASK100 Speed (kbit/s): 26</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso15693_ASK10_26">
            <summary>Protocol: ISO 15693 ASK10 Speed (kbit/s): 26</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso18003M3_Manch_424_4_Tari_18_88">
            <summary>Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): Tari=18.88</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso18003M3_Manch_424_2_Tari_9_44">
            <summary>Protocol: ISO 18003M3 Manch. 424_2 Speed (kbit/s): Tari=9.44</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso18003M3_Manch_848_4_Tari_18_88">
            <summary>Protocol: ISO 18003M3 Manch. 848_4 Speed (kbit/s): Tari=18.88</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso18003M3_Manch_848_2_Tari_9_44">
            <summary>Protocol: ISO 18003M3 Manch. 848_2 Speed (kbit/s): Tari=9.44</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso18003M3_Manch_424_4_106">
            <summary>Protocol: ISO 18003M3 Manch. 424_4 Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_PICC_212">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_PICC_424">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Iso14443A_PICC_848">
            <summary>Protocol: ISO 14443-A PICC Speed (kbit/s): 848</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_PassiveTarget_212">
            <summary>Protocol: NFC Passive Target Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_PassiveTarget_424">
            <summary>Protocol: NFC Passive Target Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_ActiveTarget_106_106">
            <summary>Protocol: NFC Active Target 106 Speed (kbit/s): 106</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_ActiveTarget_212_212">
            <summary>Protocol: NFC Active Target 212 Speed (kbit/s): 212</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.Nfc_ActiveTarget_424_424">
            <summary>Protocol: NFC Active Target 424 Speed (kbit/s): 424</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.GTM_ALL">
            <summary>Protocol: GTM Speed (kbit/s): ALL</summary>
        </member>
        <member name="F:Iot.Device.Pn5180.TransmitterRadioFrequencyConfiguration.NoChange">
            <summary>No change</summary>
        </member>
        <member name="T:Iot.Device.Pn532.BaudRate">
            <summary>
            Serial port baud rates
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0009600">
            <summary>
            9600
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0019200">
            <summary>
            19200
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0038400">
            <summary>
            38400
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0057600">
            <summary>
            57600
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0115200">
            <summary>
            115200
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0230400">
            <summary>
            230400
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0460800">
            <summary>
            460800
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B0921600">
            <summary>
            921600
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.BaudRate.B1288000">
            <summary>
            1288000
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.CommandSet">
            <summary>
            All supported commands for the PN532
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.Diagnose">
            <summary>
            Diagnose
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.GetFirmwareVersion">
            <summary>
            GetFirmwareVersion
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.GetGeneralStatus">
            <summary>
            GetGeneralStatus
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.ReadRegister">
            <summary>
            ReadRegister
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.WriteRegister">
            <summary>
            WriteRegister
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.ReadGPIO">
            <summary>
            ReadGPIO
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.WriteGPIO">
            <summary>
            WriteGPIO
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.SetSerialBaudRate">
            <summary>
            SetSerialBaudRate
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.SetParameters">
            <summary>
            SetParameters
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.SAMConfiguration">
            <summary>
            SAMConfiguration
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.PowerDown">
            <summary>
            PowerDown
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.RFConfiguration">
            <summary>
            RFConfiguration
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.RFRegulationTest">
            <summary>
            RFRegulationTest
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InJumpForDEP">
            <summary>
            InJumpForDEP
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InJumpForPSL">
            <summary>
            InJumpForPSL
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InListPassiveTarget">
            <summary>
            InListPassiveTarget
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InATR">
            <summary>
            InATR
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InPSL">
            <summary>
            InPSL
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InDataExchange">
            <summary>
            InDataExchange
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InCommunicateThru">
            <summary>
            InCommunicateThru
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InDeselect">
            <summary>
            InDeselect
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InRelease">
            <summary>
            InRelease
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InSelect">
            <summary>
            InSelect
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.InAutoPoll">
            <summary>
            InAutoPoll
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgInitAsTarget">
            <summary>
            TgInitAsTarget
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgSetGeneralBytes">
            <summary>
            TgSetGeneralBytes
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgGetData">
            <summary>
            TgGetData
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgSetData">
            <summary>
            TgSetData
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgSetMetaData">
            <summary>
            TgSetMetaData
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgGetInitiatorCommand">
            <summary>
            TgGetInitiatorCommand
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgResponseToInitiator">
            <summary>
            TgResponseToInitiator
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.CommandSet.TgGetTargetStatus">
            <summary>
            TgGetTargetStatus
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.DiagnoseMode">
            <summary>
            Diagnostic modes supported by the PN532
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.CommunicationLineTest">
            <summary>
            Communication Line Test
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.ROMTest">
            <summary>
            ROM Test
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.RAMTest">
            <summary>
            RAM Test
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.PollingTestToTarget">
            <summary>
            Polling Test To Target
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.EchoBackTest">
            <summary>
            Echo Back Test
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.AttentionRequestTest">
            <summary>
            Attention Request Test
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.DiagnoseMode.SelfAntenaTest">
            <summary>
            Self Antena Test
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.ErrorCode">
            <summary>
            All errors that can be returned by the PN532
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.Timeout">
            <summary>
            Timeout
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.CRCError">
            <summary>
            CRC Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.ParityError">
            <summary>
            Parity Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.ErroneousBitCount">
            <summary>
            Erroneous Bit Count
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.FramingError">
            <summary>
            Framing Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.AbnormalCollision">
            <summary>
            Abnormal Collision
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.BufferSizeInsufficient">
            <summary>
            Buffer Size Insufficient
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.RFBufferOverflow">
            <summary>
            RF Buffer Overflow
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.RFFieldNotSwitched">
            <summary>
            RF Field Not Switched
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.RFProtocolError">
            <summary>
            RF Protocol Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.TemperatureError">
            <summary>
            Temperature Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.InternalBufferOverflow">
            <summary>
            Internal Buffer Overflow
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.InvalidParameter">
            <summary>
            Invalid Parameter
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.DEPProtocolTargetModeNotSupport">
            <summary>
            DEP Protocol Target Mode Not Supported
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.DEPProtocolDataFormatNotMatch">
            <summary>
            DEP Protocol Data Format Not Match
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.MifareAuthenticationError">
            <summary>
            Mifare Authentication Error
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.CheckByteWrong">
            <summary>
            Check Byte Wrong
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.DEPProtocolInvalidDeviceState">
            <summary>
            DEP Protocol Invalid Device State
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.OperationNotAllowed">
            <summary>
            Operation Not Allowed
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.CommandNotAcceptable">
            <summary>
            Command Not Acceptable
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.ConfiguredTargetBeenReleased">
            <summary>
            Configured Target Been Released
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.IDCardDoesNotMatch">
            <summary>
            ID Card Does Not Match
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.CardDisappeared">
            <summary>
            Card Disappeared
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.MismatchDEPPassive">
            <summary>
            Mismatch DEP Passive
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.OverCurrentDetected">
            <summary>
            Over Current Detected
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.NADMissing">
            <summary>
            NA DMissing
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ErrorCode.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.FirmwareVersion">
            <summary>
            PN532 firmware version
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.FirmwareVersion.#ctor(System.Byte,System.Version,Iot.Device.Pn532.VersionSupported)">
            <summary>
            Creates PN532 firmware version object
            </summary>
            <param name="identificationCode">The identification code for PN532 should be 0x32.</param>
            <param name="version">The version, latest know one is 1.6.</param>
            <param name="versionSupported">All card version supported.</param>
        </member>
        <member name="P:Iot.Device.Pn532.FirmwareVersion.IdentificationCode">
            <summary>
            The identification code for PN532 should be 0x32
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.FirmwareVersion.Version">
            <summary>
            The version, latest know one is 1.6
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.FirmwareVersion.VersionSupported">
            <summary>
            All card version supported
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.FirmwareVersion.IsPn532">
            <summary>
            Is it a PN532?
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.OperatingMode">
            <summary>
            The operation mode
            0b0000_0011 is reserved for future usage
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.OperatingMode.HighSpeedUart">
            <summary>
            High Speed UART
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.OperatingMode.I2c">
            <summary>
            I2C
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.OperatingMode.Spi">
            <summary>
            SPI
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.Port3">
            <summary>
            The GPIO state of the GPIO located on the P3 port
            Most of those ports can be used as external GPIO ports
            Refer to the detailed documentation page 79 and 80
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P35">
            <summary>
            P35
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P34">
            <summary>
            P34
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P33">
            <summary>
            P33
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P32">
            <summary>
            P32
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P31">
            <summary>
            P31
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port3.P30">
            <summary>
            P30
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.Port7">
            <summary>
            The GPIO state of the GPIO located on the P7 port
            Those ports can be used as external GPIO ports when SPI is not used
            Refer to the detailed documentation page 79 and 80
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port7.P72">
            <summary>
            P72
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Port7.P71">
            <summary>
            P71
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.ParametersFlags">
            <summary>
            Parameters complementary of the Security Module Parameters
            Allows to change the behavior of the handshake with the card
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.NADUsed">
            <summary>
            bit 0: fNADUsed is Use of the NAD information in case of initiator
            configuration (DEP and ISO/IEC14443-4 PCD).
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.DIDUsed">
            <summary>
            bit 1: fDIDUsed is Use of the DID information in case of initiator
            configuration (or CID in case of ISO/IEC14443-4 PCD configuration).
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.AutomaticATR_RES">
            <summary>
            bit 2: fAutomaticATR_RES is Automatic generation of the ATR_RES in
            case of target configuration.
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.AutomaticRATS">
            <summary>
            bit 4: fAutomaticRATS is Automatic generation of the RATS in case of
            ISO/IEC14443-4 PCD mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.ISO14443_4_PICC">
            <summary>
            bit 5: fISO14443-4_PICC is The emulation of a ISO/IEC14443-4 PICC is
            enabled.
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ParametersFlags.RemovePrePostAmble">
            <summary>
            bit 6: fRemovePrePostAmble is The PN532 does not send Preamble and
            Postamble.
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.Pn532">
            <summary>
            PN532 RFID/NFC reader
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.ReadTimeOut">
            <summary>
            Set or get the read timeout for I2C and SPI
            Please refer to the documentation to set the right
            timeout value depending on the communication
            mode you are using
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.FirmwareVersion">
            <summary>
            Firmware version information
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.MaximumReadSize">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.MaximumWriteSize">
            <inheritdoc/>
        </member>
        <member name="F:Iot.Device.Pn532.Pn532.SupportedProtocols">
            <summary>
            The set of NFC protocols that are supported by this transceiver.
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Pn532.SpiClockFrequency">
            <summary>
            PN532 SPI Clock Frequency
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Pn532.SpiMode">
            <summary>
            Only SPI Mode supported is Mode0
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.Pn532.I2cDefaultAddress">
            <summary>
            The default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.#ctor(System.String,System.Boolean)">
            <summary>
            Create a PN532 using Serial Port
            </summary>
            <param name="portName">The port name</param>
            <param name="checkVersion">Check the PN532 version. Some copies do not return a proper number.</param>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean,System.Boolean)">
            <summary>
            Create a PN532 using SPI
            </summary>
            <param name="spiDevice">The SPI Device</param>
            <param name="pinChipSelect">The GPIO pin number for the chip select</param>
            <param name="controller">A GPIO controller</param>
            <param name="shouldDispose">Dispose the GPIO Controller at the end</param>
            /// <param name="checkVersion">Check the PN532 version. Some copies do not return a proper number.</param>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.#ctor(System.Device.I2c.I2cDevice,System.Boolean)">
            <summary>
            Create a PN532 using I2C
            </summary>
            <param name="i2cDevice">The I2C device</param>
            /// <param name="checkVersion">Check the PN532 version. Some copies do not return a proper number.</param>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.RunSelfTest(Iot.Device.Pn532.DiagnoseMode)">
            <summary>
            Run self tests
            Note: some self tests are not implemented yet
            </summary>
            <param name="diagnoseMode">The self test to run</param>
            <returns>True when success</returns>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.VirtualCardTimeout">
            <summary>
            Get or set the timeout when PN532 is in virtual card mode
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.SecurityAccessModuleMode">
            <summary>
            Get or set the Security Access Module Mode
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.Pn532.ParametersFlags">
            <summary>
            Get or set the Security Access Module parameters
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ListPassiveTarget(Iot.Device.Pn532.ListPassive.MaxTarget,Iot.Device.Pn532.ListPassive.TargetBaudRate)">
            <summary>
            List all targets cards in range
            When using this function, you can't determine which target you've read
            So you'll need to use the Decode functions to try to get a card type
            So use this function only with a specific card type. Prefer the AutoPoll function
            As the type identified is returned
            </summary>
            <param name="maxTarget">The maximum number of targets</param>
            <param name="targetBaudRate">The baud rate to use</param>
            <returns>A raw byte array with the data of the targets if any has been identified</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ListPassiveTarget(Iot.Device.Pn532.ListPassive.MaxTarget,Iot.Device.Pn532.ListPassive.TargetBaudRate,System.ReadOnlySpan{System.Byte})">
            <summary>
            List all targets cards in range
            When using this function, you can't determine which target you've read
            So you'll need to use the Decode functions to try to get a card type
            So use this function only with a specific card type. Prefer the AutoPoll function
            As the type identified is returned
            </summary>
            <param name="maxTarget">The maximum number of targets</param>
            <param name="targetBaudRate">The baud rate to use to find cards</param>
            <param name="initiatorData">Specific initialization data</param>
            <returns>A raw byte array with the data of the targets if any has been identified</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.TryDecode106kbpsTypeA(System.Span{System.Byte})">
            <summary>
            Try to decode a raw byte array containing target information
            to a 106 kbps Type A card
            </summary>
            <param name="toDecode">The raw byte array</param>
            <returns>A decoded card of null if it can't</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.TryDecodeData106kbpsTypeB(System.Span{System.Byte})">
            <summary>
            Try to decode a raw byte array containing target information
            to a 106 kbps Type B card
            </summary>
            <param name="toDecode">The raw byte array</param>
            <returns>A decoded card of null if it can't</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.TryDecodeData212_424Kbps(System.Span{System.Byte})">
            <summary>
            Try to decode a raw byte array containing target information
            to a 212 424 kbps card
            </summary>
            <param name="toDecode">The raw byte array</param>
            <returns>A decoded card of null if it can't</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.TryDecodeData106kbpsInnovisionJewel(System.Span{System.Byte})">
            <summary>
            Try to decode a raw byte array containing target information
            to a 106 kbps Innovision Jewel card
            </summary>
            <param name="toDecode">The raw byte array</param>
            <returns>A decoded card of null if it can't</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.DeselectTarget(System.Byte)">
            <summary>
            Deselect a specific target number card
            </summary>
            <param name="targetNumber">Target number card</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SelectTarget(System.Byte)">
            <summary>
            Select a specific target number card
            </summary>
            <param name="targetNumber">Target number card</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReleaseTarget(System.Byte)">
            <summary>
            Release a specific target number card
            </summary>
            <param name="targetNumber">Target number card</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteReadDirect(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Write an array of data directly to the card without adding anything
            from the PN532 and read the raw data
            </summary>
            <param name="dataToSend">The data to write to the card</param>
            <param name="dataFromCard">The potential data to receive</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.Transceive(System.Byte,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},Iot.Device.Card.NfcProtocol)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.TransceiveAdvance(System.Byte,System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Use the built in feature to transceive the data to the card. This add specific logic for some cards.
            </summary>
            <param name="targetNumber">The card target number</param>
            <param name="dataToSend">The data to write to the card</param>
            <param name="dataFromCard">The potential data to receive</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReselectTarget(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.AutoPoll(System.Byte,System.UInt16,Iot.Device.Pn532.ListPassive.PollingType[])">
            <summary>
            Automatically poll specific types of devices
            </summary>
            <param name="numberPolling">The number of polling before accepting a card</param>
            <param name="periodMilliSecond">The period of polling before accepting a card</param>
            <param name="pollingType">The type of cards to poll</param>
            <returns>A raw byte array containing the number of cards, the card type and the raw data. Null if nothing has been polled</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.InitAsTarget(Iot.Device.Pn532.AsTarget.TargetModeInitialization,Iot.Device.Pn532.AsTarget.TargetMifareParameters,Iot.Device.Pn532.AsTarget.TargetFeliCaParameters,Iot.Device.Pn532.AsTarget.TargetPiccParameters)">
            <summary>
            Set the PN532 as a target, so as a card
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReadDataAsTarget(System.Span{System.Byte})">
            <summary>
            read data from the reader when PN532 is a target
            </summary>
            <param name="receivedData">A Span byte array for the read data. Note the first byte contains the status</param>
            <returns>Number of byte read</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteDataAsTarget(System.ReadOnlySpan{System.Byte})">
            <summary>
            Write data to the reader when PN532 is a target
            </summary>
            <param name="dataToSend">The data to send</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetRfField(Iot.Device.Pn532.RfConfiguration.RfFieldMode)">
            <summary>
            Set the Radio Frequency Field Mode
            </summary>
            <param name="rfFieldMode">Radio Frequency Field Mode</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetVariousTimings(Iot.Device.Pn532.RfConfiguration.VariousTimingsMode)">
            <summary>
            Set the Various Timing Mode
            </summary>
            <param name="variousTimingsMode">Various Timing Mode</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetMaxRetryWriteRead(System.Byte)">
            <summary>
            Set the Maximum Retry in the 2 WriteRead modes
            </summary>
            <param name="numberRetries">The number of retries</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetMaxRetriesInitialization(Iot.Device.Pn532.RfConfiguration.MaxRetriesMode)">
            <summary>
            Set the MAximu Retries during the various initialization modes
            </summary>
            <param name="maxRetriesMode">Retry modes</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetAnalog106kbpsTypeA(Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode)">
            <summary>
            Set the specific 106 kbps card Type A modes
            </summary>
            <param name="analog106Kbps">The mode settings</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetAnalog212_424Kbps(Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode)">
            <summary>
            Set the specific 212 424 kbps card modes
            </summary>
            <param name="analog212_424">The mode settings</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetAnalogTypeB(Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode)">
            <summary>
            Set the specific 106 kbps card Type B modes
            </summary>
            <param name="analogSettings">The mode settings</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetAnalog212_424_848kbps(Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode)">
            <summary>
            Configure analog mode
            </summary>
            <param name="analog212_424_848Kbps">Settings</param>
            <returns>True is success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReadRegisterSfr(Iot.Device.Pn532.SfrRegister[],System.Span{System.Byte})">
            <summary>
            Read an array of SFR registers
            </summary>
            <param name="registers">Array of register to read</param>
            <param name="registerValues">Register read values</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReadRegister(System.UInt16,System.Byte@)">
            <summary>
            Read a single register
            </summary>
            <param name="register">The register to read</param>
            <param name="registerValue">The value of the register</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReadRegister(System.UInt16[],System.Span{System.Byte})">
            <summary>
            Read any register from the XRAM
            </summary>
            <param name="registers">Array of register to read</param>
            <param name="registerValues">Register read values</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteRegisterSfr(Iot.Device.Pn532.SfrRegister[],System.Span{System.Byte})">
            <summary>
            Write an array of SFR registers
            </summary>
            <param name="registers">Array of register to write</param>
            <param name="registerValue">Register values to write</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteRegister(System.UInt16,System.Byte)">
            <summary>
            Write a single register
            </summary>
            <param name="register">The register to write</param>
            <param name="registerValue">The value of the register</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteRegister(System.UInt16[],System.Span{System.Byte})">
            <summary>
            Write an array of register
            </summary>
            <param name="registers">Array of register to write</param>
            <param name="registerValue">Register values to write</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.ReadGpio(Iot.Device.Pn532.Port3@,Iot.Device.Pn532.Port7@,Iot.Device.Pn532.OperatingMode@)">
            <summary>
            Read the PN532 GPIO
            </summary>
            <param name="p3">The P3 GPIO</param>
            <param name="p7">The P7 GPIO</param>
            <param name="l0L1">The specific operation mode register</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteGpio(Iot.Device.Pn532.Port7,Iot.Device.Pn532.Port3)">
            <summary>
            Write the PN532 GPIO ports 3 and 7
            </summary>
            <param name="p7">The P7 GPIO</param>
            <param name="p3">The P3 GPIO</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteGpio(Iot.Device.Pn532.Port3)">
            <summary>
            Write the PN532 GPIO port 3 leaving port 7 in it's current state
            </summary>
            <param name="p3">The P3 GPIO</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WriteGpio(Iot.Device.Pn532.Port7)">
            <summary>
            Write the PN532 GPIO port 7 leaving port 3 in it's current state
            </summary>
            <param name="p7">The P7 GPIO</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.PowerDown(Iot.Device.Pn532.WakeUpEnable)">
            <summary>
            Power down the PN532
            </summary>
            <param name="wakeUpEnable">What can wake the PN532</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.WakeUp">
            <summary>
            Wake Up the PN532
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.SetSerialBaudRate(Iot.Device.Pn532.BaudRate)">
            <summary>
            Setup the baud rate communication when using the HSU Serial Port mode
            </summary>
            <param name="baudRate">Baud rate</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.CreateWriteMessage(Iot.Device.Pn532.CommandSet,System.ReadOnlySpan{System.Byte})">
            <summary>
            Normal Frame:
            PREAMBLE 1 byte4
            START CODE 2 bytes (0x00 and 0xFF),
            LEN 1 byte indicating the number of bytes in the data field
            (TFI and PD0 to PDn),
            LCS 1 Packet Length Checksum LCS byte that satisfies the relation:
            Lower byte of [LEN + LCS] = 0x00,
            TFI 1 byte frame identifier, the value of this byte depends
            on the way of the message
            - D4h in case of a frame from the host controller to the PN532,
            - D5h in case of a frame from the PN532 to the host controller.
            DATA LEN-1 bytes of Packet Data Information
            The first byte PD0 is the Command Code,
            DCS 1 Data Checksum DCS byte that satisfies the relation:
            Lower byte of [TFI + PD0 + PD1 + … + PDn + DCS] = 0x00,
            POSTAMBLE 1 byte2.
            The amount of data that can be exchanged using this frame structure is limited to 255
            bytes (including TFI).
            00 00 FF LEN LCS TFI PD0 PD1 ……... PDn DCS 00
            -- ----- --- --- --- ----------------- --- --
            |    |    |   |   |            |         |  |_ Postamble
            |    |    |   |   |            |         |____ Packet Data Checksum
            |    |    |   |   |            |______________ Packet Data
            |    |    |   |   |___________________________ Specific PN532 Frame Identifier
            |    |    |   |_______________________________ Packet Length Checksum
            |    |    |___________________________________ Packet Length
            |    |________________________________________ Start codes
            |_____________________________________________ Preamble
            If the length is large than 255, then you have LEN and LCS = 0xFF and
            2 additional bytes for the MBS and LBS size of the real length
            Extended Frame:
            The information frame has an extended definition allowing exchanging more data
            between the host controller and the PN532.
            In the firmware implementation of the PN532, the maximum length of the packet data is
            limited to 264 bytes(265 bytes with TFI included).
            The structure of this frame is the following:
            00 00 FF FF FF LENm LENl LCS TFI PD0 PD1 ……... PDn DCS 00
            -- ----- ----- ---- ---- --- --- ----------------- --- --
            |    |     |     |   |    |   |            |        |  |_ Postamble
            |    |     |     |   |    |   |            |        |____ Packet Data Checksum
            |    |     |     |   |    |   |            |_____________ Packet Data
            |    |     |     |   |    |   |__________________________ Specific PN532 Frame Identifier
            |    |     |     |   |    |______________________________ Packet Length Checksum
            |    |     |     |   |___________________________________ Packet Length LSByte
            |    |     |     |_______________________________________ Packet Length MSByte
            |    |     |_____________________________________________ Fixed for extrended frame
            |    |___________________________________________________ Start codes
            |________________________________________________________ Preamble
            </summary>
            <param name="commandSet">The command to use</param>
            <param name="writeData">The additional data to send</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Pn532.Pn532.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfigurationMode">
            <summary>
            Radio Frequency configuration mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.RfField">
            <summary>
            Rf Field
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.VariousTimings">
            <summary>
            Various Timings
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.MaxRetryCOM">
            <summary>
            Max Retry COM
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.MaxRetries">
            <summary>
            Max Retries
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.AnalogSettingsB106kbpsTypeA">
            <summary>
            Analog Settings B106 kbps Type A
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.AnalogSettingsB212_424kbps">
            <summary>
            Analog Settings B212_424 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.AnalogSettingsTypeB">
            <summary>
            Analog Settings Type B
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfigurationMode.AnalogSettingsB212_424_848ISO_IEC14443_4">
            <summary>
            Analog Settings B212_424_848 ISO_IEC14443_4
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.RFConfigurationTimeout">
            <summary>
            The Radio Frequency configuration timeout
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.NoTimeout">
            <summary>
            NoTimeout
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout100MicroSecond">
            <summary>
            Timeout 100 Micro Second
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout200MicroSecond">
            <summary>
            Timeout 200 Micro Second
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout400MicroSecond">
            <summary>
            Timeout 400 Micro Second
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout800MicroSecond">
            <summary>
            Timeout 800 Micro Second
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout1Dot6ms">
            <summary>
            Timeout 1.6 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout3Dot2ms">
            <summary>
            Timeout 3.2 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout6Dot4ms">
            <summary>
            Timeout 6.4 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout12Dot8ms">
            <summary>
            Timeout 12.8 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout25Dot6ms">
            <summary>
            Timeout 25.6 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout51Dot2ms">
            <summary>
            Timeout 51.2 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout102Dot4ms">
            <summary>
            Timeout 102.4 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout204Dot8ms">
            <summary>
            Timeout 204.8 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout409Dot6ms">
            <summary>
            Timeout 409.6 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout819Dot2ms">
            <summary>
            Timeout 819.2 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout1Dot64sec">
            <summary>
            Timeout 1.64 sec
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RFConfigurationTimeout.Timeout3Dot28sec">
            <summary>
            Timeout 3.28 sec
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.SecurityAccessModuleMode">
            <summary>
            Security Access Module Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SecurityAccessModuleMode.Normal">
            <summary>
            0x01: Normal mode, the SAM is not used; this is the default mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SecurityAccessModuleMode.VirtualCard">
            <summary>
            0x02: Virtual Card, the couple PN532+SAM is seen as only one
            contactless SAM card from the external world
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SecurityAccessModuleMode.WiredCard">
            <summary>
            0x03: Wired Card, the host controller can access to the SAM with
            standard PCD commands (InListPassiveTarget,InDataExchange, …)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SecurityAccessModuleMode.DualCard">
            <summary>
            0x04: Dual Card, both the PN532 and the SAM are visible from the
            external world as two separated targets
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.SfrRegister">
            <summary>
            Specific SFR registers
            Please refer to documentation for detailed definition
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.PCON">
            <summary>
            PCON
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.IE0">
            <summary>
            IE0
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.IEN1">
            <summary>
            IEN1
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.RWL">
            <summary>
            RWL
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.SPIcontrol">
            <summary>
            SPI control
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P7CFGA">
            <summary>
            P7CFGA
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.TWL">
            <summary>
            TWL
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.SPIstatus">
            <summary>
            SPI status
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P7CFGB">
            <summary>
            P7CFGB
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FIFOFS">
            <summary>
            FIFOFS
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.HSU_STA">
            <summary>
            HSU_STA
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P7">
            <summary>
            P7
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FIFOFF">
            <summary>
            FIFOFF
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.HSU_CTR">
            <summary>
            HSU_CTR
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.IP1">
            <summary>
            IP1
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.SFF">
            <summary>
            SFF
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.HSU_PRE">
            <summary>
            HSU_PRE
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P3CFGA">
            <summary>
            P3CFGA
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FIT">
            <summary>
            FIT
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.HSU_CNT">
            <summary>
            HSU_CNT
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P3CFGB">
            <summary>
            P3CFGB
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FITE">
            <summary>
            FITE
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.P3">
            <summary>
            P3
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FDATA">
            <summary>
            FDATA
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.IP0">
            <summary>
            IP0
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.FSIZE">
            <summary>
            FSIZE
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.SfrRegister.CIU_COMMAND">
            <summary>
            CIU_COMMAND
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.VersionSupported">
            <summary>
            All supported version for the NFC reader
            TODO: if more readers appear, this can be for sure place
            in common and more modes can be added
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.VersionSupported.Iso18092">
            <summary>
            Iso 18092
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.VersionSupported.IsoIec14443TypeB">
            <summary>
            Iso/Iec 14443 Type B
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.VersionSupported.IsoIec14443TypeA">
            <summary>
            Iso/Iec 14443 Type A
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.WakeUpEnable">
            <summary>
            The modes for which the PN532 can be awake when sleeping
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.I2c">
            <summary>
            I2C
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.Gpio">
            <summary>
            GPIO
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.Spi">
            <summary>
            SPI
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.Hsu">
            <summary>
            High Speed UART
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.RFLevelDetector">
            <summary>
            RF Lev el Detector
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.Int1">
            <summary>
            Int 1
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.WakeUpEnable.Int0">
            <summary>
            Int 0
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode">
            <summary>
            This CfgItem is used to choose the analog settings that the PN532 will use for the
            baudrate 106kbps type A.
            When using this command, the host controller has to provide 11 values
            (ConfigurationData[]) for the following internal registers
            Actually, there is only one CIU_Demod register which defines a setting used by the
            reader in reception only.But depending on the RF condition, two different settings
            can be used for this register:
            • CIU_Demod when own RF is On defines a setting when its RF field is on
            during a reception i.e.initiator passive mode,
            • CIU_Demod when own RF is Off defines a setting when its RF field is off
            during a reception i.e.initiator active mode.
            CIU = Contactless Interface Unit
            Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.RfConfiguration">
            <summary>
            RFCfg, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.GsNOn">
            <summary>
            GsNOn, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 for modulation, when own RF field is switched on
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.CWGsP">
            <summary>
            CWGsP, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.ModGsP">
            <summary>
            ModGsP, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 when not in modulation phase
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.DemodWhenRfOn">
            <summary>
            DemodWhenRfOn, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Defines demodulator settings when radio frequency is on
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.RxThreshold">
            <summary>
            RxThreshold, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.DemodWhenRfOff">
            <summary>
            DemodWhenRfOff, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Defines demodulator settings when radio frequency is off
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.GsNOff">
            <summary>
            GsNOff, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 for load modulation when own RF field is switched off
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.ModWidth">
            <summary>
            ModWidth, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the setting of the width of the Miller pause
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.MifNFC">
            <summary>
            MifNFC, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the communication in ISO/IEC 14443/MIFARE and
            NFC target mode at 106 kbit/s
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.TxBitPhase">
            <summary>
            TxBitPhase, cf page 104 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Bit synchronization at 106 kbit/s
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.Analog106kbpsTypeAMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode">
            <summary>
            This CfgItem is used to choose the analog settings that the PN532 will use for the
            baudrates 212/424/848 kbps with ISO/IEC14443-4 cards.
            When using this command, the host controller has to provide 9 values
            (ConfigurationData[]) for the following internal registers:
            Except for these three specific registers (CIU_RxThreshold, CIU_ModWidth and
            CIU_MifNFC), the 8 remaining analog registers are the same as the previous
            CfgItem 0x0A.
            CIU = Contactless Interface Unit
            Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.RxThreshold212">
            <summary>
            RxThreshold212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder for 212 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.ModWidth212">
            <summary>
            ModWidth212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the setting of the width of the Miller pause for 212 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.MifNFC212">
            <summary>
            MifNFC212, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the communication in ISO/IEC 14443/MIFARE and
            NFC target mode at 212 kbit/s
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.RxThreshold424">
            <summary>
            RxThreshold424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder for 424 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.ModWidth424">
            <summary>
            ModWidth424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the setting of the width of the Miller pause for 424 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.MifNFC424">
            <summary>
            MifNFC424, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            NFC target mode at 424 kbit/s
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.RxThreshold848">
            <summary>
            RxThreshold848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder for 848 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.ModWidth848">
            <summary>
            ModWidth848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Controls the setting of the width of the Miller pause for 848 kbps
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.MifNFC848">
            <summary>
            MifNFC848, cf page 106 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            NFC target mode at 848 kbit/s
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.Analog212_424_848kbpsMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode">
            <summary>
            This CfgItem is used to choose the analog settings that the PN532 will use for the
            baudrates 212/424kbps.
            When using this command, the host controller has to provide 8 values
            (ConfigurationData[]) for the following internal registers
            Actually, there is only one CIU_Demod register which defines a setting used by the
            reader in reception only.But depending on the RF condition, two different settings
            can be used for this register:
            • CIU_Demod when own RF is On defines a setting when its RF field is on
            during a reception i.e.initiator passive mode,
            • CIU_Demod when own RF is Off defines a setting when its RF field is off
            during a reception i.e.initiator active mode.
            CIU = Contactless Interface Unit
            Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.RfConfiguration">
            <summary>
            RfCfg, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.GsNOn">
            <summary>
            GsNon, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 for modulation, when own RF field is switched on
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.CWGsP">
            <summary>
            CWGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 when not in modulation phase
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.ModGsP">
            <summary>
            ModGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
             Selects the conductance of the antenna driver pins TX1 and
            TX2 when in modulation phase
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.DemodWhenRfOn">
            <summary>
            DmodWhenRfOn, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Defines demodulator settings when radio frequency is on
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.RxThreshold">
            <summary>
            RxThreshold, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.DemodWhenRfOff">
            <summary>
            DemodWhenRfOff, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Defines demodulator settings when radio frequency is off
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.GsNOff">
            <summary>
            GsNOff, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 for load modulation when own RF field is switched off
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.Analog212_424kbpsMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode">
            <summary>
            This CfgItem is used to choose the analog settings that the PN532 will use for the
            type B when configured as PCD.
            When using this command, the host controller has to provide 3 new values
            (ConfigurationData[]) for the following internal registers:
            Except for these two specific settings, the 8 remaining analog settings are the
            same as the CfgItem 106 kbps type A.
            CIU = Contactless Interface Unit
            Please refer to https://www.nxp.com/docs/en/nxp/data-sheets/PN532_C1.pdf page 144
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.GsNOn">
            <summary>
            GsNOn, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 for modulation, when own RF field is switched on
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.ModGsP">
            <summary>
            ModGsP, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects the conductance of the antenna driver pins TX1 and
            TX2 when in modulation phase
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.RxThreshold">
            <summary>
            RxThreshold, cf page 105 documentation 141520.pdf and page 144 documentation PN532_C1.pdf
            Selects thresholds for the bit decoder
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.AnalogSettingsTypeBMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.MaxRetriesMode">
            <summary>
            The parameters MxRtyATR, MxRtyPSL and MxRtyPassiveActivation define the
            number of retries that the PN532 will use in case of the following processes
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.MaxRetryAnswerToReset">
            <summary>
            MxRtyATR is a byte containing the number of times that the PN532 will retry to
            send the ATR_REQ in case of incorrect reception of the ATR_RES(or no
            reception at all - timeout).
            For active mode, value 0xFF means to try eternally, 0x00 means only once(no
            retry, only one try). The default value of this parameter is 0xFF (infinitely).
            For passive mode, the value is always overruled with 0x02 (two retries).
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.MaxRetryPSL">
            <summary>
            MxRtyPSL is a byte containing the number of times that:
            • The PN532 will retry to send the PSL_REQ in case of incorrect reception of
            the PSL_RES(or no reception at all) for the NFC IP1 protocol,
            • The PN532 will retry to send the PPS request in case of incorrect reception
            of the PPS response(or no reception at all) for the ISO/IEC14443-4
            protocol.
            Value 0xFF means to try eternally, 0x00 means only once(no retry, only one
            try).The default value of this parameter is 0x01 (the PSL_REQ/PPS request is
            sent twice in case of need).
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.MaxRetryPassiveActivation">
            <summary>
            MxRtyPassiveActivation is a byte containing the number of times that the
            PN532 will retry to activate a target in InListPassiveTarget command
            (§7.3.5, p: 115).
            Value 0xFF means to try eternally, 0x00 means only once(no retry, only one
            try).
            The default value of this parameter is 0xFF (infinitely).
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.MaxRetriesMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.RfFieldMode">
            <summary>
            Radio frequency field modes
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfFieldMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfFieldMode.AutoRFCA">
            <summary>
            Auto radio frequency CA
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfFieldMode.RF">
            <summary>
            Radio frequency
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.RfTimeout">
            <summary>
            Radio frequency timeouts
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T100MicroSeconds">
            <summary>
            100 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T200MicroSeconds">
            <summary>
            200 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T400MicroSeconds">
            <summary>
            400 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T800MicroSeconds">
            <summary>
            800 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T1600MicroSeconds">
            <summary>
            1600 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T3200MicroSeconds">
            <summary>
            3200 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T6400MicroSeconds">
            <summary>
            6400 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T12800MicroSeconds">
            <summary>
            12800 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T25600MicroSeconds">
            <summary>
            25600 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T51200MicroSeconds">
            <summary>
            51200 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T102400MicroSeconds">
            <summary>
            102400 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T204800MicroSeconds">
            <summary>
            20480 0Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T409600MicroSeconds">
            <summary>
            409600 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T819200MicroSeconds">
            <summary>
            819200 Micro Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T1640MilliSeconds">
            <summary>
            1640 Milli Seconds
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.RfTimeout.T3280MilliSeconds">
            <summary>
            3280 Milli Seconds
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.RfConfiguration.VariousTimingsMode">
            <summary>
            The radio frequency timing modes
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.RFU">
            <summary>
            Reserved for Further Usage
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.AnsweToRequestResponseTimeout">
            <summary>
            The second byte in this item defines the timeout between ATR_REQ and
            ATR_RES when the PN532 is in initiator mode.A target is considered as mute if no
            valid ATR_RES is received within this timeout value. In this way, the PN532 can
            easily detect non TPE target in passive 212-424 kbps mode.
            The default value for this parameter is 0x0B (102.4 ms).
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.RetryTimeout">
            <summary>
            The third byte defines the timeout value that the PN532 uses in the
            InCommunicateThru(§7.3.9, p: 136) command to give up reception from the
            target in case of no answer.
            The default value for this parameter is 0x0A (51.2 ms).
            This timeout definition is also used with InDataExchange(§7.3.8, p: 127) when
            the target is a FeliCa or a Mifare card(Ultralight, Standard…).
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.RfConfiguration.VariousTimingsMode.Serialize">
            <summary>
            Get the byte array to send
            </summary>
            <returns>Serialized value</returns>
        </member>
        <member name="T:Iot.Device.Pn532.ListPassive.MaxTarget">
            <summary>
            The number of targets to look for
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.MaxTarget.One">
            <summary>
            One
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.MaxTarget.Two">
            <summary>
            Two
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.ListPassive.PollingType">
            <summary>
            Polling type for all supported cards
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.GenericPassive106kbps">
            <summary>
            Generic passive 106 kbps (ISO/IEC14443-4A, Mifare and DEP)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.GenericPassive212kbps">
            <summary>
            Generic passive 212 kbps (FeliCa and DEP)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.GenericPassive424kbps">
            <summary>
            Generic passive 424 kbps (FeliCa and DEP),
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.Passive106kbps">
            <summary>
            Passive 106 kbps ISO/IEC14443-4B
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.InnovisionJewel">
            <summary>
            Innovision Jewel tag
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.MifareCard">
            <summary>
            Mifare card
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.Felica212kbps">
            <summary>
            FeliCa 212 kbps card
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.Felica424kbps">
            <summary>
            FeliCa 424 kbps card
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.Passive106kbpsISO144443_4A">
            <summary>
            Passive 106 kbps ISO/IEC14443-4A
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.Passive106kbpsISO144443_4B">
            <summary>
            Passive 106 kbps ISO/IEC14443-4B
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepPassive106kbps">
            <summary>
            DEP passive 106 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepPassive212kbps">
            <summary>
            DEP passive 212 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepPassive424kbps">
            <summary>
            DEP passive 424 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepActive106kbps">
            <summary>
            DEP active 106 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepActive212kbps">
            <summary>
            DEP active 212 kbps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.PollingType.DepActive424kbps">
            <summary>
            DEP active 424 kbps
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.ListPassive.TargetBaudRate">
            <summary>
            The baud rate target for specific cards
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.TargetBaudRate.B106kbpsTypeA">
            <summary>
             106 kbps type A (ISO/IEC14443 Type A)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.TargetBaudRate.B212kbps">
            <summary>
            212 kbps (FeliCa polling)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.TargetBaudRate.B424kbps">
            <summary>
            424 kbps (FeliCa polling)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.TargetBaudRate.B106kbpsTypeB">
            <summary>
            106 kbps type B (ISO/IEC14443-3B)
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.ListPassive.TargetBaudRate.B106kbpsInnovisionJewelTag">
            <summary>
            106 kbps Innovision Jewel tag.
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetBaudRateInialized">
            <summary>
            When PN532 is acting as a target, the baud rate
            it is engaged to
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetBaudRateInialized.B106kbps">
            <summary>
            106k bps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetBaudRateInialized.B212kbps">
            <summary>
            212k bps
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetBaudRateInialized.B424kbps">
            <summary>
            424k bps
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetFeliCaParameters">
            <summary>
            Parameters for the FeliCa card when PN532 is
            setup as a target
            See document AN133910.pdf on nxp website for default values
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.NfcId2">
            <summary>
            The NFC Id for a FeliCa card, legnth must be 8 bytes
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.Pad">
            <summary>
            The PAD for a FeliCa card, length must be 8 bytes
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.SystemCode">
            <summary>
            System Code (2 bytes), these two bytes are returned in the POL_RES frame if
            the 4th byte of the incoming POL_REQ command frame is 0x01
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.AsTarget.TargetFeliCaParameters.Serialize">
            <summary>
            Serialize the data to be used for initialization
            </summary>
            <returns>Data serialized</returns>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetFramingType">
            <summary>
            Target Framing Type
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetFramingType.Mifare">
            <summary>
            Mifare
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetFramingType.ActiveMode">
            <summary>
            Active Mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetFramingType.FeliCa">
            <summary>
            FeliCa
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetMifareParameters">
            <summary>
            Parameters to emulate a Mifare card when PN532 is
            setup as a target
            See document AN133910.pdf on nxp website for default values
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetMifareParameters.Atqa">
            <summary>
            SENS_RES (2 bytes LSB first, as defined in ISO/IEC14443-3)
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetMifareParameters.NfcId3">
            <summary>
            NFCID for emulation is only 3 lenght
            PN532 has hardware coded first NFCID byte to avoid
            having full copy of cards
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetMifareParameters.Sak">
            <summary>
            SEL_RES (1 byte), typical value:
            = 0x40 (for DEP)
            = 0x20 (for ISO/IEC14443-4 PICC emulation)
            = 0x60 (for both DEP and emulation of ISO/IEC14443-4 PICC)
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.AsTarget.TargetMifareParameters.Serialize">
            <summary>
            Serialize the data to be used for initialization
            </summary>
            <returns>Data serialized</returns>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetModeInitialization">
            <summary>
            Target Mode Initialization
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetModeInitialization.Default">
            <summary>
            Uses all the modes
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetModeInitialization.PassiveOnly">
            <summary>
            PassiveOnly flag is used to configure the PN532 to accept to be
            initialized only in passive mode, i.e. to refuse active communication mode
            /// </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetModeInitialization.DepOnly">
            <summary>
            PassiveOnly flag is used to configure the PN532 to accept to be initialized
            only in passive mode, i.e. to refuse active communication mode
            </summary>
        </member>
        <member name="F:Iot.Device.Pn532.AsTarget.TargetModeInitialization.PiccOnly">
            <summary>
            PICCOnly flag is used to configure the PN532 to accept to be initialized only as
            ISO/IEC14443-4 PICC, i.e. receiving an RATS frame. If the PN532 receives another
            command frame as first command following AutoColl process, it will be rejected
            and the PN532 returns automatically in the AutoColl state
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetModeInitialized">
            <summary>
            The information regarding the mode initialized
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetModeInitialized.TargetBaudRate">
            <summary>
            The target baud rate between the PN532 and the reader
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetModeInitialized.IsISO14443_4Picc">
            <summary>
            True if we have a PICC emulation
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetModeInitialized.IsDep">
            <summary>
            True if it's DEP emulation
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetModeInitialized.TargetFramingType">
            <summary>
            The target framing type
            </summary>
        </member>
        <member name="T:Iot.Device.Pn532.AsTarget.TargetPiccParameters">
            <summary>
            Parameters for a PICC card (like a Credit Card) when PN532 is
            setup as a target
            See document AN133910.pdf on nxp website for default values
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetPiccParameters.NfcId3">
            <summary>
            The NFC Id for a PICC card, legnth must be 10 bytes
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetPiccParameters.GeneralTarget">
            <summary>
            General target initialization bytes, length can't be more than 47
            Default values are provided
            </summary>
        </member>
        <member name="P:Iot.Device.Pn532.AsTarget.TargetPiccParameters.HistoricalTarget">
            <summary>
            Historical data for target initialization bytes, length can't be more than 48
            </summary>
        </member>
        <member name="M:Iot.Device.Pn532.AsTarget.TargetPiccParameters.Serialize">
            <summary>
            Serialize the data to be used for initialization
            </summary>
            <returns>Data serialized</returns>
        </member>
        <member name="T:Iot.Device.RadioReceiver.FrequencyRange">
            <summary>
            TEA5767 FM frequency range.
            </summary>
        </member>
        <member name="F:Iot.Device.RadioReceiver.FrequencyRange.Japan">
            <summary>
            76MHz - 90MHz
            </summary>
        </member>
        <member name="F:Iot.Device.RadioReceiver.FrequencyRange.Other">
            <summary>
            87MHz - 108MHz
            </summary>
        </member>
        <member name="T:Iot.Device.RadioReceiver.SearchDirection">
            <summary>
            TEA5767 radio search direction.
            </summary>
        </member>
        <member name="F:Iot.Device.RadioReceiver.SearchDirection.Up">
            <summary>
            Up
            </summary>
        </member>
        <member name="F:Iot.Device.RadioReceiver.SearchDirection.Down">
            <summary>
            Down
            </summary>
        </member>
        <member name="T:Iot.Device.RadioReceiver.Tea5767">
            <summary>
            FM Stereo Radio TEA5767
            </summary>
        </member>
        <member name="F:Iot.Device.RadioReceiver.Tea5767.DefaultI2cAddress">
            <summary>
            TEA5767 default I2C address.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioReceiver.Tea5767.Mute">
            <summary>
            TEA5767 mute.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioReceiver.Tea5767.Standby">
            <summary>
            TEA5767 standby.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioReceiver.Tea5767.FrequencyRange">
            <summary>
            TEA5767 FM frequency range.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioReceiver.Tea5767.Frequency">
            <summary>
            TEA5767 FM frequency.
            </summary>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.#ctor(System.Device.I2c.I2cDevice,Iot.Device.RadioReceiver.FrequencyRange,UnitsNet.Frequency)">
            <summary>
            Create a new instance of the TEA5767.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="frequencyRange">FM frequency range.</param>
            <param name="frequency">FM frequency.</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.SetMute(System.Boolean)">
            <summary>
            Set whether TEA5767 is mute.
            </summary>
            <param name="isMute">Mute if the value is true.</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.GetMute">
            <summary>
            Get whether TEA5767 is mute.
            </summary>
            <returns>Mute if the value is true.</returns>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.SetFrequencyRange(Iot.Device.RadioReceiver.FrequencyRange)">
            <summary>
            Set TEA5767 FM frequency range.
            </summary>
            <param name="bandRange">FM frequency range.</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.GetFrequencyRange">
            <summary>
            Get TEA5767 FM frequency range.
            </summary>
            <returns>FM frequency range.</returns>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.SetFrequency(UnitsNet.Frequency)">
            <summary>
            Set TEA5767 FM frequency.
            </summary>
            <param name="frequency">FM frequency.</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.GetFrequency">
            <summary>
            Get TEA5767 FM frequency.
            </summary>
            <returns>FM frequency.</returns>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.SetStandby(System.Boolean)">
            <summary>
            Set whether TEA5767 is standby.
            </summary>
            <param name="isStandby">Standby if the value is true.</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.GetStandby">
            <summary>
            Get whether TEA5767 is standby.
            </summary>
            <returns>Standby if the value is true.</returns>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.Search(Iot.Device.RadioReceiver.SearchDirection,System.Int32)">
            <summary>
            Automatic search for effective radio.
            </summary>
            <param name="searchDirection">Search up or down from the current frequency.</param>
            <param name="stopLevel">Stop search condition (range from 1 to 3).</param>
        </member>
        <member name="M:Iot.Device.RadioReceiver.Tea5767.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.RadioReceiver.RadioReceiverBase">
            <summary>
            Base class for radio receiver.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioReceiver.RadioReceiverBase.Frequency">
            <summary>
            Radio receiver FM frequency.
            </summary>
        </member>
        <member name="M:Iot.Device.RadioReceiver.RadioReceiverBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.RadioReceiver.RadioReceiverBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the RadioReceiverBase and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.BassBoost">
            <summary>
            Bass Boost
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.BassBoost.BoostDisable">
            <summary>
            Disable
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.BassBoost.Boost05dB">
            <summary>
            5 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.BassBoost.Boost11dB">
            <summary>
            11 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.BassBoost.Boost17dB">
            <summary>
            17 dB
            </summary>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.RadioTransmitterBase">
            <summary>
            Base class for radio transmitter.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.RadioTransmitterBase.Frequency">
            <summary>
            Radio transmitter FM frequency.
            </summary>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.RadioTransmitterBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.RadioTransmitterBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the RadioTransmitterBase and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.Region">
            <summary>
            Region (Pre-Emphasis time constant)
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.America">
            <summary>
            Pre-Emphasis time constant is 75μs
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.Japan">
            <summary>
            Pre-Emphasis time constant is 75μs
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.Europe">
            <summary>
            Pre-Emphasis time constant is 50μs
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.Australia">
            <summary>
            Pre-Emphasis time constant is 50μs
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.China">
            <summary>
            Pre-Emphasis time constant is 50μs
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Region.Other">
            <summary>
            Pre-Emphasis time constant is 50μs
            </summary>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.Kt0803">
            <summary>
            FM radio transmitter module KT0803.
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.Kt0803.DefaultI2cAddress">
            <summary>
            Kt0803 default I2C address.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.Frequency">
            <summary>
            Kt0803 FM frequency (range from 70Mhz to 108Mhz).
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.Standby">
            <summary>
            Kt0803 standby.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.Mute">
            <summary>
            Kt0803 mute.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.PgaGain">
            <summary>
            Kt0803 PGA (Programmable Gain Amplifier) gain.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.TransmissionPower">
            <summary>
            Kt0803 transmission power.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.Region">
            <summary>
            Kt0803 region.
            </summary>
        </member>
        <member name="P:Iot.Device.RadioTransmitter.Kt0803.BassBoost">
            <summary>
            Kt0803 bass boost.
            </summary>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.#ctor(System.Device.I2c.I2cDevice,System.Double,Iot.Device.RadioTransmitter.Region,Iot.Device.RadioTransmitter.TransmissionPower,Iot.Device.RadioTransmitter.PgaGain)">
            <summary>
            Creates a new instance of the Kt0803.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="frequency">FM frequency (range from 70MHz to 108MHz).</param>
            <param name="region">Region.</param>
            <param name="power">Transmission power.</param>
            <param name="pga">PGA (Programmable Gain Amplifier) gain.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetFrequency(System.Double)">
            <summary>
            Set Kt0803 FM frequency.
            </summary>
            <param name="frequency">FM frequency (range from 70MHz to 108MHz).</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetFrequency">
            <summary>
            Get Kt0803 FM frequency.
            </summary>
            <returns>FM frequency.</returns>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetPga(Iot.Device.RadioTransmitter.PgaGain)">
            <summary>
            Set Kt0803 PGA (Programmable Gain Amplifier) gain.
            </summary>
            <param name="pgaGain">PGA gain.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetPga">
            <summary>
            Get Kt0803 PGA (Programmable Gain Amplifier) gain.
            </summary>
            <returns>PGA gain.</returns>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetTransmissionPower(Iot.Device.RadioTransmitter.TransmissionPower)">
            <summary>
            Set Kt0803 transmission power.
            </summary>
            <param name="power">Transmission power.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetTransmissionPower">
            <summary>
            Get Kt0803 transmission power.
            </summary>
            <returns>Transmission power.</returns>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetRegion(Iot.Device.RadioTransmitter.Region)">
            <summary>
            Set Kt0803 region.
            </summary>
            <param name="region">region.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetMute(System.Boolean)">
            <summary>
            Set Kt0803 mute.
            </summary>
            <param name="isMute">Mute when value is true.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetMute">
            <summary>
            Get Kt0803 mute.
            </summary>
            <returns>Mute when value is true.</returns>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetStandby(System.Boolean)">
            <summary>
            Set Kt0803 standby.
            </summary>
            <param name="isStandby">Standby when value is true.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetStandby">
            <summary>
            Get Kt0803 standby.
            </summary>
            <returns>Standby when value is true.</returns>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.SetBassBoost(Iot.Device.RadioTransmitter.BassBoost)">
            <summary>
            Set Kt0803 bass boost.
            </summary>
            <param name="bassBoost">Boost mode.</param>
        </member>
        <member name="M:Iot.Device.RadioTransmitter.Kt0803.GetBassBoost">
            <summary>
            Get Kt0803 bass boost.
            </summary>
            <returns>Boost mode.</returns>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.PgaGain">
            <summary>
            PGA (Programmable Gain Amplifier) Gain
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.Pga00dB">
            <summary>
            0 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.Pga04dB">
            <summary>
            4 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.Pga08dB">
            <summary>
            8 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.Pga12dB">
            <summary>
            12 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.PgaN04dB">
            <summary>
            -4 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.PgaN08dB">
            <summary>
            -8 dB
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.PgaGain.PgaN12dB">
            <summary>
            -12 dB
            </summary>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.Register">
            <summary>
            Kt0803 Register
            </summary>
        </member>
        <member name="T:Iot.Device.RadioTransmitter.TransmissionPower">
            <summary>
            Transmission Power
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power095_5dBuV">
            <summary>
            95.5 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power096_5dBuV">
            <summary>
            96.5 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power097_5dBuV">
            <summary>
            97.5 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power098_2dBuV">
            <summary>
            98.2 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power098_9dBuV">
            <summary>
            98.9 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power100dBuV">
            <summary>
            100 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power101_5dBuV">
            <summary>
            101.5 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power102_8dBuV">
            <summary>
            102.8 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power105_1dBuV">
            <summary>
            105.1 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power105_6dBuV">
            <summary>
            105.6 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power106_2dBuV">
            <summary>
            106.2 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power106_5dBuV">
            <summary>
            106.5 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power107dBuV">
            <summary>
            107 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power107_4dBuV">
            <summary>
            107.4 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power107_7dBuV">
            <summary>
            107.7 dBuV
            </summary>
        </member>
        <member name="F:Iot.Device.RadioTransmitter.TransmissionPower.Power108dBuV">
            <summary>
            108 dBuV
            </summary>
        </member>
        <member name="T:Iot.Device.LEDMatrix.PinMapping">
            <summary>
            Represents pin mapping for LED matrix
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.PinMapping.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs PinMapping instance
            </summary>
            <param name="r1">First pin of the red channel</param>
            <param name="g1">First pin of the green channel</param>
            <param name="b1">First pin of the blue channel</param>
            <param name="r2">Second pin of the red channel</param>
            <param name="g2">Second pin of the green channel</param>
            <param name="b2">Second pin of the blue channel</param>
            <param name="oe">Output enable pin</param>
            <param name="clock">Clock pin</param>
            <param name="latch">Latch pin</param>
            <param name="a">Address pin A</param>
            <param name="b">Address pin B</param>
            <param name="c">Address pin C</param>
            <param name="d">Address pin D</param>
            <param name="e">Address pin E</param>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.MatrixBonnetMapping32">
            <summary>
            Default mapping for 32x32 matrix using bonnet
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.MatrixBonnetMapping64">
            <summary>
            Default mapping for 64x64 matrix using bonnet
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.R1">
            <summary>
            First pin of the red channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.G1">
            <summary>
            First pin of the green channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.B1">
            <summary>
            First pin of the blue channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.R2">
            <summary>
            Second pin of the red channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.G2">
            <summary>
            Second pin of the green channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.B2">
            <summary>
            Second pin of the blue channel
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.OE">
            <summary>
            Output enable pin
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.Clock">
            <summary>
            Clock pin
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.Latch">
            <summary>
            Latch pin
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.A">
            <summary>
            Address pin A
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.B">
            <summary>
            Address pin B
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.C">
            <summary>
            Address pin C
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.D">
            <summary>
            Address pin D
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.PinMapping.E">
            <summary>
            Address pin E
            </summary>
        </member>
        <member name="T:Iot.Device.LEDMatrix.RGBLedMatrix">
            <summary>
            Represents RGB LED matrix
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.#ctor(Iot.Device.LEDMatrix.PinMapping,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a new RGBLedMatrix object
            </summary>
            <param name="mapping">The Gpio pin mapping</param>
            <param name="width">The width in pixels of the matrix display area</param>
            <param name="height">The height in pixels of the matrix display area</param>
            <param name="chainRows">Number of the matrices rows in the chain</param>
            <param name="chainColumns">Number of the matrices columns in the chain</param>
        </member>
        <member name="P:Iot.Device.LEDMatrix.RGBLedMatrix.Width">
            <summary>
            Return the width in pixels of the display
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.RGBLedMatrix.Height">
            <summary>
            Return the height in pixels of the display
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.RGBLedMatrix.MatrixHeight">
            <summary>
            The height in pixels of one matrix in the chain
            </summary>
        </member>
        <member name="P:Iot.Device.LEDMatrix.RGBLedMatrix.PWMDuration">
            <summary>
            Set or get the time duration in nanoseconds used in the Pulse Width Modulation (PWM).
            </summary>
            <value></value>
        </member>
        <member name="P:Iot.Device.LEDMatrix.RGBLedMatrix.FrameTime">
            <summary>
            Return the time in microseconds used to draw a full display frame
            </summary>
            <value></value>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.FillRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Fill a rectangle on the display with specific color
            </summary>
            <param name="x">Upper left rectangle x coordinate</param>
            <param name="y">Upper left rectangle y coordinate</param>
            <param name="width">The rectangle width</param>
            <param name="height">The rectangle height</param>
            <param name="red">red color value</param>
            <param name="green">green color value</param>
            <param name="blue">blue color value</param>
            <param name="backBuffer">true if to draw on back buffer, false to draw on the forground buffer</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.Fill(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Fill the whole display area with a specific color
            </summary>
            <param name="red">red color value</param>
            <param name="green">green color value</param>
            <param name="blue">blue color value</param>
            <param name="backBuffer">true if to draw on back buffer, false to draw on the forground buffer</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.SetPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set color of specific pixel on the forground buffer display
            </summary>
            <param name="column">x coordinate of the pixel</param>
            <param name="row">y coordinate of the pixel</param>
            <param name="red">red color value</param>
            <param name="green">green color value</param>
            <param name="blue">blue color value</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.SetBackBufferPixel(System.Int32,System.Int32,System.Byte,System.Byte,System.Byte)">
            <summary>
            Set color of specific pixel on the background buffer display
            </summary>
            <param name="column">x coordinate of the pixel</param>
            <param name="row">y coordinate of the pixel</param>
            <param name="red">red color value</param>
            <param name="green">green color value</param>
            <param name="blue">blue color value</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.SwapBuffers">
            <summary>
            Swap the forground and background buffers
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.Dispose">
            <summary>
            Dispose the object after done using it.
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.StartRendering">
            <summary>
            Start rendering on the display area.
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.StopRendering">
            <summary>
            Stop rendering on the display area.
            </summary>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.DrawBitmap(System.Int32,System.Int32,Iot.Device.Graphics.BitmapImage,System.Boolean)">
            <summary>
            Draw a bitmap on the matrix display area
            </summary>
            <param name="x">Upper left x coordinate on the display</param>
            <param name="y">Upper left y coordinate on the display</param>
            <param name="bitmap">System.Drawing.Bitmap object to draw</param>
            <param name="backBuffer">true if want use back buffer, false otherwise</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.DrawBitmap(System.Int32,System.Int32,Iot.Device.Graphics.BitmapImage,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Draw a bitmap on the matrix display area.
            The drawing will replace any pixel with the color (red, green, blue) by the color (repRed, repGreen, repBlue)
            </summary>
            <param name="x">Upper left x coordinate on the display</param>
            <param name="y">Upper left y coordinate on the display</param>
            <param name="bitmap">System.Drawing.Bitmap object to draw</param>
            <param name="red">red color to replace</param>
            <param name="green">green color to replace</param>
            <param name="blue">blue color to replace</param>
            <param name="repRed">replacement color for the red color</param>
            <param name="repGreen">replacement color for the green color</param>
            <param name="repBlue">replacement color for the blue color</param>
            <param name="backBuffer">true if want use back buffer, false otherwise</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.DrawText(System.Int32,System.Int32,System.ReadOnlySpan{System.Char},Iot.Device.Graphics.BdfFont,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Draws text on the display at a specified position
            </summary>
            <param name="x">X coordinate of the text position</param>
            <param name="y">Y coordinate of the text position</param>
            <param name="text">Text to draw</param>
            <param name="font">Font to use to draw the text</param>
            <param name="textR">Red channel of the text color</param>
            <param name="textG">Green channel of the text color</param>
            <param name="textB">Blue channel of the text color</param>
            <param name="bkR">Red channel of the text background</param>
            <param name="bkG">Green channel of the text background</param>
            <param name="bkB">Blue channel of the text background</param>
            <param name="backBuffer">Set to true if drawing on the backing buffer. Defaults to false.</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.DrawText(System.Int32,System.Int32,System.String,Iot.Device.Graphics.BdfFont,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Write a text at specific position to the display using the input font and the colors
            </summary>
            <param name="x">Upper left x coordinate to start drawing the text at</param>
            <param name="y">Upper left y coordinate to start drawing the text at</param>
            <param name="text">The text to draw</param>
            <param name="font">The drawing font</param>
            <param name="textR">text red color</param>
            <param name="textG">text green color</param>
            <param name="textB">text blue color</param>
            <param name="bkR">text background red color</param>
            <param name="bkG">text background green color</param>
            <param name="bkB">text background blue color</param>
            <param name="backBuffer">true if want use back buffer, false otherwise</param>
        </member>
        <member name="M:Iot.Device.LEDMatrix.RGBLedMatrix.DrawCircle(System.Int32,System.Int32,System.Int32,System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            Draw a Circle on the display
            </summary>
            <param name="xCenter">x coordinate of the center</param>
            <param name="yCenter">y coordinate of the center</param>
            <param name="radius">radius length</param>
            <param name="red">red color of circle arc</param>
            <param name="green">green color of circle arc</param>
            <param name="blue">blue color of circle arc</param>
            <param name="backBuffer">true if want use back buffer, false otherwise</param>
        </member>
        <member name="T:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder">
            <summary>
            Binding that exposes a quadrature rotary encoder
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.PulsesPerRotation">
            <summary>
            The number of pulses expected per rotation of the encoder
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.PulseCount">
            <summary>
            The number of pulses before or after the start position of the encoder
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.Rotations">
            <summary>
            The number of rotations backwards or forwards from the initial position of the encoder
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.Debounce">
            <summary>The Debounce property represents the minimum amount of delay
            allowed between falling edges of the A (clk) pin. The recommended value are few milliseconds typically around 5.
            This depends from your usage.</summary>
        </member>
        <member name="E:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.PulseCountChanged">
            <summary>
            EventHandler to allow the notification of value changes.
            </summary>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            QuadratureRotaryEncoder constructor
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
            <param name="controller">GpioController that hosts Pins A and B.</param>
            <param name="shouldDispose">True to dispose the controller</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            QuadratureRotaryEncoder constructor
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.OnPulse(System.Boolean,System.Int32)">
            <summary>
            Modify the current value on receipt of a pulse from the rotary encoder.
            </summary>
            <param name="blnUp">When true then the value should be incremented otherwise it should be decremented.</param>
            <param name="milliSecondsSinceLastPulse">The number of miliseconds since the last pulse.</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.Initialize(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes)">
            <summary>
            Initialize an QuadratureRotaryEncoder
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.QuadratureRotaryEncoder.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.RotaryEncoder.RotaryEncoderEventArgs">
            <summary>
            EventArgs used with the RotaryEncode binding to pass event information when the Value changes.
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.RotaryEncoderEventArgs.Value">
            <summary>The Value property represents current value associated with the RotaryEncoder.</summary>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.RotaryEncoderEventArgs.#ctor(System.Double)">
            <summary>
            Construct a new RotaryEncoderEventArgs
            </summary>
            <param name="value">Current value associated with the rotary encoder</param>
        </member>
        <member name="T:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder">
            <summary>
            Scaled Quadrature Rotary Controller binding
            </summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.Value">
            <summary>The Value property represents current value associated with the RotaryEncoder.</summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.AccelerationSlope">
            <summary>The AccelerationSlope property along with the AccelerationOffset property represents how the
            increase or decrease in value should grow as the incremental encoder is turned faster.</summary>
        </member>
        <member name="P:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.AccelerationOffset">
            <summary>The AccelerationOffset property along with the AccelerationSlope property represents how the
            increase or decrease in value should grow as the incremental encoder is turned faster.</summary>
        </member>
        <member name="E:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.ValueChanged">
            <summary>
            EventHandler to allow the notification of value changes.
            </summary>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes,System.Int32,System.Double,System.Double,System.Double,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            ScaledQuadratureEncoder constructor
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
            <param name="pulseIncrement">The amount that the value increases or decreases on each pulse from the rotary encoder</param>
            <param name="rangeMin">Minimum value permitted. The value is clamped to this.</param>
            <param name="rangeMax">Maximum value permitted. The value is clamped to this.</param>
            <param name="controller">GpioController that hosts Pins A and B.</param>
            <param name="shouldDispose">Dispose the controller if true</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            ScaledQuadratureEncoder constructor
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
            <param name="pulseIncrement">The amount that the value increases or decreases on each pulse from the rotary encoder</param>
            <param name="rangeMin">Minimum value permitted. The value is clamped to this.</param>
            <param name="rangeMax">Maximum value permitted. The value is clamped to this.</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes,System.Int32)">
            <summary>
            ScaledQuadratureEncoder constructor for a 0..100 range with 100 steps
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinEventTypes,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            ScaledQuadratureEncoder constructor for a 0..100 range with 100 steps
            </summary>
            <param name="pinA">Pin A that is connected to the rotary encoder. Sometimes called clk</param>
            <param name="pinB">Pin B that is connected to the rotary encoder. Sometimes called data</param>
            <param name="edges">The pin event types to 'listen' for.</param>
            <param name="pulsesPerRotation">The number of pulses to be received for every full rotation of the encoder.</param>
            <param name="controller">GpioController that hosts Pins A and B.</param>
            <param name="shouldDispose">Dispose the controller if true</param>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.ReadValue">
            <summary>
            Read the current Value
            </summary>
            <returns>The value associated with the rotary encoder.</returns>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.Acceleration(System.Int32)">
            <summary>
            Calculate the amount of acceleration to be applied to the increment of the encoder.
            </summary>
            <remarks>
            This uses a straight line function output = input * AccelerationSlope + Acceleration offset but can be overridden
            to perform different algorithms.
            </remarks>
            <param name="milliSecondsSinceLastPulse">The amount of time elapsed since the last data pulse from the encoder in milliseconds.</param>
            <returns>A value that can be used to apply acceleration to the rotary encoder.</returns>
        </member>
        <member name="M:Iot.Device.RotaryEncoder.ScaledQuadratureEncoder.OnPulse(System.Boolean,System.Int32)">
            <summary>
            Modify the current value on receipt of a pulse from the encoder.
            </summary>
            <param name="blnUp">When true then the value should be incremented otherwise it should be decremented.</param>
            <param name="milliSecondsSinceLastPulse">The amount of time elapsed since the last data pulse from the encoder in milliseconds.</param>
        </member>
        <member name="T:Iot.Device.Rtc.Ds1307">
            <summary>
            Realtime Clock DS1307
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds1307.DefaultI2cAddress">
            <summary>
            DS1307 Default I2C Address
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Ds1307.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the DS1307
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds1307.ReadTime">
            <summary>
            Read Time from DS1307
            </summary>
            <returns>DS1307 Time</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds1307.SetTime(System.DateTime)">
            <summary>
            Set DS1307 Time
            </summary>
            <param name="time">Time</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds1307.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds1307Register">
            <summary>
            Register of DS1307
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231">
            <summary>
            Realtime Clock DS3231
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231.DefaultI2cAddress">
            <summary>
            DS3231 Default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231.Temperature">
            <summary>
            DS3231 Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231.EnabledAlarm">
            <summary>
            Gets or sets which of the two alarms is enabled
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the DS3231
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ReadTime">
            <summary>
            Read Time from DS3231
            </summary>
            <returns>DS3231 Time</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.SetTime(System.DateTime)">
            <summary>
            Set DS3231 Time
            </summary>
            <param name="time">Time</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ReadTemperature">
            <summary>
            Read DS3231 Temperature
            </summary>
            <returns>Temperature</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ReadAlarmOne">
            <summary>
            Reads the currently set alarm 1
            </summary>
            <returns>Alarm 1</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.SetAlarmOne(Iot.Device.Rtc.Ds3231AlarmOne)">
            <summary>
            Sets alarm 1
            </summary>
            <param name="alarm">New alarm 1</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ReadAlarmTwo">
            <summary>
            Reads the currently set alarm 2
            </summary>
            <returns>Alarm 1</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.SetAlarmTwo(Iot.Device.Rtc.Ds3231AlarmTwo)">
            <summary>
            Sets alarm 2
            </summary>
            <param name="alarm">New alarm 2</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ReadEnabledAlarm">
            <summary>
            Reads which alarm is enabled
            </summary>
            <returns>The enabled alarm</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.SetEnabledAlarm(Iot.Device.Rtc.Ds3231Alarm)">
            <summary>
            Sets which alarm is enabled
            </summary>
            <param name="alarmMode">Alarm to enable</param>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.ResetAlarmTriggeredStates">
            <summary>
            Resets the triggered state of both alarms. This must be called after every alarm
            trigger otherwise the alarm cannot trigger again
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231Alarm">
            <summary>
            Available alarms on the DS3231
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231Alarm.None">
            <summary>
            Indicates none of the alarms
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231Alarm.AlarmOne">
            <summary>
            Indicates the first alarm
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231Alarm.AlarmTwo">
            <summary>
            Indicates the second alarm
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231AlarmOne">
            <summary>
            Represents alarm 1 on the DS3231
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmOne.DayOfMonthOrWeek">
            <summary>
            Day of month or day of week of the alarm. Which one it is depends on the match mode
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmOne.AlarmTime">
            <summary>
            Get or set the time the alarm, Hour, Minute and Second are used
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmOne.MatchMode">
            <summary>
            Mode to use to determine when to trigger the alarm
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231AlarmOne.#ctor(System.Int32,System.TimeSpan,Iot.Device.Rtc.Ds3231AlarmOneMatchMode)">
            <summary>
            Creates a new instance of alarm 1 on the DS3231
            </summary>
            <param name="dayOfMonthOrWeek">Day of month or day of week of the alarm. Which one it is depends on the match mode</param>
            <param name="alarmTime">Time of the alarm</param>
            <param name="matchMode">Mode to use to determine when to trigger the alarm</param>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231AlarmOneMatchMode">
            <summary>
            Available modes for determining when alarm 1 should trigger
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.OncePerSecond">
            <summary>
            Alarm 1 triggers at the start of every second
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.Seconds">
            <summary>
            Alarm 1 triggers when the seconds match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.MinutesSeconds">
            <summary>
            Alarm 1 triggers when the minutes and seconds match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.HoursMinutesSeconds">
            <summary>
            Alarm 1 triggers when the hours, minutes and seconds match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.DayOfMonthHoursMinutesSeconds">
            <summary>
            Alarm 1 triggers when the day of the month, hours, minutes and seconds match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmOneMatchMode.DayOfWeekHoursMinutesSeconds">
            <summary>
            Alarm 1 triggers when the day of the week, hours, minutes and seconda match. Sunday is day 1
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231AlarmTwo">
            <summary>
            Represents alarm 2 on the DS3231
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmTwo.DayOfMonthOrWeek">
            <summary>
            Day of month or day of week of the alarm. Which one it is depends on the match mode
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmTwo.AlarmTime">
            <summary>
            Get or set the time the alarm, Hour and Minute are used
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.Ds3231AlarmTwo.MatchMode">
            <summary>
            Mode to use to determine when to trigger the alarm
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Ds3231AlarmTwo.#ctor(System.Int32,System.TimeSpan,Iot.Device.Rtc.Ds3231AlarmTwoMatchMode)">
            <summary>
            Creates a new instance of alarm 2 on the DS3231
            </summary>
            <param name="dayOfMonthOrWeek">Day of month or day of week of the alarm. Which one it is depends on the match mode</param>
            <param name="alarmTime">The time the alarm, Hour and Minute are used</param>
            <param name="matchMode">Mode to use to determine when to trigger the alarm</param>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode">
            <summary>
            Available modes for determining when alarm 2 should trigger
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.OncePerMinute">
            <summary>
            Alarm 2 triggers at the start of every minute
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.Minutes">
            <summary>
            Alarm 2 triggers when the minutes match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.HoursMinutes">
            <summary>
            Alarm 2 triggers when the hours and minutes match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.DayOfMonthHoursMinutes">
            <summary>
            Alarm 2 triggers when the day of the month, hours and minutes match
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Ds3231AlarmTwoMatchMode.DayOfWeekHoursMinutes">
            <summary>
            Alarm 2 triggers when the day of the week, hours and minutes match. Sunday is day 1
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Ds3231Register">
            <summary>
            Register of DS3231
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.Pcf8563">
            <summary>
            Realtime Clock PCF8563
            </summary>
        </member>
        <member name="F:Iot.Device.Rtc.Pcf8563.DefaultI2cAddress">
            <summary>
            PCF8563 Default I2C Address
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.Pcf8563.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Creates a new instance of the PCF8563
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Rtc.Pcf8563.ReadTime">
            <summary>
            Read Time from PCF8563
            </summary>
            <returns>PCF8563 Time</returns>
        </member>
        <member name="M:Iot.Device.Rtc.Pcf8563.SetTime(System.DateTime)">
            <summary>
            Set PCF8563 Time
            </summary>
            <param name="time">Time</param>
        </member>
        <member name="M:Iot.Device.Rtc.Pcf8563.Dispose(System.Boolean)">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Rtc.RtcBase">
            <summary>
            Real time clock (RTC)
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.RtcBase.RtcDateTime">
            <summary>
            The Device's raw <see cref="T:System.DateTime"/>.
            The caller must be aware of the device's time zone.
            The behavior of the <see cref="P:System.DateTime.Kind"/> property is implementation-dependent (typically it is ignored)
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.RtcBase.DateTime">
            <summary>
            Set or retrieves the current date/time. This property returns a <see cref="T:System.DateTimeOffset"/> and
            is therefore correct regardless of the current time zone (when <see cref="P:Iot.Device.Rtc.RtcBase.LocalTimeZone"/> is set correctly).
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.RtcBase.LocalTimeZone">
            <summary>
            Gets or sets the time zone this instance will operate in.
            Defaults to the local time zone from the system.
            Changing this property will not change the time on the real time clock,
            but instead affect the return value of <see cref="P:Iot.Device.Rtc.RtcBase.DateTime"/>
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.RtcBase.#ctor">
            <summary>
            Creates an instance of this base class
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.RtcBase.SetTime(System.DateTime)">
            <summary>
            Set the device time
            </summary>
            <param name="time">Time</param>
        </member>
        <member name="M:Iot.Device.Rtc.RtcBase.ReadTime">
            <summary>
            Read time from the device
            </summary>
            <returns>Time from the device</returns>
        </member>
        <member name="M:Iot.Device.Rtc.RtcBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Rtc.RtcBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the RtcBase and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:Iot.Device.Rtc.SystemClock">
            <summary>
            Contains methods to access and update the system real time clock ("Bios clock")
            </summary>
        </member>
        <member name="P:Iot.Device.Rtc.SystemClock.LocalTimeZone">
            <summary>
            We always use UTC when reading/writing the system clock, makes things easier.
            Technically, the BIOS RTC is configured in local time by default on Windows, but in UTC on Linux (causing
            weird effects when dual-booting). Both systems allow changing this setting, though.
            </summary>
        </member>
        <member name="M:Iot.Device.Rtc.SystemClock.SetSystemTimeUtc(System.DateTime)">
            <summary>
            Set the system time to the given date/time.
            The time must be given in utc.
            The method requires elevated permissions. On Windows, the calling user must either be administrator or the right
            "Change the system clock" must have been granted to the "Users" group (in Security policy management).
            On Unix and MacOs, the current user must be root or the "date" command must have the setUid bit set.
            </summary>
            <remarks>
            This method is primarily intended for setting the system clock from an external clock source, such as a DS1307 or a GNSS source when no
            internet connection is available. If an internet connection is available, most operating systems will by default automatically sync the
            time to a network server, which might interfere with this operation. So when using this method, the clock synchronization should be disabled,
            or it should only be done if the time difference is large.
            </remarks>
            <param name="dt">Date/time to set the system clock to. This must be in UTC</param>
            <exception cref="T:System.PlatformNotSupportedException">This method is not supported on this platform</exception>
            <exception cref="T:System.IO.IOException">There was an error executing a system command</exception>
            <exception cref="T:System.UnauthorizedAccessException">The user does not have permissions to set the system clock</exception>
        </member>
        <member name="M:Iot.Device.Rtc.SystemClock.GetSystemTimeUtc">
            <summary>
            Gets the current system time directly using OS calls.
            Normally, this should return the same as <see cref="P:System.DateTime.UtcNow"/>
            </summary>
            <returns>The current system time</returns>
        </member>
        <member name="M:Iot.Device.Rtc.SystemClock.SetTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Rtc.SystemClock.ReadTime">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Scd4x.Scd4x">
            <summary>
            CO₂, Humidity, and Temperature sensor SCD4x
            </summary>
        </member>
        <member name="F:Iot.Device.Scd4x.Scd4x.DefaultI2cAddress">
            <summary>
            The default I²C address of this device.
            </summary>
        </member>
        <member name="P:Iot.Device.Scd4x.Scd4x.MeasurementPeriod">
            <summary>
            The period to wait for each measurement: five seconds.
            </summary>
        </member>
        <member name="P:Iot.Device.Scd4x.Scd4x.Co2">
            <summary>
            The most recent CO₂ measurement.
            </summary>
        </member>
        <member name="P:Iot.Device.Scd4x.Scd4x.RelativeHumidity">
            <summary>
            The most recent relative humidity measurement.
            </summary>
        </member>
        <member name="P:Iot.Device.Scd4x.Scd4x.Temperature">
            <summary>
            The most recent temperature measurement.
            </summary>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Instantiates a new <see cref="T:Iot.Device.Scd4x.Scd4x"/>.
            </summary>
            <param name="device">The I²C device to operate on.</param>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.Reset">
            <summary>
            Resets the device.
            </summary>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.SetPressureCalibration(UnitsNet.Pressure)">
            <summary>
            Calibrates the sensor to operate at a specific barometric pressure.
            </summary>
            <param name="pressure">The pressure to use when calibrating the sensor.</param>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.SetPressureCalibrationAsync(UnitsNet.Pressure)">
            <inheritdoc cref="M:Iot.Device.Scd4x.Scd4x.SetPressureCalibration(UnitsNet.Pressure)"/>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.StartPeriodicMeasurements">
             <summary>
             <para>
             Instructs the sensor to start performing periodic measurements.
             </para>
            
             <para>
             Every period, the length of which is available in <see cref="P:Iot.Device.Scd4x.Scd4x.MeasurementPeriod"/>, the measurement can then be read via <see cref="M:Iot.Device.Scd4x.Scd4x.ReadPeriodicMeasurement"/>.
             </para>
            
             <para>
             Periodic measurement can be stopped with <see cref="M:Iot.Device.Scd4x.Scd4x.StopPeriodicMeasurements"/>.
             </para>
             </summary>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.ReadPeriodicMeasurement">
            <summary>
            <para>
            Reads the next periodic CO₂, humidity, and temperature measurement from the sensor.
            </para>
            </summary>
            <returns>
            A tuple of CO₂, humidity, and temperature.
            If a CRC check failed for a measurement, it will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.ReadPeriodicMeasurementAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Iot.Device.Scd4x.Scd4x.ReadPeriodicMeasurement"/>
        </member>
        <member name="M:Iot.Device.Scd4x.Scd4x.StopPeriodicMeasurements">
            <summary>
            Instructs the sensor to stop performing periodic measurements.
            </summary>
        </member>
        <member name="T:Iot.Device.Sensirion">
            <summary>
            Common code for Sensirion devices.
            </summary>
        </member>
        <member name="M:Iot.Device.Sensirion.ReadUInt16BigEndianAndCRC8(System.ReadOnlySpan{System.Byte})">
            <returns>If the CRC8 matched the data, a <see cref="T:System.UInt16"/> of data. Otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:Iot.Device.Seesaw.NeopixelSpeed">
            <summary>
            NeoPixel speed setting.
            </summary>
        </member>
        <member name="F:Iot.Device.Seesaw.NeopixelSpeed.Speed_400Mhz">
            <summary>
            400MHz.
            </summary>
        </member>
        <member name="F:Iot.Device.Seesaw.NeopixelSpeed.Speed_800MHz">
            <summary>
            800MHz.
            </summary>
        </member>
        <member name="T:Iot.Device.Seesaw.Seesaw">
            <summary>
            Represents Seesaw device
            </summary>
            <summary>
            Seesaw GPIO driver
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.AnalogRead(System.Byte)">
            <summary>
            Reads the value of an analog pin.
            </summary>
            <param name="pin">The pin number in the devices numbering scheme.</param>
            <returns>A value between 0..1023 that represents the analog value.</returns>
        </member>
        <member name="P:Iot.Device.Seesaw.Seesaw.I2cDevice">
            <summary>
            I2C device used for communication
            </summary>
            <value></value>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes new instance of Seesaw.
            </summary>
            <param name="i2cDevice">The I2cDevice to be used to communicate with the SeeSaw module. Note that the I2cDevice
            will be disposed when the along with the SeeSaw device</param>
        </member>
        <member name="P:Iot.Device.Seesaw.Seesaw.Version">
            <summary>
            Version of the SeeSaw module.
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetTemperature">
            <summary>
            Reads the temperature of the SeeSaw device.
            </summary>
            <returns>A float that represents the temperature in degrees celcius.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.HasModule(Iot.Device.Seesaw.Seesaw.SeesawModule)">
            <summary>
            Tests to see if a module has been compiled into the SeeSaw firmware.
            </summary>
            <param name="moduleAddress">>An Seesaw_Module enum that represents the mdule to test for.</param>
            <returns>Returns true if the functionality associated with the module is available.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SoftwareReset">
            <summary>
            Performs a soft reset of the SeeSaw module.
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.Initialize(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes the Seesaw device.
            <param name="i2cDevice">The I2cDevice to initialize the Seesaw device with.</param>
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetVersion">
            <summary>
            Get the firmware version of the Seesaw board.
            </summary>
            <returns>Returns the seesaw version.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetOptions">
            <summary>
            Gets the options/modules present on the Seesaw board
            </summary>
            <returns>Returns 32 bit integer where the bits represent the options/modules present on the Seesaw board.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.WriteByte(Iot.Device.Seesaw.Seesaw.SeesawModule,Iot.Device.Seesaw.Seesaw.SeesawFunction,System.Byte)">
            <summary>
            Write a byte to the I2cDevice connected to the Seesaw board.
            </summary>
            <param name="moduleAddress">An Seesaw_Module enum that represents the module that we are writing to.</param>
            <param name="functionAddress">An Seesaw_Function enum that represents the Seesaw function to be called.</param>
            <param name="value">The byte value ro be send as a parameter to the Seesaw device.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.Write(Iot.Device.Seesaw.Seesaw.SeesawModule,Iot.Device.Seesaw.Seesaw.SeesawFunction,System.ReadOnlySpan{System.Byte})">
            <summary>
            Write a series of bytes to the I2cDevice connected to the Seesaw board.
            </summary>
            <param name="moduleAddress">An Seesaw_Module enum that represents the module that we are writing to.</param>
            <param name="functionAddress">An Seesaw_Function enum that represents the Seesaw function to be called.</param>
            <param name="data">The Span containg data to be send as a parameter or parameters to the Seesaw device.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.ReadByte(Iot.Device.Seesaw.Seesaw.SeesawModule,Iot.Device.Seesaw.Seesaw.SeesawFunction,System.Int16)">
            <summary>
            Read a byte from the I2cDevice connected to the Seesaw board.
            </summary>
            <param name="moduleAddress">A Seesaw_Module enum that represents the module that we are reading from.</param>
            <param name="functionAddress">A Seesaw_Function enum that represents the Seesaw function to be called.</param>
            <param name="readDelayMicroSeconds">The delay between sending the function and readinng the data in microseconds.</param>
            <returns>Returns the byte value from the Seesaw device.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.Read(Iot.Device.Seesaw.Seesaw.SeesawModule,Iot.Device.Seesaw.Seesaw.SeesawFunction,System.Int32,System.Int16)">
            <summary>
            Read a byte array from the I2cDevice connected to the Seesaw board.
            </summary>
            <param name="moduleAddress">A Seesaw_Module enum that represents the module that we are reading from.</param>
            <param name="functionAddress">A Seesaw_Function enum that represents the Seesaw function to be called.</param>
            <param name="length">The number of bytes that are expected to be returned from the Seesaw device.</param>
            <param name="readDelayMicroSeconds">The delay between sending the function and readinng the data in microseconds.</param>
            <returns>Returns the byte array representaing values from the Seesaw device.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.WriteEEPromByte(System.Byte,System.Byte)">
            <summary>
            Write a byte to the EEProm area on the Seesaw module.
            </summary>
            <param name="eepromAddress">The point in the EEProm area to write the byte.</param>
            <param name="value">The value to write into the EEProm area.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.WriteEEProm(System.Byte,System.Byte[])">
            <summary>
            Write a byte array to the EEProm area on the Seesaw module.
            </summary>
            <param name="eepromAddress">The point in the EEProm area to start writing the data.</param>
            <param name="data">The bytes to be written into the EEProm area.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.ReadEEPromByte(System.Byte)">
            <summary>
            Read a byte from the EEProm area on the Seesaw module.
            </summary>
            <param name="eepromAddress">The point in the EEProm area to start reading the data.</param>
            <returns>The data byte read from the EEProm area.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetI2cAddress(System.Byte)">
            <summary>
            Change the I2C address that the Seesaw board listens on. Note that this will reset communications
            with the host device and dispose the current I2cDevice.
            </summary>
            <param name="i2cAddress">The new I2C address to be used.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetI2cAddress">
            <summary>
            Read the address configured to be used as the I2C address.
            </summary>
            <returns>The data byte representing the I2C address.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetEncoderPosition(System.Byte)">
            <summary>
            Read the current position of the encoder.
            </summary>
            <param name="encoder">Which encoder to use, defaults to 0.</param>
            <returns>The encoder position as a 32 bit signed integer.</returns>
            <exception cref="T:System.InvalidOperationException">The hardware does not support Adafruit SeeSaw encoder functionality.</exception>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetEncoderPosition(System.Int32,System.Byte)">
            <summary>
            Set the current position of the encoder.
            </summary>
            <param name="position">Encoder position.</param>
            <param name="encoder">Which encoder to use, defaults to 0.</param>
            <exception cref="T:System.InvalidOperationException">The hardware does not support Adafruit SeeSaw encoder functionality.</exception>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.GetEncoderDelta(System.Byte)">
            <summary>
            The change in encoder position since it was last read.
            </summary>
            <param name="encoder">Which encoder to use, defaults to 0.</param>
            <returns>The encoder change as a 32 bit signed integer.</returns>
            <exception cref="T:System.InvalidOperationException">The hardware does not support Adafruit SeeSaw encoder functionality.</exception>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.EnableEncoderInterrupt(System.Byte)">
            <summary>
            Enable the interrupt to fire when the encoder changes position.
            </summary>
            <param name="encoder">Which encoder to use, defaults to 0.</param>
            <exception cref="T:System.InvalidOperationException">The hardware does not support Adafruit SeeSaw encoder functionality.</exception>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.DisableEncoderInterrupt(System.Byte)">
            <summary>
            Disable the interrupt from firing when the encoder changes.
            </summary>
            <param name="encoder">Which encoder to use, defaults to 0.</param>
            <exception cref="T:System.InvalidOperationException">The hardware does not support Adafruit SeeSaw encoder functionality.</exception>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetGpioPinMode(System.Byte,System.Device.Gpio.PinMode)">
            <summary>
            Set the PinMode for a GPIO Pin.
            </summary>
            <param name="pin">The pin that has its mode set.</param>
            <param name="mode">The pin mode to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetGpioPinModeBulk(System.UInt64,System.Device.Gpio.PinMode)">
            <summary>
            Set the PinMode for a number of GPIO pins
            </summary>
            <param name="pins">A 64bit integer containing 1 bit for each pin. If a bit is set to 1 then the pin mode is set for the associated pin.</param>
            <param name="mode">The pin mode to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.WriteGpioDigital(System.Byte,System.Boolean)">
            <summary>
            Write a value to GPIO pin
            </summary>
            <param name="pin">The pin that has its value set.</param>
            <param name="value">The pin value to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.WriteGpioDigitalBulk(System.UInt64,System.Boolean)">
            <summary>
            Write a value to a number of GPIO pins
            </summary>
            <param name="pins">A 64bit integer containing 1 bit for each pin. If a bit is set to 1 then the pin value is set for the associated pin.</param>
            <param name="value">The pin value to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.ReadGpioDigital(System.Byte)">
            <summary>
            Read a value from a GPIO pin.
            </summary>
            <param name="pin">The pin that has its value read.</param>
            <returns>A boolean value representaing the status of the GPIO pin.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.ReadGpioDigitalBulk(System.UInt64)">
            <summary>
            Read a value from a number of GPIO pins.
            </summary>
            <param name="pins">A 64bit integer containing 1 bit for each pin. If a bit is set to 1 then the pin value is read for the associated pin.</param>
            <returns>A 64bit integer containing 1 bit for each pin status requested.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetGpioInterrupts(System.UInt32,System.Boolean)">
            <summary>
            Enable or disable interrupts for a GPIO pin.
            </summary>
            <param name="pins">A 32bit integer containing 1 bit for each pin. If a bit is set to 1 then the interrupt is enabled for the associated pin..</param>
            <param name="enable">A boolean value that indicates that interrupts are enabled when true or disabled when false.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.ReadGpioInterruptFlags">
            <summary>
            Read all the Gpio interrupt flags. Clears any flags when read.
            </summary>
            <returns>
            A 32bit integer containing 1 bit for each for the first 32 bins. If a bit is set to 1 then the interrupt is signaled for the associated pin..
            </returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.PinArrayToPins(System.Byte[])">
             <summary>
             Takes an array of bytes read from the Seesaw device and converts to a 64bit value where each bit represents a pin
             </summary>
             <remarks>
             Pin         22222233 11112222 00111111 00000000 55556666 44555555 44444444 33333333
                         45678901 67890123 89012345 01234567 67890123 89012345 01234567 23456789
            
             Byte Array
             Byte Index  00000000 11111111 22222222 33333333 44444444 55555555 66666666 77777777
             Bit         01234567 01234567 01234567 01234567 01234567 01234567 01234567 01234567
             </remarks>
             <param name="pinArray">A byte array read from a Seesaw device</param>
             <returns>A ulong representing the 64 Gpio pins</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.PinsToPinArray(System.UInt64)">
             <summary>
             Taks a 64 bit value where each bit represents a pin and converts it to a byte array suitable for writing to a seesaw device
             </summary>
             <remarks>
             Pin         22222233 11112222 00111111 00000000 55556666 44555555 44444444 33333333
                         45678901 67890123 89012345 01234567 67890123 89012345 01234567 23456789
            
             Byte Array
             Byte Index  00000000 11111111 22222222 33333333 44444444 55555555 66666666 77777777
             Bit         01234567 01234567 01234567 01234567 01234567 01234567 01234567 01234567
             </remarks>
             <param name="pins">A ulong representing the 64 Gpio pins</param>
             <returns>A byte array to write to a Seesaw device</returns>
        </member>
        <member name="T:Iot.Device.Seesaw.Seesaw.SeesawModule">
            <summary>
            Seesaw module
            </summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Status">
            <summary>Status module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Gpio">
            <summary>GPIO module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Sercom0">
            <summary>Serial communication 0 module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Timer">
            <summary>Timer module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Adc">
            <summary>ADC module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Dac">
            <summary>DAC module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Interrupt">
            <summary>Interrupt module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Dap">
            <summary>DAP module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Eeprom">
            <summary>EEPROM module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Neopixel">
            <summary>Neopixel module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Touch">
            <summary>Touch module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Keypad">
            <summary>Keypad module</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawModule.Encoder">
            <summary>Encoder module</summary>
        </member>
        <member name="T:Iot.Device.Seesaw.Seesaw.SeesawFunction">
            <summary>
            Seesaw function
            </summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.StatusHwId">
            <summary>Hardware identifier status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.StatusVersion">
            <summary>Version status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.StatusOptions">
            <summary>Options status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.StatusTemp">
            <summary>Temperature status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.StatusSwrst">
            <summary>Software reset status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioDirsetBulk">
            <summary>Set direction for bulk GPIO operation</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioDirclrBulk">
            <summary>Clear direction for bulk GPIO operation</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioBulk">
            <summary>Bulk set GPIO</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioBulkSet">
            <summary>Bulk set GPIO</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioBulkClr">
            <summary>Bulk clear GPIO</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioBulkToggle">
            <summary>Bulk toggle GPIO</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioIntenset">
            <summary>Enable interrupt</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioIntenclr">
            <summary>Clear interrupt</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioIntflag">
            <summary>Interrupt status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioPullenset">
            <summary>Sets pull up or down for pins</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.GpioPullenclr">
            <summary>Clears pull up or down for pins</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcStatus">
            <summary>ADC status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcInten">
            <summary>Set ADC interrupt enable</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcIntenclr">
            <summary>Clear ADC interrupt enable</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcWinmode">
            <summary>ADC window mode</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcWinthresh">
            <summary>ADC window threshold</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.AdcChannelOffset">
            <summary>ADC channel offset</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EepromI2cAddr">
            <summary>EEPROM I2C address</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.TouchChannelOffset">
            <summary>Touch channel offset</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EncoderStatus">
            <summary>Status</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EncoderIntenset">
            <summary>Enable encoder interrupt</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EncoderIntenclr">
            <summary>Clear encoder interrupt</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EncoderPosition">
            <summary>Encoder position</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.EncoderDelta">
            <summary>Encoder position delta</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.NeopixelPin">
            <summary>Pin number (PORTA) that is used for the NeoPixel output</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.NeopixelSpeed">
            <summary>The protocol speed. 0x00 = 400khz, 0x01 = 800khz (default)</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.NeopixelBufferLength">
            <summary>The number of bytes currently used for the pixel array</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.NeopixelBuffer">
            <summary>The data buffer. The first 2 bytes are the start address, and the data to write follows. Data should be written in blocks of maximum size 30 bytes at a time.</summary>
        </member>
        <member name="F:Iot.Device.Seesaw.Seesaw.SeesawFunction.NeopixelShow">
            <summary>SHOW command, will cause the output to update. There's no arguments/data after the command</summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetNeopixelPin(System.Byte)">
            <summary>
            Change the the pin number (PORTA) that is used for the NeoPixel output.
            </summary>
            <param name="pin">The new pin number.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetNeopixelSpeed(Iot.Device.Seesaw.NeopixelSpeed)">
            <summary>
            Change the protocol speed. 0x00 = 400khz, 0x01 = 800khz (default).
            </summary>
            <param name="speed">The new speed.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetNeopixelBufferLength(System.UInt16)">
            <summary>
            Change the number of bytes used for the pixel array. This is dependent on when the pixels you are using are RGB or RGBW.
            </summary>
            <param name="length">The new length.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetNeopixelBuffer(System.ReadOnlySpan{System.Byte},System.UInt16)">
            <summary>
            Set the data buffer.
            </summary>
            <param name="buffer">The new buffer.</param>
            <param name="offset">The offset in number of bytes.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.SetNeopixelShow">
            <summary>
            Sending the SHOW command will cause the output to update.
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.Seesaw.TouchRead(System.Byte)">
            <summary>
            Reads the analog value on an capacitive touch-enabled pin.
            </summary>
            <param name="pinId">The number of the pin to read.</param>
            <returns>An analogue value betweeen 0 and 1023 that represents the capacitance read from the pin.</returns>
        </member>
        <member name="T:Iot.Device.Seesaw.SeesawGpioDriver">
            <summary>
            Seesaw GPIO driver
            </summary>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Seesaw.SeesawGpioDriver"/> class that will use the specified I2cDevice to communicate with the Seesaw device.
            </summary>
            <param name="i2cDevice">The I2cDevice used for communicating with the Seesaw device.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.#ctor(Iot.Device.Seesaw.Seesaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Seesaw.SeesawGpioDriver"/> class that will use the specified Seesaw device.
            </summary>
            <param name="seesawDevice">The Seesaw device used fir communicating with the Gpio.</param>
        </member>
        <member name="P:Iot.Device.Seesaw.SeesawGpioDriver.PinCount">
            <summary>
            Number of Gpio pins available.
            </summary>
            <remarks>Hardcoded to 64 pins as the Seesaw devices do not describe the number of pins.</remarks>
            <value>Number of Gpio pins available</value>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.ClosePin(System.Int32)">
            <summary>
            Closes an open pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.GetPinMode(System.Int32)">
            <summary>
            Gets the mode of a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The mode of the pin.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.IsPinModeSupported(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Checks if a pin supports a specific mode.
            </summary>
            <remarks>All standard pin modes are supported</remarks>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to check.</param>
            <returns>The status if the pin supports the mode.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.IsPinOpen(System.Int32)">
            <summary>
            Checks if a specific pin is open.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The status if the pin is open or closed.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.OpenPin(System.Int32)">
            <summary>
            Opens a pin and in Input mode.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.OpenPin(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Opens a pin and sets it to a specific mode.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Read(System.Int32)">
            <summary>
            Reads the current value of a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <returns>The value of the pin.</returns>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Toggle(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Read(System.Span{System.Device.Gpio.PinValuePair})">
            <summary>
            Read the given pins with the given pin numbers.
            </summary>
            <param name="pinValuePairs">The pin/value pairs to read.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.SetPinMode(System.Int32,System.Device.Gpio.PinMode)">
            <summary>
            Sets the mode to a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="mode">The mode to be set.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Write(System.Int32,System.Device.Gpio.PinValue)">
            <summary>
            Writes a value to a pin.
            </summary>
            <param name="pinNumber">The pin number in the controller's numbering scheme.</param>
            <param name="value">The value to be written to the pin.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Write(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Write the given pins with the given values.
            </summary>
            <param name="pinValuePairs">The pin/value pairs to write.</param>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.AddCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.RemoveCallbackForPinValueChangedEvent(System.Int32,System.Device.Gpio.PinChangeEventHandler)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.WaitForEvent(System.Int32,System.Device.Gpio.PinEventTypes,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Seesaw.SeesawGpioDriver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHat">
            <summary>
            SenseHAT
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHat.DefaultI2cBusId">
            <summary>
            Default I2C bus id
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.LedMatrix">
            <summary>
            LED Matrix
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Joystick">
            <summary>
            Joystick
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Gyroscope">
            <summary>
            Gyroscope
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Magnetometer">
            <summary>
            Magnetometer
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.TemperatureAndHumidity">
            <summary>
            Temperature and humidity sensor
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.PressureAndTemperature">
            <summary>
            Pressure and temperature sensor
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.#ctor(System.Device.I2c.I2cBus,System.Boolean)">
            <summary>
            Constructs SenseHat instance
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.Fill(System.Drawing.Color)">
            <summary>
            Fills LED matrix with specified color
            </summary>
            <param name="color">Color to fill LED matrix with</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets color on specified pixel on LED matrix
            </summary>
            <param name="x">X coordinate of the pixel</param>
            <param name="y">Y coordinate of the pixel</param>
            <param name="color">Color to set the pixel to</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.Write(System.ReadOnlySpan{System.Drawing.Color})">
            <summary>
            Write colors to LED matrix
            </summary>
            <param name="colors">Buffer of colors</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.ReadJoystickState">
            <summary>
            Reads joystick state
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.HoldingLeft">
            <summary>
            Is Joystick being held left
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.HoldingRight">
            <summary>
            Is Joystick being held right
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.HoldingUp">
            <summary>
            Is Joystick being held up
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.HoldingDown">
            <summary>
            Is Joystick being held down
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.HoldingButton">
            <summary>
            Is Joystick button being held
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Acceleration">
            <summary>
            Gets acceleration from the gyroscope
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.AngularRate">
            <summary>
            Gets angular rate from the gyroscope
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.MagneticInduction">
            <summary>
            Gets magnetic induction from the magnetometer
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Temperature">
            <summary>
            Gets temperature from temperature and humidity sensor
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Humidity">
            <summary>
            Gets humidity from temperature and humidity sensor
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Pressure">
            <summary>
            Gets pressure from pressure and temperature sensor
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHat.Temperature2">
            <summary>
            Gets temperature from pressure and temperature sensor
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHat.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatAccelerometerAndGyroscope">
            <summary>
            SenseHAT - Accelerometer and gyroscope sensor
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatAccelerometerAndGyroscope.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatAccelerometerAndGyroscope.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Lsm9Ds1.AccelerationScale,Iot.Device.Lsm9Ds1.AngularRateScale)">
            <summary>
            Constructs SenseHatAccelerometerAndGyroscope instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
            <param name="accelerationScale">Acceleration scale</param>
            <param name="angularRateScale">Angular rate scale</param>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatJoystick">
            <summary>
            SenseHAT - Joystick
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatJoystick.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatJoystick.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs SenseHatJoystick instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHatJoystick.HoldingLeft">
            <summary>
            Is holding left
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHatJoystick.HoldingRight">
            <summary>
            Is holding right
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHatJoystick.HoldingUp">
            <summary>
            Is holding up
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHatJoystick.HoldingDown">
            <summary>
            Is holding down
            </summary>
        </member>
        <member name="P:Iot.Device.SenseHat.SenseHatJoystick.HoldingButton">
            <summary>
            Is holding button
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatJoystick.Read">
            <summary>
            Read joystick state
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatJoystick.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatLedMatrix">
            <summary>
            Base class for SenseHAT LED matrix
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatLedMatrix.NumberOfPixels">
            <summary>
            Total number of pixels
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatLedMatrix.NumberOfPixelsPerRow">
            <summary>
            Number of pixels per row
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatLedMatrix.NumberOfPixelsPerColumn">
            <summary>
            Number of pixels per column
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.#ctor">
            <summary>
            Constructs SenseHatLedMatrix instance
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.IndexToPosition(System.Int32)">
            <summary>
            Translates position in the buffer to X, Y coordinates
            </summary>
            <param name="index">Index</param>
            <returns>Tuple of X and Y coordinates</returns>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.PositionToIndex(System.Int32,System.Int32)">
            <summary>
            Translate X and Y coordinates to position in the buffer
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <returns>Position in the buffer</returns>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.Write(System.ReadOnlySpan{System.Drawing.Color})">
            <summary>
            Write colors to the device
            </summary>
            <param name="colors">Array of colors</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.Fill(System.Drawing.Color)">
            <summary>
            Fill LED matrix with a specific color
            </summary>
            <param name="color">Color to fill the device with</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets color on specific position of the LED matrix
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="color">Color to be set in the specified position</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrix.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatLedMatrixI2c">
            <summary>
            SenseHAT - LED matrix (I2C)
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatLedMatrixI2c.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixI2c.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs instance of SenseHatLedMatrixI2c
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixI2c.Write(System.ReadOnlySpan{System.Drawing.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixI2c.Fill(System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixI2c.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixI2c.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatLedMatrixSysFs">
            <summary>
            SenseHAT - LED matrix (using Linux driver)
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixSysFs.#ctor">
            <summary>
            Constructs SenseHatLedMatrixSysFs instance
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixSysFs.Write(System.ReadOnlySpan{System.Drawing.Color})">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixSysFs.Fill(System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixSysFs.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatLedMatrixSysFs.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatMagnetometer">
            <summary>
            SenseHAT - Magnetometer sensor
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatMagnetometer.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatMagnetometer.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Lsm9Ds1.MagneticInductionScale)">
            <summary>
            Constructs SenseHatMagnetometer instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
            <param name="magneticInduction">Magnetic induction</param>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatPressureAndTemperature">
            <summary>
            SenseHAT - Pressure and temperature sensor
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatPressureAndTemperature.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatPressureAndTemperature.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs SenseHatPressureAndTemperature instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="T:Iot.Device.SenseHat.SenseHatTemperatureAndHumidity">
            <summary>
            SenseHAT - Temperature and humidity sensor
            </summary>
        </member>
        <member name="F:Iot.Device.SenseHat.SenseHatTemperatureAndHumidity.I2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SenseHat.SenseHatTemperatureAndHumidity.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Constructs SenseHatTemperatureAndHumidity instance
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
        </member>
        <member name="T:Iot.Device.SensorHub.SensorHub">
            <summary>
            SensorHub
            </summary>
        </member>
        <member name="F:Iot.Device.SensorHub.SensorHub.DefaultI2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.SensorHub.SensorHub"/> class.
            </summary>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadOffBoardTemperature(UnitsNet.Temperature@)">
            <summary>
            Try to read the temperature from the off board thermometer.
            </summary>
            <remarks>Range is -30 to 127 Celsius.</remarks>
            <param name="temperature">The temperature if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
            <exception cref="T:System.IO.IOException">Thrown when ext. temperature sensor not found.</exception>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadBarometerTemperature(UnitsNet.Temperature@)">
            <summary>
            Try to read the temperature from the barometer sensor.
            </summary>
            <remarks>Range is -40 to 80 Celsius.</remarks>
            <param name="temperature">Temperature if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadBarometerPressure(UnitsNet.Pressure@)">
            <summary>
            Try to read pressure from sensor.
            </summary>
            <remarks>Range is 300Pa to 1100hPa</remarks>
            <param name="pressure">Pressure if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadIlluminance(UnitsNet.Illuminance@)">
            <summary>
            Try to read illuminance from sensor.
            </summary>
            <remarks>Range is 0 to 1800 Lux.</remarks>
            <param name="illuminance">Illuminance if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadRelativeHumidity(UnitsNet.RelativeHumidity@)">
            <summary>
            Try to read relative humidity from sensor.
            </summary>
            <remarks>Range is 25 to 95 percent</remarks>
            <param name="humidity">Relative humidity if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
        </member>
        <member name="M:Iot.Device.SensorHub.SensorHub.TryReadOnBoardTemperature(UnitsNet.Temperature@)">
            <summary>
            Try to read temperature from on board sensor
            </summary>
            <remakrs>Range is -20 to 60 Celsius</remakrs>
            <param name="temperature">Temperature if successful</param>
            <returns><c>True</c> on success, <c>False</c> otherwise</returns>
        </member>
        <member name="P:Iot.Device.SensorHub.SensorHub.IsMotionDetected">
            <summary>
            Is motion detected by the on board sensor
            </summary>
        </member>
        <member name="T:Iot.Device.ServoMotor.ServoMotor">
            <summary>
            Represents a rotary actuator or linear actuator that allows for precise control of angular or linear position.
            </summary>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.#ctor(System.Device.Pwm.PwmChannel,System.Double,System.Double,System.Double)">
            <summary>
             Initializes a new instance of the <see cref="T:Iot.Device.ServoMotor.ServoMotor"/> class.
            </summary>
            <param name="pwmChannel">The PWM channel used to control the servo motor.</param>
            <param name="maximumAngle">The maximum angle the servo motor can move represented as a value between 0 and 360.</param>
            <param name="minimumPulseWidthMicroseconds">The minimum pulse width, in microseconds, that represent an angle for 0 degrees.</param>
            <param name="maximumPulseWidthMicroseconds">The maxnimum pulse width, in microseconds, that represent an angle for maximum angle.</param>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.Calibrate(System.Double,System.Double,System.Double)">
            <summary>
            Sets calibration parameters
            </summary>
            <param name="maximumAngle">The maximum angle the servo motor can move represented as a value between 0 and 360.</param>
            <param name="minimumPulseWidthMicroseconds">The minimum pulse width, in microseconds, that represent an angle for 0 degrees.</param>
            <param name="maximumPulseWidthMicroseconds">The maxnimum pulse width, in microseconds, that represent an angle for maximum angle.</param>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.Start">
            <summary>
            Starts the servo motor.
            </summary>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.Stop">
            <summary>
            Stops the servo motor.
            </summary>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.WriteAngle(System.Double)">
            <summary>
            Writes an angle to the servo motor.
            </summary>
            <param name="angle">The angle to write to the servo motor.</param>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.WritePulseWidth(System.Int32)">
            <summary>
            Writes a pulse width to the servo motor.
            </summary>
            <param name="microseconds">The pulse width, in microseconds, to write to the servo motor.</param>
        </member>
        <member name="M:Iot.Device.ServoMotor.ServoMotor.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Sht3x.I2cAddress">
            <summary>
            SHT3x I2C Address
            </summary>
        </member>
        <member name="F:Iot.Device.Sht3x.I2cAddress.AddrLow">
            <summary>
            ADDR (pin2) connected to logic low (Default)
            </summary>
        </member>
        <member name="F:Iot.Device.Sht3x.I2cAddress.AddrHigh">
            <summary>
            ADDR (pin2) connected to logic high
            </summary>
        </member>
        <member name="T:Iot.Device.Sht3x.Resolution">
            <summary>
            SHT3x Resolution (No Clock Stretching)
            </summary>
        </member>
        <member name="F:Iot.Device.Sht3x.Resolution.High">
            <summary>High resolution</summary>
        </member>
        <member name="F:Iot.Device.Sht3x.Resolution.Medium">
            <summary>Medium resolution</summary>
        </member>
        <member name="F:Iot.Device.Sht3x.Resolution.Low">
            <summary>Low resolution</summary>
        </member>
        <member name="T:Iot.Device.Sht3x.Register">
            <summary>
            SHT3x Register
            </summary>
        </member>
        <member name="T:Iot.Device.Sht3x.Sht3x">
            <summary>
            Humidity and Temperature Sensor SHT3x
            </summary>
        </member>
        <member name="P:Iot.Device.Sht3x.Sht3x.Resolution">
            <summary>
            SHT3x Resolution
            </summary>
        </member>
        <member name="P:Iot.Device.Sht3x.Sht3x.Temperature">
            <summary>
            SHT3x Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Sht3x.Sht3x.Humidity">
            <summary>
            SHT3x Relative Humidity (%)
            </summary>
        </member>
        <member name="P:Iot.Device.Sht3x.Sht3x.Heater">
            <summary>
            SHT3x Heater
            </summary>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Sht3x.Resolution)">
            <summary>
            Creates a new instance of the SHT3x
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="resolution">SHT3x Read Resolution</param>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.Reset">
            <summary>
            SHT3x Soft Reset
            </summary>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.SetHeater(System.Boolean)">
            <summary>
            Set SHT3x Heater
            </summary>
            <param name="isOn">Heater on when value is true</param>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.ReadTempAndHumidity">
            <summary>
            Read Temperature and Humidity
            </summary>
        </member>
        <member name="M:Iot.Device.Sht3x.Sht3x.CheckCrc8(System.ReadOnlySpan{System.Byte},System.Byte)">
            <summary>
            8-bit CRC Checksum Calculation
            </summary>
            <param name="data">Raw Data</param>
            <param name="crc8">Raw CRC8</param>
            <returns>Checksum is true or false</returns>
        </member>
        <member name="T:Iot.Device.Sht4x.Sht4x">
            <summary>
            Humidity and Temperature Sensor SHT4x
            </summary>
        </member>
        <member name="F:Iot.Device.Sht4x.Sht4x.DefaultI2cAddress">
            <summary>
            The default I²C address of this device.
            </summary>
        </member>
        <member name="P:Iot.Device.Sht4x.Sht4x.Repeatability">
            <summary>
            The level of repeatability to use when measuring relative humidity.
            </summary>
        </member>
        <member name="P:Iot.Device.Sht4x.Sht4x.RelativeHumidity">
            <summary>
            The most recent relative humidity measurement.
            </summary>
        </member>
        <member name="P:Iot.Device.Sht4x.Sht4x.Temperature">
            <summary>
            The most recent temperature measurement.
            </summary>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Instantiates a new <see cref="T:Iot.Device.Sht4x.Sht4x"/>.
            </summary>
            <param name="device">The I²C device to operate on.</param>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.Reset">
            <summary>
            Resets the device.
            </summary>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.ReadSerialNumber">
            <summary>
            Reads the serial number of the device
            </summary>
            <returns>
            A 32 bit integer with the serial number.
            If a CRC check failed for a reading, it will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.ReadHumidityAndTemperature(Iot.Device.Sht4x.Sht4xRepeatability)">
            <summary>
            Reads relative humidity and temperature.
            </summary>
            <returns>
            A tuple of relative humidity and temperature.
            If a CRC check failed for a measurement, it will be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Iot.Device.Sht4x.Sht4x.ReadHumidityAndTemperatureAsync(Iot.Device.Sht4x.Sht4xRepeatability)">
            <inheritdoc cref="M:Iot.Device.Sht4x.Sht4x.ReadHumidityAndTemperature(Iot.Device.Sht4x.Sht4xRepeatability)"/>
        </member>
        <member name="T:Iot.Device.Sht4x.Sht4xRepeatability">
            <summary>
            Desired repeatability of relative humidity measurement.
            </summary>
        </member>
        <member name="F:Iot.Device.Sht4x.Sht4xRepeatability.Low">
            <summary>
            0.25% RH error
            </summary>
        </member>
        <member name="F:Iot.Device.Sht4x.Sht4xRepeatability.Medium">
            <summary>
            0.15% RH error
            </summary>
        </member>
        <member name="F:Iot.Device.Sht4x.Sht4xRepeatability.High">
            <summary>
            0.08% RH error
            </summary>
        </member>
        <member name="T:Iot.Device.Shtc3.Register">
            <summary>
            Shtc3 Register
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_T_RH_POLLING_NPM">
            <summary>
            Temperature and Humidity with Clock stretching disable in normal power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_T_RH_CLOCKSTR_NPM">
            <summary>
            Temperature and Humidity with Clock Stretching enable and normal power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_T_RH_POLLING_LPM">
            <summary>
            Temperature and Humidity with Clock stretching disable in low power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_T_RH_CLOCKSTR_LPM">
            <summary>
            Temperature and Humidity with Clock stretching enable in low power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_RH_T_POLLING_NPM">
            <summary>
            Humidity and Temperature with Clock stretching disable in normal power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_RH_T_CLOCKSTR_NPM">
            <summary>
            Humidity and Temperature with Clock stretching enable in normal power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_RH_T_POLLING_LPM">
            <summary>
            Humidity and Temperature with Clock stretching disable in low power mode
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Register.SHTC3_MEAS_RH_T_CLOCKSTR_LPM">
            <summary>
            Humidity and Temperature with Clock stretching enable in low power mode
            </summary>
        </member>
        <member name="T:Iot.Device.Shtc3.Shtc3">
            <summary>
            Temperature and humidity sensor Shtc3
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Shtc3.DefaultI2cAddress">
            <summary>
            Default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Shtc3.Shtc3"/> class.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="F:Iot.Device.Shtc3.Shtc3._status">
            <summary>
            Current state of Shtc3 sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.ValidShtc3Id(System.Int32)">
            <summary>
            Check the match to the SHTC3 product code
            Table 15  while bits 11 and 5:0 contain the SHTC3 specific product code 0b_0000_1000_0000_0111
            </summary>
            <param name="id">Id to test</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.CheckCrc8(System.ReadOnlySpan{System.Byte},System.Byte)">
            <summary>
            8-bit CRC Checksum Calculation
            </summary>
            <param name="data">Raw Data</param>
            <param name="crc8">Raw CRC8</param>
            <returns>Checksum is true or false</returns>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.TryGetTemperatureAndHumidity(UnitsNet.Temperature@,UnitsNet.RelativeHumidity@,System.Boolean,System.Boolean)">
            <summary>
            Try read Temperature and Humidity
            </summary>
            <param name="temperature">Temperature returned by sensor</param>
            <param name="relativeHumidity">Humidity return by sensor</param>
            <param name="lowPower">"true" measured in low power mode, "false"(default) measured in normal power mode</param>
            <param name="clockStretching">"true" allow clock stretching, "false" (default) without clock stretching</param>
            <returns>True if operation was successful</returns>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.Sleep">
            <summary>
            SHTC3 Sleep
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.Wakeup">
            <summary>
            SHTC3 Wakeup
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.Reset">
            <summary>
            SHTC3 Soft Reset
            </summary>
        </member>
        <member name="P:Iot.Device.Shtc3.Shtc3.Id">
            <summary>
            Sensor Id
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.ReadId">
            <summary>
            Read Id
            </summary>
        </member>
        <member name="M:Iot.Device.Shtc3.Shtc3.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Shtc3.Status">
            <summary>
            Shtc3 Status
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Status.Unknown">
            <summary>
            Sensor in an unknown state
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Status.Idle">
            <summary>
            Sensor ready to use
            </summary>
        </member>
        <member name="F:Iot.Device.Shtc3.Status.Sleep">
            <summary>
            Sensor in sleep mode
            </summary>
        </member>
        <member name="T:Iot.Device.Si7021.Si7021">
            <summary>
            Temperature and Humidity Sensor Si7021
            </summary>
        </member>
        <member name="F:Iot.Device.Si7021.Si7021.DefaultI2cAddress">
            <summary>
            Si7021 Default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Si7021.Si7021.Temperature">
            <summary>
            Si7021 Temperature
            </summary>
        </member>
        <member name="P:Iot.Device.Si7021.Si7021.Humidity">
            <summary>
            Relative Humidity
            </summary>
        </member>
        <member name="P:Iot.Device.Si7021.Si7021.Revision">
            <summary>
            Si7021 Firmware Revision
            </summary>
        </member>
        <member name="P:Iot.Device.Si7021.Si7021.Resolution">
            <summary>
            Si7021 Measurement Resolution
            </summary>
        </member>
        <member name="P:Iot.Device.Si7021.Si7021.Heater">
            <summary>
            Si7021 Heater
            </summary>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Si7021.Resolution)">
            <summary>
            Creates a new instance of the Si7021
            </summary>
            <param name="i2cDevice">I2C Device, like UnixI2cDevice or Windows10I2cDevice</param>
            <param name="resolution">Si7021 Read Resolution</param>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.GetTemperature">
            <summary>
            Get Si7021 Temperature (℃)
            </summary>
            <returns>Temperature (℃)</returns>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.GetHumidity">
            <summary>
            Get Si7021 Relative Humidity (%)
            </summary>
            <returns>Relative Humidity (%)</returns>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.GetRevision">
            <summary>
            Get Si7021 Firmware Revision
            </summary>
            <returns>Firmware Revision</returns>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.SetResolution(Iot.Device.Si7021.Resolution)">
            <summary>
            Set Si7021 Measurement Resolution
            </summary>
            <param name="resolution">Measurement Resolution</param>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.GetResolution">
            <summary>
            Get Si7021 Measurement Resolution
            </summary>
            <returns>Measurement Resolution</returns>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.SetHeater(System.Boolean)">
            <summary>
            Set Si7021 Heater
            </summary>
            <param name="isOn">Heater on when value is true</param>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.GetUserRegister1">
            <summary>
            Get User Register1
            </summary>
            <returns>User Register1 Byte</returns>
        </member>
        <member name="M:Iot.Device.Si7021.Si7021.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Si7021.Register">
            <summary>
            Si7021 Register
            </summary>
        </member>
        <member name="T:Iot.Device.Si7021.Resolution">
            <summary>
            Si7021 Measurement Resolution
            </summary>
        </member>
        <member name="F:Iot.Device.Si7021.Resolution.Resolution1">
            <summary>
            Humidity 12-bit, Temperature 14-bit
            </summary>
        </member>
        <member name="F:Iot.Device.Si7021.Resolution.Resolution2">
            <summary>
            Humidity 8-bit, Temperature 12-bit
            </summary>
        </member>
        <member name="F:Iot.Device.Si7021.Resolution.Resolution3">
            <summary>
            Humidity 10-bit, Temperature 13-bit
            </summary>
        </member>
        <member name="F:Iot.Device.Si7021.Resolution.Resolution4">
            <summary>
            Humidity 11-bit, Temperature 11-bit
            </summary>
        </member>
        <member name="T:Iot.Device.SocketCan.CanId">
            <summary>
            Represents CAN identifier (11 or 29-bit)
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.Value">
            <summary>
            Gets value of identifier (11 or 29-bit)
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.Standard">
            <summary>
            Gets or sets standard (11-bit) identifier
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.Extended">
            <summary>
            Gets or sets extended (29-bit) identifier
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.Error">
            <summary>
            Gets error (ERR) flag
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.ExtendedFrameFormat">
            <summary>
            True if extended frame format (EFF) flag is set
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.RemoteTransmissionRequest">
            <summary>
            Gets remote transimission request (RTR) flag
            </summary>
        </member>
        <member name="P:Iot.Device.SocketCan.CanId.IsValid">
            <summary>
            Checks if identifier is valid: error flag is not set and if address can fit selected format (11/29 bit)
            </summary>
        </member>
        <member name="T:Iot.Device.SocketCan.CanRaw">
            <summary>
            Allows reading and writing raw frames to CAN Bus
            </summary>
        </member>
        <member name="M:Iot.Device.SocketCan.CanRaw.#ctor(System.String)">
            <summary>
            Constructs CanRaw instance
            </summary>
            <param name="networkInterface">Name of the network interface</param>
        </member>
        <member name="M:Iot.Device.SocketCan.CanRaw.WriteFrame(System.ReadOnlySpan{System.Byte},Iot.Device.SocketCan.CanId)">
            <summary>
            Writes frame to the CAN Bus
            </summary>
            <param name="data">Data to write (at most 8 bytes)</param>
            <param name="id">Recipient identifier</param>
            <remarks><paramref name="id"/> can be ignored by recipient - anyone connected to the bus can read or write any frames</remarks>
        </member>
        <member name="M:Iot.Device.SocketCan.CanRaw.TryReadFrame(System.Span{System.Byte},System.Int32@,Iot.Device.SocketCan.CanId@)">
            <summary>
            Reads frame from the bus
            </summary>
            <param name="data">Data where output data should be written to</param>
            <param name="frameLength">Length of the data read</param>
            <param name="id">Recipient identifier</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.SocketCan.CanRaw.Filter(Iot.Device.SocketCan.CanId)">
            <summary>
            Set filter on the bus to read only from specified recipient.
            </summary>
            <param name="id">Recipient identifier</param>
        </member>
        <member name="M:Iot.Device.SocketCan.CanRaw.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Spi.SoftwareSpi">
            <summary>
            Software SPI implementation
            </summary>
        </member>
        <member name="M:Iot.Device.Spi.SoftwareSpi.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Spi.SpiConnectionSettings,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Software implementation of the SPI.
            </summary>
            <remarks>Note that there is a ChipSelectLine in the SPIConnectionSettings as well, either that or the cs property will be used.</remarks>
            <param name="clk">Clock pin.</param>
            <param name="sdi">Serial data in pin. Optional, set to -1 to ignore</param>
            <param name="sdo">Serial data out pin.</param>
            <param name="cs">Chip select pin (or negated chip select). Optional, set to -1 to ignore.</param>
            <param name="settings">Settings of the SPI connection.</param>
            <param name="gpioController">GPIO controller used for pins.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Spi.SoftwareSpi.ConnectionSettings">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Spi.SoftwareSpi.TransferFullDuplex(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Spi.SoftwareSpi.Read(System.Span{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Spi.SoftwareSpi.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Spi.SoftwareSpi.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ssd1351.Ssd1351">
            <summary>
            A single-chip CMOS OLED/PLED driver with controller for organic/polymer
            light emitting diode dot-matrix graphic display system.
            </summary>
            <summary>
            Constructs Ssd1351 instance
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initializes new instance of Ssd1351 device that will communicate using SPI bus.
            A single-chip CMOS OLED/PLED driver with controller for organic/polymer
            light emitting diode dot-matrix graphic display system.
            </summary>
            <param name="spiDevice">The SPI device used for communication. This Spi device will be displed along with the Ssd1351 device.</param>
            <param name="gpioController">The GPIO controller used for communication and controls the the <paramref name="resetPin"/> and the <paramref name="dataCommandPin"/>
            If no Gpio controller is passed in then a default one will be created and disposed when Ssd1351 device is disposed.</param>
            <param name="dataCommandPin">The id of the GPIO pin used to control the DC line (data/command).</param>
            <param name="resetPin">The id of the GPIO pin used to control the /RESET line (data/command).</param>
            <param name="spiBufferSize">The size of the SPI buffer. If data larger than the buffer is sent then it is split up into multiple transmissions. The default value is 4096.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.Color565(System.Drawing.Color)">
             <summary>
             Convert a color structure to a byte tuple representing the colour in 565 format.
             </summary>
             <param name="color">The color to be converted.</param>
             <returns>
             This method returns the low byte and the high byte of the 16bit value representing RGB565 or BGR565 value
            
             byte    11111111 00000000
             bit     76543210 76543210
            
             For ColorSequence.RGB
                     RRRRRGGG GGGBBBBB
                     43210543 21043210
            
             For ColorSequence.BGR
                     BBBBBGGG GGGRRRRR
                     43210543 21043210
             </returns>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.FillRect(System.Drawing.Color,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Send filled rectangle to the ssd1351 display.
            </summary>
            <param name="color">The color to fill the rectangle with.</param>
            <param name="x">The x co-ordinate of the point to start the rectangle at in pixels (0..126 for the Ssd1351 where 0 represents the leftmost pixel).</param>
            <param name="y">The y co-ordinate of the point to start the rectangle at in pixles (0..126 for the Ssd1351 where 0 represents the topmost pixel).</param>
            <param name="w">The width of the rectangle in pixels (1..127 for the Ssd1351).</param>
            <param name="h">The height of the rectangle in pixels (1..127 for the Ssd1351).</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.ClearScreen">
            <summary>
            Clears screen
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.ResetDisplayAsync">
            <summary>
            Resets the display.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.InRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Verifies value is within a specific range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="start">Starting value of range.</param>
            <param name="end">Ending value of range.</param>
            <returns>Determines if value is within range.</returns>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendCommand(Iot.Device.Ssd1351.Ssd1351Command,System.Byte[])">
            <summary>
            Send a command to the the display controller along with associated parameters.
            </summary>
            <param name="command">Command to send.</param>
            <param name="commandParameters">parameteters for the command to be sent</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendCommand(Iot.Device.Ssd1351.Ssd1351Command,System.Span{System.Byte})">
            <summary>
            Send a command to the the display controller along with parameters.
            </summary>
            <param name="command">Command to send.</param>
            <param name="data">Span to send as parameters for the command.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendData(System.Span{System.Byte})">
            <summary>
            Send data to the display controller.
            </summary>
            <param name="data">The data to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendSPI(System.Span{System.Byte},System.Boolean)">
            <summary>
            Write a block of data to the SPI device
            </summary>
            <param name="data">The data to be sent to the SPI device</param>
            <param name="blnIsCommand">A flag indicating that the data is really a command when true or data when false.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.Lock">
            <summary>
            This command is used to lock the OLED driver IC from accepting any command except itself.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.Unlock">
            <summary>
            This command allows the driver IC to resume from the “Lock” state. And the driver IC will then respond to the command and memory access.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.MakeAccessible">
            <summary>
             Make commands A2,B1,B3,BB,BE,C1 accessible in the unlocked state
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.MakeInaccessible">
            <summary>
             Make commands A2,B1,B3,BB,BE,C1 inaccessible in both lock and unlock state
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayOn">
            <summary>
            This command turns the OLED panel display on.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayOff">
            <summary>
            This command turns the OLED panel display off.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayEnhancement(System.Boolean)">
            <summary>
            This command enhances display performance.
            </summary>
            <param name="enhanceDisplay">When set to true turns on enhanced display mode. (defaults to not enhanced)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.Set3rdPreChargePeriod(System.Byte)">
            <summary>
            This double byte command is used to set the phase 3 second pre-charge period.  The period of phase 3 is ranged from 1 to 15 DCLK's.
            </summary>
            <param name="phase3Period">Phase 3 period with a range of 1-15. (defaults to 8 DCLKs)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetPreChargeVoltageLevel(System.Byte)">
            <summary>
            This double byte command is used to set the pre-charge voltage level. The precharge
            voltage level ranges from 0.20 x Vcc -> 0.60 x Vcc.
            </summary>
            <param name="prechargeLevel">Pre-charge voltage level with a range of 0-31 that represents 0.20 x Vcc -> 0.60 x Vcc. (defaults to 0.38 x Vcc)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetColumnAddress(System.Byte,System.Byte)">
            <summary>
            This triple byte command specifies column start address and end address of the display data RAM.
            This command also sets the column address pointer to column start address. This pointer is used
            to define the current read/write column address in graphic display data RAM. If horizontal address
            increment mode is enabled by command 20h, after finishing read/write one column data, it is
            incremented automatically to the next column address. Whenever the column address pointer finishes
            accessing the end column address, it is reset back to start column address and the row address
            is incremented to the next row.  This command is only for horizontal or vertical addressing modes.
            </summary>
            <param name="startColumn">Column start address with a range of 0-127. (defaults to 0)</param>
            <param name="endColumn">Column end address with a range of 0-127. (defaults to 127)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetRowAddress(System.Byte,System.Byte)">
            <summary>
            This triple byte command specifies row start address and end address of the display
            data RAM.This command also sets the row address pointer to row start address.This
            pointer is used to define the current read/write row address in graphic display data
            RAM. If vertical address increment mode is enabled by command A0h, after finishing
            read/write one row data, it is incremented automatically to the next row address.
            Whenever the row address pointer finishes accessing the end row address, it is
            reset back to start row address.
            </summary>
            <param name="startRow">Row start address with a range of 0-127. (defaults to 0)</param>
            <param name="endRow">Row end address with a range of 0-127. (defaults to 127)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayClockDivideRatioOscillatorFrequency(System.Byte,System.Byte)">
            <summary>
            This command sets the divide ratio to generate DCLK (Display Clock) from CLK and
            programs the oscillator frequency Fosc that is the source of CLK if CLS pin is pulled high.
            </summary>
            <param name="displayClockDivideRatio">Display clock divide ratio with a range of 0-15. (defaults to 1)</param>
            <param name="oscillatorFrequency">Oscillator frequency with a range of 0-15. (defaults to 13)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetContrastABC(System.Byte,System.Byte,System.Byte)">
            <summary>
            This command is used to set Contrast Setting of the display.
            The chip has 256 contrast steps from 00h to FFh.  The segment
            output current ISEG increases linearly with the contrast step,
            which results in brighter display.
            </summary>
            <param name="colorAContrast">Contrast level for color A. (defaults to 0x86)</param>
            <param name="colorBContrast">Contrast level for color B. (defaults to 0x51)</param>
            <param name="colorCContrast">Contrast level for color C. (defaults to 0x86)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayOffset(System.Byte)">
            <summary>
            This command specifies the mapping of the display start line to one of COM0-COM127
            (assuming that COM0 is the display start line then the display start line register is equal to 0).
            </summary>
            <param name="displayOffset">Display offset with a range of 0-127. (defaults to 0x60)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayStartLine(System.Byte)">
            <summary>
            This command sets the Display Start Line register to determine starting address of display RAM,
            by selecting a value from 0 to 127. With value equal to 0, RAM row 0 is mapped to COM0.
            With value equal to 1, RAM row 1 is mapped to COM0 and so on.
            </summary>
            <param name="displayStartLine">Display start line with a range of 0-127. (defaults to 0)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetGpio(Iot.Device.Ssd1351.GpioMode,Iot.Device.Ssd1351.GpioMode)">
            <summary>
            This double byte command is used to set the states of GPIO0 and GPIO1 pins
            </summary>
            <param name="pin0Mode">The GpioMode of Pin0. (defaults to Output/Low)</param>
            <param name="pin1Mode">The GpioMode of Pin1. (defaults to Output/Low)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetGrayLevels(System.Byte[])">
            <summary>
            This command sets the gray levels GS0 -> GS63.
            </summary>
            <param name="grayLevels">A byte array containing 64 gray levels representing GS0 -> GS63.
            If this parameter is null or an empty array then the gray leves are set to default.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetInverseDisplay">
            <summary>
            This command sets the display to be inverse.
            The gray level of display data are swapped such that “GS0” ↔ “GS63”, “GS1” ↔ “GS62”
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetNormalDisplay">
            <summary>
            This command sets the display to be normal where the display reflects the contents of the RAM..
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayAllOff">
            <summary>
            This command sets the display to have all pixels at GS0.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetDisplayAllOn">
            <summary>
            This command sets the display to have all pixels at GS63.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetMasterContrast(System.Byte)">
            <summary>
            This double byte command is to control the segment output current by a scaling factor.
            The chip has 16 master control steps, with the factor ranges from 1 [0000b] to 16
            [1111b – default]. The smaller the master current value, the dimmer the OLED panel
            display is set.   For example, if original segment output current is 160uA at
            scale factor = 16, setting scale factor to 8 would reduce the current to 80uA
            </summary>
            <param name="masterContrast">Master Contrast 0 -> 15.(defaults to 15)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetMultiplexRatio(System.Byte)">
            <summary>
            This command switches the default 63 multiplex mode to any multiplex ratio, ranging from 15 to 127.
            The output pads COM0-COM127 will be switched to the corresponding COM signal.
            </summary>
            <param name="multiplexRatio">Multiplex ratio with a range of 15-127. (defaults to 127)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetPreChargePeriods(System.Byte,System.Byte)">
            <summary>
            This double byte command sets the length of phase 1 and 2 of segment waveform of the driver.
            Phase 1: Set the period from 5 to 31 in the unit of 2 DCLKs.  A larger capacitance of the
            OLED pixel may require longer period to discharge the previous data charge completely.
            Phase 2 (A[7:4]): Set the period from 3 to 15 in the unit of DCLKs.  A longer period
            is needed to charge up a larger capacitance of the OLED pixel to the target voltage.
            </summary>
            <param name="phase1Period">Phase 1 period with a range of 2-15. (defaults to 2 x 2 DCLKs)</param>
            <param name="phase2Period">Phase 2 period with a range of 3-15. (defaults to 8 DCLKs)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetSegmentReMapColorDepth(Iot.Device.Ssd1351.ColorDepth,Iot.Device.Ssd1351.CommonSplit,Iot.Device.Ssd1351.Seg0Common,Iot.Device.Ssd1351.ColorSequence)">
            <summary>
            This command changes the mapping between the display data column address and the segment driver.
            It allows flexibility in OLED module design. This command only affects subsequent data input.
            Data already stored in GDDRAM will have no changes.
            </summary>
            <param name="colorDepth">Number of colors displayed. (defaults to 0x65K)</param>
            <param name="commonSplit">Defines if to split commons odd then even columns. (defaults to odd/even)</param>
            <param name="seg0Common">Column address 0 is mapped to SEG0 when set to Column0. Column address 127 is mapped to SEG0 when set to Column127. (defaults to Segment0 = Column0)</param>
            <param name="colorSequence">Colors are ordered R->G->B when set to RGB. Colors are ordered B->G->A when set to BGR. (defaults to BGR)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetVcomhDeselectLevel(Iot.Device.Ssd1351.VComHDeselectLevel)">
            <summary>
            This double byte command sets the high voltage level of common pins, VCOMH.
            The level of VCOMH is programmed with reference to VC.
            </summary>
            <param name="level">Vcomh deselect level. (defaults to 0.82 x Vcc)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetVDDSource(Iot.Device.Ssd1351.VDDSource)">
            <summary>
            This double byte command is used to enable or disable the VDD regulator
            </summary>
            <param name="vddSource">The source of VDD. (defaults to Internal)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetVSL(System.Byte,System.Byte,System.Byte)">
            <summary>
            Set the segment voltage reference values. Note that for the Adafruit board then use the defaults
            (in fact not sure if you can use anything but the defaults accoring to the datasheet)
            </summary>
            <param name="vslValue0">VSL Value 0. (defaults to 0xA0)</param>
            <param name="vslValue1">VSL Value 1. (defaults to 0xB5)</param>
            <param name="vslValue2">VSL Value 2. (defaults to 0x55)</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.StartScrolling">
            <summary>
            Start horizontal scrolling
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.StopScrolling">
            <summary>
            Stop horizontal scrolling
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SetHorizontalScroll(Iot.Device.Ssd1351.ScrollDirection,System.Byte,System.Byte,Iot.Device.Ssd1351.ScrollSpeed)">
            <summary>
            Set Horizontal Scroll
            </summary>
            <param name="scrollDirection">The direction for the horizontal scrolling to scroll</param>
            <param name="startRow">The first row to be scrolled</param>
            <param name="numberOfRows">The number od rows to be scrolled</param>
            <param name="scrollSpeed">The speed of the horizontal scroll</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendBitmap(Iot.Device.Graphics.BitmapImage)">
            <summary>
            Send a bitmap to the ssd1351 display specifying the starting position and destination clipping rectangle.
            </summary>
            <param name="bm">The bitmap to be sent to the display controller note that only Pixel Format Format32bppArgb is supported.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendBitmap(Iot.Device.Graphics.BitmapImage,System.Drawing.Rectangle)">
            <summary>
            Send a bitmap to the ssd1351 display specifying the starting position and destination clipping rectangle.
            </summary>
            <param name="bm">The bitmap to be sent to the display controller note that only Pixel Format Format32bppArgb is supported.</param>
            <param name="updateRect">A rectangle that defines where in the display the bitmap is written. Note that no scaling is done.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendBitmap(Iot.Device.Graphics.BitmapImage,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Send a bitmap to the ssd1351 display specifying the starting position and destination clipping rectangle.
            </summary>
            <param name="bm">The bitmap to be sent to the display controller note that only Pixel Format Format32bppArgb is supported.</param>
            <param name="sourcePoint">A coordinate point in the source bitmap where copying starts from.</param>
            <param name="destinationRect">A rectangle that defines where in the display the bitmap is written. Note that no scaling is done.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.GetBitmapPixelData(Iot.Device.Graphics.BitmapImage,System.Drawing.Rectangle)">
            <summary>
            Convert a bitmap into an array of pixel data suitable for sending to the display
            </summary>
            <param name="bm">The bitmap to be sent to the display controller note that only Pixel Format Format32bppArgb is supported.</param>
            <param name="sourceRect">A rectangle that defines where in the bitmap data is to be converted from.</param>
        </member>
        <member name="M:Iot.Device.Ssd1351.Ssd1351.SendBitmapPixelData(System.Span{System.Byte},System.Drawing.Rectangle)">
            <summary>
            Send an array of pixel data to the display.
            </summary>
            <param name="pixelData">The data to be sent to the display.</param>
            <param name="destinationRect">A rectangle that defines where in the display the data is to be written.</param>
        </member>
        <member name="T:Iot.Device.Ssd1351.GpioMode">
            <summary>
            Gpio mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.GpioMode.Disabled">
            <summary>Disabled</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.GpioMode.InputEnabled">
            <summary>Input enabled</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.GpioMode.OutputLow">
            <summary>Output low</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.GpioMode.OutputHigh">
            <summary>Output high</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.ColorDepth">
            <summary>
            Color depth
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorDepth.ColourDepth256">
            <summary>Color depth: 256</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorDepth.ColourDepth65K">
            <summary>Color depth: 65k</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorDepth.ColourDepth262K">
            <summary>Color depth: 262k</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorDepth.ColourDepth262K16Bit">
            <summary>Color depth: 262k 16-bit</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.CommonSplit">
            <summary>
            Common split
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.CommonSplit.None">
            <summary>None</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.CommonSplit.OddEven">
            <summary>Parity split (odd and even numbers)</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.Seg0Common">
            <summary>
            SEG0 common
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.Seg0Common.Column0">
            <summary>Column 0</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.Seg0Common.Column127">
            <summary>Column 127</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.ColorSequence">
            <summary>
            Color sequence
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorSequence.BGR">
            <summary>BGR (blue, green, red)</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ColorSequence.RGB">
            <summary>RGB (red, green, blue)</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.VComHDeselectLevel">
            <summary>
            High voltage level (VCOMH) of common pins relative to VCC
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX072">
            <summary>0.72 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX074">
            <summary>0.74 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX076">
            <summary>0.76 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX078">
            <summary>0.78 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX080">
            <summary>0.80 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX082">
            <summary>0.82 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX084">
            <summary>0.84 of VCC level</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VComHDeselectLevel.VccX086">
            <summary>0.86 of VCC level</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.VDDSource">
            <summary>
            Source of VDD
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VDDSource.External">
            <summary>External VDD source</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.VDDSource.Internal">
            <summary>Internal VDD source</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.ScrollDirection">
            <summary>
            Horizontal scroll direction
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollDirection.NoScroll">
            <summary>No scroll</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollDirection.Scroll2Seg127">
            <summary>Scroll to segment 127</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollDirection.Scroll2Seg0">
            <summary>Scroll to segment 0</summary>
        </member>
        <member name="T:Iot.Device.Ssd1351.ScrollSpeed">
            <summary>
            Horizontal scroll speed
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollSpeed.Normal">
            <summary>Normal speed</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollSpeed.Slow">
            <summary>Slow speed</summary>
        </member>
        <member name="F:Iot.Device.Ssd1351.ScrollSpeed.Slowest">
            <summary>Slowest speed</summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.ActivateScroll">
            <summary>
            Represents ActivateScroll command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.ActivateScroll.#ctor">
            <summary>
            This command starts the motion of scrolling and should only be issued
            after the scroll setup parameters have been defined by the scrolling
            setup commands :26h/27h/29h/2Ah. The setting in the last scrolling setup
            command overwrites the setting in the previous scrolling setup commands.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.ActivateScroll.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.ActivateScroll.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.DeactivateScroll">
            <summary>
            Represents DeactivateScroll command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.DeactivateScroll.#ctor">
            <summary>
            This command stops the motion of scrolling. After sending 2Eh command to deactivate
            the scrolling action, the ram data needs to be rewritten.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.DeactivateScroll.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.DeactivateScroll.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.ICommand">
            <summary>
            Interface for all Ssd13xx commands
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.ICommand.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.ICommand.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.ISharedCommand">
            <summary>
            Interface for all shared Ssd13xx commands
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.ISsd1306Command">
            <summary>
            Interface for all Ssd1306 commands
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.ISsd1327Command">
            <summary>
            Interface for all Ssd1327 commands
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0">
            <summary>
            Represents SetContrastControlForBank0 command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.#ctor(System.Byte)">
            <summary>
            This command sets the Contrast Setting of the display.
            The chip has 256 contrast steps from 0 to 255.
            The segment output current increases as the contrast step value increases.
            </summary>
            <param name="contrastSetting">Contrast setting with a range of 0-255.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.ContrastSetting">
            <summary>
            Contrast setting with a range of 0-255.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetContrastControlForBank0.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.SetDisplayOff">
            <summary>
            Represents SetDisplayOff command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetDisplayOff.#ctor">
            <summary>
            This command turns the OLED panel display off.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetDisplayOff.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetDisplayOff.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.SetDisplayOn">
            <summary>
            Represents SetDisplayOn command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetDisplayOn.#ctor">
            <summary>
            This command turns the OLED panel display on.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetDisplayOn.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetDisplayOn.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.SetInverseDisplay">
            <summary>
            Represents SetInverseDisplay command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetInverseDisplay.#ctor">
            <summary>
            This command sets the display to be inverse.  Displays a RAM data of 0 indicates an ON pixel.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetInverseDisplay.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetInverseDisplay.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.SetMultiplexRatio">
            <summary>
            Represents SetMultiplexRatio command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.#ctor(System.Byte)">
            <summary>
            This command switches the default 63 multiplex mode to any multiplex ratio, ranging from 15 to 127.
            The output pads COM0-COM63 will be switched to the corresponding COM signal.
            </summary>
            <param name="multiplexRatio">Multiplex ratio with a range of 15-127.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.MultiplexRatio">
            <summary>
            Multiplex ratio with a range of 15-63.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.SetMultiplexRatio.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable">
            <summary>
            Represents SelectDefaultLinearGrayScaleTable command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable.#ctor">
            <summary>
            This command reloads the preset linear Gray Scale table.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SelectDefaultLinearGrayScaleTable.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress">
            <summary>
            Represents SetColumnAddress command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.#ctor(System.Byte,System.Byte)">
            <summary>
            Set column address.
            Start from 8th column of driver IC. This is 0th column for OLED.
            End at  (8 + 47)th column. Each column has 2 pixels(or segments).
            </summary>
            <param name="startAddress">Column start address with a range of 8-55.</param>
            <param name="endAddress">Column end address with a range of 8-55.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.StartAddress">
            <summary>
            Column start address.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.EndAddress">
            <summary>
            Column end address.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetColumnAddress.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel">
            <summary>
            Represents SetComDeselectVoltageLevel command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.#ctor(System.Byte)">
            <summary>
            This command sets the high voltage level of common pins, Vcomh.
            </summary>
            <param name="level">COM deselect voltage level.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.Level">
            <summary>
            COM deselect voltage level.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetComDeselectVoltageLevel.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency">
            <summary>
            Represents SetDisplayClockDivideRatioOscillatorFrequency command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.#ctor(System.Byte,System.Byte)">
            <summary>
            This command sets the divide ratio to generate DCLK (Display Clock) from CLK and
            programs the oscillator frequency Fosc that is the source of CLK if CLS pin is pulled high.
            </summary>
            <param name="displayClockDivideRatio">Display clock divide ratio with a range of 0-15. For more information see device documentations.</param>
            <param name="oscillatorFrequency">Oscillator frequency with a range of 0-15 in Kilohertz. For more information see device documentations.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.DisplayClockDivideRatio">
            <summary>
            Display clock divide ratio with a range of 0-15.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.OscillatorFrequency">
            <summary>
            Oscillator frequency with a range of 0-15.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayClockDivideRatioOscillatorFrequency.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset">
            <summary>
            Represents SetDisplayOffset command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.#ctor(System.Byte)">
            <summary>
            This command specifies the mapping of the display start line to one of COM0-COM127
            (assuming that COM0 is the display start line then the display start line register is equal to 0).
            </summary>
            <param name="displayOffset">Display offset with a range of 0-127.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.DisplayOffset">
            <summary>
            Display offset with a range of 0-127.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayOffset.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine">
            <summary>
            Represents SetDisplayStartLine command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.#ctor(System.Byte)">
            <summary>
            This command sets the Display Start Line register to determine starting address of display RAM,
            by selecting a value from 0 to 127. With value equal to 0, RAM row 0 is mapped to COM0.
            With value equal to 1, RAM row 1 is mapped to COM0 and so on.
            </summary>
            <param name="displayStartLine">Display start line with a range of 0-63.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.DisplayStartLine">
            <summary>
            Display start line with a range of 0-127.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetDisplayStartLine.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator">
            <summary>
            Represents SetInternalVddRegulator command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.#ctor(System.Boolean)">
            <summary>
            This command is used to enable internal Vdd regulator.
            </summary>
            <param name="enable">Represents if internal Vdd have to be enabled.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.UseInternalVdd">
            <summary>
            The value that represent if internal or external Vdd should be used.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetInternalVddRegulator.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay">
            <summary>
            Represents SetNormalDisplay command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay.#ctor">
            <summary>
            This command sets the display to be normal.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetNormalDisplay.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength">
            <summary>
            Sets the length of phase 1 and 2 of segment waveform of the driver.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructs instance of SetPhaseLength command
            </summary>
            <param name="phase1Period">Phase 1 period</param>
            <param name="phase2Period">Phase 2 period</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.#ctor(System.Byte)">
            <summary>
            Constructs instance of SetPhaseLength command
            </summary>
            <param name="phasePeriod">Phase period</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.Phase1Period">
            <summary>
            Phase 1 period with a range of 1-15.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.Phase2Period">
            <summary>
            Phase 2 period with a range of 1-15.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.PhasePeriod">
            <summary>
            Phase period.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPhaseLength.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage">
            <summary>
            Represents SetPreChargeVoltage command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.#ctor(System.Byte)">
            <summary>
            This command sets the first pre-charge voltage (phase 2) level of segment pins.
            </summary>
            <param name="level">
            Pre-charge voltage level.
            Parameter values between 0b_0000 and 0b_0111 leads to voltage values between 0.2 x Vcc and 0.613 x Vcc Volts.
            Parameter value 0b_1XXX leads to voltage value equals to Vcomh.
            </param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.Level">
            <summary>
            Pre-charge voltage level.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetPreChargeVoltage.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap">
            <summary>
            Represents SetReMap command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Re-map setting in Graphic Display Data RAM(GDDRAM)
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.Config">
            <summary>
            ReMap Config.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetReMap.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress">
            <summary>
            Represents SetRowAddress command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.#ctor(System.Byte,System.Byte)">
            <summary>
            Set row address
            </summary>
            <param name="startAddress">Column start address with a range of 0-95.</param>
            <param name="endAddress">Column end address with a range of 0-95.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.StartAddress">
            <summary>
            Row start address.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.EndAddress">
            <summary>
            Row end address.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetRowAddress.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod">
            <summary>
            Represents SetSecondPreChargePeriod command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.#ctor(System.Byte)">
            <summary>
            This command is used to set the phase 3 second pre-charge period.
            </summary>
            <param name="period">Second pre-charge period.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.Period">
            <summary>
            Second Pre-charge period.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargePeriod.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl">
            <summary>
            Represents SetSecondPreChargeVsl command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.#ctor(System.Boolean,System.Boolean)">
            <summary>
            This command sets the first pre-charge voltage (phase 2) level of segment pins.
            </summary>
            <param name="secondPrecharge">Enable/disable second precharge.</param>
            <param name="externalVsl"> Switch between internal and external VSL.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.Config">
            <summary>
            The value that represents configuration
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetSecondPreChargeVsl.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver">
            <summary>
            Represents SetUnlockDriver command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.#ctor(System.Boolean)">
            <summary>
            This command sets the display to be normal.
            </summary>
            <param name="unlock">Represents if driver have to be unlocked.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.SetUnlock">
            <summary>
            The value that represents if driver should be unlocked.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1327Commands.SetUnlockDriver.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup">
            <summary>
            Represents ContinuousVerticalAndHorizontalScrollSetup command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress,System.Byte)">
            <summary>
            This command consists of 6 consecutive bytes to set up the continuous vertical
            scroll parameters and determines the scrolling start page, end page, scrolling
            speed and vertical scrolling offset.
            </summary>
            <param name="scrollType">Vertical/Horizontal scroll type.</param>
            <param name="startPageAddress">Start page address with a range of 0-7.</param>
            <param name="frameFrequencyType">Frame frequency type with a range of 0-7.</param>
            <param name="endPageAddress">End page address with a range of 0-7.</param>
            <param name="verticalScrollingOffset">Vertical scrolling offset with a range of 0-63.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.ScrollType">
            <summary>
            Vertical/Horizontal scroll type.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.StartPageAddress">
            <summary>
            Start page address with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.FrameFrequencyType">
            <summary>
            Frame frequency type with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.EndPageAddress">
            <summary>
            End page address with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalScrollingOffset">
            <summary>
            Vertical scrolling offset with a range of 0-63.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType">
            <summary>
            Vertical and horizontal scroll
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType.Right">
            <summary>
            Vertical and right horizontal scroll.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.ContinuousVerticalAndHorizontalScrollSetup.VerticalHorizontalScrollType.Left">
            <summary>
            Vertical and left horizontal scroll.
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn">
            <summary>
            Represents EntireDisplayOn command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.#ctor(System.Boolean)">
            <summary>
            This command turns the entire display on or off.
            </summary>
            <param name="entireDisplay">Resume to RAM content display when FALSE and turns entire dislay on when TRUE.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.EntireDisplay">
            <summary>
            Resume to RAM content display when FALSE and turns entire dislay on when TRUE.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.EntireDisplayOn.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType">
            <summary>
            Frame frequency type
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames2">
            <summary>Frames2</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames3">
            <summary>Frames3</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames4">
            <summary>Frames4</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames5">
            <summary>Frames5</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames25">
            <summary>Frames25</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames64">
            <summary>Frames64</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames128">
            <summary>Frames128</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType.Frames256">
            <summary>Frames256</summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup">
            <summary>
            Represents HorizontalScrollSetup command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.FrameFrequencyType,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress)">
            <summary>
            This command consists of consecutive bytes to set up the horizontal scroll parameters
            and determines the scrolling start page, end page and scrolling speed.
            </summary>
            <param name="scrollType">Horizontal scroll type.</param>
            <param name="startPageAddress">Start page address with a range of 0-7.</param>
            <param name="frameFrequencyType">Frame frequency type with a range of 0-7.</param>
            <param name="endPageAddress">End page address with a range of 0-7.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.ScrollType">
            <summary>
            Horizontal scroll type.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.StartPageAddress">
            <summary>
            Start page address with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.FrameFrequencyType">
            <summary>
            Frame frequency type with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.EndPageAddress">
            <summary>
            End page address with a range of 0-7.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType">
            <summary>
            Horizontal scroll type
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType.Right">
            <summary>
            Right horizontal scroll.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.HorizontalScrollSetup.HorizontalScrollType.Left">
            <summary>
            Left horizontal scroll.
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation">
            <summary>
            Represents NoOperation command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation.#ctor">
            <summary>
            This command is a no operation command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.NoOperation.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump">
            <summary>
            Represents SetChargePump command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.#ctor(System.Boolean)">
            <summary>
            This command controls the switching capacitor regulator circuit.
            </summary>
            <param name="enableChargePump">Determines if charge pump is enabled while the display is on.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.EnableChargePump">
            <summary>
            Determines if charge pump is enabled while the display is on.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetChargePump.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress">
            <summary>
            Represents SetColumnAddress
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.#ctor(System.Byte,System.Byte)">
            <summary>
            This triple byte command specifies column start address and end address of the display data RAM.
            This command also sets the column address pointer to column start address. This pointer is used
            to define the current read/write column address in graphic display data RAM. If horizontal address
            increment mode is enabled by command 20h, after finishing read/write one column data, it is
            incremented automatically to the next column address. Whenever the column address pointer finishes
            accessing the end column address, it is reset back to start column address and the row address
            is incremented to the next row.  This command is only for horizontal or vertical addressing modes.
            </summary>
            <param name="startAddress">Column start address with a range of 0-127.</param>
            <param name="endAddress">Column end address with a range of 0-127.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.StartAddress">
            <summary>
            Column start address with a range of 0-127.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.EndAddress">
            <summary>
            Column end address with a range of 0-127.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetColumnAddress.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection">
            <summary>
            Represents SetComOutputScanDirection command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.#ctor(System.Boolean)">
            <summary>
            This command sets the scan direction of the COM output, allowing layout flexibility
            in the OLED module design. Additionally, the display will show once this command is
            issued. For example, if this command is sent during normal display then the graphic
            display will be vertically flipped immediately.
            </summary>
            <param name="normalMode">
            Scan from COM0 to COM[N –1] when TRUE.
            Scan from COM[N - 1] to COM0 when FALSE.
            </param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.NormalMode">
            <summary>
            Scan from COM0 to COM[N –1] when TRUE.
            Scan from COM[N - 1] to COM0 when FALSE.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComOutputScanDirection.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration">
            <summary>
            Represents SetComPinsHardwareConfiguration command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.#ctor(System.Boolean,System.Boolean)">
            <summary>
            This command sets the COM signals pin configuration to match the OLED panel hardware layout.
            </summary>
            <param name="alternativeComPinConfiguration">Alternative COM pin configuration.</param>
            <param name="enableLeftRightRemap">Enable left/right remap.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.AlternativeComPinConfiguration">
            <summary>
            Alternative COM pin configuration.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.EnableLeftRightRemap">
            <summary>
            Enable left/right remap.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetComPinsHardwareConfiguration.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency">
            <summary>
            Represents SetDisplayClockDivideRatioOscillatorFrequency command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.#ctor(System.Byte,System.Byte)">
            <summary>
            This command sets the divide ratio to generate DCLK (Display Clock) from CLK and
            programs the oscillator frequency Fosc that is the source of CLK if CLS pin is pulled high.
            </summary>
            <param name="displayClockDivideRatio">Display clock divide ratio with a range of 0-15.</param>
            <param name="oscillatorFrequency">Oscillator frequency with a range of 0-15.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.DisplayClockDivideRatio">
            <summary>
            Display clock divide ratio with a range of 0-15.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.OscillatorFrequency">
            <summary>
            Oscillator frequency with a range of 0-15.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayClockDivideRatioOscillatorFrequency.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset">
            <summary>
            Represents SetDisplayOffset command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.#ctor(System.Byte)">
            <summary>
            This command specifies the mapping of the display start line to one of COM0-COM63
            (assuming that COM0 is the display start line then the display start line register is equal to 0).
            </summary>
            <param name="displayOffset">Display offset with a range of 0-63.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.DisplayOffset">
            <summary>
            Display offset with a range of 0-63.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayOffset.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine">
            <summary>
            Represents SetDisplayStartLine command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.#ctor(System.Byte)">
            <summary>
            This command sets the Display Start Line register to determine starting address of display RAM,
            by selecting a value from 0 to 63. With value equal to 0, RAM row 0 is mapped to COM0.
            With value equal to 1, RAM row 1 is mapped to COM0 and so on.
            </summary>
            <param name="displayStartLine">Display start line with a range of 0-63.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.DisplayStartLine">
            <summary>
            Display start line with a range of 0-63.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetDisplayStartLine.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode">
            <summary>
            Represents SetHigherColumnStartAddressForPageAddressingMode command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.#ctor(System.Byte)">
            <summary>
            This command specifies the higher nibble of the 8-bit column start address for the display
            data RAM under Page Addressing Mode. The column address will be incremented by each data access.
            This command is only for page addressing mode.
            </summary>
            <param name="higherColumnStartAddress">Higher column start address with a range of 0-15.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.HigherColumnStartAddress">
            <summary>
            Higher column start address with a range of 0-15.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetHigherColumnStartAddressForPageAddressingMode.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode">
            <summary>
            Represents SetLowerColumnStartAddressForPageAddressingMode command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.#ctor(System.Byte)">
            <summary>
            This command specifies the lower nibble of the 8-bit column start address for the display
            data RAM under Page Addressing Mode. The column address will be incremented by each data access.
            This command is only for page addressing mode.
            </summary>
            <param name="lowerColumnStartAddress">Lower column start address with a range of 0-15.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.LowerColumnStartAddress">
            <summary>
            Lower column start address with a range of 0-15.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetLowerColumnStartAddressForPageAddressingMode.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode">
            <summary>
            Represents SetMemoryAddressingMode command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode)">
            <summary>
            This command sets the memory addressing mode.
            </summary>
            <param name="memoryAddressingMode">Memory addressing mode.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.MemoryAddressingMode">
            <summary>
            Memory addressing mode.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode">
            <summary>
            Addressing mode
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode.Horizontal">
            <summary>
            In horizontal addressing mode, after the display RAM is read/written, the column address
            pointer is increased automatically by 1. If the column address pointer reaches column end
            address, the column address pointer is reset to column start address and page address
            pointer is increased by 1. When both column and page address pointers reach the end address,
            the pointers are reset to column start address and page start address.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode.Vertical">
            <summary>
            In vertical addressing mode, after the display RAM is read/written, the page address pointer
            is increased automatically by 1. If the page address pointer reaches the page end address,
            the page address pointer is reset to page start address and column address pointer is
            increased by 1. When both column and page address pointers reach the end address, the
            pointers are reset to column start address and page start address.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetMemoryAddressingMode.AddressingMode.Page">
            <summary>
            In page addressing mode, after the display RAM is read/written, the column address pointer
            is increased automatically by 1. If the column address pointer reaches column end address,
            the column address pointer is reset to column start address and page address pointer is not
            changed. Users have to set the new page and column addresses in order to access the next
            page RAM content.
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay">
            <summary>
            Represents SetNormalDisplay command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay.#ctor">
            <summary>
            This command sets the display to be normal.  Displays a RAM data of 1 indicates an ON pixel.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetNormalDisplay.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress">
            <summary>
            Page address
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page0">
            <summary>Page0</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page1">
            <summary>Page1</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page2">
            <summary>Page2</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page3">
            <summary>Page3</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page4">
            <summary>Page4</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page5">
            <summary>Page5</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page6">
            <summary>Page6</summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress.Page7">
            <summary>Page6</summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress">
            <summary>
            Represents SetPageAddress command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress,Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress)">
            <summary>
            This triple byte command specifies page start address and end address of the display data RAM.
            This command also sets the page address pointer to page start address. This pointer is used to
            define the current read/write page address in graphic display data RAM. If vertical address
            increment mode is enabled by command 20h, after finishing read/write one page data, it is
            incremented automatically to the next page address. Whenever the page address pointer finishes
            accessing the end page address, it is reset back to start page address.
            This command is only for horizontal or vertical addressing modes.
            </summary>
            <param name="startAddress">Page start address with a range of 0-7.</param>
            <param name="endAddress">Page end address with a range of 0-7.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.StartAddress">
            <summary>
            Page start address with a range of 0-7.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.EndAddress">
            <summary>
            Page end address with a range of 0-7.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageAddress.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode">
            <summary>
            Represents SetPageStartAddressForPageAddressingMode command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.PageAddress)">
            <summary>
            This command positions the page start address from 0 to 7 in GDDRAM under Page Addressing Mode.
            </summary>
            <param name="startAddress">Page start address with a range of 0-7.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.StartAddress">
            <summary>
            Page start address with a range of 0-7.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPageStartAddressForPageAddressingMode.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod">
            <summary>
            Represents SetPreChargePeriod command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.#ctor(System.Byte,System.Byte)">
            <summary>
            This command is used to set the duration of the pre-charge period.
            The interval is counted in number of DCLK, where RESET equals 2 DCLKs.
            </summary>
            <param name="phase1Period">Phase 1 period with a range of 1-15.</param>
            <param name="phase2Period">Phase 2 period with a range of 1-15.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.Phase1Period">
            <summary>
            Phase 1 period with a range of 1-15.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.Phase2Period">
            <summary>
            Phase 2 period with a range of 1-15.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetPreChargePeriod.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap">
            <summary>
            Represents SetSegmentReMap command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.#ctor(System.Boolean)">
            <summary>
            This command changes the mapping between the display data column address and the segment driver.
            It allows flexibility in OLED module design. This command only affects subsequent data input.
            Data already stored in GDDRAM will have no changes.
            </summary>
            <param name="columnAddress127">Column address 0 is mapped to SEG0 when FALSE.
            Column address 127 is mapped to SEG0 when TRUE.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.ColumnAddress127">
            <summary>
            Column Address 127.  Column address 127 is mapped to SEG0 when FALSE.
            Column address 127 is mapped to SEG0 when TRUE.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetSegmentReMap.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel">
            <summary>
            Represents SetVcomhDeselectLevel command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.#ctor(Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel)">
            <summary>
            This command adjusts the VCOMH regulator output.
            </summary>
            <param name="level">Vcomh deselect level.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.Level">
            <summary>
            Vcomh deselect level.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel">
            <summary>
            Deselect level
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.Vcc0_65">
            <summary>
            ~0.65 x Vcc.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.Vcc0_77">
            <summary>
            ~0.77 x Vcc.  Default value after reset.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.Vcc0_83">
            <summary>
            ~0.83 x Vcc.
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVcomhDeselectLevel.DeselectLevel.Vcc1_00">
            <summary>
            ~1.00 x Vcc.
            </summary>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea">
            <summary>
            Represents SetVerticalScrollArea command
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.#ctor(System.Byte,System.Byte)">
            <summary>
            This command consists of 3 consecutive bytes to set up the vertical scroll area.
            For the continuous vertical scroll function(command 29/2Ah), the number of rows
            that in vertical scrolling can be set smaller or equal to the MUX ratio.
            </summary>
            <param name="topFixedAreaRows">Top fixed area rows with a range of 0-63.</param>
            <param name="scrollAreaRows">Scroll area rows with a range of 0-127.</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.Id">
            <summary>
            The value that represents the command.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.TopFixedAreaRows">
            <summary>
            Top fixed area rows with a range of 0-63.
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.ScrollAreaRows">
            <summary>
            Scroll area rows with a range of 0-127.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Commands.Ssd1306Commands.SetVerticalScrollArea.GetBytes">
            <summary>
            Gets the bytes that represent the command.
            </summary>
            <returns>The bytes that represent the command.</returns>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Ssd1306">
            <summary>
            A single-chip CMOS OLED/PLED driver with controller for organic/polymer
            light emitting diode dot-matrix graphic display system.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1306.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of Ssd1306 device that will communicate using I2C bus.
            A single-chip CMOS OLED/PLED driver with controller for organic/polymer
            light emitting diode dot-matrix graphic display system.
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="width">Width of the display. Typically 128 pixels</param>
            <param name="height">Height of the display, variants with 32 or 64 rows exist</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1306.SendCommand(Iot.Device.Ssd13xx.Commands.ISsd1306Command)">
            <summary>
            Sends command to the device
            </summary>
            <param name="command">Command being send</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1306.SendCommand(Iot.Device.Ssd13xx.Commands.ISharedCommand)">
            <summary>
            Sends command to the device
            </summary>
            <param name="command">Command being send</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1306.SendCommand(Iot.Device.Ssd13xx.Commands.ICommand)">
            <summary>
            Send a command to the display controller.
            </summary>
            <param name="command">The command to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1306.SetStartAddress">
            <inheritdoc />
        </member>
        <member name="T:Iot.Device.Ssd13xx.Ssd1327">
            <summary>
            Represents SSD1327 OLED display
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32)">
            <summary>
            Initializes new instance of Ssd1327 device that will communicate using I2C bus. The default size is 96x96 pixels
            </summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
            <param name="width">Screen width in pixels</param>
            <param name="height">Screen height in pixels</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SetColumnAddress(System.Byte,System.Byte)">
            <summary>
            Sets column address
            </summary>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SetRowAddress(System.Byte,System.Byte)">
            <summary>
            Sets row address
            </summary>
            <param name="startAddress">Start address</param>
            <param name="endAddress">End address</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.ClearScreen">
            <summary>
            Clears the display
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SetStartAddress">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SendCommand(System.Byte)">
            <summary>
            Send a command to the display controller.
            </summary>
            <param name="command">The command to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SendCommand(Iot.Device.Ssd13xx.Commands.ISsd1327Command)">
            <summary>
            Sends command to the device
            </summary>
            <param name="command">Command being send</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd1327.SendCommand(Iot.Device.Ssd13xx.Commands.ISharedCommand)">
            <summary>
            Sends command to the device
            </summary>
            <param name="command">Command being send</param>
        </member>
        <member name="T:Iot.Device.Ssd13xx.Ssd13xx">
            <summary>
            Represents base class for SSD13xx OLED displays
            </summary>
        </member>
        <member name="F:Iot.Device.Ssd13xx.Ssd13xx._i2cDevice">
            <summary>
            Underlying I2C device
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Int32)">
            <summary>
            Constructs instance of Ssd13xx
            </summary>
            <param name="i2cDevice">I2C device used to communicate with the device</param>
            <param name="width">Width of the display, in pixels</param>
            <param name="height">Height of the display, in pixels</param>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Ssd13xx.ScreenHeight">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Ssd13xx.Ssd13xx.ScreenWidth">
            <inheritdoc />
        </member>
        <member name="P:Iot.Device.Ssd13xx.Ssd13xx.NativePixelFormat">
            <summary>
            The format of this display group is 1bpp black and white
            </summary>
        </member>
        <member name="P:Iot.Device.Ssd13xx.Ssd13xx.BrightnessThreshold">
            <summary>
            The brightness used to determine whether a pixel shall be black or white.
            Any pixel with a brightness below this value will be black, others will be white.
            Only affects the next frame. Default is 0.1.
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.CanConvertFromPixelFormat(Iot.Device.Graphics.PixelFormat)">
            <summary>
            This driver can convert all 32 bit formats
            </summary>
            <param name="format">The format to query</param>
            <returns>True if the format is supported</returns>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.GetBackBufferCompatibleImage">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.InRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Verifies value is within a specific range.
            </summary>
            <param name="value">Value to check.</param>
            <param name="start">Starting value of range.</param>
            <param name="end">Ending value of range.</param>
            <returns>Determines if value is within range.</returns>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.SendCommand(Iot.Device.Ssd13xx.Commands.ISharedCommand)">
            <summary>
            Send a command to the display controller.
            </summary>
            <param name="command">The command to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.SendData(System.Span{System.Byte})">
            <summary>
            Send data to the display controller.
            </summary>
            <param name="data">The data to send to the display controller.</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.SliceGenericBuffer(System.Int32)">
            <summary>
            Acquires span of specific length pointing to the command buffer.
            If length of the command buffer is too small it will be reallocated.
            </summary>
            <param name="length">Requested length</param>
            <returns>Span of bytes pointing to the command buffer</returns>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.SliceGenericBuffer(System.Int32,System.Int32)">
            <summary>
            Acquires span of specific length at specific position in command buffer.
            If length of the command buffer is too small it will be reallocated.
            </summary>
            <param name="start">Start index of the requested span</param>
            <param name="length">Requested length</param>
            <returns>Span of bytes pointing to the command buffer</returns>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.EnableDisplay(System.Boolean)">
            <summary>
            Enables or disables the display
            </summary>
            <param name="enabled">True to enable false to disable</param>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.SetStartAddress">
            <summary>
            Sets the display memory address back to the beginning, to start the next frame
            </summary>
        </member>
        <member name="M:Iot.Device.Ssd13xx.Ssd13xx.DrawBitmap(Iot.Device.Graphics.BitmapImage)">
            <summary>
            Sends the image to the screen
            </summary>
            <param name="image">Image to display.</param>
        </member>
        <member name="T:Iot.Device.Usb.StUsb4500">
            <summary>USB PD sink controller STUSB4500.</summary>
            <remarks>This is based on code from the official STUSB4500 repo (https://github.com/usb-c/STUSB4500/).</remarks>
        </member>
        <member name="F:Iot.Device.Usb.StUsb4500.DefaultI2cAddress">
            <summary>STUSB4500 default I2C address.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.DeviceId">
            <summary>Gets or sets the device Id.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.CableConnection">
            <summary>Gets the cable connection state.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.SinkPowerDeliveryObjects">
            <summary>Gets the power delivery objects from the sink.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.SourcePowerDeliveryObjects">
            <summary>Gets the source power delivery objects.
            ATTENTION: This triggers a new USB PD contract negotiation and can cause a short power-disruption.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.RequestDataObject">
            <summary>Gets the request data object.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.RequestedVoltage">
            <summary>Gets the requested voltage.</summary>
        </member>
        <member name="P:Iot.Device.Usb.StUsb4500.NvmData">
            <summary>Gets or sets the NVM data.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.#ctor(System.Device.I2c.I2cDevice)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.StUsb4500"/> class.</summary>
            <param name="i2cDevice">The I2C device used for communication.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.Finalize">
            <summary>Finalizes an instance of the <see cref="T:Iot.Device.Usb.StUsb4500"/> class.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.PerformUsbPdSoftwareReset">
            <summary>Performs a USB PD software reset.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.Dispose(System.Boolean)">
            <summary>Releases unmanaged and - optionally - managed resources.</summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadDeviceId">
            <summary>Reads the device Id.</summary>
            <returns>Device Id</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadCableConnection">
            <summary>Reads the cable connection.</summary>
            <returns>Cable status</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadSinkPdo">
            <summary>Reads the sink's PDOs.</summary>
            <returns>The PDOs from the sink.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.WriteSinkPdo(Iot.Device.Usb.PowerDeliveryObject[])">
            <summary>Writes the sink's PDOs.</summary>
            <param name="objects">The PDOs to write.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadSourcePdo(System.Int32)">
            <summary>Reads the source PDOs.</summary>
            <param name="retryCount">The retry count. If 0 no more retries are performed.</param>
            <returns>The PDOs from the source.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.GetSourcePdo">
            <summary>Reads the source PDOs.</summary>
            <returns>The PDOs from the source.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadRdo">
            <summary>Reads the RDO.</summary>
            <returns>The current RDO.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadRequestedVoltage">
            <summary>Reads the requested voltage.</summary>
            <returns>The requested voltage.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadNvm">
            <summary>Reads the NVM.</summary>
            <returns>Content of the NVM.</returns>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.EnterNvmReadMode">
            <summary>Enters the NVM read mode.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ReadNvmSector(System.Byte,System.Span{System.Byte})">
            <summary>Reads a NVM sector.</summary>
            <param name="sectorNumber">The sector number. This must be a value between 0 - 4.</param>
            <param name="sectorDataBuffer">The sector data buffer.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.WriteNvm(System.Byte[])">
            <summary>Writes the NVM.</summary>
            <param name="nvmData">The NVM data.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.EnterNvmWriteMode(System.Byte)">
            <summary>Enters the NVM write mode.</summary>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.WriteNvmSector(System.Byte,System.Span{System.Byte})">
            <summary>Writes a NVM sector.</summary>
            <param name="sectorNumber">The sector.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Iot.Device.Usb.StUsb4500.ExitNvmMode">
            <summary>Exits the test mode.</summary>
        </member>
        <member name="T:Iot.Device.Usb.StUsb4500Register">
            <summary>
            Register of STUSB4500.
            </summary>
        </member>
        <member name="T:Iot.Device.Usb.UsbCCableConnection">
            <summary>
            Cable connection status of the USB-C port.
            </summary>
        </member>
        <member name="F:Iot.Device.Usb.UsbCCableConnection.Disconnected">
            <summary>No cable is connected.</summary>
        </member>
        <member name="F:Iot.Device.Usb.UsbCCableConnection.CC1">
            <summary>The cable is attached to CC1.</summary>
        </member>
        <member name="F:Iot.Device.Usb.UsbCCableConnection.CC2">
            <summary>The cable is attached to CC2.</summary>
        </member>
        <member name="T:Iot.Device.Usb.UsbPdControlMessageType">
            <summary>
            USB PD message types.
            </summary>
        </member>
        <member name="T:Iot.Device.Usb.UsbPdDataMessageType">
            <summary>
            USB PD message types.
            </summary>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.GetBit(System.UInt32,System.Int32)">
            <summary>Gets the value of a bit.</summary>
            <param name="value">The value.</param>
            <param name="bit">The bit.</param>
            <returns>Value of the bit.</returns>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.UpdateBit(System.UInt32,System.Int32,System.Boolean)">
            <summary>Updates the value of a bit.</summary>
            <param name="value">The value.</param>
            <param name="bit">The bit.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.CheckArgumentInRange(System.Byte,System.Byte,System.Byte,System.String)">
            <summary>Checks it an argument is in range.</summary>
            <param name="value">The value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.CheckArgumentInRange(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Checks it an argument is in range.</summary>
            <param name="value">The value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.CheckArgumentInRange(System.Double,System.Double,System.Double,System.String)">
            <summary>Checks it an argument is in range.</summary>
            <param name="value">The value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdObjectHelper.CheckArgumentInRange(System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>Checks it an argument is in range.</summary>
            <param name="value">The value.</param>
            <param name="maxValue">The maximum value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:Iot.Device.Usb.BatteryObject">
            <summary>
            PDO of a battery sources.
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.BatteryObject.OperatingPower">
            <summary>Gets or sets the operating power.</summary>
            <remarks>This is stored with the factor 4 as a 10-bit value (range 0 - 1023) => 0...255.75W.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.BatteryObject.MinimalVoltage">
            <summary>Gets or sets the minimal voltage.</summary>
            <remarks>This is stored with the factor 20 as a 10-bit value (range 0 - 1023) => 0...51.15V.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.BatteryObject.MaximalVoltage">
            <summary>Gets or sets the maximal voltage.</summary>
            <remarks>This is stored with the factor 20 as a 10-bit value (range 0 - 1023) => 0...51.15V.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.BatteryObject.Power">
            <summary>Gets the power of this PDO.</summary>
        </member>
        <member name="M:Iot.Device.Usb.BatteryObject.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.BatteryObject"/> class.</summary>
            <param name="rawValue">
            The raw value received from or sent to the USB-PD controller which encodes all properties of this PDO. See USB-PD specification for details.
            </param>
        </member>
        <member name="M:Iot.Device.Usb.BatteryObject.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Iot.Device.Usb.FixedSupplyObject">
            <summary>
            PDO of a fixed supply sources.
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.OperationalCurrent">
            <summary>Gets or sets the operational current.</summary>
            <remarks>This is stored with the factor 100 as a 10-bit value (range 0 - 1023) => 0...10.23A.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.Voltage">
            <summary>Gets or sets the voltage.</summary>
            <remarks>This is stored with the factor 20 as a 10-bit value (range 0 - 1023) => 0...51.15V.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.DualRoleData">
            <summary>Gets or sets a value indicating whether the PDO supports dual role data.</summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.UsbCommunicationsCapable">
            <summary>Gets or sets a value indicating whether this PDO is USB communications capable.</summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.UnconstrainedPower">
            <summary>Gets or sets a value indicating whether this PDO has unconstrained power.</summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.HigherCapability">
            <summary>Gets or sets a value indicating whether this PDO has a higher capability.</summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.DualRolePower">
            <summary>Gets or sets a value indicating whether the PDO supports dual role power.</summary>
        </member>
        <member name="P:Iot.Device.Usb.FixedSupplyObject.Power">
            <summary>Gets the power of this PDO.</summary>
        </member>
        <member name="M:Iot.Device.Usb.FixedSupplyObject.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.FixedSupplyObject"/> class.</summary>
            <param name="rawValue">
            The raw value received from or sent to the USB-PD controller which encodes all properties of this PDO. See USB-PD specification for details.
            </param>
        </member>
        <member name="M:Iot.Device.Usb.FixedSupplyObject.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Iot.Device.Usb.PowerDeliveryObject">
            <summary>
            Base class for all the different power delivery objects (=PDO).
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.PowerDeliveryObject.Value">
            <summary>
            Gets or sets the value which encodes all properties of this PDO and can be used to send this PDO to the USB-PD controller.
            See USB-PD specification for details.
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.PowerDeliveryObject.Power">
            <summary>Gets the power of this PDO.</summary>
        </member>
        <member name="M:Iot.Device.Usb.PowerDeliveryObject.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.PowerDeliveryObject"/> class.</summary>
            <param name="rawValue">The raw value which encodes all properties of this PDO. See USB-PD specification for details.</param>
        </member>
        <member name="M:Iot.Device.Usb.PowerDeliveryObject.CreateFromValue(System.UInt32)">
            <summary>Creates a new PDO from the given value.</summary>
            <param name="rawValue">
            The raw value received from or sent to the USB-PD controller which encodes all properties of this PDO. See USB-PD specification for details.
            </param>
            <returns>
            A PDO of the type defined by the value,
            which can be a <see cref="T:Iot.Device.Usb.FixedSupplyObject"/>, <see cref="T:Iot.Device.Usb.VariableSupplyObject"/> or <see cref="T:Iot.Device.Usb.BatteryObject"/>.
            </returns>
        </member>
        <member name="T:Iot.Device.Usb.RequestDataObject">
            <summary>
            Representation of a request data object (=RDO).
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.Value">
            <summary>Gets the raw value received from the USB-PD controller which encodes all properties of this RDO. See USB-PD specification for details.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.MaximalCurrent">
            <summary>Gets or sets the maximal current.</summary>
            <remarks>This is stored with the factor 100 as a 10-bit value (range 0 - 1023) => 0...10.23A.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.OperatingCurrent">
            <summary>Gets or sets the operational current.</summary>
            <remarks>This is stored with the factor 100 as a 10-bit value (range 0 - 1023) => 0...10.23A.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.UnchunkedExtendedMessagesSupported">
            <summary>Gets or sets a value indicating whether unchunked extended messages are supported.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.NoUsbSuspend">
            <summary>Gets or sets a value indicating whether the USB is not suspended.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.UsbCommunicationsCapable">
            <summary>Gets or sets a value indicating whether the port is capable of USB communications.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.CapabilityMismatch">
            <summary>Gets or sets a value indicating whether there is a capability mismatch.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.GiveBackFlag">
            <summary>Gets or sets a value indicating whether the give back flag is set.</summary>
        </member>
        <member name="P:Iot.Device.Usb.RequestDataObject.ObjectPosition">
            <summary>Gets or sets the object position.</summary>
            <remarks>This is stored as a 3-bit value (range 0 - 7). 000b is Reserved and shall not be used.</remarks>
        </member>
        <member name="M:Iot.Device.Usb.RequestDataObject.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.RequestDataObject"/> class.</summary>
            <param name="rawValue">The raw value received from the USB-PD controller which encodes all properties of this RDO. See USB-PD specification for details.</param>
        </member>
        <member name="T:Iot.Device.Usb.UsbPdMessageHeader">
            <summary>
            Represents the header of a USB PD message.
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.Value">
            <summary>Gets the value which encodes all properties of this message header.</summary>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.ControlMessageType">
            <summary>Gets or sets the type of the message, if this is a control message (NumberOfDataObjects = 0).</summary>
            <remarks>This is stored as a 5-bit value (range 0 - 31).</remarks>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.DataMessageType">
            <summary>Gets or sets the type of the message, if this is a data message (NumberOfDataObjects > 0).</summary>
            <remarks>This is stored as a 5-bit value (range 0 - 31).</remarks>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.PortDataRole">
            <summary>Gets or sets a value indicating whether the port is in a data role.</summary>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.SpecificationRevision">
            <summary>Gets or sets the specification revision.</summary>
            <remarks>This is stored as a 2-bit value (range 0 - 3).</remarks>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.PortPowerRoleCablePlug">
            <summary>Gets or sets a value indicating whether the port is in power role / cable plugged.</summary>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.MessageId">
            <summary>Gets or sets the Message Id.</summary>
            <remarks>This is stored as a 3-bit value (range 0 - 7).</remarks>
        </member>
        <member name="P:Iot.Device.Usb.UsbPdMessageHeader.NumberOfDataObjects">
            <summary>Gets or sets the number of data objects.</summary>
            <remarks>This is stored as a 3-bit value (range 0 - 7).</remarks>
        </member>
        <member name="M:Iot.Device.Usb.UsbPdMessageHeader.#ctor(System.UInt16)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.UsbPdMessageHeader"/> class.</summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Iot.Device.Usb.VariableSupplyObject">
            <summary>
            PDO of a variable supply source.
            </summary>
        </member>
        <member name="P:Iot.Device.Usb.VariableSupplyObject.OperationalCurrent">
            <summary>Gets or sets the operational current.</summary>
            <remarks>This is stored with the factor 100 as a 10-bit value (range 0 - 1023) => 0...10.23A.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.VariableSupplyObject.MinimalVoltage">
            <summary>Gets or sets the minimal voltage.</summary>
            <remarks>This is stored with the factor 20 as a 10-bit value (range 0 - 1023) => 0...51.15V.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.VariableSupplyObject.MaximalVoltage">
            <summary>Gets or sets the maximal voltage.</summary>
            <remarks>This is stored with the factor 20 as a 10-bit value (range 0 - 1023) => 0...51.15V.</remarks>
        </member>
        <member name="P:Iot.Device.Usb.VariableSupplyObject.Power">
            <summary>Gets the power of this PDO.</summary>
        </member>
        <member name="M:Iot.Device.Usb.VariableSupplyObject.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:Iot.Device.Usb.VariableSupplyObject"/> class.</summary>
            <param name="rawValue">
            The raw value received from or sent to the USB-PD controller which encodes all properties of this PDO. See USB-PD specification for details.
            </param>
        </member>
        <member name="M:Iot.Device.Usb.VariableSupplyObject.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Iot.Device.Tca954x.MultiplexerChannel">
            <summary>
            Available channels
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.None">
            <summary>
            No channel is selected
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel0">
            <summary>
            Channel 0 Byte (2^0 = 1)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel1">
            <summary>
            Channel 1 Byte (2^1 = 2)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel2">
            <summary>
            Channel 2 Byte (2^2 = 4)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel3">
            <summary>
            Channel 3 Byte (2^3 = 8)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel4">
            <summary>
            Channel 4 Byte (2^4 = 16)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel5">
            <summary>
            Channel 5 Byte (2^5 = 32)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel6">
            <summary>
            Channel 6 Byte (2^6 = 64)
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.MultiplexerChannel.Channel7">
            <summary>
            Channel 7 Byte (2^7 = 128)
            </summary>
        </member>
        <member name="T:Iot.Device.Tca954x.Tca9548A">
            <summary>
            Tca9548A - 8-Channel I2C Switch/Multiplexer
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.Tca9548A._devicesInUse">
            <summary>
            Shadows the device list of the master bus, but supports duplicates
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.Tca9548A.DefaultI2cAddress">
            <summary>
            The default I2C Address, page 15 of the main documentation
            https://www.ti.com/lit/ds/symlink/tca9548a.pdf
            </summary>
        </member>
        <member name="F:Iot.Device.Tca954x.Tca9548A.DeviceChannels">
            <summary>
            Array of all possible Multiplexer Channels
            </summary>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.#ctor(System.Device.I2c.I2cDevice,System.Device.I2c.I2cBus,System.Boolean)">
            <summary>
            Creates a Multiplexer Instance
            </summary>
            <param name="i2cDevice">The I2C Device of the Mux itself</param>
            <param name="mainBus">The bus the mux is connected to</param>
            <param name="shouldDispose">true to dispose the I2C device at dispose</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown if I2C device is null</exception>
        </member>
        <member name="P:Iot.Device.Tca954x.Tca9548A.Item(System.Int32)">
            <summary>
            Gets Channel busses of the multiplexer
            </summary>
            <param name="index">channel number</param>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.SelectChannel(Iot.Device.Tca954x.MultiplexerChannel)">
            <summary>
            Select a group of multiplexer channels.
            </summary>
            <param name="multiplexChannels">The channels to select</param>
            <remarks>
            In most cases, a single channel will be selected at a time, but it is possible to write to several channels at once. Reading
            from multiple channels at once will result in undefined behavior.
            </remarks>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.TryGetSelectedChannel(Iot.Device.Tca954x.MultiplexerChannel@)">
            <summary>
            Try getting the selected channel on Multiplexer
            </summary>
            <param name="selectedChannel">Selected Multiplexer Channel</param>
            <returns>True if able to retrieve selected channel. Returns false otherwise. Also
            returns false if more than one channel is selected.</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.GetChannel(System.Int32)">
            <summary>
            Returns the given channel.
            </summary>
            <param name="channelNo">The channel number (0-7)</param>
            <returns>An <see cref="T:System.Device.I2c.I2cBus"/> representing the provided channel</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.GetChannel(Iot.Device.Tca954x.MultiplexerChannel)">
            <summary>
            Returns the given channel
            </summary>
            <param name="channel">A single channel value</param>
            <returns>The given channel as <see cref="T:System.Device.I2c.I2cBus"/> instance</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The channel value is not valid or represents more than one channel</exception>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Tca954x.Tca9548A.Count">
            <inheritdoc/>
        </member>
        <member name="P:Iot.Device.Tca954x.Tca9548A.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.IndexOf(System.Device.I2c.I2cBus)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Insert(System.Int32,System.Device.I2c.I2cBus)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.RemoveAt(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Add(System.Device.I2c.I2cBus)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Contains(System.Device.I2c.I2cBus)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.CopyTo(System.Device.I2c.I2cBus[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.Remove(System.Device.I2c.I2cBus)">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.CreateOrGetMasterBusDevice(System.Int32)">
            <summary>
            Gets an I2c Device to use on a <see cref="T:Iot.Device.Tca954x.Tca9548AChannelBus"/>. The device is identical to that
            of the master bus, but we need to verify that we only create it once, or the master bus controller
            will complain about duplicate address use.
            </summary>
            <param name="deviceAddress">I2C address of the new device</param>
            <returns>Either a new device or a cached one</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548A.ReleaseDevice(System.Device.I2c.I2cDevice,System.Int32)">
            <summary>
            Releases the device, disposing it when it's the last one with this address
            </summary>
            <param name="device">The device (must have been created by the above method)</param>
            <param name="deviceAddress">Address of the device</param>
        </member>
        <member name="T:Iot.Device.Tca954x.Tca9548AChannelBus">
            <summary>
            I2C BUs of TCA9548A channel
            </summary>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AChannelBus.#ctor(Iot.Device.Tca954x.Tca9548A,System.Device.I2c.I2cBus,Iot.Device.Tca954x.MultiplexerChannel)">
            <summary>
            Creates new I2C bus Instance for multiplexer channel
            </summary>
            <param name="tca9548A">TCA9548A multiplexer </param>
            <param name="mainBus">Main Bus</param>
            <param name="channels">Selected Channel on Multiplexer</param>
            <remarks>
            To send to a device, we set up the channel on the mux and then use the main channel
            to talk to the device. That means that the data sent on the bus for the device
            is identical as if there was no mux.</remarks>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AChannelBus.CreateDevice(System.Int32)">
            <summary>
            Creates I2C device
            </summary>
            <param name="deviceAddress">Device address related with the device to create.</param>
            <returns>I2cDevice instance.</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AChannelBus.PerformBusScan">
            <summary>
            Returns all the connected device on selected channel
            </summary>
            <returns>The list of used addresses</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AChannelBus.RemoveDevice(System.Int32)">
            <summary>
            Removes I2C device.
            </summary>
            <param name="deviceAddress">Device address to remove.</param>m
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AChannelBus.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="F:Iot.Device.Tca954x.Tca9548AI2cDevice._realDevice">
            <summary>
            The real device instance (an I2c device on the master bus)
            </summary>
        </member>
        <member name="P:Iot.Device.Tca954x.Tca9548AI2cDevice.ConnectionSettings">
            <summary>
            The connection settings of an attached device. This returns the settings for the virtual multiplexer bus.
            </summary>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.#ctor(Iot.Device.Tca954x.Tca9548A,Iot.Device.Tca954x.MultiplexerChannel,System.Device.I2c.I2cDevice,System.Device.I2c.I2cConnectionSettings)">
            <summary>
             Initializes a new instance of the <see cref="T:Iot.Device.Tca954x.Tca9548AI2cDevice"/> class on the <see cref="T:Iot.Device.Tca954x.MultiplexerChannel"/> of TCA mux that will use the specified settings to communicate with the I2C device.
            </summary>
            <param name="tca9548A">Instance on TCA9548A device</param>
            <param name="tcaChannel">Channel on which device is</param>
            <param name="device">I2C device (from the parent bus)</param>
            <param name="virtualConnectionSettings">The connection settings to report for this device</param>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.Read(System.Span{System.Byte})">
            <summary>
            Reads data from the I2C device.
            </summary>
            <param name="buffer">
            The buffer to read the data from the I2C device.
            The length of the buffer determines how much data to read from the I2C device.
            </param>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.ReadByte">
            <summary>
            Reads a byte from the I2C device.
            </summary>
            <returns>A byte read from the I2C device.</returns>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes data to the I2C device.
            </summary>
            <param name="buffer">
            The buffer that contains the data to be written to the I2C device.
            The data should not include the I2C device address.
            </param>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the I2C device.
            </summary>
            <param name="value">The byte to be written to the I2C device.</param>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.WriteRead(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
            Performs an atomic operation to write data to and then read data from the I2C bus on which the device is connected,
            and sends a restart condition between the write and read operations.
            </summary>
            <param name="writeBuffer">
            The buffer that contains the data to be written to the I2C device.
            The data should not include the I2C device address.</param>
            <param name="readBuffer">
            The buffer to read the data from the I2C device.
            The length of the buffer determines how much data to read from the I2C device.
            </param>
        </member>
        <member name="M:Iot.Device.Tca954x.Tca9548AI2cDevice.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:Iot.Device.Tcs3472x.Gain">
            <summary>
            The gain used to integrate the colors
            </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.Gain.Gain01X">
            <summary>1x gain</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.Gain.Gain04X">
            <summary>4x gain</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.Gain.Gain16X">
            <summary>16x gain</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.Gain.Gain60X">
            <summary>60x gain</summary>
        </member>
        <member name="T:Iot.Device.Tcs3472x.InterruptState">
            <summary>
            This enum allows to select how many cycles cill be done measuring before
            raising an interupt.
            </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.All">
            <summary>Every RGBC cycle generates an interrupt</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence01Cycle">
            <summary>1 clear channel value outside of threshold range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence02Cycle">
            <summary>2 clear channel consecutive values out of range </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence03Cycle">
            <summary>3 clear channel consecutive values out of range </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence05Cycle">
            <summary>5 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence10Cycle">
            <summary>10 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence15Cycle">
            <summary>15 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence20Cycle">
            <summary>20 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence25Cycle">
            <summary>25 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence30Cycle">
            <summary>30 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence35Cycle">
            <summary>35 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence40Cycle">
            <summary>40 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence45Cycle">
            <summary>45 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence50Cycle">
            <summary>50 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence55Cycle">
            <summary>55 clear channel consecutive values out of range</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.InterruptState.Percistence60Cycle">
            <summary>60 clear channel consecutive values out of range</summary>
        </member>
        <member name="T:Iot.Device.Tcs3472x.TCS3472Type">
            <summary>
            Type of TCS3472X
            </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.TCS3472Type.TCS34721">
            <summary>TCS34721</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.TCS3472Type.TCS34725">
            <summary>TCS34725</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.TCS3472Type.TCS34723">
            <summary>TCS34723</summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.TCS3472Type.TCS34727">
            <summary>TCS34727</summary>
        </member>
        <member name="T:Iot.Device.Tcs3472x.Tcs3472x">
            <summary>
            Tcs3472x - color sensor
            </summary>
        </member>
        <member name="F:Iot.Device.Tcs3472x.Tcs3472x.DefaultI2cAddress">
            <summary>
            Default I2C address for TCS3472x familly
            </summary>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.IntegrationTime">
            <summary>
            Set/Get the time to wait for the sensor to read the data
            Minimum time is 0.0024 s
            Maximum time is 7.4 s
            Be aware that it is not a linear function
            </summary>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.Gain">
            <summary>
            Set/Get the gain
            </summary>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.ChipId">
            <summary>
            Get the type of sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.#ctor(System.Device.I2c.I2cDevice,System.Double,Iot.Device.Tcs3472x.Gain,System.Boolean)">
            <summary>
            Create a TCS4272x sensor
            </summary>
            <param name="i2cDevice">The I2C Device class</param>
            <param name="integrationTime">The time to wait for sensor to read the data, minimum is 0.024 seconds, maximum in the constructor is 0.7 seconds</param>
            <param name="gain">The gain when integrating the color measurement</param>
            <param name="shouldDispose">true to dispose the I2C Device class at dispose</param>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.IsValidData">
            <summary>
            Get true is there are valid data
            </summary>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.IsClearInterrupt">
            <summary>
            Get true if RGBC is clear channel interrupt
            </summary>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.SetIntegrationTime(System.Double)">
            <summary>
            Set the integration (sampling) time for the sensor
            </summary>
            <param name="timeSeconds">Time in seconds for each sample. 0.0024 second(2.4ms) increments.Clipped to the range of 0.0024 to 0.6144 seconds.</param>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.SetInterrupt(System.Boolean)">
            <summary>
            Set/Clear the colors and clear interrupts
            </summary>
            <param name="state">true to set all interrupts, false to clear</param>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.SetInterrupt(Iot.Device.Tcs3472x.InterruptState,System.Boolean)">
            <summary>
            Set/clear a specific interrupt persistence
            This is used to have more than 1 cycle before generating an
            interruption.
            </summary>
            <param name="interupt">The percistence cycles</param>
            <param name="state">True to set the interrupt, false to clear</param>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.GetColor(System.Boolean)">
            <summary>
            Get the color
            </summary>
            <param name="delay">Wait to read the data that the integration time is passed</param>
            <returns></returns>
        </member>
        <member name="P:Iot.Device.Tcs3472x.Tcs3472x.Color">
            <summary>
            Get the color
            </summary>
        </member>
        <member name="M:Iot.Device.Tcs3472x.Tcs3472x.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Tlc1543.Channel">
            <summary>
            Available Channels to poll from on Tlc1543
            <remarks>
            <br>For more information see Table 2 and 3 in datasheet</br>
            </remarks>
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A0">
            <summary>
            Channel A0
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A1">
            <summary>
            Channel A1
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A2">
            <summary>
            Channel A2
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A3">
            <summary>
            Channel A3
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A4">
            <summary>
            Channel A4
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A5">
            <summary>
            Channel A5
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A6">
            <summary>
            Channel A6
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A7">
            <summary>
            Channel A7
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A8">
            <summary>
            Channel A8
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A9">
            <summary>
            Channel A9
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.A10">
            <summary>
            Channel A10
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.SelfTestHalf">
            <summary>
            Self Test channel that sets charge capacitors to (Vref+ - Vref-)/2. Expected output is 512.
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.SelfTestMin">
            <summary>
            Self Test channel that sets charge capacitors to Vref-. Expected output is 0.
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Channel.SelfTestMax">
            <summary>
            Self Test channel that sets charge capacitors to Vref+. Expected output is 1023.
            </summary>
        </member>
        <member name="T:Iot.Device.Tlc1543.Tlc1543">
            <summary>
            Add documentation here
            </summary>
        </member>
        <member name="F:Iot.Device.Tlc1543.Tlc1543.SpiDataBitLength">
            <summary>
            DataBitLength to set on SPI device.
            </summary>
        </member>
        <member name="M:Iot.Device.Tlc1543.Tlc1543.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Constructor for Tlc1543
            </summary>
            <param name="spiDevice">Device used for SPI communication.</param>
            <param name="endOfConversion">End of Conversion pin, if GpioController is not provided logical numbering scheme is used (default for GpioController).</param>
            <param name="controller">The GPIO controller for defined external pins. If not specified, the default controller will be used.</param>
            <param name="shouldDispose">True to dispose the GPIO controller and SPI device.</param>
        </member>
        <member name="M:Iot.Device.Tlc1543.Tlc1543.ReadPreviousAndChargeChannel(Iot.Device.Tlc1543.Channel)">
            <summary>
            Reads previous reading and prepares next reading for specified channel
            </summary>
            <param name="channelToCharge">Channel to prepare</param>
            <returns>10 bit value corresponding to relative voltage level on channel</returns>
        </member>
        <member name="M:Iot.Device.Tlc1543.Tlc1543.ReadChannel(Iot.Device.Tlc1543.Channel,Iot.Device.Tlc1543.Channel)">
            <summary>
            Reads sensor value.
            First cycle: Ask for value on the channel <paramref name="channelNumber"/>.
            Second cycle: Return value from the channel while charging <paramref name="nextChannelToCharge"/>.
            </summary>
            <param name="channelNumber">Channel to be read</param>
            <param name="nextChannelToCharge">Next channel to charge</param>
            <returns>A 10 bit value corresponding to relative voltage level on specified device channel</returns>
        </member>
        <member name="M:Iot.Device.Tlc1543.Tlc1543.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:Iot.Device.Tm1637.Character">
             <summary>
            
             bit 0 = a       _a_
             bit 1 = b      |   |
             bit 2 = c      f   b
             bit 3 = d      |_g_|
             bit 4 = e      |   |
             bit 5 = f      e   c
             bit 6 = g      |_d_|  .dp
             bit 7 = dp
            
             </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Nothing">
            <summary>
            Character representing nothing being displayed
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentTop">
            <summary>
            Segment a
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentTopRight">
            <summary>
            Segment b
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentBottomRight">
            <summary>
            Segment c
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentBottom">
            <summary>
            Segment d
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentBottomLeft">
            <summary>
            Segment e
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentTopLeft">
            <summary>
            Segment f
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.SegmentMiddle">
            <summary>
            Segment g
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Dot">
            <summary>
            Segment dp
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit0">
            <summary>
            Character 0
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit1">
            <summary>
            Character 1
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit2">
            <summary>
            Character 2
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit3">
            <summary>
            Character 3
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit4">
            <summary>
            Character 4
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit5">
            <summary>
            Character 5
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit6">
            <summary>
            Character 6
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit7">
            <summary>
            Character 7
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit8">
            <summary>
            Character 8
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Digit9">
            <summary>
            Character 9
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.A">
            <summary>
            Character A
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.B">
            <summary>
            Character B
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.C">
            <summary>
            Character C
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.D">
            <summary>
            Character D
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.E">
            <summary>
            Character E
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.F">
            <summary>
            Character F
            </summary>
        </member>
        <member name="F:Iot.Device.Tm1637.Character.Minus">
            <summary>
            Character -
            </summary>
        </member>
        <member name="T:Iot.Device.Tm1637.DataCommand">
            <summary>
            Internal registers to be send to the TM1637
            </summary>
        </member>
        <member name="T:Iot.Device.Tm1637.DisplayCommand">
            <summary>
            Switch on or off the 8 segments LCD
            </summary>
        </member>
        <member name="T:Iot.Device.Tm1637.Tm1637">
            <summary>
            Represents Tm1637 segment display
            </summary>
        </member>
        <member name="P:Iot.Device.Tm1637.Tm1637.MaxCharacters">
            <summary>
            The number of characters that the TM1637 can handle
            </summary>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.#ctor(System.Int32,System.Int32,System.Device.Gpio.PinNumberingScheme,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>
            Initialize a TM1637
            </summary>
            <param name="pinClk">The clock pin</param>
            <param name="pinDio">The data pin</param>
            <param name="pinNumberingScheme">Use the logical or physical pin layout</param>
            <param name="gpioController">A Gpio Controller if you want to use a specific one</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
        </member>
        <member name="P:Iot.Device.Tm1637.Tm1637.CharacterOrder">
            <summary>
            Order of characters, expect a 6 length byte array
            0 to 5, any order. Most of the time 4 segments do
            not need to be changed but the 6 ones may be in different order
            like 0 1 2 5 4 3. In this case, this byte array has be be in this order
            </summary>
        </member>
        <member name="P:Iot.Device.Tm1637.Tm1637.ScreenOn">
            <summary>
            Set the screen on or off
            </summary>
        </member>
        <member name="P:Iot.Device.Tm1637.Tm1637.Brightness">
            <summary>
            Adjust the screen brightness from 0 to 7
            </summary>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.Display(System.ReadOnlySpan{System.Byte})">
             <summary>
             Displays segments starting at first segment with byte array containing raw data for each segment including the dot
             <remarks>
             Segment representation:
            
             bit 0 = a       _a_
             bit 1 = b      |   |
             bit 2 = c      f   b
             bit 3 = d      |_g_|
             bit 4 = e      |   |
             bit 5 = f      e   c
             bit 6 = g      |_d_|  .dp
             bit 7 = dp
            
             Representation of the number 0 so lighting segments a, b, c, d, e and F is then 0x3f
             </remarks>
             </summary>
             <param name="rawData">The raw data array to display, size of the array has to be 6 maximum</param>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.Display(System.ReadOnlySpan{Iot.Device.Tm1637.Character})">
            <summary>
            Displays a series of prebuild characters including the dot or not
            You can build your won characters with the primitives like Bottom, Top, Dot
            </summary>
            <param name="rawData">The Character to display</param>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.Display(System.Byte,Iot.Device.Tm1637.Character)">
             <summary>
             Displays a raw data at a specific segment position from 0 to 5
             </summary>
             <remarks>
             Segment representation:
            
             bit 0 = a       _a_
             bit 1 = b      |   |
             bit 2 = c      f   b
             bit 3 = d      |_g_|
             bit 4 = e      |   |
             bit 5 = f      e   c
             bit 6 = g      |_d_|  .dp
             bit 7 = dp
            
             Representation of the number 0 so lighting segments a, b, c, d, e and F is then 0x3f
             </remarks>
             <param name="characterPosition">The character position from 0 to 5</param>
             <param name="rawData">The segment characters to display</param>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.ClearDisplay">
            <summary>
            Clear the display
            </summary>
        </member>
        <member name="M:Iot.Device.Tm1637.Tm1637.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.Channel">
            <summary>
            The channel to get the data from
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Channel.VisibleInfrared">
            <summary>
            Channel 0 is Visible and Infrared
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Channel.Infrared">
            <summary>
            Channel 1 is infrared
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Channel.Visible">
            <summary>
            Channel 0 - Channel 1 is Visible only
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.Gain">
            <summary>
            Gain for integration
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Gain.Normal">
            <summary>
            Norma gain x1
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Gain.High">
            <summary>
            High gain x16
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.IntegrationTime">
            <summary>
            Integration time
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.IntegrationTime.Integration13_7Milliseconds">
            <summary>
            Integration time 13.7 milliseconds
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.IntegrationTime.Integration101Milliseconds">
            <summary>
            Integration time 101 milliseconds
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.IntegrationTime.Integration402Milliseconds">
            <summary>
            Integration time 402 milliseconds
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.IntegrationTime.Manual">
            <summary>
            Manual time integration
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.InterruptControl">
            <summary>
            The interrupt control selection
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptControl.OutputDisabled">
            <summary>
            Interrupt Output Disabled
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptControl.LevelInterrupt">
            <summary>
            Level Interrupt
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptControl.SmbAlertCompliant">
            <summary>
            SMB Alert Compliant
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptControl.TestMode">
            <summary>
            TestMode
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.InterruptPersistence">
            <summary>
            Interrupt Persistence Select
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.EveryAdc">
            <summary>Every ADC cycle generates interrupt</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.AnyValueOutsideThreshold">
            <summary>Any value outside of threshold range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange02IntegrationTimePeriods">
            <summary>2 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange03IntegrationTimePeriods">
            <summary>3 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange04IntegrationTimePeriods">
            <summary>4 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange05IntegrationTimePeriods">
            <summary>5 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange06IntegrationTimePeriods">
            <summary>6 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange07IntegrationTimePeriods">
            <summary>7 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange08IntegrationTimePeriods">
            <summary>8 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange09IntegrationTimePeriods">
            <summary>9 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange10IntegrationTimePeriods">
            <summary>10 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange11IntegrationTimePeriods">
            <summary>11 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange12IntegrationTimePeriods">
            <summary>12 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange13IntegrationTimePeriods">
            <summary>13 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange14IntegrationTimePeriods">
            <summary>14 integration time periods out of range</summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.InterruptPersistence.OutOfRange15IntegrationTimePeriods">
            <summary>15 integration time periods out of range</summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.PackageType">
            <summary>
            The type of package for TSL256x. This is used for the Lux calculation
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.PackageType.PackageCs">
            <summary>
            Package type CS
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.PackageType.Other">
            <summary>
            Package type CL, T and FN
            </summary>
        </member>
        <member name="T:Iot.Device.Tsl256x.Tsl256x">
            <summary>
            Light to Digital Converter TSL2560 and TSL2561
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Tsl256x.DefaultI2cAddress">
            <summary>
            When the address select pin if float
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Tsl256x.SecondI2cAddress">
            <summary>
            When the address select pin is to ground
            </summary>
        </member>
        <member name="F:Iot.Device.Tsl256x.Tsl256x.ThirdI2cAddress">
            <summary>
            When the select pin is to VDD
            </summary>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.#ctor(System.Device.I2c.I2cDevice,Iot.Device.Tsl256x.PackageType)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Tsl256x.Tsl256x"/> class.
            </summary>
            <param name="i2cDevice">And I2C Device</param>
            <param name="packageType">The type of package to have a proper illuminance calculation</param>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.Enabled">
            <summary>
            Set power On or Off
            </summary>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.Version">
            <summary>
            Get the version 0 for major for TSL2560 and 1 for TSL2561, minor is devision number
            </summary>
            <returns>The version</returns>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.IntegrationTime">
            <summary>
            Get or Set the integration time
            </summary>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.Gain">
            <summary>
            Get or Set the gain
            </summary>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.StartManualIntegration">
            <summary>
            Start the manual integration
            </summary>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.StopManualIntegration">
            <summary>
            Stop the manual integration
            </summary>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.SetThreshold(System.UInt16,System.UInt16)">
            <summary>
            This will set the threshold and enable the interrupt
            </summary>
            <param name="low">The low threshold</param>
            <param name="high">The high threshold</param>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.InterruptControl">
            <summary>
            Get or Set the interrupt Control Select
            </summary>
            <remarks>Interrupts are only on Channel 0</remarks>
        </member>
        <member name="P:Iot.Device.Tsl256x.Tsl256x.InterruptPersistence">
            <summary>
            Get or Set the interrupt Persistence Select
            </summary>
            <remarks>Interrupts are only on Channel 0</remarks>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.GetRawChannels(System.UInt16@,System.UInt16@)">
            <summary>
            Get the raw data from both channels
            </summary>
            <param name="channel0">Channel 0</param>
            <param name="channel1">Channel 1</param>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.GetRawLuminosity(Iot.Device.Tsl256x.Channel)">
            <summary>
            Get the raw luminosity for a specific channel
            </summary>
            <param name="channel">The channel to get the luminosity</param>
            <returns>The raw luminosity from the ADC</returns>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.MeasureAndGetIlluminance">
            <summary>
            Measure the illuminance, will wait for the measurement based on integration time
            </summary>
            <returns>The illuminance</returns>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.GetIlluminance">
            <summary>
            Get the calculated Illuminance. Default range is Lux
            </summary>
            <returns>The illuminance</returns>
            <remarks>If you have used the manual integration, you won't be able to use this formula</remarks>
        </member>
        <member name="M:Iot.Device.Tsl256x.Tsl256x.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.UFire.Register">
            <summary>
            Register with all adress values for μFire ISE (Ion Specific Electrode) Probe Interface controller
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_VERSION_REGISTER">
            <summary>
            hardware version
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_MV_REGISTER">
            <summary>
            mV
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_TEMP_REGISTER">
            <summary>
            temperature in C
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CALIBRATE_SINGLE_REGISTER">
            <summary>
            calibration offset
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CALIBRATE_REFHIGH_REGISTER">
            <summary>
            reference high calibration
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CALIBRATE_REFLOW_REGISTER">
            <summary>
            reference low calibration
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CALIBRATE_READHIGH_REGISTER">
            <summary>
            reading high calibration
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CALIBRATE_READLOW_REGISTER">
            <summary>
            reading low calibration
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_SOLUTION_REGISTER">
            <summary>
            reference ISE solution
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_BUFFER_REGISTER">
            <summary>
            buffer
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_FW_VERSION_REGISTER">
            <summary>
            firmware version
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_CONFIG_REGISTER">
            <summary>
            config register
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.ISE_TASK_REGISTER">
            <summary>
            firmware version
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.Register.POTENTIAL_REGISTER">
            <summary>
            potential
            </summary>
        </member>
        <member name="T:Iot.Device.UFire.UFireIse">
            <summary>
            μFire ISE (Ion Specific Electrode) Probe Interface controller
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.UFireIse.I2cAddress">
            <summary>
            0x3F is the default address of all sensors
            </summary>
        </member>
        <member name="P:Iot.Device.UFire.UFireIse.TemperatureCompensation">
            <summary>
            Use temperature compensation
            </summary>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.UFire.UFireIse"/> class.
            </summary>
            <param name="i2cDevice">The I2C device to be used</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.ReadElectricPotential">
            <summary>
            Read a value from the ISE Probe Interface, typical measure are in the millivolt range.
            </summary>
            <returns>value from ISE Probe Interface, typical measure are in the millivolt range. On error it return -1 as value</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.ReadTemperature">
            <summary>
            Read temperature
            </summary>
            <returns>Temperature. Temperature range: -2 to 35 C. Temperature Precision: 0.05 C</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.SetTemperatureCompensation(UnitsNet.Temperature)">
            <summary>
            It sets the a temperature used as compensation. The compensation temperature is to correlate the mV input to the correct pH value, see https://assets.tequipment.net/assets/1/26/Yokogawa_Temperature_Compensation.pdf
            </summary>
            <param name="temp">The temperature used for compensation</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.CalibrateFromSingleValue(UnitsNet.ElectricPotential)">
            <summary>
            Calibrates the probe using a single solution. Put the probe in a solution where the pH (Power of Hydrogen) is known.
            </summary>
            <param name="solution">The known pH value in mV. Range: -1024 mV to 1024 mV</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.CalibrateFromTwoValuesLowValue(UnitsNet.ElectricPotential)">
            <summary>
            The lower value when calibrating from two solutions. Put the probe in a solution with the lowest pH (Power of Hydrogen) value.
            </summary>
            <param name="solution">The known pH value in mV. Range: -1024 mV to 1024 mV</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.CalibrateFromTwoValuesHighValue(UnitsNet.ElectricPotential)">
            <summary>
             The highest value when calibrating from two solutions. Put the probe in a solution with the highest pH (Power of Hydrogen) value.
            </summary>
            <param name="solution">The known pH value in mV. Range: -1024 mV to 1024 mV</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetVersion">
            <summary>
            Returns the firmware version of the device. The manufacturer do not provide any information about the format of the version number, see https://www.ufire.co/docs/uFire_ISE/api.html#getversion
            </summary>
            <returns>Firmware version</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetCalibrateHighReference">
            <summary>
            Dual point uses two measures for low and high points. It needs the measured value (reading value) and the known value (reference value). Calling SetDualPointCalibration saves both the reading and reference value.
            When there are high and low calibration points, the device will automatically use them to adjust readings.To disable dual-point adjustment, call ResetCalibration to remove all calibration data.
            </summary>
            <returns>The known value (reference value) for calibrate the high value</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetCalibrateLowReference">
            <summary>
            Dual point uses two measures for low and high points. It needs the measured value (reading value) and the known value (reference value). Calling SetDualPointCalibration saves both the reading and reference value.
            When there are high and low calibration points, the device will automatically use them to adjust readings.To disable dual-point adjustment, call ResetCalibration to remove all calibration data.
            </summary>
            <returns>The known value (reference value) for calibrate the low value</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetCalibrateHighReading">
            <summary>
            Dual point uses two measures for low and high points. It needs the measured value (reading value) and the known value (reference value). Calling SetDualPointCalibration saves both the reading and reference value.
            When there are high and low calibration points, the device will automatically use them to adjust readings.To disable dual-point adjustment, call ResetCalibration to remove all calibration data.
            </summary>
            <returns>The measured value (reading value) for calibrate the high value</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetCalibrateLowReading">
            <summary>
            Dual point uses two measures for low and high points. It needs the measured value (reading value) and the known value (reference value). Calling SetDualPointCalibration saves both the reading and reference value.
            When there are high and low calibration points, the device will automatically use them to adjust readings.To disable dual-point adjustment, call ResetCalibration to remove all calibration data.
            </summary>
            <returns>The measured value (reading value) for calibrate the low value</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.ResetCalibration">
            <summary>
             Resets all the stored calibration information.It is possible to run without calibration.
            </summary>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.SetDualPointCalibration(UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential,UnitsNet.ElectricPotential)">
            <summary>
            Sets all the values, in mV, for dual point calibration and saves them in the devices's EEPROM
            </summary>
            <param name="refLow">the reference low point. Range: -1024 mV to 1024 mV</param>
            <param name="refHigh">the reference high point. Range: -1024 mV to 1024 mV</param>
            <param name="readLow">the measured low point. Range: -1024 mV to 1024 mV</param>
            <param name="readHigh">the measured high point. Range: -1024 mV to 1024 mV</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.SetI2cAddressAndDispose(System.Byte)">
            <summary>
            Changes the default I2C address
            </summary>
            <param name="i2cAddress">The new I2C address. Range: 1 to 127 </param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.ReadEeprom(Iot.Device.UFire.Register)">
            <summary>
            Low level reads of EEPROM
            </summary>
            <param name="address">Address to read</param>
            <returns>Low level data from EEPROM</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.WriteEeprom(Iot.Device.UFire.Register,System.Single)">
            <summary>
            Low level write of EEPROM
            </summary>
            <param name="address">Address</param>
            <param name="data">Data to write to the address</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.GetFirmwareVersion">
            <summary>
            Get Firmware version.The manufacturer do not provide any information about the format of the version number, see https://www.ufire.co/docs/uFire_ISE/api.html#getversion
            </summary>
            <returns>The version of the firmware</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.ChangeRegister(Iot.Device.UFire.Register)">
            <summary>
            Change the register in μFire ISE (Ion Specific Electrode). This makes sure that the next time it writes, it writes to the correct location
            </summary>
            <param name="register">The register to change μFire ISE (Ion Specific Electrode) to write to next times it writes</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireIse.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.UFire.UFireOrp">
            <summary>
            Get ORP (oxidation-reduction potential) measuremens from μFire ISE (ion-selective electrode) Probe Interface
            </summary>
        </member>
        <member name="P:Iot.Device.UFire.UFireOrp.LastOxidationReducationPotential">
            <summary>
            Oxidation-reduction potential (ORP) measuremens
            It makes it possible to the Oxidation-Reduction Potential (ORP) measurement without doing a measuremen (the retunres the old measurement)
            </summary>
        </member>
        <member name="P:Iot.Device.UFire.UFireOrp.LastReductionPotential">
            <summary>
            Reduction potential (Eh) measuremens
            It makes it possible to the Reduction potential (Eh) measurement without doing a measuremen (the retunres the old measurement)
            </summary>
        </member>
        <member name="P:Iot.Device.UFire.UFireOrp.ProbePotential">
            <summary>
            The probe potential
            </summary>
        </member>
        <member name="M:Iot.Device.UFire.UFireOrp.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.UFire.UFireOrp"/> class.
            </summary>
            <param name="i2cDevice">The I2C device to be used</param>
        </member>
        <member name="M:Iot.Device.UFire.UFireOrp.TryMeasureOxidationReductionPotential(UnitsNet.ElectricPotential@)">
            <summary>
            Tries to measure ORP (Oxidation-Reduction Potential).
            </summary>
            <param name="orp">ORP (Oxidation-Reduction Potential) measurement</param>
            <returns>True if it could measure ORP (Oxidation-Reduction Potential) else false</returns>
        </member>
        <member name="T:Iot.Device.UFire.UFirePh">
            <summary>
            Get pH measuremens from μFire ISE (ion-selective electrode) Probe Interface
            </summary>
        </member>
        <member name="F:Iot.Device.UFire.UFirePh.Ph">
            <summary>
            pH (Power of Hydrogen) units measurement
            </summary>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.#ctor(System.Device.I2c.I2cDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.UFire.UFirePh"/> class.
            </summary>
            <param name="i2cDevice">The I2C device to be used</param>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.TryMeasurepH(System.Single@,System.Nullable{UnitsNet.Temperature})">
            <summary>
            Tries to measure pH (Power of Hydrogen).
            </summary>
            <param name="pH">The measure pH value</param>
            <param name="temp">Temperature compensation is available by passing the temperature.</param>
            <returns>True if it could measure pH (Power of Hydrogen) else false</returns>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.CalibrateSingle(System.Single)">
            <summary>
            Calibrates the probe using a single point using a pH value.
            </summary>
            <param name="solutionpH">pH value</param>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.CalibrateProbeHigh(System.Single)">
            <summary>
            Calibrates the dual-point values for the high reading and saves them in the devices's EEPROM.
            </summary>
            <param name="solutionpH">The pH of the calibration solution</param>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.GetCalibrateHighReference">
            <summary>
            Returns the dual-point calibration high-reference value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.GetCalibrateHighReading">
            <summary>
            Returns the dual-point calibration high-reading value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.CalibrateProbeLow(System.Single)">
            <summary>
            Calibrates the dual-point values for the low reading and saves them in the devices's EEPROM.
            </summary>
            <param name="solutionpH"> the pH of the calibration solution</param>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.GetCalibrateLowReference">
            <summary>
            Returns the dual-point calibration low-reference value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.UFire.UFirePh.GetCalibrateLowReading">
            <summary>
            Returns the dual-point calibration low-reading value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Uln2003.Uln2003">
            <summary>
            This class is for controlling stepper motors that are controlled by a 4 pin controller board.
            </summary>
            <remarks>It is tested and developed using the 28BYJ-48 stepper motor and the ULN2003 driver board.</remarks>
        </member>
        <member name="F:Iot.Device.Uln2003.Uln2003.StepperMotorDefaultDelay">
            <summary>
            Default delay in microseconds.
            </summary>
        </member>
        <member name="M:Iot.Device.Uln2003.Uln2003.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Device.Gpio.GpioController,System.Boolean,System.Int32)">
            <summary>
            Initialize a Uln2003 class.
            </summary>
            <param name="pin1">The GPIO pin number which corresponds pin A on ULN2003 driver board.</param>
            <param name="pin2">The GPIO pin number which corresponds pin B on ULN2003 driver board.</param>
            <param name="pin3">The GPIO pin number which corresponds pin C on ULN2003 driver board.</param>
            <param name="pin4">The GPIO pin number which corresponds pin D on ULN2003 driver board.</param>
            <param name="controller">The controller.</param>
            <param name="shouldDispose">True to dispose the Gpio Controller</param>
            <param name="stepsToRotate">Amount of steps needed to rotate motor once in HalfStepMode.</param>
        </member>
        <member name="P:Iot.Device.Uln2003.Uln2003.RPM">
            <summary>
            Sets the motor speed to revolutions per minute.
            </summary>
            <remarks>Default revolutions per minute for 28BYJ-48 is approximately 15.</remarks>
        </member>
        <member name="P:Iot.Device.Uln2003.Uln2003.Mode">
            <summary>
            Sets the stepper's mode.
            </summary>
        </member>
        <member name="M:Iot.Device.Uln2003.Uln2003.Stop">
            <summary>
            Stop the motor.
            </summary>
        </member>
        <member name="M:Iot.Device.Uln2003.Uln2003.Step(System.Int32)">
            <summary>
            Moves the motor. If the number is negative, the motor moves in the reverse direction.
            </summary>
            <param name="steps">Number of steps.</param>
        </member>
        <member name="M:Iot.Device.Uln2003.Uln2003.Rotate(System.Int32)">
            <summary>
            Rotates the motor. If the number is negative, the motor moves in the reverse direction.
            </summary>
            <param name="rotations">Number of rotations.</param>
        </member>
        <member name="M:Iot.Device.Uln2003.Uln2003.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Uln2003.StepperMode">
            <summary>
            The 28BYJ-48 motor has 512 full engine rotations to rotate the drive shaft once.
            In half-step mode these are 8 x 512 = 4096 steps for a full rotation.
            In full-step mode these are 4 x 512 = 2048 steps for a full rotation.
            </summary>
        </member>
        <member name="F:Iot.Device.Uln2003.StepperMode.HalfStep">
            <summary>Half step mode</summary>
        </member>
        <member name="F:Iot.Device.Uln2003.StepperMode.FullStepSinglePhase">
            <summary>Full step mode (single phase)</summary>
        </member>
        <member name="F:Iot.Device.Uln2003.StepperMode.FullStepDualPhase">
            <summary>Full step mode (dual phase)</summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.Information">
            <summary>
            Store the information regarding the sensor
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Information.#ctor(System.Byte,System.Version,System.String,System.UInt32,System.UInt32)">
            <summary>
            Creates an Information object.
            </summary>
            <param name="moduleId">Module ID/</param>
            <param name="revision">The revision number.</param>
            <param name="productId">The product ID.</param>
            <param name="signalRateMeasFixed1104_400_Micrometers">Raw measurement of the signal rate fixed point 400 micrometers.</param>
            <param name="distMeasFixed1104_400_Micrometers">Raw measurement of the distance measurement fixed point 400 micrometers.</param>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.ModuleId">
            <summary>
            Module ID
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.Revision">
            <summary>
            The revision number
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.ProductId">
            <summary>
            The product ID
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.SignalRateMeasFixed1104_400_Micrometers">
            <summary>
            Raw measurement of the signal rate fixed point 400 micrometers
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.DistMeasFixed1104_400_Micrometers">
            <summary>
            Raw measurement of the distance measurement fixed point 400 micrometers
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.OffsetMicrometers">
            <summary>
            Get the offset in micrometers
            Formula from the official API
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Information.SignalRateMeasuementFixed400Micrometers">
            <summary>
            Get the signal rate measurement fixed point 400 micrometers
            Formula from the official API
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.MeasurementMode">
            <summary>
            The measurement mode
            Continuous measurement is processed in the sensor and readings are
            more reliable than the Single measurement mode
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.MeasurementMode.Continuous">
            <summary>Continuous mode</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.MeasurementMode.Single">
            <summary>Single measurement mode</summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.OperationRange">
            <summary>
            Operating range
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.OperationRange.Minimum">
            <summary>Minimum range: 5 millimeters</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.OperationRange.Maximum">
            <summary>Maximum range: 8 millimeters</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.OperationRange.OutOfRange">
            <summary>Out of range</summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.PeriodPulse">
            <summary>
            The period used for the pulse when setting the
            VCSEL (vertical cavity surface emitting laser) pulse period
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period08">
            <summary>Period 8</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period10">
            <summary>Period 10</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period12">
            <summary>Period 12</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period14">
            <summary>Period 14</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period16">
            <summary>Period 16</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.PeriodPulse.Period18">
            <summary>Period 18</summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.Precision">
            <summary>
            Sensor have multiple modes, you can select one of the
            predefined mode using the SetPrecision method
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.Precision.ShortRange">
            <summary>Short range</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.Precision.LongRange">
            <summary>Long range</summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.Precision.HighPrecision">
            <summary>High precision</summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.Registers">
            <summary>
            Those registers are the one declared in the official API
            plus some named after reverse engineering
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.VcselType">
            <summary>
            Used when need to setup the
            VCSEL (vertical cavity surface emitting laser) pulse period
            thru the SetVcselPulsePeriod
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L0X.Vl53L0X">
            <summary>
            Represents Vl53L0X
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L0X.Vl53L0X.DefaultI2cAddress">
            <summary>
            The default I2C Address
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.Information">
            <summary>
            Get the sensor information including internal signal and distance offsets
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.MaxTryReadSingle">
            <summary>
            Used to find a clean measurement when reading in single shot
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.HighResolution">
            <summary>
            Set/Get high resolution measurement
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Boolean)">
            <summary>
            Create a VL53L0X Sensor class
            </summary>
            <param name="i2cDevice">The I2C Device</param>
            <param name="operationTimeoutMilliseconds">Timeout for reading data, by default 500 milliseonds</param>
            <param name="shouldDispose">True to dispose the I2C Device at dispose</param>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.ChangeI2cAddress(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            The sensor can be changed for other I2C Address, this function allows to change it
            </summary>
            <param name="i2cDevice">The current I2C Device</param>
            <param name="newAddress">The new I2C Address from 0x00 to 0x7F</param>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.StartContinuousMeasurement(System.Int32)">
            <summary>
            Start continuous ranging measurements. If periodMilliseconds is 0
            continuous back-to-back mode is used (the sensor takes measurements as
            often as possible) otherwise, continuous timed mode is used, with the given
            inter-measurement period in milliseconds determining how often the sensor
            takes a measurement.
            </summary>
            <param name="periodMilliseconds">The interval period between 2 measurements. Default is 0</param>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.ReadContinuousMeasurementMillimeters">
            <summary>
            Reads the measurement when the mode is set to continuious.
            </summary>
            <returns>The range in millimeters, a maximum value is returned depending on the various settings</returns>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.Distance">
            <summary>
            Get the distance depending on the measurement mode
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.MeasurementMode">
            <summary>
            Get/Set the measurement mode used to return the distance property
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.DistanceContinuous">
            <summary>
            Get a distance in millimeters from the continous measurement feature.
            It is recommended to used this method to gethigher quality measurements
            </summary>
            <returns>Returns the distance in millimeters, if any error, returns the maximum range so 8190</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetDistanceOnce(System.Boolean)">
            <summary>
            Get a distance in millimeters
            </summary>
            <param name="multipleReads">True if you want multiple try to get a clean value</param>
            <returns>Returns the distance in millimeters, if any error, returns the maximum range so 8190</returns>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.DistanceSingleMeasurement">
            <summary>
            Performs a single-shot range measurement and returns the reading in millimeters
            </summary>
            <returns>Returns distance in millimeters</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.SetVcselPulsePeriod(Iot.Device.Vl53L0X.VcselType,Iot.Device.Vl53L0X.PeriodPulse)">
            <summary>
            Set the VCSEL (vertical cavity surface emitting laser) pulse period for the
            given period type (pre-range or final range) to the given value in PCLKs.
            Longer periods seem to increase the potential range of the sensor.
            Valid values are (even numbers only):
            pre:  12 to 18 (initialized default: 14)
            final: 8 to 14 (initialized default: 10)
            based on official API
            </summary>
            <param name="type">The type of VCSEL</param>
            <param name="periodPclks">The period part of the supported periods. Be aware periods are a bit different depending on the VCSEL you are targetting.</param>
            <returns></returns>
        </member>
        <member name="P:Iot.Device.Vl53L0X.Vl53L0X.Precision">
            <summary>
            Set the type of precision needed for measurement
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.Reset">
            <summary>
            Performs a soft reset of the sensor
            </summary>
            <remarks>If you change the I2C address and perform a soft reset, the default
            I2C address will be setup again.</remarks>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.Init">
            <summary>
            Initialization of the sensor, include a long sequence of writing
            which is coming from the offical API with no more information on the
            registers and their functions. Few can be reversed engineer based on
            other functions but not all
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetInfo">
            <summary>
            Create the Info class. Initialization and closing sequences
            are coming form the official API
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetProductId">
            <summary>
            Get the product ID. Coming from the official API
            </summary>
            <returns></returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.ReadStrobe">
            <summary>
            Used to read some data from the sensor, it needs to be ready for the operation
            Exception raised if timeout is overdue
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.InitMeasurement">
            <summary>
            Used to intialize a measurement. From the official API
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetSpadInfo">
            <summary>
            Get the reference SPAD (single photon avalanche diode) count and type
            </summary>
            <returns>Returns the SPAD information</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetMeasurementTimingBudget">
            <summary>
            Get the measurement timing budget in microseconds. Based on official API
            </summary>
            <returns>The measurement timing budget in microseconds</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.SetMeasurementTimingBudget(System.UInt32)">
            <summary>
            Set the measurement timing budget in microseconds, which is the time allowed
            for one measurement the ST API and this library take care of splitting the
            timing budget among the sub-steps in the ranging sequence. A longer timing
            budget allows for more accurate measurements. Increasing the budget by a
            factor of N decreases the range measurement standard deviation by a factor of
            sqrt(N). Defaults to about 33 milliseconds the minimum is 20 ms.
            based on VL53L0X_set_measurement_timing_budget_micro_seconds() from API
            </summary>
            <param name="budgetMicroseconds">Take the exisitng measurement budget to calculate the new one</param>
            <returns>True in case all goes right</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetSequenceStepEnables">
            <summary>
            Get all the step sequence states (enabled or not)
            </summary>
            <returns>State of step enabled</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetSequenceStepTimeouts(System.Boolean)">
            <summary>
            Get the setp timeouts
            </summary>
            <param name="preRange">True for to include the pre range</param>
            <returns>The step timeouts</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.TimeoutMclksToMicroseconds(System.UInt32,System.Byte)">
            <summary>
            Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.TimeoutMicrosecondsToMclks(System.UInt32,System.Byte)">
            <summary>
            Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
            </summary>
            <param name="timeoutPeriodMicroseconds">The timeout period in microseconds</param>
            <param name="vcselPeriodPclks">The VCSEL period in PCLKs</param>
            <returns>Returns the converted timeout</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.GetVcselPulsePeriod(Iot.Device.Vl53L0X.VcselType)">
            <summary>
            Get the VCSEL pulse period in PCLKs for the given period type.
            </summary>
            <param name="type">The VCSEL period to decode</param>
            <returns>The decoded period</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.EncodeVcselPeriod(System.Byte)">
            <summary>
            Encode VCSEL pulse period register value from period in PCLKs
            </summary>
            <param name="periodPclks">The priod in PCLKs</param>
            <returns>the period encoded</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.DecodeTimeout(System.Int32)">
            <summary>
            Decode sequence step timeout in MCLKs from register value
            format: (LSByte * 2^MSByte) + 1
            </summary>
            <param name="valueToDecode">Input value</param>
            <returns>The decoded value</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.EncodeTimeout(System.UInt32)">
            <summary>
            Encode sequence step timeout register value from timeout in MCLKs
            From official API:
            format: (LSByte * 2^MSByte) + 1
            </summary>
            <param name="timeoutMclks">The timeout in MCLKs to encode</param>
            <returns>The encoded value</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.DecodeVcselPeriod(System.Byte)">
            <summary>
            Decode VCSEL (vertical cavity surface emitting laser) pulse period in PCLKs
            </summary>
            <param name="valueToDecode">The VCSEL period to decode</param>
            <returns>The decoded period</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.CalcMacroPeriod(System.UInt32)">
            <summary>
            Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
            From the official API:
            PLL_period_ps = 1655; macro_period_vclks = 2304
            </summary>
            <param name="vcselPeriodPclks">the VCSEL perios in PCKLs</param>
            <returns>The macro period in nanoseconds</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.SetSignalRateLimit(System.Double)">
            <summary>
            Set the signal rate limit in MCPS
            </summary>
            <param name="limitMcps">The limit in MCPS, minimum value 0, maximum value 511.99</param>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.PerformSingleRefCalibration(System.Byte)">
            <summary>
            Perform a single reference calibration
            Based on the official API.
            </summary>
            <param name="vhvInitByte">The initialisation byte</param>
            <returns>True if all goes right</returns>
        </member>
        <member name="M:Iot.Device.Vl53L0X.Vl53L0X.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Iot.Device.Vl53L1X.BootState">
            <summary>
            The boot state of the device
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.BootState.NotBooted">
            <summary>
            The device is not booted yet.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.BootState.Booted">
            <summary>
            The device is booted.
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L1X.Precision">
            <summary>
            The distance mode of the device
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.Precision.Short">
            <summary>
            Short distance. Maximum distance is limited to 1.3m but results in a better ambient immunity.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.Precision.Long">
            <summary>
            Long distance. Can range up to 4 m in the dark with a timing budget of200 ms.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.Precision.Unknown">
            <summary>
            Unknown distance mode or the distance mode is not configured.
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L1X.RangeStatus">
            <summary>
            The range status of the device.
            There are five range statuses: 0, 1, 2, 4, and 7. When the range status is 0, there is no error.
            Range status 1 and 2 are error warnings while range status 4 and 7 are errors.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.RangeStatus.NoError">
            <summary>
            No error has occured.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.RangeStatus.SigmaFailure">
            <summary>
            SigmaFailure.
            This means that the repeatability or standard deviation of the measurement is bad due to a decreasing signal noise ratio.
            Increasing the timing budget can improve the standard deviation and avoid a range status 1.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.RangeStatus.SignalFailure">
            <summary>
            SignalFailure.
            This means that the return signal is too week to return a good answer.
            The reason is because the target is too far, or the target is not reflective enough, or the target is too small.
            Increasing the timing budget might help, but there may simply be no target available.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.RangeStatus.OutOfBounds">
            <summary>
            OutOfBounds.
            This means that the sensor is ranging in a "non-appropriated" zone and the measured result may be inconsistent.
            This status is considered as a warning but, in general, it happens when a target is at the maximum distance possible from the sensor, i.e. around 5 m.
            However, this is only for very bright targets.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.RangeStatus.WrapAround">
            <summary>
            WrapAround.
            This situation may occur when the target is very reflective and the distance to the target/sensor is longer than the physical limited distance measurable by the sensor.
            Such distances include approximately 5 m when the senor is in Long distance mode and approximately 1.3 m when the sensor is in Short distance mode.
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L1X.Roi">
            <summary>
            Holds the ROI information of the device
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Roi.Width">
            <summary>
            Width of the ROI
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Roi.Height">
            <summary>
            Height of the ROI
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Roi.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Constructor.
            </summary>
            <param name="width">Width of the ROI. Must be between 4 and 16.</param>
            <param name="height">Height of the ROI. Must be between 4 and 16.</param>
        </member>
        <member name="T:Iot.Device.Vl53L1X.TimingBudget">
            <summary>
            The timing budget for the device
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.BudgetUnknown">
            <summary>
            Unknown budget or the budget is not configured
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget15">
            <summary>
            Budget of 15 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget20">
            <summary>
            Budget of 20 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget33">
            <summary>
            Budget of 33 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget50">
            <summary>
            Budget of 50 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget100">
            <summary>
            Budget of 100 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget200">
            <summary>
            Budget of 200 ms
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.TimingBudget.Budget500">
            <summary>
            Budget of 500 ms
            </summary>
        </member>
        <member name="T:Iot.Device.Vl53L1X.Vl53L1X">
            <summary>
            Represents Vl53L1X
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.Vl53L1X.DefaultI2cAddress">
            <summary>
            The default I2C address
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.#ctor(System.Device.I2c.I2cDevice,System.Int32,System.Boolean)">
            <summary>
            Creates a Vl53L1X sensor class
            </summary>
            <param name="i2CDevice">The I2C Device</param>
            <param name="operationTimeoutMilliseconds">Timeout for reading data, by default 500 milliseonds</param>
            <param name="shouldDispose">True to dispose the I2C Device at dispose</param>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.Distance">
            <summary>
            Gets the measured distance.
            If ranging has not been started yet, the function will automatically start the ranging feature of the device.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.GetDistance">
            <summary>
            Gets the measured distance.
            If ranging has not been started yet, the function will automatically start the ranging feature of the device.
            </summary>
            <returns>Measured distance as <see cref="T:UnitsNet.Length"/></returns>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.ChangeI2CAddress(System.Device.I2c.I2cDevice,System.Byte)">
            <summary>
            The sensor can be changed for other I2C Address, this function allows to change it
            </summary>
            <param name="i2CDevice">The current I2C Device</param>
            <param name="newAddress">The new I2C Address from 0x00 to 0x7F</param>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.StartRanging">
            <summary>
            This function starts the ranging distance operation which is continuous.
            The clear interrupt has to be done after each "get data" to allow the interrupt to be raised when the next data are
            ready.
            1 = active high (default), 0 =active low.
            If required, use <see cref="P:Iot.Device.Vl53L1X.Vl53L1X.InterruptPolarity" /> to change the interrupt polarity.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.StopRanging">
            <summary>
            This function stops the ranging.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.IsRangingActive">
            <summary>
            This function returns whether to ranging is active or not
            </summary>
            <returns>True if ranging is active. Otherwise false</returns>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.IsDataReady">
            <summary>
            Checks if the new ranging data are available by polling the dedicated register.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.InterruptPolarity">
            <summary>
            This gets or sets the interrupt polarity. PinValue.High is default.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.ClearInterrupt">
            <summary>
            This function clears the interrupt to be called after a ranging data reading, to arm the interrupt for the next
            data ready event.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.TimingBudgetInMs">
            <summary>
            Gets or sets the timing budget in ms.
            The predefined values are 15, 33, 20, 50, 100, 200, and 500 <see cref="T:Iot.Device.Vl53L1X.TimingBudget" />.
            This property must be set after changing the <see cref="P:Iot.Device.Vl53L1X.Vl53L1X.Precision" />
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.Precision">
            <summary>
            Gets or sets the precision (1 = Short, 2 = Long).
            Short mode maximum distance is limited to 1.3m but results in a better ambient immunity.
            Long mode can range up to 4 m in the dark with a timing budget of200 ms.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.InterMeasurementInMs">
            <summary>
            Gets or sets the intermeasurement period in ms.
            Intermeasurement period must be >/= timing budget. This condition is not checked by the API,
            the customer has the duty to check the condition. Default = 100 ms.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.BootState">
            <summary>
            Gets the <see cref="P:Iot.Device.Vl53L1X.Vl53L1X.BootState" /> of the device (1 = booted, 0 = not booted).
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SensorId">
            <summary>
            Gets the sensor ID which must be 0xEEAC.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SignalPerSpad">
            <summary>
            Returns the signal per SPAD in kcps/SPAD.
            </summary>
            <remarks>
             Kcps is kilo count per second. kcps/SPAD is the return ambient rate measured by the VL53L1X.
            </remarks>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.AmbientPerSpad">
            <summary>
            Returns the ambient per SPAD in kcps/SPAD.
            </summary>
            <remarks>
             Kcps is kilo count per second. kcps/SPAD is the return ambient rate measured by the VL53L1X.
            </remarks>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SignalRate">
            <summary>
            Returns the signal in kcps.
            </summary>
            <remarks>
             Kcps is kilo count per second.
            </remarks>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SpadNb">
            <summary>
            Returns the current number of enabled SPADs.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.AmbientRate">
            <summary>
            Returns the ambient rate in kcps.
            </summary>
            <remarks>
             Kcps is kilo count per second.
            </remarks>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.RangeStatus">
            <summary>
            Returns the <see cref="P:Iot.Device.Vl53L1X.Vl53L1X.RangeStatus" /> of the device.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.Offset">
            <summary>
            Gets or sets the offset correction value.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.Xtalk">
            <summary>
            Gets or sets the crosstalk correction value in cps.
            This is the number of photons reflected back from the cover glass in cps.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.SetDistanceThreshold(UnitsNet.Length,UnitsNet.Length,Iot.Device.Vl53L1X.WindowDetectionMode)">
            <summary>
            This function programs the threshold detection mode.
            For example:
            SetDistanceThreshold(dev,100,300, WindowDetectionMode.Below): below 100
            SetDistanceThreshold(dev,100,300, WindowDetectionMode.Above): above 300
            SetDistanceThreshold(dev,100,300, WindowDetectionMode.Out): out-of-window
            SetDistanceThreshold(dev,100,300, WindowDetectionMode.In): in window
            </summary>
            <param name="threshLow">
            The threshold under which the device raises an interrupt if detectionMode =
            WindowDetectionMode.Below
            </param>
            <param name="threshHigh">
            The threshold above which the device raises an interrupt if detectionMode =
            WindowDetectionMode.Above
            </param>
            <param name="detectionMode">The <see cref="T:Iot.Device.Vl53L1X.WindowDetectionMode" /> where 0 = below, 1 = above, 2 = out, and 3 = in</param>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.DistanceThresholdWindowDetectionMode">
            <summary>
            Returns the <see cref="T:Iot.Device.Vl53L1X.WindowDetectionMode" />.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.DistanceThresholdLow">
            <summary>
            Returns the low threshold.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.DistanceThresholdHigh">
            <summary>
            Returns the high threshold.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.Roi">
            <summary>
            Gets or sets the <see cref="P:Iot.Device.Vl53L1X.Vl53L1X.Roi" />, the position of which is centered about the optical center.
            The smallest acceptable ROI size is 4.
            The receiving SPAD array of the sensor consists of 16x16 SPADs which covers the full FoV.
            It is possible to program a smaller ROI, with a smaller number of SPADs, to reduce the FoV for applications which
            require a narrow FoV.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.RoiCenter">
            <summary>
            This function programs the new user ROI center, please to be aware that there is no check in this function
            if the ROI center vs ROI size is out of border.
            </summary>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SignalThreshold">
            <summary>
            Gets or sets a new signal threshold in kcps where the default is 1024 kcps.
            </summary>
            <remarks>
             Kcps is kilo counts per second.
            </remarks>
        </member>
        <member name="P:Iot.Device.Vl53L1X.Vl53L1X.SigmaThreshold">
            <summary>
            This function programs a new sigma threshold. The default value is 15 mm.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.StartTemperatureUpdate">
            <summary>
            This function performs the temperature calibration.
            If the sensor has been stopped for a long time, it is recommended to perform the temperature update prior to
            restarting the ranging.
            By default, the sensor can adequately handle any temperature change as long as it is running, but if the sensor is
            stopped for an extended period of time,
            a temperature compensation is advised.
            </summary>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.CalibrateOffset(UnitsNet.Length)">
            <summary>
            This function performs the offset calibration and programs the offset compensation into the device.
            Target reflectance should be grey17%.
            </summary>
            <param name="targetDist">The Target distance, ST recommended 100 mm.</param>
            <returns>The offset value found.</returns>
        </member>
        <member name="M:Iot.Device.Vl53L1X.Vl53L1X.CalibrateXtalk(UnitsNet.Length)">
            <summary>
            This function performs the xtalk calibration and programs the xtalk compensation to the device.
            Target reflectance should be grey 17%.
            </summary>
            <param name="targetDist">
            The target distance.
            This is the distance where the sensor starts to "under range"
            due to the influence of the photons reflected back from the cover glass becoming strong.
            It's also called inflection point.
            </param>
            <returns>The xtalk value found in cps (number of photons in count per second).</returns>
        </member>
        <member name="T:Iot.Device.Vl53L1X.WindowDetectionMode">
            <summary>
            The window detection mode.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.WindowDetectionMode.Below">
            <summary>
            Object under a certain distance.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.WindowDetectionMode.Above">
            <summary>
            Object beyond a certain distance.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.WindowDetectionMode.Out">
            <summary>
            Object out of a window limited by a near and far threshold.
            </summary>
        </member>
        <member name="F:Iot.Device.Vl53L1X.WindowDetectionMode.In">
            <summary>
            Object within a window limited by a near and far threshold.
            </summary>
        </member>
        <member name="T:Iot.Device.Ws28xx.BitmapImageNeo3">
            <summary>
            Special 24bit GRB format for Neo pixel LEDs where each bit is converted to 3 bits.
            A one is converted to 110, a zero is converted to 100.
            </summary>
        </member>
        <member name="T:Iot.Device.Ws28xx.BitmapImageNeo3Rgb">
            <summary>
            Special 24bit RGB format for Neo pixel LEDs where each bit is converted to 3 bits.
            A one is converted to 110, a zero is converted to 100.
            </summary>
            <seealso cref="T:Iot.Device.Ws28xx.BitmapImageNeo3" />
        </member>
        <member name="T:Iot.Device.Ws28xx.RawPixelContainer">
            <summary>
            An abstract class that acts as a data container for device-dependent pixel arrays
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.RawPixelContainer.#ctor(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a container with the given values
            </summary>
            <param name="data">The data array. Should be of size <paramref name="width"/> * <paramref name="height"/> * bytesPerPixel</param>
            <param name="width">Width of the image, in pixels</param>
            <param name="height">Height of the image, in pixels</param>
            <param name="stride">Image width * bytes per pixel (number of bytes per image scanline)</param>
        </member>
        <member name="P:Iot.Device.Ws28xx.RawPixelContainer.Width">
            <summary>
            Image width
            </summary>
        </member>
        <member name="P:Iot.Device.Ws28xx.RawPixelContainer.Height">
            <summary>
            Image Height
            </summary>
        </member>
        <member name="P:Iot.Device.Ws28xx.RawPixelContainer.Stride">
            <summary>
            Image Stride (number of bytes per scanline)
            </summary>
        </member>
        <member name="P:Iot.Device.Ws28xx.RawPixelContainer.Data">
            <summary>
            Retrieves the raw pixels. Addressing and color format is device-dependent!
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.RawPixelContainer.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets a pixel to a specific color
            </summary>
            <param name="x">X coordinate</param>
            <param name="y">Y coordinate</param>
            <param name="c">Color to set, will be adjusted to the color format of the target hardware</param>
        </member>
        <member name="M:Iot.Device.Ws28xx.RawPixelContainer.Clear(System.Drawing.Color)">
            <summary>
            Clears the image to specific color
            </summary>
            <param name="color">Color to clear the image. Defaults to black.</param>
        </member>
        <member name="T:Iot.Device.Ws28xx.Sk6812">
            <summary>
            Represents the SK6812 Driver.
            </summary>
            <seealso cref="T:Iot.Device.Ws28xx.Ws28xx" />
        </member>
        <member name="P:Iot.Device.Ws28xx.Sk6812.DefaultSpiClockFrequency">
            <summary>
            Gets the default SPI clock frequency.
            </summary>
            <value>
            The default SPI clock frequency used for SK6812-LED-Strips.
            </value>
            <remarks>This frequency defines how fast the data will be put on the line. The SK6812-strip requires a speed of 1.25 kHz.
            A single byte takes 1.2 µs for the transfer, the value for a single LED of 32 bit amounts to 38.4 µs.
            </remarks>
        </member>
        <member name="M:Iot.Device.Ws28xx.Sk6812.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Iot.Device.Ws28xx.Sk6812"/> class.
            </summary>
            <param name="spiDevice">The spi device.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="T:Iot.Device.Ws28xx.Ws2808">
            <summary>
            Represents WS2808 LED driver
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.Ws2808.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32)">
            <summary>
            Constructs Ws2808 instance
            </summary>
            <param name="spiDevice">SPI device used for communication with the LED driver</param>
            <param name="width">Width of the screen or LED strip</param>
            <param name="height">Height of the screen or LED strip. Defaults to 1 (LED strip).</param>
        </member>
        <member name="T:Iot.Device.Ws28xx.Ws2812b">
            <summary>
            Represents WS2812B LED driver
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.Ws2812b.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32)">
            <summary>
            Constructs Ws2812b instance
            </summary>
            <param name="spiDevice">SPI device used for communication with the LED driver</param>
            <param name="width">Width of the screen or LED strip</param>
            <param name="height">Height of the screen or LED strip. Defaults to 1 (LED strip).</param>
        </member>
        <member name="T:Iot.Device.Ws28xx.Ws2815b">
            <summary>
            Represents WS2815B LED driver
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.Ws2815b.#ctor(System.Device.Spi.SpiDevice,System.Int32,System.Int32)">
            <summary>
            Constructs Ws2815b instance
            </summary>
            <remarks>In contrast to <see cref="T:Iot.Device.Ws28xx.Ws2812b"/> this constructor changes the order of the color values.</remarks>
            <param name="spiDevice">SPI device used for communication with the LED driver</param>
            <param name="width">Width of the screen or LED strip</param>
            <param name="height">Height of the screen or LED strip. Defaults to 1 (LED strip).</param>
        </member>
        <member name="T:Iot.Device.Ws28xx.Ws28xx">
            <summary>
            Represents base class for WS28XX LED drivers (i.e. WS2812B or WS2808)
            </summary>
        </member>
        <member name="F:Iot.Device.Ws28xx.Ws28xx._spiDevice">
            <summary>
            SPI device used for communication with the LED driver
            </summary>
        </member>
        <member name="P:Iot.Device.Ws28xx.Ws28xx.Image">
            <summary>
            Backing image to be updated on the driver
            </summary>
        </member>
        <member name="M:Iot.Device.Ws28xx.Ws28xx.#ctor(System.Device.Spi.SpiDevice,Iot.Device.Ws28xx.RawPixelContainer)">
            <summary>
            Constructs Ws28xx instance
            </summary>
            <param name="spiDevice">SPI device used for communication with the LED driver.</param>
            <param name="image">The bitmap that represents the screen or led strip.</param>
        </member>
        <member name="M:Iot.Device.Ws28xx.Ws28xx.Update">
            <summary>
            Sends backing image to the LED driver
            </summary>
        </member>
        <member name="T:Iot.Device.Ndef.EnumHelper">
            <summary>
            Helper to get the enumeration description instead of enumeration name
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.EnumHelper.GetDescription``1(``0)">
            <summary>
            Returns the description attribute or the name of the enum
            </summary>
            <typeparam name="T">A valid enumeration</typeparam>
            <param name="enumerationValue">The type of enumeration</param>
            <returns>The description attribute or name if not existing</returns>
        </member>
        <member name="T:Iot.Device.Ndef.GeneralePurposeByteConditions">
            <summary>
            This is used to assess the block sector and understand the read/write conditions
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.GeneralePurposeByteConditions.NoReadAccess">
            <summary>
            No read access
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.GeneralePurposeByteConditions.NoWriteAccess">
            <summary>
            No write access
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.GeneralePurposeByteConditions.ReadAccess">
            <summary>
            Read access
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.GeneralePurposeByteConditions.WriteAccess">
            <summary>
            Write access
            </summary>
        </member>
        <member name="T:Iot.Device.Ndef.MessageFlag">
            <summary>
            Message flag
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.MessageFlag.MessageBegin">
            <summary>
            The first record of a NDEF message
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.MessageFlag.MessageEnd">
            <summary>
            The last record of a NDEF message
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.MessageFlag.ChunkFlag">
            <summary>
            This is part of multi composed record
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.MessageFlag.ShortRecord">
            <summary>
            Short message
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.MessageFlag.IdLength">
            <summary>
            Is the id length present or not
            </summary>
        </member>
        <member name="T:Iot.Device.Ndef.NdefMessage">
            <summary>
            Create a NDEF = NFC Data Exchange Format Message class
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.NdefMessage.GeneralPurposeByteNdefVersion">
            <summary>
            Associated with the GeneralPurposeByteConsitions, it tells if a sector is read/write and a valid
            NDEF sector
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefMessage.GetStartSizeNdef(System.Span{System.Byte})">
            <summary>
            From a raw message, find the start and stop of an NDEF message
            </summary>
            <param name="toExtract">The byte array where the message is</param>
            <returns>The start and end position</returns>
        </member>
        <member name="M:Iot.Device.Ndef.NdefMessage.ExtractMessage(System.Span{System.Byte})">
            <summary>
            Extract an NDEF message from a raw byte array
            </summary>
            <param name="toExtract">The byte array where the message is</param>
            <returns>A byte array containing the message itself</returns>
        </member>
        <member name="P:Iot.Device.Ndef.NdefMessage.Records">
            <summary>
            List of all NDEF Records
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefMessage.#ctor">
            <summary>
            Create an empty NDEF Message
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefMessage.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create NDEF Message from a span of bytes
            </summary>
            <param name="message">the message in span of bytes</param>
        </member>
        <member name="P:Iot.Device.Ndef.NdefMessage.Length">
            <summary>
            Get the length of the message
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefMessage.Serialize(System.Span{System.Byte})">
            <summary>
            Serialize the message in a span of bytes
            </summary>
            <param name="messageSerialized">Span of bytes for the serialized message</param>
        </member>
        <member name="T:Iot.Device.Ndef.RecordHeader">
            <summary>
            Record header of NDEF message
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.MessageFlag">
            <summary>
            Message flag
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.TypeNameFormat">
            <summary>
            Type of name format
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.PayloadTypeLength">
            <summary>
            Length of the Payload Type
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.PayloadLength">
            <summary>
            Payload length
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.IdLength">
            <summary>
            Id Length
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.PayloadType">
            <summary>
            Payload Type
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.PayloadId">
            <summary>
            Payload Id
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.IsFirstMessage">
            <summary>
            True if it's the first NDEF Record in the Message
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.IsLastMessage">
            <summary>
            True if it's the last NDEF Record in the Message
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.IsComposedMessage">
            <summary>
            True if it's a composed message
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.RecordHeader.Length">
            <summary>
            The Length of the Header
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.RecordHeader.#ctor">
            <summary>
            Create a full empty Record Header
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.RecordHeader.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a header from a span of bytes
            </summary>
            <param name="recordToDecode">A span of bytes</param>
        </member>
        <member name="M:Iot.Device.Ndef.RecordHeader.Serialize(System.Span{System.Byte})">
            <summary>
            Serialize the header
            </summary>
            <param name="header">Serialized byte span</param>
        </member>
        <member name="T:Iot.Device.Ndef.TypeNameFormat">
            <summary>
            The Type Name Format (TNF)
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.Empty">
            <summary>
            Empty
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.NfcWellKnowType">
            <summary>
            NFC Forum well-known type [NFC RTD]
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.MediaType">
            <summary>
            Media-type as defined in RFC 2046 [RFC 2046]
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.UniformResourceIdentifier">
            <summary>
            Absolute URI as defined in RFC 3986 [RFC 3986]
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.NfcForumExternal">
            <summary>
            NFC Forum external type [NFC RTD]
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.Unchanged">
            <summary>
            Unchanged (see section 2.3.3)
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.TypeNameFormat.Reserved">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:Iot.Device.Ndef.UriType">
            <summary>
            Uri type
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.NoFormat">
            <summary>
            No prepending is done, and the URI field
            contains the unabridged URI.
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.HttpWww">
            <summary>
            http://www.
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.HttpsWww">
            <summary>
            https://www.
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Http">
            <summary>
            http://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Https">
            <summary>
            https://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Tel">
            <summary>
            tel:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.MailTo">
            <summary>
            mailto:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.FtpAnonymousAnonymous">
            <summary>
            ftp://anonymous:anonymous@
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.FtpFtp">
            <summary>
            ftp://ftp.
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Ftps">
            <summary>
            ftps://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Sftp">
            <summary>
            sftp://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Smb">
            <summary>
            smb://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Nfs">
            <summary>
            nfs://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Ftp">
            <summary>
            ftp://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Dav">
            <summary>
            dav://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.News">
            <summary>
            news:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Telnet">
            <summary>
            telnet://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Imap">
            <summary>
            imap:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Rtsp">
            <summary>
            rtsp://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Urn">
            <summary>
            urn:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Pop">
            <summary>
            pop:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Sip">
            <summary>
            sip:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Sips">
            <summary>
            sips:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Tftp">
            <summary>
            tftp:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Btspp">
            <summary>
            btspp://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Btl2Cap">
            <summary>
            btl2cap://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Btgoep">
            <summary>
            btgoep://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Tcpobex">
            <summary>
            tcpobex://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.Irdaobex">
            <summary>
            irdaobex://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.File">
            <summary>
            file://
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnEpcId">
            <summary>
            urn:epc:id:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnEpcTag">
            <summary>
            urn:epc:tag:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnEpcPat">
            <summary>
            urn:epc:pat:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnEpcRaw">
            <summary>
            urn:epc:raw:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnEpc">
            <summary>
            urn:epc:
            </summary>
        </member>
        <member name="F:Iot.Device.Ndef.UriType.UrnNfc">
            <summary>
            urn:nfc:
            </summary>
        </member>
        <member name="T:Iot.Device.Ndef.GeoRecord">
            <summary>
            Geo Record geo:latitude,longitude where both latitude and longitude are double with . for decimal point
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.GeoRecord.Latitude">
            <summary>
            The latitude
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.GeoRecord.Longitude">
            <summary>
            The longitude
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.GeoRecord.#ctor(System.Double,System.Double)">
            <summary>
            Create a Geo Record from a latitude and a longitude
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
        </member>
        <member name="M:Iot.Device.Ndef.GeoRecord.#ctor(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Create a Geo Record from a NDEF record
            </summary>
            <param name="ndefRecord">The NDEF record to create the Geo Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.GeoRecord.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a Geo Record from a span of bytes
            </summary>
            <param name="record">A raw span of byte containing the Geo Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.GeoRecord.IsGeoRecord(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Check if it's a valid NDEF Geo Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Ndef.MediaRecord">
            <summary>
            Create a Media NDEF Record class
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.MediaRecord.PayloadType">
            <summary>
            Returns the Media Payload type
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.MediaRecord.IsTextType">
            <summary>
            True if the payload is text based
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.MediaRecord.TryGetPayloadAsText(System.String@)">
            <summary>
            Try to get our the encoded text
            </summary>
            <param name="payloadAsText">The payload as a text</param>
            <returns>True if success</returns>
        </member>
        <member name="M:Iot.Device.Ndef.MediaRecord.#ctor(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Create a Media Record from a NDEF Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.MediaRecord.#ctor(System.String,System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a Media Record from the type and the payload
            </summary>
            <param name="payloadType">The payload type</param>
            <param name="payload">The byte payload</param>
        </member>
        <member name="M:Iot.Device.Ndef.MediaRecord.IsMediaRecord(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Check if it's a valid Media Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
            <returns></returns>
        </member>
        <member name="T:Iot.Device.Ndef.NdefRecord">
            <summary>
            Create a NDEF Record class
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.NdefRecord.Header">
            <summary>
            The record header
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.NdefRecord.Payload">
            <summary>
            The record payload
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.NdefRecord.Length">
            <summary>
            The length of the NDEF Record
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefRecord.#ctor">
            <summary>
            Create an empty NDEF Record, payload will be null
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.NdefRecord.#ctor(System.ReadOnlySpan{System.Byte},Iot.Device.Ndef.RecordHeader)">
            <summary>
            Create a NDEF Record from a Payload and a Header
            </summary>
            <param name="payload">The byte payload</param>
            <param name="recordHeader">A header, if not header specify, a default empty header will be created</param>
        </member>
        <member name="M:Iot.Device.Ndef.NdefRecord.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a NDEF Record from a span of bytes
            </summary>
            <param name="record">A span of bytes containing the NDEF Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.NdefRecord.Serialize(System.Span{System.Byte})">
            <summary>
            Serialize the NDEF Record
            </summary>
            <param name="record">The serialized record in a byte span</param>
        </member>
        <member name="T:Iot.Device.Ndef.TextRecord">
            <summary>
            Create a Text Record class
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.TextRecord.Encoding">
            <summary>
            The Encoding type used for the text, only UTF8 and Unicode are valid
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.TextRecord.LanguageCode">
            <summary>
            A valid language code, should be less than 63 characters
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.TextRecord.Text">
            <summary>
            The text payload
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.TextRecord.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Create a Text Record based on its characteristics
            </summary>
            <param name="text">The text payload</param>
            <param name="language">The language of the text</param>
            <param name="encoding">The Encoding type. <see cref="P:Iot.Device.Ndef.TextRecord.Encoding"/></param>
        </member>
        <member name="M:Iot.Device.Ndef.TextRecord.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a Text Record from a span of bytes
            </summary>
            <param name="record">The record as a span of bytes</param>
        </member>
        <member name="M:Iot.Device.Ndef.TextRecord.#ctor(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Create a Text Record from a NDEF Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.TextRecord.IsTextRecord(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Check if it's a valid Text Record
            </summary>
            <param name="ndefRecord">The NDEF Record to check</param>
            <returns>True if it's a valid Text Record</returns>
        </member>
        <member name="T:Iot.Device.Ndef.UriRecord">
            <summary>
            Create a Uri Record class
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.UriRecord.UriType">
            <summary>
            Uri Type
            </summary>
        </member>
        <member name="P:Iot.Device.Ndef.UriRecord.Uri">
            <summary>
            Uri to encode
            </summary>
            <remarks>The Uri should be URL encoded to be valid in most cases. Consider encoding it.</remarks>
        </member>
        <member name="P:Iot.Device.Ndef.UriRecord.FullUri">
            <summary>
            The full Uri
            </summary>
        </member>
        <member name="M:Iot.Device.Ndef.UriRecord.#ctor(Iot.Device.Ndef.UriType,System.String)">
            <summary>
            Create a Uri Record from a Uri Type and a Uri
            </summary>
            <param name="uriType">The Uri type</param>
            <param name="uri">A Uri</param>
        </member>
        <member name="M:Iot.Device.Ndef.UriRecord.#ctor(Iot.Device.Ndef.NdefRecord)">
            <summary>
            Create a URI Record from a valid NDEF Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
        </member>
        <member name="M:Iot.Device.Ndef.UriRecord.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Create a Uri Record from a span of bytes
            </summary>
            <param name="record">Record as a span of byte</param>
        </member>
        <member name="M:Iot.Device.Ndef.UriRecord.IsUriRecord(Iot.Device.Ndef.NdefRecord)">
            <summary>
            True if this is a valid URI Record
            </summary>
            <param name="ndefRecord">A valid NDEF Record</param>
            <returns></returns>
        </member>
        <member name="T:Interop">
            <summary>
            Interop methods for Windows and Unix (P/Invoke call declarations)
            This class is internal by default, but gets promoted to public within the device binding projects
            </summary>
        </member>
        <member name="T:System.Device.DelayHelper">
            <summary>
            Helpers for short waits.
            </summary>
        </member>
        <member name="F:System.Device.DelayHelper.s_tickFrequency">
            <summary>A scale that normalizes the hardware ticks to <see cref="T:System.TimeSpan" /> ticks which are 100ns in length.</summary>
        </member>
        <member name="M:System.Device.DelayHelper.Delay(System.TimeSpan,System.Boolean)">
            <summary>
            Delay for at least the specified <paramref name="time" />.
            </summary>
            <param name="time">The amount of time to delay.</param>
            <param name="allowThreadYield">
            True to allow yielding the thread. If this is set to false, on single-proc systems
            this will prevent all other code from running.
            </param>
        </member>
        <member name="M:System.Device.DelayHelper.DelayMicroseconds(System.Int32,System.Boolean)">
            <summary>
            Delay for at least the specified <paramref name="microseconds"/>.
            </summary>
            <param name="microseconds">The number of microseconds to delay.</param>
            <param name="allowThreadYield">
            True to allow yielding the thread. If this is set to false, on single-proc systems
            this will prevent all other code from running.
            </param>
        </member>
        <member name="M:System.Device.DelayHelper.DelayMilliseconds(System.Int32,System.Boolean)">
            <summary>
            Delay for at least the specified <paramref name="milliseconds"/>
            </summary>
            <param name="milliseconds">The number of milliseconds to delay.</param>
            <param name="allowThreadYield">
            True to allow yielding the thread. If this is set to false, on single-proc systems
            this will prevent all other code from running.
            </param>
        </member>
        <member name="T:System.Device.Gpio.PinVector32">
            <summary>
            32-bit vector of pins and values.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinVector32.Pins">
            <summary>
            Bit vector of pin numbers from 0 (bit 0) to 31 (bit 31).
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinVector32.Values">
            <summary>
            Bit vector of values for each pin number from 0 (bit 0) to 31 (bit 31).
            1 is high, 0 is low.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinVector32.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Construct from a vector of pins and values.
            </summary>
            <param name="pins">Bit vector of pin numbers from 0 (bit 0) to 31 (bit 31).</param>
            <param name="values">Bit vector of values for each pin number from 0 (bit 0) to 31 (bit 31).</param>
        </member>
        <member name="M:System.Device.Gpio.PinVector32.#ctor(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Construct from a span of <see cref="T:System.Device.Gpio.PinValuePair"/>s.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="pinValues"/> contains negative pin numbers or pin numbers higher than 31.
            </exception>
        </member>
        <member name="M:System.Device.Gpio.PinVector32.Deconstruct(System.UInt32@,System.UInt32@)">
            <summary>
            Convenience deconstructor. Allows using as a "return tuple".
            </summary>
        </member>
        <member name="T:System.Device.Gpio.PinVector64">
            <summary>
            64-bit vector of pins and values.
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinVector64.Pins">
            <summary>
            Bit vector of pin numbers from 0 (bit 0) to 63 (bit 63).
            </summary>
        </member>
        <member name="P:System.Device.Gpio.PinVector64.Values">
            <summary>
            Bit vector of values for each pin number from 0 (bit 0) to 63 (bit 63).
            1 is high, 0 is low.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.PinVector64.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Construct from a vector of pins and values.
            </summary>
            <param name="pins">Bit vector of pin numbers from 0 (bit 0) to 63 (bit 63).</param>
            <param name="values">Bit vector of values for each pin number from 0 (bit 0) to 63 (bit 63).</param>
        </member>
        <member name="M:System.Device.Gpio.PinVector64.#ctor(System.ReadOnlySpan{System.Device.Gpio.PinValuePair})">
            <summary>
            Construct from a span of <see cref="T:System.Device.Gpio.PinValuePair"/>s.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="pinValues"/> contains negative pin numbers or pin numbers higher than 63.
            </exception>
        </member>
        <member name="M:System.Device.Gpio.PinVector64.Deconstruct(System.UInt64@,System.UInt64@)">
            <summary>
            Convenience deconstructor. Allows using as a "return tuple".
            </summary>
        </member>
        <member name="T:System.Device.Gpio.Drivers.OrangePiPCDriver">
            <summary>
            A GPIO driver for the Orange Pi PC and PC+.
            </summary>
            <remarks>
            SoC: Allwinner H3
            </remarks>
        </member>
        <member name="P:System.Device.Gpio.Drivers.OrangePiPCDriver.CpuxPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:System.Device.Gpio.Drivers.OrangePiPCDriver.CpusPortBaseAddress">
            <inheritdoc/>
        </member>
        <member name="P:System.Device.Gpio.Drivers.OrangePiPCDriver.PinCount">
            <summary>
            Orange Pi PC has 28 GPIO pins.
            </summary>
        </member>
        <member name="M:System.Device.Gpio.Drivers.OrangePiPCDriver.ConvertPinNumberToLogicalNumberingScheme(System.Int32)">
            <summary>
            Converts a board pin number to the driver's logical numbering scheme.
            </summary>
            <param name="pinNumber">The board pin number to convert.</param>
            <returns>The pin number in the driver's logical numbering scheme.</returns>
        </member>
        <member name="T:System.Device.Analog.AnalogController">
            <summary>
            Base class for Analog Controllers.
            These control analog input pins.
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogController.#ctor(System.Device.Gpio.PinNumberingScheme)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Gpio.GpioController"/> class that will use the specified numbering scheme and driver.
            </summary>
            <param name="numberingScheme">The numbering scheme used to represent pins provided by the controller.</param>
        </member>
        <member name="P:System.Device.Analog.AnalogController.NumberingScheme">
            <summary>
            The numbering scheme used to represent pins provided by the controller.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogController.PinCount">
            <summary>
            The number of pins provided by the controller.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogController.VoltageReference">
            <summary>
            Reference voltage (the maximum voltage measurable).
            For some hardware, it might be necessary to manually set this value for the <see cref="M:System.Device.Analog.AnalogInputPin.ReadVoltage"/> method to return correct values.
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogController.SupportsAnalogInput(System.Int32)">
            <summary>
            Returns true if the given pin supports analog input
            </summary>
            <param name="pin">Number of the pin</param>
            <returns>True if the pin supports analog input</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogController.ConvertPinNumberToAnalogChannelNumber(System.Int32)">
            <summary>
            Convert the input pin number to an analog channel number.
            The analog channel number is typically named A0 - Axx on Arduino boards. E.g. on Uno and Nano boards, A0
            equals digital pin 14.
            </summary>
            <param name="pinNumber">Pin number</param>
            <returns>Analog channel number. Returns -1 if the given pin does not support analog input</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogController.ConvertAnalogChannelNumberToPinNumber(System.Int32)">
            <summary>
            Convert logical pin to caller's pin numbering scheme.
            </summary>
            <param name="analogChannelNumber">Logical pin numbering of the board</param>
            <returns>Pin number of the given analog channel, or -1 if the input channel is not valid.</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogController.OpenPin(System.Int32)">
            <summary>
            Opens a pin in order for it to be ready to use.
            </summary>
            <param name="pinNumber">The pin number to open (not the analog channel!).</param>
        </member>
        <member name="M:System.Device.Analog.AnalogController.OpenPinCore(System.Int32)">
            <summary>
            Overriden by derived classes: Returns an instance of the <see cref="T:System.Device.Analog.AnalogInputPin"/> for the specified pin.
            </summary>
            <param name="pinNumber">The pin number to open (not the analog channel)</param>
            <returns>An instance of an analog pin</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogController.IsPinOpen(System.Int32)">
            <summary>
            Checks if a specific analog channel is open.
            </summary>
            <param name="pinNumber">The analog channel number.</param>
            <returns>The status if the channel is open or closed.</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogController.ClosePin(System.Device.Analog.AnalogInputPin)">
            <summary>
            Closes the given pin
            </summary>
            <param name="pin">The pin to close</param>
        </member>
        <member name="M:System.Device.Analog.AnalogController.Dispose(System.Boolean)">
            <summary>
            Disposes this instance
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogController.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:System.Device.Analog.AnalogInputPin">
            <summary>
            Driver for analog input pins
            </summary>
        </member>
        <member name="E:System.Device.Analog.AnalogInputPin.ValueChanged">
            <summary>
            Fires when a value is changed for which a trigger is registered
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.#ctor(System.Device.Analog.AnalogController,System.Int32,UnitsNet.ElectricPotential)">
            <summary>
            Construct an instance of an analog pin.
            This is not usually called directly. Use <see cref="M:System.Device.Analog.AnalogController.OpenPin(System.Int32)"/> instead.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.Controller">
            <summary>
            Reference to the controller for this pin
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.VoltageReference">
            <summary>
            The reference voltage level to convert raw values into voltages.
            Some boards (i.e. the ADS111x series) always return an absolute voltage. Then this value is meaningless.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.PinNumber">
            <summary>
            The logical pin number of this instance.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.MinVoltage">
            <summary>
            The minimum measurable voltage. May be negative.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.MaxVoltage">
            <summary>
            The largest measurable voltage.
            </summary>
        </member>
        <member name="P:System.Device.Analog.AnalogInputPin.AdcResolutionBits">
            <summary>
            Resolution of the Analog-to-Digital converter in bits. If the ADC supports negative values, the sign bit is also counted.
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.ReadRaw">
            <summary>
            Read a raw value from the pin
            </summary>
            <returns>Raw value of the analog input. Scale depends on hardware.</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.ReadVoltage">
            <summary>
            Read a raw value and convert it to a voltage
            </summary>
            <returns>Reads a new value from the input and converts it to a voltage. For many boards, the <see cref="P:System.Device.Analog.AnalogInputPin.VoltageReference"/> needs to be correctly set for this to work.</returns>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.ConvertToVoltage(System.UInt32)">
            <summary>
            Converts an input raw value to a voltage
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.EnableAnalogValueChangedEvent(System.Device.Gpio.GpioController,System.Int32)">
            <summary>
            Enable event callback when the value of this pin changes.
            </summary>
            <param name="masterController">If an external interrupt handler is required, it can be provided here. Can be null if another interrupt feature is available</param>
            <param name="masterPin">Input pin on the master controller.</param>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.DisableAnalogValueChangedEvent">
            <summary>
            Disables the event callback
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.FireValueChanged(System.Device.Analog.ValueChangedEventArgs)">
            <summary>
            Fires a value changed event.
            </summary>
            <param name="eventArgs">New value</param>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.Dispose(System.Boolean)">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="M:System.Device.Analog.AnalogInputPin.Dispose">
            <summary>
            Dispose this instance
            </summary>
        </member>
        <member name="T:System.Device.Analog.TriggerReason">
            <summary>
            Gives the reason why a new value was provided
            </summary>
        </member>
        <member name="F:System.Device.Analog.TriggerReason.Unknown">
            <summary>
            The reason for the new message is unknown
            </summary>
        </member>
        <member name="F:System.Device.Analog.TriggerReason.NewMeasurement">
            <summary>
            A new value is available
            </summary>
        </member>
        <member name="F:System.Device.Analog.TriggerReason.Timed">
            <summary>
            A new value is read with a specific frequency
            </summary>
        </member>
        <member name="F:System.Device.Analog.TriggerReason.LimitExceeded">
            <summary>
            A value is provided when certain thresholds are exceeded
            </summary>
        </member>
        <member name="T:System.Device.Analog.ValueChangedEventArgs">
            <summary>
            Arguments passed in when an event is triggered by the GPIO.
            </summary>
        </member>
        <member name="M:System.Device.Analog.ValueChangedEventArgs.#ctor(System.UInt32,UnitsNet.ElectricPotential,System.Int32,System.Device.Analog.TriggerReason)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Device.Analog.ValueChangedEventArgs"/> class.
            </summary>
            <param name="rawValue">The raw analog sensor reading</param>
            <param name="value">The analog sensor reading, converted to voltage.</param>
            <param name="pinNumber">The pin number that triggered the event.</param>
            <param name="triggerReason">The reason for the event</param>
        </member>
        <member name="P:System.Device.Analog.ValueChangedEventArgs.RawValue">
            <summary>
            Raw value, unscaled.
            </summary>
        </member>
        <member name="P:System.Device.Analog.ValueChangedEventArgs.Value">
            <summary>
            The absolute voltage of the new value.
            For this to be valid, the voltage reference of the <see cref="T:System.Device.Analog.AnalogController"/> must be set correctly.
            </summary>
        </member>
        <member name="P:System.Device.Analog.ValueChangedEventArgs.PinNumber">
            <summary>
            The physical pin number that triggered the event.
            </summary>
        </member>
        <member name="P:System.Device.Analog.ValueChangedEventArgs.TriggerReason">
            <summary>
            The reason that triggered this message.
            </summary>
        </member>
        <member name="T:System.Device.Analog.ValueChangedEventHandler">
            <summary>
            Delegate that defines the structure for callbacks when the value of a measurement (i.e. analog input) changes.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="pinValueChangedEventArgs">The pin value changed arguments from the event.</param>
        </member>
        <member name="T:System.Device.Spi.SpiBusInfo">
            <summary>
            Base class for SPI bus information.
            </summary>
        </member>
        <member name="P:System.Device.Spi.SpiBusInfo.BufferSize">
            <summary>
            Buffer size assigned to the SPI bus or -1 if the buffer size is not available.
            </summary>
        </member>
        <member name="T:System.Device.Pwm.Drivers.SoftwarePwmChannel">
            <summary>Software PWM channel implementation</summary>
        </member>
        <member name="P:System.Device.Pwm.Drivers.SoftwarePwmChannel.Frequency">
            <summary>The frequency in hertz.</summary>
        </member>
        <member name="P:System.Device.Pwm.Drivers.SoftwarePwmChannel.DutyCycle">
            <summary>The duty cycle percentage represented as a value between 0.0 and 1.0.</summary>
        </member>
        <member name="M:System.Device.Pwm.Drivers.SoftwarePwmChannel.#ctor(System.Int32,System.Int32,System.Double,System.Boolean,System.Device.Gpio.GpioController,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:System.Device.Pwm.Drivers.SoftwarePwmChannel"/> class.</summary>
            <param name="pinNumber">The GPIO pin number to be used</param>
            <param name="frequency">The frequency in hertz. Defaults to 400</param>
            <param name="dutyCycle">The duty cycle percentage represented as a value between 0.0 and 1.0</param>
            <param name="usePrecisionTimer">Determines if a high precision timer should be used.</param>
            <param name="controller">The <see cref="T:System.Device.Gpio.GpioController"/> to which <paramref name="pinNumber"/> belongs to. <c>null</c> defaults to board GpioController</param>
            <param name="shouldDispose"><c>true</c> to automatically dispose the controller when this class is disposed, <c>false</c> otherwise. This parameter is ignored if <paramref name="controller"/> is <c>null</c>.</param>
        </member>
        <member name="M:System.Device.Pwm.Drivers.SoftwarePwmChannel.Start">
            <summary>Starts the PWM channel.</summary>
        </member>
        <member name="M:System.Device.Pwm.Drivers.SoftwarePwmChannel.Stop">
            <summary>Stops the PWM channel.</summary>
        </member>
        <member name="M:System.Device.Pwm.Drivers.SoftwarePwmChannel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:System.Device.Pwm.Drivers.SoftwarePwmChannel.QueryComponentInformation">
            <inheritdoc />
        </member>
        <member name="T:System.Device.Model.CommandAttribute">
            <summary>
            Command of the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.CommandAttribute.Name">
            <summary>
            Name of the command in the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.CommandAttribute.DisplayName">
            <summary>
            Display name of the command
            </summary>
        </member>
        <member name="M:System.Device.Model.CommandAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs CommandAttribute
            </summary>
            <param name="name">Optional name of the command in the interface. If not provided method name will be used.</param>
            <param name="displayName">Optional name of the command in the interface.</param>
        </member>
        <member name="T:System.Device.Model.ComponentAttribute">
            <summary>
            Component attribute class referencing to an interface
            </summary>
        </member>
        <member name="P:System.Device.Model.ComponentAttribute.Name">
            <summary>
            Name of the component
            </summary>
        </member>
        <member name="M:System.Device.Model.ComponentAttribute.#ctor(System.String)">
            <summary>
            Constructs ComponentAttribute
            </summary>
            <param name="name">Optional name of the component. If not provided property name will be used.</param>
        </member>
        <member name="T:System.Device.Model.InterfaceAttribute">
            <summary>
            Interface attribute
            </summary>
        </member>
        <member name="P:System.Device.Model.InterfaceAttribute.DisplayName">
            <summary>
            Display name of the interface
            </summary>
        </member>
        <member name="M:System.Device.Model.InterfaceAttribute.#ctor(System.String)">
            <summary>
            Constructs InterfaceAttrbute
            </summary>
            <param name="displayName">Display name of the interface</param>
        </member>
        <member name="T:System.Device.Model.PropertyAttribute">
            <summary>
            Property of the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.PropertyAttribute.Name">
            <summary>
            Name of the property in the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.PropertyAttribute.DisplayName">
            <summary>
            Display name of the property
            </summary>
        </member>
        <member name="M:System.Device.Model.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs PropertyAttribute
            </summary>
            <param name="name">Optional name of the property in the interface. If not provided property name will be used.</param>
            <param name="displayName">Optional name of the property in the interface. If not provided it may be infered from the type.</param>
        </member>
        <member name="T:System.Device.Model.TelemetryAttribute">
            <summary>
            Telemetry of the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.TelemetryAttribute.Name">
            <summary>
            Name of the telemetry in the interface
            </summary>
        </member>
        <member name="P:System.Device.Model.TelemetryAttribute.DisplayName">
            <summary>
            Display name of the telemetry
            </summary>
        </member>
        <member name="M:System.Device.Model.TelemetryAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs TelemetryAttribute
            </summary>
            <param name="name">Name of the telemetry. If not provided property name will be used.</param>
            <param name="displayName">Optional display name of the telemetry. If not provided it may be infered from the type.</param>
            <remarks>When put on methods name should always be provided.</remarks>
        </member>
        <member name="T:InteropVideodev2.V4l2Request">
            <summary>
            videodev2.h Request Definition
            </summary>
        </member>
    </members>
</doc>
